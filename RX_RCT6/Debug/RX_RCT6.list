
RX_RCT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009144  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08009330  08009330  00019330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009798  08009798  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08009798  08009798  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009798  08009798  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009798  08009798  00019798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800979c  0800979c  0001979c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080097a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  200001dc  0800997c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  0800997c  000204b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010a49  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002280  00000000  00000000  00030c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001180  00000000  00000000  00032f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd6  00000000  00000000  00034098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d34  00000000  00000000  00034e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013d55  00000000  00000000  00037ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ebf7  00000000  00000000  0004b8f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005fe0  00000000  00000000  000ea4f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000f04d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001dc 	.word	0x200001dc
 8000204:	00000000 	.word	0x00000000
 8000208:	08009314 	.word	0x08009314

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e0 	.word	0x200001e0
 8000224:	08009314 	.word	0x08009314

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_d2lz>:
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	4605      	mov	r5, r0
 8000c44:	460c      	mov	r4, r1
 8000c46:	2200      	movs	r2, #0
 8000c48:	2300      	movs	r3, #0
 8000c4a:	4628      	mov	r0, r5
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	f7ff ff21 	bl	8000a94 <__aeabi_dcmplt>
 8000c52:	b928      	cbnz	r0, 8000c60 <__aeabi_d2lz+0x20>
 8000c54:	4628      	mov	r0, r5
 8000c56:	4621      	mov	r1, r4
 8000c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c5c:	f000 b80a 	b.w	8000c74 <__aeabi_d2ulz>
 8000c60:	4628      	mov	r0, r5
 8000c62:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c66:	f000 f805 	bl	8000c74 <__aeabi_d2ulz>
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	bd38      	pop	{r3, r4, r5, pc}
 8000c72:	bf00      	nop

08000c74 <__aeabi_d2ulz>:
 8000c74:	b5d0      	push	{r4, r6, r7, lr}
 8000c76:	2200      	movs	r2, #0
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <__aeabi_d2ulz+0x34>)
 8000c7a:	4606      	mov	r6, r0
 8000c7c:	460f      	mov	r7, r1
 8000c7e:	f7ff fc97 	bl	80005b0 <__aeabi_dmul>
 8000c82:	f7ff ff6d 	bl	8000b60 <__aeabi_d2uiz>
 8000c86:	4604      	mov	r4, r0
 8000c88:	f7ff fc18 	bl	80004bc <__aeabi_ui2d>
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <__aeabi_d2ulz+0x38>)
 8000c90:	f7ff fc8e 	bl	80005b0 <__aeabi_dmul>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4630      	mov	r0, r6
 8000c9a:	4639      	mov	r1, r7
 8000c9c:	f7ff fad0 	bl	8000240 <__aeabi_dsub>
 8000ca0:	f7ff ff5e 	bl	8000b60 <__aeabi_d2uiz>
 8000ca4:	4621      	mov	r1, r4
 8000ca6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca8:	3df00000 	.word	0x3df00000
 8000cac:	41f00000 	.word	0x41f00000

08000cb0 <NRF24_Init>:
static void NRF24_Read_Buffer(nrf24 *node, uint8_t reg, uint8_t *data, uint16_t len);
static void NRF24_Send_Cmd(nrf24 *node, uint8_t cmd);
static void NRF24_Reset(nrf24 *node, uint8_t reg);

void NRF24_Init(nrf24 *node)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	NRF24_CE_Disable(node);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f000 fa55 	bl	8001168 <NRF24_CE_Disable>
	NRF24_Write_Reg(node, CONFIG, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f000 fa80 	bl	80011c8 <NRF24_Write_Reg>
	node->crc = NO_CRC;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	77da      	strb	r2, [r3, #31]
	NRF24_Write_Reg(node, EN_AA, 0x00);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f000 fa78 	bl	80011c8 <NRF24_Write_Reg>
	NRF24_Write_Reg(node, EN_RXADDR, 0x00);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2102      	movs	r1, #2
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f000 fa73 	bl	80011c8 <NRF24_Write_Reg>
	NRF24_Write_Reg(node, SETUP_AW, 0x03);
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	2103      	movs	r1, #3
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f000 fa6e 	bl	80011c8 <NRF24_Write_Reg>
	NRF24_Write_Reg(node, SETUP_RETR, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2104      	movs	r1, #4
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f000 fa69 	bl	80011c8 <NRF24_Write_Reg>
	NRF24_Set_DataRate(node, _250KBS);
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f000 f813 	bl	8000d24 <NRF24_Set_DataRate>
	NRF24_Set_PALevel(node, HIGH);
 8000cfe:	2103      	movs	r1, #3
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f000 f85b 	bl	8000dbc <NRF24_Set_PALevel>
	NRF24_Set_Channel(node, DEFAULT_CHANNEL);
 8000d06:	2164      	movs	r1, #100	; 0x64
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f000 f8af 	bl	8000e6c <NRF24_Set_Channel>
	NRF24_Set_Mode(node, STANDBY);
 8000d0e:	2101      	movs	r1, #1
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f000 f8c1 	bl	8000e98 <NRF24_Set_Mode>
	NRF24_CE_Enable(node);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 fa16 	bl	8001148 <NRF24_CE_Enable>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <NRF24_Set_DataRate>:

void NRF24_Set_DataRate(nrf24 *node, dat_rate _bitRate)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	70fb      	strb	r3, [r7, #3]
	NRF24_CE_Disable(node);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f000 fa19 	bl	8001168 <NRF24_CE_Disable>
	uint8_t config = NRF24_Read_Reg(node, RF_SETUP);
 8000d36:	2106      	movs	r1, #6
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f000 faac 	bl	8001296 <NRF24_Read_Reg>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	73fb      	strb	r3, [r7, #15]

	switch (_bitRate)
 8000d42:	78fb      	ldrb	r3, [r7, #3]
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d01e      	beq.n	8000d86 <NRF24_Set_DataRate+0x62>
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	dc28      	bgt.n	8000d9e <NRF24_Set_DataRate+0x7a>
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d002      	beq.n	8000d56 <NRF24_Set_DataRate+0x32>
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d00c      	beq.n	8000d6e <NRF24_Set_DataRate+0x4a>
			config |= (1 << 3);
			node->bitRate = _2MBS;
			break;

		default:
			break;
 8000d54:	e023      	b.n	8000d9e <NRF24_Set_DataRate+0x7a>
			config |= (1 << 5);
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	f043 0320 	orr.w	r3, r3, #32
 8000d5c:	73fb      	strb	r3, [r7, #15]
			config &=~(1 << 3);
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	f023 0308 	bic.w	r3, r3, #8
 8000d64:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _250KBS;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	775a      	strb	r2, [r3, #29]
			break;
 8000d6c:	e018      	b.n	8000da0 <NRF24_Set_DataRate+0x7c>
			config &=~(1 << 5);
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	f023 0320 	bic.w	r3, r3, #32
 8000d74:	73fb      	strb	r3, [r7, #15]
			config &=~(1 << 3);
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	f023 0308 	bic.w	r3, r3, #8
 8000d7c:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _1MBS;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2201      	movs	r2, #1
 8000d82:	775a      	strb	r2, [r3, #29]
			break;
 8000d84:	e00c      	b.n	8000da0 <NRF24_Set_DataRate+0x7c>
			config &=~(1 << 5);
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	f023 0320 	bic.w	r3, r3, #32
 8000d8c:	73fb      	strb	r3, [r7, #15]
			config |= (1 << 3);
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _2MBS;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2202      	movs	r2, #2
 8000d9a:	775a      	strb	r2, [r3, #29]
			break;
 8000d9c:	e000      	b.n	8000da0 <NRF24_Set_DataRate+0x7c>
			break;
 8000d9e:	bf00      	nop
	}
	NRF24_Write_Reg(node, RF_SETUP, config);
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	461a      	mov	r2, r3
 8000da4:	2106      	movs	r1, #6
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f000 fa0e 	bl	80011c8 <NRF24_Write_Reg>
	NRF24_CE_Enable(node);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f000 f9cb 	bl	8001148 <NRF24_CE_Enable>
}
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <NRF24_Set_PALevel>:

void NRF24_Set_PALevel(nrf24 *node, p_level pwr)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	70fb      	strb	r3, [r7, #3]
	NRF24_CE_Disable(node);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f000 f9cd 	bl	8001168 <NRF24_CE_Disable>
	uint8_t config = NRF24_Read_Reg(node, RF_SETUP);
 8000dce:	2106      	movs	r1, #6
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f000 fa60 	bl	8001296 <NRF24_Read_Reg>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	73fb      	strb	r3, [r7, #15]

	switch (pwr) {
 8000dda:	78fb      	ldrb	r3, [r7, #3]
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	d837      	bhi.n	8000e50 <NRF24_Set_PALevel+0x94>
 8000de0:	a201      	add	r2, pc, #4	; (adr r2, 8000de8 <NRF24_Set_PALevel+0x2c>)
 8000de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de6:	bf00      	nop
 8000de8:	08000df9 	.word	0x08000df9
 8000dec:	08000e11 	.word	0x08000e11
 8000df0:	08000e29 	.word	0x08000e29
 8000df4:	08000e41 	.word	0x08000e41
		case VERY_LOW:
			config &=~(1 << 2);
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	f023 0304 	bic.w	r3, r3, #4
 8000dfe:	73fb      	strb	r3, [r7, #15]
			config &=~(1 << 1);
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	f023 0302 	bic.w	r3, r3, #2
 8000e06:	73fb      	strb	r3, [r7, #15]
			node->pa = VERY_LOW;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	771a      	strb	r2, [r3, #28]
			break;
 8000e0e:	e020      	b.n	8000e52 <NRF24_Set_PALevel+0x96>

		case LOW:
			config &=~(1 << 2);
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	f023 0304 	bic.w	r3, r3, #4
 8000e16:	73fb      	strb	r3, [r7, #15]
			config |= (1 << 1);
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	f043 0302 	orr.w	r3, r3, #2
 8000e1e:	73fb      	strb	r3, [r7, #15]
			node->pa = LOW;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2201      	movs	r2, #1
 8000e24:	771a      	strb	r2, [r3, #28]
			break;
 8000e26:	e014      	b.n	8000e52 <NRF24_Set_PALevel+0x96>

		case MID:
			config |= (1 << 2);
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	73fb      	strb	r3, [r7, #15]
			config &=~(1 << 1);
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	f023 0302 	bic.w	r3, r3, #2
 8000e36:	73fb      	strb	r3, [r7, #15]
			node->pa = MID;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	771a      	strb	r2, [r3, #28]
			break;
 8000e3e:	e008      	b.n	8000e52 <NRF24_Set_PALevel+0x96>

		case HIGH:
			config |= (1 << 2) | (1 << 1);
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	f043 0306 	orr.w	r3, r3, #6
 8000e46:	73fb      	strb	r3, [r7, #15]
			node->pa = HIGH;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	771a      	strb	r2, [r3, #28]
			break;
 8000e4e:	e000      	b.n	8000e52 <NRF24_Set_PALevel+0x96>

		default:
			break;
 8000e50:	bf00      	nop
	}
	NRF24_Write_Reg(node, RF_SETUP, config);
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	461a      	mov	r2, r3
 8000e56:	2106      	movs	r1, #6
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f000 f9b5 	bl	80011c8 <NRF24_Write_Reg>
	NRF24_CE_Enable(node);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 f972 	bl	8001148 <NRF24_CE_Enable>
}
 8000e64:	bf00      	nop
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <NRF24_Set_Channel>:

void NRF24_Set_Channel(nrf24 *node, uint8_t channel)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	460b      	mov	r3, r1
 8000e76:	70fb      	strb	r3, [r7, #3]
	NRF24_CE_Disable(node);
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f000 f975 	bl	8001168 <NRF24_CE_Disable>
	NRF24_Write_Reg(node, RF_CH, channel);
 8000e7e:	78fb      	ldrb	r3, [r7, #3]
 8000e80:	461a      	mov	r2, r3
 8000e82:	2105      	movs	r1, #5
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f000 f99f 	bl	80011c8 <NRF24_Write_Reg>
	NRF24_CE_Enable(node);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f000 f95c 	bl	8001148 <NRF24_CE_Enable>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <NRF24_Set_Mode>:

void NRF24_Set_Mode(nrf24 *node, mode_nrf _mode)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	70fb      	strb	r3, [r7, #3]
	uint8_t config = NRF24_Read_Reg(node, CONFIG);
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f000 f9f5 	bl	8001296 <NRF24_Read_Reg>
 8000eac:	4603      	mov	r3, r0
 8000eae:	73fb      	strb	r3, [r7, #15]

	switch (_mode)
 8000eb0:	78fb      	ldrb	r3, [r7, #3]
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	d837      	bhi.n	8000f26 <NRF24_Set_Mode+0x8e>
 8000eb6:	a201      	add	r2, pc, #4	; (adr r2, 8000ebc <NRF24_Set_Mode+0x24>)
 8000eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ebc:	08000ecd 	.word	0x08000ecd
 8000ec0:	08000edd 	.word	0x08000edd
 8000ec4:	08000ef3 	.word	0x08000ef3
 8000ec8:	08000f11 	.word	0x08000f11
	{
		case PWR_DOWN:
			config &=~(1 << 1);
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	f023 0302 	bic.w	r3, r3, #2
 8000ed2:	73fb      	strb	r3, [r7, #15]
			node->mode = PWR_DOWN;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	779a      	strb	r2, [r3, #30]
			break;
 8000eda:	e025      	b.n	8000f28 <NRF24_Set_Mode+0x90>

		case STANDBY:
			NRF24_CE_Disable(node);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f000 f943 	bl	8001168 <NRF24_CE_Disable>
			config |= (1 << 1);
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	f043 0302 	orr.w	r3, r3, #2
 8000ee8:	73fb      	strb	r3, [r7, #15]
			node->mode = STANDBY;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2201      	movs	r2, #1
 8000eee:	779a      	strb	r2, [r3, #30]
			break;
 8000ef0:	e01a      	b.n	8000f28 <NRF24_Set_Mode+0x90>

		case TX_MODE:
			NRF24_CE_Enable(node);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f000 f928 	bl	8001148 <NRF24_CE_Enable>
			config |= (1 << 1);
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	f043 0302 	orr.w	r3, r3, #2
 8000efe:	73fb      	strb	r3, [r7, #15]
			config &=~(1 << 0);
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	f023 0301 	bic.w	r3, r3, #1
 8000f06:	73fb      	strb	r3, [r7, #15]
			node->mode = TX_MODE;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	779a      	strb	r2, [r3, #30]
			break;
 8000f0e:	e00b      	b.n	8000f28 <NRF24_Set_Mode+0x90>

		case RX_MODE:
			NRF24_CE_Enable(node);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f000 f919 	bl	8001148 <NRF24_CE_Enable>
			config |= (1 << 1) | (1 << 0);
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	f043 0303 	orr.w	r3, r3, #3
 8000f1c:	73fb      	strb	r3, [r7, #15]
			node->mode = RX_MODE;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2203      	movs	r2, #3
 8000f22:	779a      	strb	r2, [r3, #30]
			break;
 8000f24:	e000      	b.n	8000f28 <NRF24_Set_Mode+0x90>

		default:
			break;
 8000f26:	bf00      	nop
	}
	NRF24_Write_Reg(node, CONFIG, config);
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f000 f94a 	bl	80011c8 <NRF24_Write_Reg>
}
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <NRF24_Set_RxPipe>:
	}
	return (0);
}

void NRF24_Set_RxPipe(nrf24 *node, uint8_t *addr, uint8_t pipe, uint8_t payload)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	4611      	mov	r1, r2
 8000f48:	461a      	mov	r2, r3
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	71fb      	strb	r3, [r7, #7]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	71bb      	strb	r3, [r7, #6]
	NRF24_CE_Disable(node);
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	f000 f908 	bl	8001168 <NRF24_CE_Disable>
	NRF24_Reset(node, STATUS);
 8000f58:	2107      	movs	r1, #7
 8000f5a:	68f8      	ldr	r0, [r7, #12]
 8000f5c:	f000 f9ea 	bl	8001334 <NRF24_Reset>
	uint8_t en_rxaddr = NRF24_Read_Reg(node, EN_RXADDR);
 8000f60:	2102      	movs	r1, #2
 8000f62:	68f8      	ldr	r0, [r7, #12]
 8000f64:	f000 f997 	bl	8001296 <NRF24_Read_Reg>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	75fb      	strb	r3, [r7, #23]
	en_rxaddr |= (1 << pipe);
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	b25a      	sxtb	r2, r3
 8000f76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b25b      	sxtb	r3, r3
 8000f7e:	75fb      	strb	r3, [r7, #23]
	NRF24_Write_Reg(node, EN_RXADDR, en_rxaddr);
 8000f80:	7dfb      	ldrb	r3, [r7, #23]
 8000f82:	461a      	mov	r2, r3
 8000f84:	2102      	movs	r1, #2
 8000f86:	68f8      	ldr	r0, [r7, #12]
 8000f88:	f000 f91e 	bl	80011c8 <NRF24_Write_Reg>

	switch(pipe)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	2b05      	cmp	r3, #5
 8000f90:	d860      	bhi.n	8001054 <NRF24_Set_RxPipe+0x118>
 8000f92:	a201      	add	r2, pc, #4	; (adr r2, 8000f98 <NRF24_Set_RxPipe+0x5c>)
 8000f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f98:	08000fb1 	.word	0x08000fb1
 8000f9c:	08000fcb 	.word	0x08000fcb
 8000fa0:	08000fe5 	.word	0x08000fe5
 8000fa4:	08001001 	.word	0x08001001
 8000fa8:	0800101d 	.word	0x0800101d
 8000fac:	08001039 	.word	0x08001039
	{
		case 0:
			NRF24_Write_Buffer(node, RX_ADDR_P0, addr, 5);
 8000fb0:	2305      	movs	r3, #5
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	210a      	movs	r1, #10
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f000 f931 	bl	800121e <NRF24_Write_Buffer>
			NRF24_Write_Reg(node, RX_PW_P0, payload);
 8000fbc:	79bb      	ldrb	r3, [r7, #6]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	2111      	movs	r1, #17
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f000 f900 	bl	80011c8 <NRF24_Write_Reg>
			break;
 8000fc8:	e045      	b.n	8001056 <NRF24_Set_RxPipe+0x11a>

		case 1:
			NRF24_Write_Buffer(node, RX_ADDR_P1, addr, 5);
 8000fca:	2305      	movs	r3, #5
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	210b      	movs	r1, #11
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f000 f924 	bl	800121e <NRF24_Write_Buffer>
			NRF24_Write_Reg(node, RX_PW_P1, payload);
 8000fd6:	79bb      	ldrb	r3, [r7, #6]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	2112      	movs	r1, #18
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	f000 f8f3 	bl	80011c8 <NRF24_Write_Reg>
			break;
 8000fe2:	e038      	b.n	8001056 <NRF24_Set_RxPipe+0x11a>

		case 2:
			NRF24_Write_Reg(node, RX_ADDR_P2, addr[0]);
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	210c      	movs	r1, #12
 8000fec:	68f8      	ldr	r0, [r7, #12]
 8000fee:	f000 f8eb 	bl	80011c8 <NRF24_Write_Reg>
			NRF24_Write_Reg(node, RX_PW_P2, payload);
 8000ff2:	79bb      	ldrb	r3, [r7, #6]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	2113      	movs	r1, #19
 8000ff8:	68f8      	ldr	r0, [r7, #12]
 8000ffa:	f000 f8e5 	bl	80011c8 <NRF24_Write_Reg>
			break;
 8000ffe:	e02a      	b.n	8001056 <NRF24_Set_RxPipe+0x11a>

		case 3:
			NRF24_Write_Reg(node, RX_ADDR_P3, addr[0]);
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	210d      	movs	r1, #13
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f000 f8dd 	bl	80011c8 <NRF24_Write_Reg>
			NRF24_Write_Reg(node, RX_PW_P3, payload);
 800100e:	79bb      	ldrb	r3, [r7, #6]
 8001010:	461a      	mov	r2, r3
 8001012:	2114      	movs	r1, #20
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	f000 f8d7 	bl	80011c8 <NRF24_Write_Reg>
			break;
 800101a:	e01c      	b.n	8001056 <NRF24_Set_RxPipe+0x11a>

		case 4:
			NRF24_Write_Reg(node, RX_ADDR_P4, addr[0]);
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	210e      	movs	r1, #14
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f000 f8cf 	bl	80011c8 <NRF24_Write_Reg>
			NRF24_Write_Reg(node, RX_PW_P4, payload);
 800102a:	79bb      	ldrb	r3, [r7, #6]
 800102c:	461a      	mov	r2, r3
 800102e:	2115      	movs	r1, #21
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f000 f8c9 	bl	80011c8 <NRF24_Write_Reg>
			break;
 8001036:	e00e      	b.n	8001056 <NRF24_Set_RxPipe+0x11a>

		case 5:
			NRF24_Write_Reg(node, RX_ADDR_P5, addr[0]);
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	210f      	movs	r1, #15
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f000 f8c1 	bl	80011c8 <NRF24_Write_Reg>
			NRF24_Write_Reg(node, RX_PW_P5, payload);
 8001046:	79bb      	ldrb	r3, [r7, #6]
 8001048:	461a      	mov	r2, r3
 800104a:	2116      	movs	r1, #22
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f000 f8bb 	bl	80011c8 <NRF24_Write_Reg>
			break;
 8001052:	e000      	b.n	8001056 <NRF24_Set_RxPipe+0x11a>

		default:
			break;
 8001054:	bf00      	nop
	}
	NRF24_CE_Enable(node);
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f000 f876 	bl	8001148 <NRF24_CE_Enable>
}
 800105c:	bf00      	nop
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <NRF24_Available>:

uint8_t NRF24_Available(nrf24 *node, uint8_t pipenum)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	70fb      	strb	r3, [r7, #3]
	uint8_t status = NRF24_Read_Reg(node, STATUS);
 8001070:	2107      	movs	r1, #7
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 f90f 	bl	8001296 <NRF24_Read_Reg>
 8001078:	4603      	mov	r3, r0
 800107a:	73fb      	strb	r3, [r7, #15]
	if((status - 64 == 0) && pipenum == 0)
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	2b40      	cmp	r3, #64	; 0x40
 8001080:	d109      	bne.n	8001096 <NRF24_Available+0x32>
 8001082:	78fb      	ldrb	r3, [r7, #3]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d106      	bne.n	8001096 <NRF24_Available+0x32>
	{
		NRF24_Write_Reg(node, STATUS, (1 << 6));
 8001088:	2240      	movs	r2, #64	; 0x40
 800108a:	2107      	movs	r1, #7
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 f89b 	bl	80011c8 <NRF24_Write_Reg>
		return 1;
 8001092:	2301      	movs	r3, #1
 8001094:	e012      	b.n	80010bc <NRF24_Available+0x58>
	}
	else if((status & (1 << 6)) && (status & (pipenum << 1)))
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00c      	beq.n	80010ba <NRF24_Available+0x56>
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	78fb      	ldrb	r3, [r7, #3]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4013      	ands	r3, r2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d006      	beq.n	80010ba <NRF24_Available+0x56>
	{
		NRF24_Write_Reg(node, STATUS, (1 << 6));
 80010ac:	2240      	movs	r2, #64	; 0x40
 80010ae:	2107      	movs	r1, #7
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 f889 	bl	80011c8 <NRF24_Write_Reg>
		return 1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e000      	b.n	80010bc <NRF24_Available+0x58>
	}
	return 0;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <NRF24_Receive>:

void NRF24_Receive(nrf24 *node, uint8_t *data, uint8_t len)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	4613      	mov	r3, r2
 80010d0:	71fb      	strb	r3, [r7, #7]
	uint8_t cmdtosend = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	75fb      	strb	r3, [r7, #23]

	NRF24_CSN_Enable(node);
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	f000 f856 	bl	8001188 <NRF24_CSN_Enable>
	cmdtosend = R_RX_PAYLOAD;
 80010dc:	2361      	movs	r3, #97	; 0x61
 80010de:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(node->hSPIx, &cmdtosend, 1, 100);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	6998      	ldr	r0, [r3, #24]
 80010e4:	f107 0117 	add.w	r1, r7, #23
 80010e8:	2364      	movs	r3, #100	; 0x64
 80010ea:	2201      	movs	r2, #1
 80010ec:	f002 f8c6 	bl	800327c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 80010f0:	bf00      	nop
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f002 fccb 	bl	8003a92 <HAL_SPI_GetState>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d1f7      	bne.n	80010f2 <NRF24_Receive+0x2e>
	HAL_SPI_Receive(node->hSPIx, data, len, NRF_RX_TIMEOUT);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6998      	ldr	r0, [r3, #24]
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	b29a      	uxth	r2, r3
 800110a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800110e:	68b9      	ldr	r1, [r7, #8]
 8001110:	f002 f9f7 	bl	8003502 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8001114:	bf00      	nop
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	4618      	mov	r0, r3
 800111c:	f002 fcb9 	bl	8003a92 <HAL_SPI_GetState>
 8001120:	4603      	mov	r3, r0
 8001122:	2b01      	cmp	r3, #1
 8001124:	d1f7      	bne.n	8001116 <NRF24_Receive+0x52>
	NRF24_CSN_Disable(node);
 8001126:	68f8      	ldr	r0, [r7, #12]
 8001128:	f000 f83e 	bl	80011a8 <NRF24_CSN_Disable>
	HAL_Delay(1);
 800112c:	2001      	movs	r0, #1
 800112e:	f000 ffff 	bl	8002130 <HAL_Delay>
	cmdtosend = FLUSH_RX;
 8001132:	23e2      	movs	r3, #226	; 0xe2
 8001134:	75fb      	strb	r3, [r7, #23]
	NRF24_Send_Cmd(node, cmdtosend);
 8001136:	7dfb      	ldrb	r3, [r7, #23]
 8001138:	4619      	mov	r1, r3
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	f000 f8d8 	bl	80012f0 <NRF24_Send_Cmd>
}
 8001140:	bf00      	nop
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <NRF24_CE_Enable>:
	for (int i = 29; i < 38; i++)
		*(data + i) = NRF24_Read_Reg(node, i - 12);
}

static void NRF24_CE_Enable(nrf24 *node)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_SET);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6898      	ldr	r0, [r3, #8]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	899b      	ldrh	r3, [r3, #12]
 8001158:	2201      	movs	r2, #1
 800115a:	4619      	mov	r1, r3
 800115c:	f001 fa84 	bl	8002668 <HAL_GPIO_WritePin>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <NRF24_CE_Disable>:

static void NRF24_CE_Disable(nrf24 *node)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_RESET);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6898      	ldr	r0, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	899b      	ldrh	r3, [r3, #12]
 8001178:	2200      	movs	r2, #0
 800117a:	4619      	mov	r1, r3
 800117c:	f001 fa74 	bl	8002668 <HAL_GPIO_WritePin>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <NRF24_CSN_Enable>:

static void NRF24_CSN_Enable(nrf24 *node)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_RESET);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6818      	ldr	r0, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	889b      	ldrh	r3, [r3, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	4619      	mov	r1, r3
 800119c:	f001 fa64 	bl	8002668 <HAL_GPIO_WritePin>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <NRF24_CSN_Disable>:

static void NRF24_CSN_Disable(nrf24 *node)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_SET);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	889b      	ldrh	r3, [r3, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	4619      	mov	r1, r3
 80011bc:	f001 fa54 	bl	8002668 <HAL_GPIO_WritePin>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <NRF24_Write_Reg>:

static void NRF24_Write_Reg(nrf24 *node, uint8_t reg, uint8_t data)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	70fb      	strb	r3, [r7, #3]
 80011d4:	4613      	mov	r3, r2
 80011d6:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 80011d8:	78fb      	ldrb	r3, [r7, #3]
 80011da:	f043 0320 	orr.w	r3, r3, #32
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	733b      	strb	r3, [r7, #12]
	buf[1] = data;
 80011e2:	78bb      	ldrb	r3, [r7, #2]
 80011e4:	737b      	strb	r3, [r7, #13]
	NRF24_CSN_Enable(node);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffce 	bl	8001188 <NRF24_CSN_Enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 2, NRF_TX_TIMEOUT);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6998      	ldr	r0, [r3, #24]
 80011f0:	f107 010c 	add.w	r1, r7, #12
 80011f4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011f8:	2202      	movs	r2, #2
 80011fa:	f002 f83f 	bl	800327c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 80011fe:	bf00      	nop
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4618      	mov	r0, r3
 8001206:	f002 fc44 	bl	8003a92 <HAL_SPI_GetState>
 800120a:	4603      	mov	r3, r0
 800120c:	2b01      	cmp	r3, #1
 800120e:	d1f7      	bne.n	8001200 <NRF24_Write_Reg+0x38>
	NRF24_CSN_Disable(node);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ffc9 	bl	80011a8 <NRF24_CSN_Disable>
}
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <NRF24_Write_Buffer>:

static void NRF24_Write_Buffer(nrf24 *node, uint8_t reg, uint8_t *data, uint16_t len)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	60f8      	str	r0, [r7, #12]
 8001226:	607a      	str	r2, [r7, #4]
 8001228:	461a      	mov	r2, r3
 800122a:	460b      	mov	r3, r1
 800122c:	72fb      	strb	r3, [r7, #11]
 800122e:	4613      	mov	r3, r2
 8001230:	813b      	strh	r3, [r7, #8]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 8001232:	7afb      	ldrb	r3, [r7, #11]
 8001234:	f043 0320 	orr.w	r3, r3, #32
 8001238:	b2db      	uxtb	r3, r3
 800123a:	753b      	strb	r3, [r7, #20]
	NRF24_CSN_Enable(node);
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f7ff ffa3 	bl	8001188 <NRF24_CSN_Enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 1, NRF_TX_TIMEOUT);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6998      	ldr	r0, [r3, #24]
 8001246:	f107 0114 	add.w	r1, r7, #20
 800124a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800124e:	2201      	movs	r2, #1
 8001250:	f002 f814 	bl	800327c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8001254:	bf00      	nop
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	4618      	mov	r0, r3
 800125c:	f002 fc19 	bl	8003a92 <HAL_SPI_GetState>
 8001260:	4603      	mov	r3, r0
 8001262:	2b01      	cmp	r3, #1
 8001264:	d1f7      	bne.n	8001256 <NRF24_Write_Buffer+0x38>
	HAL_SPI_Transmit(node->hSPIx, data, len, NRF_TX_TIMEOUT);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6998      	ldr	r0, [r3, #24]
 800126a:	893a      	ldrh	r2, [r7, #8]
 800126c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	f002 f803 	bl	800327c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8001276:	bf00      	nop
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4618      	mov	r0, r3
 800127e:	f002 fc08 	bl	8003a92 <HAL_SPI_GetState>
 8001282:	4603      	mov	r3, r0
 8001284:	2b01      	cmp	r3, #1
 8001286:	d1f7      	bne.n	8001278 <NRF24_Write_Buffer+0x5a>
	NRF24_CSN_Disable(node);
 8001288:	68f8      	ldr	r0, [r7, #12]
 800128a:	f7ff ff8d 	bl	80011a8 <NRF24_CSN_Disable>
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <NRF24_Read_Reg>:

static uint8_t NRF24_Read_Reg(nrf24 *node, uint8_t reg)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b084      	sub	sp, #16
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	460b      	mov	r3, r1
 80012a0:	70fb      	strb	r3, [r7, #3]
	uint8_t data = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	73fb      	strb	r3, [r7, #15]
	NRF24_CSN_Enable(node);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ff6e 	bl	8001188 <NRF24_CSN_Enable>
	HAL_SPI_Transmit(node->hSPIx, &reg, 1, NRF_TX_TIMEOUT);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6998      	ldr	r0, [r3, #24]
 80012b0:	1cf9      	adds	r1, r7, #3
 80012b2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012b6:	2201      	movs	r2, #1
 80012b8:	f001 ffe0 	bl	800327c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 80012bc:	bf00      	nop
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 fbe5 	bl	8003a92 <HAL_SPI_GetState>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d1f7      	bne.n	80012be <NRF24_Read_Reg+0x28>
	HAL_SPI_Receive(node->hSPIx, &data, 1, NRF_RX_TIMEOUT);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6998      	ldr	r0, [r3, #24]
 80012d2:	f107 010f 	add.w	r1, r7, #15
 80012d6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012da:	2201      	movs	r2, #1
 80012dc:	f002 f911 	bl	8003502 <HAL_SPI_Receive>
	NRF24_CSN_Disable(node);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff61 	bl	80011a8 <NRF24_CSN_Disable>
	return data;
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <NRF24_Send_Cmd>:
	HAL_SPI_Receive(node->hSPIx, data, len, NRF_RX_TIMEOUT);
	NRF24_CSN_Disable(node);
}

static void NRF24_Send_Cmd(nrf24 *node, uint8_t cmd)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	70fb      	strb	r3, [r7, #3]
	NRF24_CSN_Enable(node);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff43 	bl	8001188 <NRF24_CSN_Enable>
	HAL_SPI_Transmit(node->hSPIx, &cmd, 1, NRF_TX_TIMEOUT);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6998      	ldr	r0, [r3, #24]
 8001306:	1cf9      	adds	r1, r7, #3
 8001308:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800130c:	2201      	movs	r2, #1
 800130e:	f001 ffb5 	bl	800327c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8001312:	bf00      	nop
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4618      	mov	r0, r3
 800131a:	f002 fbba 	bl	8003a92 <HAL_SPI_GetState>
 800131e:	4603      	mov	r3, r0
 8001320:	2b01      	cmp	r3, #1
 8001322:	d1f7      	bne.n	8001314 <NRF24_Send_Cmd+0x24>
	NRF24_CSN_Disable(node);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff3f 	bl	80011a8 <NRF24_CSN_Disable>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <NRF24_Reset>:

static void NRF24_Reset(nrf24 *node, uint8_t reg)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	70fb      	strb	r3, [r7, #3]
	if(reg == STATUS)
 8001340:	78fb      	ldrb	r3, [r7, #3]
 8001342:	2b07      	cmp	r3, #7
 8001344:	d105      	bne.n	8001352 <NRF24_Reset+0x1e>
	{
		NRF24_Write_Reg(node, STATUS, 0x00);
 8001346:	2200      	movs	r2, #0
 8001348:	2107      	movs	r1, #7
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ff3c 	bl	80011c8 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P5, 0);
		NRF24_Write_Reg(node, FIFO_STATUS, 0x11);
		NRF24_Write_Reg(node, DYNPD, 0);
		NRF24_Write_Reg(node, FEATURE, 0);
	}
}
 8001350:	e0a8      	b.n	80014a4 <NRF24_Reset+0x170>
	else if(reg == FIFO_STATUS)
 8001352:	78fb      	ldrb	r3, [r7, #3]
 8001354:	2b17      	cmp	r3, #23
 8001356:	d105      	bne.n	8001364 <NRF24_Reset+0x30>
		NRF24_Write_Reg(node, FIFO_STATUS, 0x11);
 8001358:	2211      	movs	r2, #17
 800135a:	2117      	movs	r1, #23
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ff33 	bl	80011c8 <NRF24_Write_Reg>
}
 8001362:	e09f      	b.n	80014a4 <NRF24_Reset+0x170>
		NRF24_Write_Reg(node, CONFIG, 0x08);
 8001364:	2208      	movs	r2, #8
 8001366:	2100      	movs	r1, #0
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ff2d 	bl	80011c8 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, EN_AA, 0x3F);
 800136e:	223f      	movs	r2, #63	; 0x3f
 8001370:	2101      	movs	r1, #1
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ff28 	bl	80011c8 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, EN_RXADDR, 0x03);
 8001378:	2203      	movs	r2, #3
 800137a:	2102      	movs	r1, #2
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ff23 	bl	80011c8 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, SETUP_AW, 0x03);
 8001382:	2203      	movs	r2, #3
 8001384:	2103      	movs	r1, #3
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ff1e 	bl	80011c8 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, SETUP_RETR, 0x03);
 800138c:	2203      	movs	r2, #3
 800138e:	2104      	movs	r1, #4
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ff19 	bl	80011c8 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RF_CH, 0x02);
 8001396:	2202      	movs	r2, #2
 8001398:	2105      	movs	r1, #5
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ff14 	bl	80011c8 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RF_SETUP, 0x0E);
 80013a0:	220e      	movs	r2, #14
 80013a2:	2106      	movs	r1, #6
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff0f 	bl	80011c8 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, STATUS, 0x00);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2107      	movs	r1, #7
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ff0a 	bl	80011c8 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, OBSERVE_TX, 0x00);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2108      	movs	r1, #8
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff05 	bl	80011c8 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RPD, 0x00);
 80013be:	2200      	movs	r2, #0
 80013c0:	2109      	movs	r1, #9
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ff00 	bl	80011c8 <NRF24_Write_Reg>
		uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80013c8:	4a38      	ldr	r2, [pc, #224]	; (80014ac <NRF24_Reset+0x178>)
 80013ca:	f107 0318 	add.w	r3, r7, #24
 80013ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013d2:	6018      	str	r0, [r3, #0]
 80013d4:	3304      	adds	r3, #4
 80013d6:	7019      	strb	r1, [r3, #0]
		NRF24_Write_Buffer(node, RX_ADDR_P0, rx_addr_p0_def, 5);
 80013d8:	f107 0218 	add.w	r2, r7, #24
 80013dc:	2305      	movs	r3, #5
 80013de:	210a      	movs	r1, #10
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ff1c 	bl	800121e <NRF24_Write_Buffer>
		uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 80013e6:	4a32      	ldr	r2, [pc, #200]	; (80014b0 <NRF24_Reset+0x17c>)
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013f0:	6018      	str	r0, [r3, #0]
 80013f2:	3304      	adds	r3, #4
 80013f4:	7019      	strb	r1, [r3, #0]
		NRF24_Write_Buffer(node, RX_ADDR_P1, rx_addr_p1_def, 5);
 80013f6:	f107 0210 	add.w	r2, r7, #16
 80013fa:	2305      	movs	r3, #5
 80013fc:	210b      	movs	r1, #11
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ff0d 	bl	800121e <NRF24_Write_Buffer>
		NRF24_Write_Reg(node, RX_ADDR_P2, 0xC3);
 8001404:	22c3      	movs	r2, #195	; 0xc3
 8001406:	210c      	movs	r1, #12
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff fedd 	bl	80011c8 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_ADDR_P3, 0xC4);
 800140e:	22c4      	movs	r2, #196	; 0xc4
 8001410:	210d      	movs	r1, #13
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff fed8 	bl	80011c8 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_ADDR_P4, 0xC5);
 8001418:	22c5      	movs	r2, #197	; 0xc5
 800141a:	210e      	movs	r1, #14
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff fed3 	bl	80011c8 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_ADDR_P5, 0xC6);
 8001422:	22c6      	movs	r2, #198	; 0xc6
 8001424:	210f      	movs	r1, #15
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff fece 	bl	80011c8 <NRF24_Write_Reg>
		uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800142c:	4a1f      	ldr	r2, [pc, #124]	; (80014ac <NRF24_Reset+0x178>)
 800142e:	f107 0308 	add.w	r3, r7, #8
 8001432:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001436:	6018      	str	r0, [r3, #0]
 8001438:	3304      	adds	r3, #4
 800143a:	7019      	strb	r1, [r3, #0]
		NRF24_Write_Buffer(node, TX_ADDR, tx_addr_def, 5);
 800143c:	f107 0208 	add.w	r2, r7, #8
 8001440:	2305      	movs	r3, #5
 8001442:	2110      	movs	r1, #16
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff feea 	bl	800121e <NRF24_Write_Buffer>
		NRF24_Write_Reg(node, RX_PW_P0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2111      	movs	r1, #17
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff feba 	bl	80011c8 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P1, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	2112      	movs	r1, #18
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff feb5 	bl	80011c8 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P2, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2113      	movs	r1, #19
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff feb0 	bl	80011c8 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P3, 0);
 8001468:	2200      	movs	r2, #0
 800146a:	2114      	movs	r1, #20
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff feab 	bl	80011c8 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P4, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2115      	movs	r1, #21
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff fea6 	bl	80011c8 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P5, 0);
 800147c:	2200      	movs	r2, #0
 800147e:	2116      	movs	r1, #22
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff fea1 	bl	80011c8 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, FIFO_STATUS, 0x11);
 8001486:	2211      	movs	r2, #17
 8001488:	2117      	movs	r1, #23
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff fe9c 	bl	80011c8 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, DYNPD, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	211c      	movs	r1, #28
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff fe97 	bl	80011c8 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, FEATURE, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	211d      	movs	r1, #29
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff fe92 	bl	80011c8 <NRF24_Write_Reg>
}
 80014a4:	bf00      	nop
 80014a6:	3720      	adds	r7, #32
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	08009330 	.word	0x08009330
 80014b0:	08009338 	.word	0x08009338

080014b4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b09a      	sub	sp, #104	; 0x68
 80014b8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80014ba:	f000 fdd7 	bl	800206c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80014be:	f000 f973 	bl	80017a8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80014c2:	f000 fac5 	bl	8001a50 <MX_GPIO_Init>
	MX_SPI1_Init();
 80014c6:	f000 f9e3 	bl	8001890 <MX_SPI1_Init>
	MX_TIM2_Init();
 80014ca:	f000 fa17 	bl	80018fc <MX_TIM2_Init>
	MX_I2C1_Init();
 80014ce:	f000 f9b1 	bl	8001834 <MX_I2C1_Init>
	MX_UART4_Init();
 80014d2:	f000 fa93 	bl	80019fc <MX_UART4_Init>
	/* USER CODE BEGIN 2 */
	nrfRx.CE_port = NRF_CE_GPIO_Port;
 80014d6:	4bac      	ldr	r3, [pc, #688]	; (8001788 <main+0x2d4>)
 80014d8:	4aac      	ldr	r2, [pc, #688]	; (800178c <main+0x2d8>)
 80014da:	609a      	str	r2, [r3, #8]
	nrfRx.CE_pin = NRF_CE_Pin;
 80014dc:	4baa      	ldr	r3, [pc, #680]	; (8001788 <main+0x2d4>)
 80014de:	2208      	movs	r2, #8
 80014e0:	819a      	strh	r2, [r3, #12]
	nrfRx.CSN_port = NRF_CSN_GPIO_Port;
 80014e2:	4ba9      	ldr	r3, [pc, #676]	; (8001788 <main+0x2d4>)
 80014e4:	4aa9      	ldr	r2, [pc, #676]	; (800178c <main+0x2d8>)
 80014e6:	601a      	str	r2, [r3, #0]
	nrfRx.CSN_pin = NRF_CSN_Pin;
 80014e8:	4ba7      	ldr	r3, [pc, #668]	; (8001788 <main+0x2d4>)
 80014ea:	2210      	movs	r2, #16
 80014ec:	809a      	strh	r2, [r3, #4]
	nrfRx.IRQ_port = NRF_IRQ_GPIO_Port;
 80014ee:	4ba6      	ldr	r3, [pc, #664]	; (8001788 <main+0x2d4>)
 80014f0:	4aa6      	ldr	r2, [pc, #664]	; (800178c <main+0x2d8>)
 80014f2:	611a      	str	r2, [r3, #16]
	nrfRx.IRQ_pin = NRF_IRQ_Pin;
 80014f4:	4ba4      	ldr	r3, [pc, #656]	; (8001788 <main+0x2d4>)
 80014f6:	2204      	movs	r2, #4
 80014f8:	829a      	strh	r2, [r3, #20]
	nrfRx.hSPIx = &hspi1;
 80014fa:	4ba3      	ldr	r3, [pc, #652]	; (8001788 <main+0x2d4>)
 80014fc:	4aa4      	ldr	r2, [pc, #656]	; (8001790 <main+0x2dc>)
 80014fe:	619a      	str	r2, [r3, #24]
	NRF24_Init(&nrfRx);
 8001500:	48a1      	ldr	r0, [pc, #644]	; (8001788 <main+0x2d4>)
 8001502:	f7ff fbd5 	bl	8000cb0 <NRF24_Init>
	NRF24_Set_DataRate(&nrfRx, _250KBS);
 8001506:	2100      	movs	r1, #0
 8001508:	489f      	ldr	r0, [pc, #636]	; (8001788 <main+0x2d4>)
 800150a:	f7ff fc0b 	bl	8000d24 <NRF24_Set_DataRate>
	NRF24_Set_PALevel(&nrfRx, HIGH);
 800150e:	2103      	movs	r1, #3
 8001510:	489d      	ldr	r0, [pc, #628]	; (8001788 <main+0x2d4>)
 8001512:	f7ff fc53 	bl	8000dbc <NRF24_Set_PALevel>
	NRF24_Set_RxPipe(&nrfRx, rxAddr, 0, SIZE_RX_BUF);
 8001516:	2305      	movs	r3, #5
 8001518:	2200      	movs	r2, #0
 800151a:	499e      	ldr	r1, [pc, #632]	; (8001794 <main+0x2e0>)
 800151c:	489a      	ldr	r0, [pc, #616]	; (8001788 <main+0x2d4>)
 800151e:	f7ff fd0d 	bl	8000f3c <NRF24_Set_RxPipe>
	NRF24_Set_Mode(&nrfRx, RX_MODE);
 8001522:	2103      	movs	r1, #3
 8001524:	4898      	ldr	r0, [pc, #608]	; (8001788 <main+0x2d4>)
 8001526:	f7ff fcb7 	bl	8000e98 <NRF24_Set_Mode>

	rx_data[0] = 0;
 800152a:	4b9b      	ldr	r3, [pc, #620]	; (8001798 <main+0x2e4>)
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
	rx_data[1] = 0;
 8001530:	4b99      	ldr	r3, [pc, #612]	; (8001798 <main+0x2e4>)
 8001532:	2200      	movs	r2, #0
 8001534:	705a      	strb	r2, [r3, #1]
	rx_data[2] = 0;
 8001536:	4b98      	ldr	r3, [pc, #608]	; (8001798 <main+0x2e4>)
 8001538:	2200      	movs	r2, #0
 800153a:	709a      	strb	r2, [r3, #2]
	rx_data[3] = 0;
 800153c:	4b96      	ldr	r3, [pc, #600]	; (8001798 <main+0x2e4>)
 800153e:	2200      	movs	r2, #0
 8001540:	70da      	strb	r2, [r3, #3]

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001542:	2100      	movs	r1, #0
 8001544:	4895      	ldr	r0, [pc, #596]	; (800179c <main+0x2e8>)
 8001546:	f002 fc51 	bl	8003dec <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800154a:	4b94      	ldr	r3, [pc, #592]	; (800179c <main+0x2e8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2200      	movs	r2, #0
 8001550:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001552:	2104      	movs	r1, #4
 8001554:	4891      	ldr	r0, [pc, #580]	; (800179c <main+0x2e8>)
 8001556:	f002 fc49 	bl	8003dec <HAL_TIM_PWM_Start>
//		Altitude = BMP180_GetAlt(0);
//		sprintf(data, "Temp: %.2f\nPres: %.2f\nAlt: %.2f\n", Temperature, Pressure, Altitude);
//		HAL_UART_Transmit(&huart4,  (float*)data, sizeof(data), 100);
//		HAL_GPIO_WritePin(IN_Relay_GPIO_Port, IN_Relay_Pin, 1);
//		HAL_Delay(1000);
		if (NRF24_Available(&nrfRx, 0) == 1) {
 800155a:	2100      	movs	r1, #0
 800155c:	488a      	ldr	r0, [pc, #552]	; (8001788 <main+0x2d4>)
 800155e:	f7ff fd81 	bl	8001064 <NRF24_Available>
 8001562:	4603      	mov	r3, r0
 8001564:	2b01      	cmp	r3, #1
 8001566:	f040 8102 	bne.w	800176e <main+0x2ba>
			NRF24_Receive(&nrfRx, rx_data, SIZE_RX_BUF);
 800156a:	2205      	movs	r2, #5
 800156c:	498a      	ldr	r1, [pc, #552]	; (8001798 <main+0x2e4>)
 800156e:	4886      	ldr	r0, [pc, #536]	; (8001788 <main+0x2d4>)
 8001570:	f7ff fda8 	bl	80010c4 <NRF24_Receive>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001574:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001578:	4884      	ldr	r0, [pc, #528]	; (800178c <main+0x2d8>)
 800157a:	f001 f88d 	bl	8002698 <HAL_GPIO_TogglePin>

			if (rx_data[0] == 1) {
 800157e:	4b86      	ldr	r3, [pc, #536]	; (8001798 <main+0x2e4>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d130      	bne.n	80015e8 <main+0x134>
//				đi thẳng
				HAL_GPIO_WritePin(IN_1_GPIO_Port, IN_1_Pin, GPIO_PIN_SET);
 8001586:	2201      	movs	r2, #1
 8001588:	2110      	movs	r1, #16
 800158a:	4885      	ldr	r0, [pc, #532]	; (80017a0 <main+0x2ec>)
 800158c:	f001 f86c 	bl	8002668 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_2_GPIO_Port, IN_2_Pin, GPIO_PIN_RESET);
 8001590:	2200      	movs	r2, #0
 8001592:	2120      	movs	r1, #32
 8001594:	4882      	ldr	r0, [pc, #520]	; (80017a0 <main+0x2ec>)
 8001596:	f001 f867 	bl	8002668 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 800159a:	4b80      	ldr	r3, [pc, #512]	; (800179c <main+0x2e8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015a2:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);
 80015a4:	200a      	movs	r0, #10
 80015a6:	f000 fdc3 	bl	8002130 <HAL_Delay>
				HAL_GPIO_WritePin(IN_3_GPIO_Port, IN_3_Pin, GPIO_PIN_SET);
 80015aa:	2201      	movs	r2, #1
 80015ac:	2101      	movs	r1, #1
 80015ae:	487d      	ldr	r0, [pc, #500]	; (80017a4 <main+0x2f0>)
 80015b0:	f001 f85a 	bl	8002668 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_4_GPIO_Port, IN_4_Pin, GPIO_PIN_RESET);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2102      	movs	r1, #2
 80015b8:	487a      	ldr	r0, [pc, #488]	; (80017a4 <main+0x2f0>)
 80015ba:	f001 f855 	bl	8002668 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 80015be:	4b77      	ldr	r3, [pc, #476]	; (800179c <main+0x2e8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015c6:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);
 80015c8:	200a      	movs	r0, #10
 80015ca:	f000 fdb1 	bl	8002130 <HAL_Delay>
				rx_data[0] = 0;
 80015ce:	4b72      	ldr	r3, [pc, #456]	; (8001798 <main+0x2e4>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
				rx_data[1] = 0;
 80015d4:	4b70      	ldr	r3, [pc, #448]	; (8001798 <main+0x2e4>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	705a      	strb	r2, [r3, #1]
				rx_data[2] = 0;
 80015da:	4b6f      	ldr	r3, [pc, #444]	; (8001798 <main+0x2e4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	709a      	strb	r2, [r3, #2]
				rx_data[3] = 0;
 80015e0:	4b6d      	ldr	r3, [pc, #436]	; (8001798 <main+0x2e4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	70da      	strb	r2, [r3, #3]
 80015e6:	e0c2      	b.n	800176e <main+0x2ba>
			} else if (rx_data[1] == 1) {
 80015e8:	4b6b      	ldr	r3, [pc, #428]	; (8001798 <main+0x2e4>)
 80015ea:	785b      	ldrb	r3, [r3, #1]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d130      	bne.n	8001652 <main+0x19e>
//				đi lùi
				HAL_GPIO_WritePin(IN_1_GPIO_Port, IN_1_Pin, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2110      	movs	r1, #16
 80015f4:	486a      	ldr	r0, [pc, #424]	; (80017a0 <main+0x2ec>)
 80015f6:	f001 f837 	bl	8002668 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_2_GPIO_Port, IN_2_Pin, GPIO_PIN_SET);
 80015fa:	2201      	movs	r2, #1
 80015fc:	2120      	movs	r1, #32
 80015fe:	4868      	ldr	r0, [pc, #416]	; (80017a0 <main+0x2ec>)
 8001600:	f001 f832 	bl	8002668 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8001604:	4b65      	ldr	r3, [pc, #404]	; (800179c <main+0x2e8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800160c:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);
 800160e:	200a      	movs	r0, #10
 8001610:	f000 fd8e 	bl	8002130 <HAL_Delay>
				HAL_GPIO_WritePin(IN_3_GPIO_Port, IN_3_Pin, GPIO_PIN_RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	2101      	movs	r1, #1
 8001618:	4862      	ldr	r0, [pc, #392]	; (80017a4 <main+0x2f0>)
 800161a:	f001 f825 	bl	8002668 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_4_GPIO_Port, IN_4_Pin, GPIO_PIN_SET);
 800161e:	2201      	movs	r2, #1
 8001620:	2102      	movs	r1, #2
 8001622:	4860      	ldr	r0, [pc, #384]	; (80017a4 <main+0x2f0>)
 8001624:	f001 f820 	bl	8002668 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8001628:	4b5c      	ldr	r3, [pc, #368]	; (800179c <main+0x2e8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001630:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);
 8001632:	200a      	movs	r0, #10
 8001634:	f000 fd7c 	bl	8002130 <HAL_Delay>
				rx_data[0] = 0;
 8001638:	4b57      	ldr	r3, [pc, #348]	; (8001798 <main+0x2e4>)
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
				rx_data[1] = 0;
 800163e:	4b56      	ldr	r3, [pc, #344]	; (8001798 <main+0x2e4>)
 8001640:	2200      	movs	r2, #0
 8001642:	705a      	strb	r2, [r3, #1]
				rx_data[2] = 0;
 8001644:	4b54      	ldr	r3, [pc, #336]	; (8001798 <main+0x2e4>)
 8001646:	2200      	movs	r2, #0
 8001648:	709a      	strb	r2, [r3, #2]
				rx_data[3] = 0;
 800164a:	4b53      	ldr	r3, [pc, #332]	; (8001798 <main+0x2e4>)
 800164c:	2200      	movs	r2, #0
 800164e:	70da      	strb	r2, [r3, #3]
 8001650:	e08d      	b.n	800176e <main+0x2ba>

			} else if (rx_data[2] == 1) {
 8001652:	4b51      	ldr	r3, [pc, #324]	; (8001798 <main+0x2e4>)
 8001654:	789b      	ldrb	r3, [r3, #2]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d130      	bne.n	80016bc <main+0x208>
				//				đi phải
				HAL_GPIO_WritePin(IN_1_GPIO_Port, IN_1_Pin, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	2110      	movs	r1, #16
 800165e:	4850      	ldr	r0, [pc, #320]	; (80017a0 <main+0x2ec>)
 8001660:	f001 f802 	bl	8002668 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_2_GPIO_Port, IN_2_Pin, GPIO_PIN_SET);
 8001664:	2201      	movs	r2, #1
 8001666:	2120      	movs	r1, #32
 8001668:	484d      	ldr	r0, [pc, #308]	; (80017a0 <main+0x2ec>)
 800166a:	f000 fffd 	bl	8002668 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 800166e:	4b4b      	ldr	r3, [pc, #300]	; (800179c <main+0x2e8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001676:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);
 8001678:	200a      	movs	r0, #10
 800167a:	f000 fd59 	bl	8002130 <HAL_Delay>
				HAL_GPIO_WritePin(IN_3_GPIO_Port, IN_3_Pin, GPIO_PIN_SET);
 800167e:	2201      	movs	r2, #1
 8001680:	2101      	movs	r1, #1
 8001682:	4848      	ldr	r0, [pc, #288]	; (80017a4 <main+0x2f0>)
 8001684:	f000 fff0 	bl	8002668 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_4_GPIO_Port, IN_4_Pin, GPIO_PIN_RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	2102      	movs	r1, #2
 800168c:	4845      	ldr	r0, [pc, #276]	; (80017a4 <main+0x2f0>)
 800168e:	f000 ffeb 	bl	8002668 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8001692:	4b42      	ldr	r3, [pc, #264]	; (800179c <main+0x2e8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800169a:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);
 800169c:	200a      	movs	r0, #10
 800169e:	f000 fd47 	bl	8002130 <HAL_Delay>
				rx_data[0] = 0;
 80016a2:	4b3d      	ldr	r3, [pc, #244]	; (8001798 <main+0x2e4>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
				rx_data[1] = 0;
 80016a8:	4b3b      	ldr	r3, [pc, #236]	; (8001798 <main+0x2e4>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	705a      	strb	r2, [r3, #1]
				rx_data[2] = 0;
 80016ae:	4b3a      	ldr	r3, [pc, #232]	; (8001798 <main+0x2e4>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	709a      	strb	r2, [r3, #2]
				rx_data[3] = 0;
 80016b4:	4b38      	ldr	r3, [pc, #224]	; (8001798 <main+0x2e4>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	70da      	strb	r2, [r3, #3]
 80016ba:	e058      	b.n	800176e <main+0x2ba>

			} else if (rx_data[3] == 1) {
 80016bc:	4b36      	ldr	r3, [pc, #216]	; (8001798 <main+0x2e4>)
 80016be:	78db      	ldrb	r3, [r3, #3]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d130      	bne.n	8001726 <main+0x272>
				//				đi trái
				HAL_GPIO_WritePin(IN_1_GPIO_Port, IN_1_Pin, GPIO_PIN_SET);
 80016c4:	2201      	movs	r2, #1
 80016c6:	2110      	movs	r1, #16
 80016c8:	4835      	ldr	r0, [pc, #212]	; (80017a0 <main+0x2ec>)
 80016ca:	f000 ffcd 	bl	8002668 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_2_GPIO_Port, IN_2_Pin, GPIO_PIN_RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2120      	movs	r1, #32
 80016d2:	4833      	ldr	r0, [pc, #204]	; (80017a0 <main+0x2ec>)
 80016d4:	f000 ffc8 	bl	8002668 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 80016d8:	4b30      	ldr	r3, [pc, #192]	; (800179c <main+0x2e8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016e0:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);
 80016e2:	200a      	movs	r0, #10
 80016e4:	f000 fd24 	bl	8002130 <HAL_Delay>
				HAL_GPIO_WritePin(IN_3_GPIO_Port, IN_3_Pin, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2101      	movs	r1, #1
 80016ec:	482d      	ldr	r0, [pc, #180]	; (80017a4 <main+0x2f0>)
 80016ee:	f000 ffbb 	bl	8002668 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_4_GPIO_Port, IN_4_Pin, GPIO_PIN_SET);
 80016f2:	2201      	movs	r2, #1
 80016f4:	2102      	movs	r1, #2
 80016f6:	482b      	ldr	r0, [pc, #172]	; (80017a4 <main+0x2f0>)
 80016f8:	f000 ffb6 	bl	8002668 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 80016fc:	4b27      	ldr	r3, [pc, #156]	; (800179c <main+0x2e8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001704:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);
 8001706:	200a      	movs	r0, #10
 8001708:	f000 fd12 	bl	8002130 <HAL_Delay>
				rx_data[0] = 0;
 800170c:	4b22      	ldr	r3, [pc, #136]	; (8001798 <main+0x2e4>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
				rx_data[1] = 0;
 8001712:	4b21      	ldr	r3, [pc, #132]	; (8001798 <main+0x2e4>)
 8001714:	2200      	movs	r2, #0
 8001716:	705a      	strb	r2, [r3, #1]
				rx_data[2] = 0;
 8001718:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <main+0x2e4>)
 800171a:	2200      	movs	r2, #0
 800171c:	709a      	strb	r2, [r3, #2]
				rx_data[3] = 0;
 800171e:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <main+0x2e4>)
 8001720:	2200      	movs	r2, #0
 8001722:	70da      	strb	r2, [r3, #3]
 8001724:	e023      	b.n	800176e <main+0x2ba>

			} else {
				HAL_GPIO_WritePin(IN_1_GPIO_Port, IN_1_Pin, GPIO_PIN_RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	2110      	movs	r1, #16
 800172a:	481d      	ldr	r0, [pc, #116]	; (80017a0 <main+0x2ec>)
 800172c:	f000 ff9c 	bl	8002668 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_2_GPIO_Port, IN_2_Pin, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	2120      	movs	r1, #32
 8001734:	481a      	ldr	r0, [pc, #104]	; (80017a0 <main+0x2ec>)
 8001736:	f000 ff97 	bl	8002668 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_3_GPIO_Port, IN_3_Pin, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	2101      	movs	r1, #1
 800173e:	4819      	ldr	r0, [pc, #100]	; (80017a4 <main+0x2f0>)
 8001740:	f000 ff92 	bl	8002668 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_4_GPIO_Port, IN_4_Pin, GPIO_PIN_RESET);
 8001744:	2200      	movs	r2, #0
 8001746:	2102      	movs	r1, #2
 8001748:	4816      	ldr	r0, [pc, #88]	; (80017a4 <main+0x2f0>)
 800174a:	f000 ff8d 	bl	8002668 <HAL_GPIO_WritePin>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800174e:	2100      	movs	r1, #0
 8001750:	4812      	ldr	r0, [pc, #72]	; (800179c <main+0x2e8>)
 8001752:	f002 fc05 	bl	8003f60 <HAL_TIM_PWM_Stop>
				rx_data[0] = 0;
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <main+0x2e4>)
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
				rx_data[1] = 0;
 800175c:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <main+0x2e4>)
 800175e:	2200      	movs	r2, #0
 8001760:	705a      	strb	r2, [r3, #1]
				rx_data[2] = 0;
 8001762:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <main+0x2e4>)
 8001764:	2200      	movs	r2, #0
 8001766:	709a      	strb	r2, [r3, #2]
				rx_data[3] = 0;
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <main+0x2e4>)
 800176a:	2200      	movs	r2, #0
 800176c:	70da      	strb	r2, [r3, #3]
			}
		}
		rx_data[0] = 0;
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <main+0x2e4>)
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
		rx_data[1] = 0;
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <main+0x2e4>)
 8001776:	2200      	movs	r2, #0
 8001778:	705a      	strb	r2, [r3, #1]
		rx_data[2] = 0;
 800177a:	4b07      	ldr	r3, [pc, #28]	; (8001798 <main+0x2e4>)
 800177c:	2200      	movs	r2, #0
 800177e:	709a      	strb	r2, [r3, #2]
		rx_data[3] = 0;
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <main+0x2e4>)
 8001782:	2200      	movs	r2, #0
 8001784:	70da      	strb	r2, [r3, #3]
		if (NRF24_Available(&nrfRx, 0) == 1) {
 8001786:	e6e8      	b.n	800155a <main+0xa6>
 8001788:	200001f8 	.word	0x200001f8
 800178c:	40010800 	.word	0x40010800
 8001790:	20000274 	.word	0x20000274
 8001794:	20000000 	.word	0x20000000
 8001798:	20000218 	.word	0x20000218
 800179c:	200002cc 	.word	0x200002cc
 80017a0:	40011000 	.word	0x40011000
 80017a4:	40010c00 	.word	0x40010c00

080017a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b090      	sub	sp, #64	; 0x40
 80017ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80017ae:	f107 0318 	add.w	r3, r7, #24
 80017b2:	2228      	movs	r2, #40	; 0x28
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f004 f987 	bl	8005aca <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017ca:	2301      	movs	r3, #1
 80017cc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017d2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017d8:	2301      	movs	r3, #1
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017dc:	2302      	movs	r3, #2
 80017de:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017e4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80017ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80017ec:	f107 0318 	add.w	r3, r7, #24
 80017f0:	4618      	mov	r0, r3
 80017f2:	f001 f8af 	bl	8002954 <HAL_RCC_OscConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <SystemClock_Config+0x58>
		Error_Handler();
 80017fc:	f000 f9ca 	bl	8001b94 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001800:	230f      	movs	r3, #15
 8001802:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001804:	2302      	movs	r3, #2
 8001806:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800180c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001810:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	2102      	movs	r1, #2
 800181a:	4618      	mov	r0, r3
 800181c:	f001 fb1c 	bl	8002e58 <HAL_RCC_ClockConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <SystemClock_Config+0x82>
		Error_Handler();
 8001826:	f000 f9b5 	bl	8001b94 <Error_Handler>
	}
}
 800182a:	bf00      	nop
 800182c:	3740      	adds	r7, #64	; 0x40
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <MX_I2C1_Init+0x50>)
 800183a:	4a13      	ldr	r2, [pc, #76]	; (8001888 <MX_I2C1_Init+0x54>)
 800183c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <MX_I2C1_Init+0x50>)
 8001840:	4a12      	ldr	r2, [pc, #72]	; (800188c <MX_I2C1_Init+0x58>)
 8001842:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001844:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <MX_I2C1_Init+0x50>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <MX_I2C1_Init+0x50>)
 800184c:	2200      	movs	r2, #0
 800184e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <MX_I2C1_Init+0x50>)
 8001852:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001856:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001858:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <MX_I2C1_Init+0x50>)
 800185a:	2200      	movs	r2, #0
 800185c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <MX_I2C1_Init+0x50>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001864:	4b07      	ldr	r3, [pc, #28]	; (8001884 <MX_I2C1_Init+0x50>)
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <MX_I2C1_Init+0x50>)
 800186c:	2200      	movs	r2, #0
 800186e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001870:	4804      	ldr	r0, [pc, #16]	; (8001884 <MX_I2C1_Init+0x50>)
 8001872:	f000 ff2b 	bl	80026cc <HAL_I2C_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800187c:	f000 f98a 	bl	8001b94 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000220 	.word	0x20000220
 8001888:	40005400 	.word	0x40005400
 800188c:	000186a0 	.word	0x000186a0

08001890 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001894:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <MX_SPI1_Init+0x64>)
 8001896:	4a18      	ldr	r2, [pc, #96]	; (80018f8 <MX_SPI1_Init+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800189a:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <MX_SPI1_Init+0x64>)
 800189c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018a0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018c4:	2218      	movs	r2, #24
 80018c6:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018dc:	220a      	movs	r2, #10
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80018e0:	4804      	ldr	r0, [pc, #16]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018e2:	f001 fc47 	bl	8003174 <HAL_SPI_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_SPI1_Init+0x60>
		Error_Handler();
 80018ec:	f000 f952 	bl	8001b94 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000274 	.word	0x20000274
 80018f8:	40013000 	.word	0x40013000

080018fc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08e      	sub	sp, #56	; 0x38
 8001900:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001902:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001910:	f107 0320 	add.w	r3, r7, #32
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
 8001928:	615a      	str	r2, [r3, #20]
 800192a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800192c:	4b32      	ldr	r3, [pc, #200]	; (80019f8 <MX_TIM2_Init+0xfc>)
 800192e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001932:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72;
 8001934:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <MX_TIM2_Init+0xfc>)
 8001936:	2248      	movs	r2, #72	; 0x48
 8001938:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193a:	4b2f      	ldr	r3, [pc, #188]	; (80019f8 <MX_TIM2_Init+0xfc>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 8001940:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <MX_TIM2_Init+0xfc>)
 8001942:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001946:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001948:	4b2b      	ldr	r3, [pc, #172]	; (80019f8 <MX_TIM2_Init+0xfc>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194e:	4b2a      	ldr	r3, [pc, #168]	; (80019f8 <MX_TIM2_Init+0xfc>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001954:	4828      	ldr	r0, [pc, #160]	; (80019f8 <MX_TIM2_Init+0xfc>)
 8001956:	f002 f9a1 	bl	8003c9c <HAL_TIM_Base_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM2_Init+0x68>
		Error_Handler();
 8001960:	f000 f918 	bl	8001b94 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001968:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800196a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800196e:	4619      	mov	r1, r3
 8001970:	4821      	ldr	r0, [pc, #132]	; (80019f8 <MX_TIM2_Init+0xfc>)
 8001972:	f002 fc27 	bl	80041c4 <HAL_TIM_ConfigClockSource>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM2_Init+0x84>
		Error_Handler();
 800197c:	f000 f90a 	bl	8001b94 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001980:	481d      	ldr	r0, [pc, #116]	; (80019f8 <MX_TIM2_Init+0xfc>)
 8001982:	f002 f9da 	bl	8003d3a <HAL_TIM_PWM_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM2_Init+0x94>
		Error_Handler();
 800198c:	f000 f902 	bl	8001b94 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001990:	2300      	movs	r3, #0
 8001992:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001998:	f107 0320 	add.w	r3, r7, #32
 800199c:	4619      	mov	r1, r3
 800199e:	4816      	ldr	r0, [pc, #88]	; (80019f8 <MX_TIM2_Init+0xfc>)
 80019a0:	f002 ffb8 	bl	8004914 <HAL_TIMEx_MasterConfigSynchronization>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 80019aa:	f000 f8f3 	bl	8001b94 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ae:	2360      	movs	r3, #96	; 0x60
 80019b0:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	2200      	movs	r2, #0
 80019c2:	4619      	mov	r1, r3
 80019c4:	480c      	ldr	r0, [pc, #48]	; (80019f8 <MX_TIM2_Init+0xfc>)
 80019c6:	f002 fb3b 	bl	8004040 <HAL_TIM_PWM_ConfigChannel>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 80019d0:	f000 f8e0 	bl	8001b94 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	2204      	movs	r2, #4
 80019d8:	4619      	mov	r1, r3
 80019da:	4807      	ldr	r0, [pc, #28]	; (80019f8 <MX_TIM2_Init+0xfc>)
 80019dc:	f002 fb30 	bl	8004040 <HAL_TIM_PWM_ConfigChannel>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM2_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 80019e6:	f000 f8d5 	bl	8001b94 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80019ea:	4803      	ldr	r0, [pc, #12]	; (80019f8 <MX_TIM2_Init+0xfc>)
 80019ec:	f000 f9ae 	bl	8001d4c <HAL_TIM_MspPostInit>

}
 80019f0:	bf00      	nop
 80019f2:	3738      	adds	r7, #56	; 0x38
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200002cc 	.word	0x200002cc

080019fc <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <MX_UART4_Init+0x4c>)
 8001a02:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <MX_UART4_Init+0x50>)
 8001a04:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <MX_UART4_Init+0x4c>)
 8001a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a0c:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <MX_UART4_Init+0x4c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <MX_UART4_Init+0x4c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <MX_UART4_Init+0x4c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <MX_UART4_Init+0x4c>)
 8001a22:	220c      	movs	r2, #12
 8001a24:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <MX_UART4_Init+0x4c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <MX_UART4_Init+0x4c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_UART4_Init+0x4c>)
 8001a34:	f002 ffda 	bl	80049ec <HAL_UART_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_UART4_Init+0x46>
		Error_Handler();
 8001a3e:	f000 f8a9 	bl	8001b94 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000314 	.word	0x20000314
 8001a4c:	40004c00 	.word	0x40004c00

08001a50 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001a56:	f107 0310 	add.w	r3, r7, #16
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001a64:	4b46      	ldr	r3, [pc, #280]	; (8001b80 <MX_GPIO_Init+0x130>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	4a45      	ldr	r2, [pc, #276]	; (8001b80 <MX_GPIO_Init+0x130>)
 8001a6a:	f043 0320 	orr.w	r3, r3, #32
 8001a6e:	6193      	str	r3, [r2, #24]
 8001a70:	4b43      	ldr	r3, [pc, #268]	; (8001b80 <MX_GPIO_Init+0x130>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f003 0320 	and.w	r3, r3, #32
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7c:	4b40      	ldr	r3, [pc, #256]	; (8001b80 <MX_GPIO_Init+0x130>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	4a3f      	ldr	r2, [pc, #252]	; (8001b80 <MX_GPIO_Init+0x130>)
 8001a82:	f043 0304 	orr.w	r3, r3, #4
 8001a86:	6193      	str	r3, [r2, #24]
 8001a88:	4b3d      	ldr	r3, [pc, #244]	; (8001b80 <MX_GPIO_Init+0x130>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a94:	4b3a      	ldr	r3, [pc, #232]	; (8001b80 <MX_GPIO_Init+0x130>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	4a39      	ldr	r2, [pc, #228]	; (8001b80 <MX_GPIO_Init+0x130>)
 8001a9a:	f043 0310 	orr.w	r3, r3, #16
 8001a9e:	6193      	str	r3, [r2, #24]
 8001aa0:	4b37      	ldr	r3, [pc, #220]	; (8001b80 <MX_GPIO_Init+0x130>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f003 0310 	and.w	r3, r3, #16
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001aac:	4b34      	ldr	r3, [pc, #208]	; (8001b80 <MX_GPIO_Init+0x130>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	4a33      	ldr	r2, [pc, #204]	; (8001b80 <MX_GPIO_Init+0x130>)
 8001ab2:	f043 0308 	orr.w	r3, r3, #8
 8001ab6:	6193      	str	r3, [r2, #24]
 8001ab8:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <MX_GPIO_Init+0x130>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	603b      	str	r3, [r7, #0]
 8001ac2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, NRF_CE_Pin | NRF_CSN_Pin | LED_Pin | IN_Relay_Pin,
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f241 1118 	movw	r1, #4376	; 0x1118
 8001aca:	482e      	ldr	r0, [pc, #184]	; (8001b84 <MX_GPIO_Init+0x134>)
 8001acc:	f000 fdcc 	bl	8002668 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, IN_1_Pin | IN_2_Pin, GPIO_PIN_SET);
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	2130      	movs	r1, #48	; 0x30
 8001ad4:	482c      	ldr	r0, [pc, #176]	; (8001b88 <MX_GPIO_Init+0x138>)
 8001ad6:	f000 fdc7 	bl	8002668 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, IN_3_Pin | IN_4_Pin, GPIO_PIN_SET);
 8001ada:	2201      	movs	r2, #1
 8001adc:	2103      	movs	r1, #3
 8001ade:	482b      	ldr	r0, [pc, #172]	; (8001b8c <MX_GPIO_Init+0x13c>)
 8001ae0:	f000 fdc2 	bl	8002668 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	2104      	movs	r1, #4
 8001ae8:	4829      	ldr	r0, [pc, #164]	; (8001b90 <MX_GPIO_Init+0x140>)
 8001aea:	f000 fdbd 	bl	8002668 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : NRF_IRQ_Pin */
	GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8001aee:	2304      	movs	r3, #4
 8001af0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001afa:	f107 0310 	add.w	r3, r7, #16
 8001afe:	4619      	mov	r1, r3
 8001b00:	4820      	ldr	r0, [pc, #128]	; (8001b84 <MX_GPIO_Init+0x134>)
 8001b02:	f000 fc1d 	bl	8002340 <HAL_GPIO_Init>

	/*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin LED_Pin IN_Relay_Pin */
	GPIO_InitStruct.Pin = NRF_CE_Pin | NRF_CSN_Pin | LED_Pin | IN_Relay_Pin;
 8001b06:	f241 1318 	movw	r3, #4376	; 0x1118
 8001b0a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	2302      	movs	r3, #2
 8001b16:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4819      	ldr	r0, [pc, #100]	; (8001b84 <MX_GPIO_Init+0x134>)
 8001b20:	f000 fc0e 	bl	8002340 <HAL_GPIO_Init>

	/*Configure GPIO pins : IN_1_Pin IN_2_Pin */
	GPIO_InitStruct.Pin = IN_1_Pin | IN_2_Pin;
 8001b24:	2330      	movs	r3, #48	; 0x30
 8001b26:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b30:	2302      	movs	r3, #2
 8001b32:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b34:	f107 0310 	add.w	r3, r7, #16
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4813      	ldr	r0, [pc, #76]	; (8001b88 <MX_GPIO_Init+0x138>)
 8001b3c:	f000 fc00 	bl	8002340 <HAL_GPIO_Init>

	/*Configure GPIO pins : IN_3_Pin IN_4_Pin */
	GPIO_InitStruct.Pin = IN_3_Pin | IN_4_Pin;
 8001b40:	2303      	movs	r3, #3
 8001b42:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b44:	2301      	movs	r3, #1
 8001b46:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b50:	f107 0310 	add.w	r3, r7, #16
 8001b54:	4619      	mov	r1, r3
 8001b56:	480d      	ldr	r0, [pc, #52]	; (8001b8c <MX_GPIO_Init+0x13c>)
 8001b58:	f000 fbf2 	bl	8002340 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_1_Pin */
	GPIO_InitStruct.Pin = LED_1_Pin;
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b60:	2301      	movs	r3, #1
 8001b62:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8001b6c:	f107 0310 	add.w	r3, r7, #16
 8001b70:	4619      	mov	r1, r3
 8001b72:	4807      	ldr	r0, [pc, #28]	; (8001b90 <MX_GPIO_Init+0x140>)
 8001b74:	f000 fbe4 	bl	8002340 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001b78:	bf00      	nop
 8001b7a:	3720      	adds	r7, #32
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40010800 	.word	0x40010800
 8001b88:	40011000 	.word	0x40011000
 8001b8c:	40010c00 	.word	0x40010c00
 8001b90:	40011400 	.word	0x40011400

08001b94 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b98:	b672      	cpsid	i
}
 8001b9a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b9c:	e7fe      	b.n	8001b9c <Error_Handler+0x8>
	...

08001ba0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ba6:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <HAL_MspInit+0x5c>)
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	4a14      	ldr	r2, [pc, #80]	; (8001bfc <HAL_MspInit+0x5c>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6193      	str	r3, [r2, #24]
 8001bb2:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_MspInit+0x5c>)
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <HAL_MspInit+0x5c>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	4a0e      	ldr	r2, [pc, #56]	; (8001bfc <HAL_MspInit+0x5c>)
 8001bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	61d3      	str	r3, [r2, #28]
 8001bca:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <HAL_MspInit+0x5c>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <HAL_MspInit+0x60>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <HAL_MspInit+0x60>)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40010000 	.word	0x40010000

08001c04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a15      	ldr	r2, [pc, #84]	; (8001c74 <HAL_I2C_MspInit+0x70>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d123      	bne.n	8001c6c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <HAL_I2C_MspInit+0x74>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	4a13      	ldr	r2, [pc, #76]	; (8001c78 <HAL_I2C_MspInit+0x74>)
 8001c2a:	f043 0308 	orr.w	r3, r3, #8
 8001c2e:	6193      	str	r3, [r2, #24]
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_I2C_MspInit+0x74>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c3c:	23c0      	movs	r3, #192	; 0xc0
 8001c3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c40:	2312      	movs	r3, #18
 8001c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c44:	2303      	movs	r3, #3
 8001c46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c48:	f107 0310 	add.w	r3, r7, #16
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	480b      	ldr	r0, [pc, #44]	; (8001c7c <HAL_I2C_MspInit+0x78>)
 8001c50:	f000 fb76 	bl	8002340 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c54:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <HAL_I2C_MspInit+0x74>)
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	4a07      	ldr	r2, [pc, #28]	; (8001c78 <HAL_I2C_MspInit+0x74>)
 8001c5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c5e:	61d3      	str	r3, [r2, #28]
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <HAL_I2C_MspInit+0x74>)
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c6c:	bf00      	nop
 8001c6e:	3720      	adds	r7, #32
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40005400 	.word	0x40005400
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40010c00 	.word	0x40010c00

08001c80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 0310 	add.w	r3, r7, #16
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1b      	ldr	r2, [pc, #108]	; (8001d08 <HAL_SPI_MspInit+0x88>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d12f      	bne.n	8001d00 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ca0:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <HAL_SPI_MspInit+0x8c>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	4a19      	ldr	r2, [pc, #100]	; (8001d0c <HAL_SPI_MspInit+0x8c>)
 8001ca6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001caa:	6193      	str	r3, [r2, #24]
 8001cac:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <HAL_SPI_MspInit+0x8c>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <HAL_SPI_MspInit+0x8c>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	4a13      	ldr	r2, [pc, #76]	; (8001d0c <HAL_SPI_MspInit+0x8c>)
 8001cbe:	f043 0304 	orr.w	r3, r3, #4
 8001cc2:	6193      	str	r3, [r2, #24]
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <HAL_SPI_MspInit+0x8c>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001cd0:	23a0      	movs	r3, #160	; 0xa0
 8001cd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cdc:	f107 0310 	add.w	r3, r7, #16
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	480b      	ldr	r0, [pc, #44]	; (8001d10 <HAL_SPI_MspInit+0x90>)
 8001ce4:	f000 fb2c 	bl	8002340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ce8:	2340      	movs	r3, #64	; 0x40
 8001cea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf4:	f107 0310 	add.w	r3, r7, #16
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <HAL_SPI_MspInit+0x90>)
 8001cfc:	f000 fb20 	bl	8002340 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d00:	bf00      	nop
 8001d02:	3720      	adds	r7, #32
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40013000 	.word	0x40013000
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40010800 	.word	0x40010800

08001d14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d24:	d10b      	bne.n	8001d3e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <HAL_TIM_Base_MspInit+0x34>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	4a07      	ldr	r2, [pc, #28]	; (8001d48 <HAL_TIM_Base_MspInit+0x34>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	61d3      	str	r3, [r2, #28]
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_TIM_Base_MspInit+0x34>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d3e:	bf00      	nop
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	40021000 	.word	0x40021000

08001d4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 0310 	add.w	r3, r7, #16
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d6a:	d117      	bne.n	8001d9c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6c:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <HAL_TIM_MspPostInit+0x58>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	4a0c      	ldr	r2, [pc, #48]	; (8001da4 <HAL_TIM_MspPostInit+0x58>)
 8001d72:	f043 0304 	orr.w	r3, r3, #4
 8001d76:	6193      	str	r3, [r2, #24]
 8001d78:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_TIM_MspPostInit+0x58>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d84:	2303      	movs	r3, #3
 8001d86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	f107 0310 	add.w	r3, r7, #16
 8001d94:	4619      	mov	r1, r3
 8001d96:	4804      	ldr	r0, [pc, #16]	; (8001da8 <HAL_TIM_MspPostInit+0x5c>)
 8001d98:	f000 fad2 	bl	8002340 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d9c:	bf00      	nop
 8001d9e:	3720      	adds	r7, #32
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40010800 	.word	0x40010800

08001dac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 0310 	add.w	r3, r7, #16
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <HAL_UART_MspInit+0x8c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d131      	bne.n	8001e30 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001dcc:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <HAL_UART_MspInit+0x90>)
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	4a1a      	ldr	r2, [pc, #104]	; (8001e3c <HAL_UART_MspInit+0x90>)
 8001dd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001dd6:	61d3      	str	r3, [r2, #28]
 8001dd8:	4b18      	ldr	r3, [pc, #96]	; (8001e3c <HAL_UART_MspInit+0x90>)
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de4:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <HAL_UART_MspInit+0x90>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	4a14      	ldr	r2, [pc, #80]	; (8001e3c <HAL_UART_MspInit+0x90>)
 8001dea:	f043 0310 	orr.w	r3, r3, #16
 8001dee:	6193      	str	r3, [r2, #24]
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_UART_MspInit+0x90>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	2302      	movs	r3, #2
 8001e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e06:	2303      	movs	r3, #3
 8001e08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0a:	f107 0310 	add.w	r3, r7, #16
 8001e0e:	4619      	mov	r1, r3
 8001e10:	480b      	ldr	r0, [pc, #44]	; (8001e40 <HAL_UART_MspInit+0x94>)
 8001e12:	f000 fa95 	bl	8002340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e24:	f107 0310 	add.w	r3, r7, #16
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4805      	ldr	r0, [pc, #20]	; (8001e40 <HAL_UART_MspInit+0x94>)
 8001e2c:	f000 fa88 	bl	8002340 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001e30:	bf00      	nop
 8001e32:	3720      	adds	r7, #32
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40004c00 	.word	0x40004c00
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40011000 	.word	0x40011000

08001e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e48:	e7fe      	b.n	8001e48 <NMI_Handler+0x4>

08001e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4e:	e7fe      	b.n	8001e4e <HardFault_Handler+0x4>

08001e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <MemManage_Handler+0x4>

08001e56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e5a:	e7fe      	b.n	8001e5a <BusFault_Handler+0x4>

08001e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <UsageFault_Handler+0x4>

08001e62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr

08001e6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr

08001e7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr

08001e86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e8a:	f000 f935 	bl	80020f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0
  return 1;
 8001e96:	2301      	movs	r3, #1
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <_kill>:

int _kill(int pid, int sig)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eaa:	f003 fe61 	bl	8005b70 <__errno>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2216      	movs	r2, #22
 8001eb2:	601a      	str	r2, [r3, #0]
  return -1;
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <_exit>:

void _exit (int status)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff ffe7 	bl	8001ea0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ed2:	e7fe      	b.n	8001ed2 <_exit+0x12>

08001ed4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	e00a      	b.n	8001efc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ee6:	f3af 8000 	nop.w
 8001eea:	4601      	mov	r1, r0
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	60ba      	str	r2, [r7, #8]
 8001ef2:	b2ca      	uxtb	r2, r1
 8001ef4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	dbf0      	blt.n	8001ee6 <_read+0x12>
  }

  return len;
 8001f04:	687b      	ldr	r3, [r7, #4]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b086      	sub	sp, #24
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	60f8      	str	r0, [r7, #12]
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	e009      	b.n	8001f34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	60ba      	str	r2, [r7, #8]
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	3301      	adds	r3, #1
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	dbf1      	blt.n	8001f20 <_write+0x12>
  }
  return len;
 8001f3c:	687b      	ldr	r3, [r7, #4]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <_close>:

int _close(int file)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f6c:	605a      	str	r2, [r3, #4]
  return 0;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr

08001f7a <_isatty>:

int _isatty(int file)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f82:	2301      	movs	r3, #1
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr

08001f8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b085      	sub	sp, #20
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr
	...

08001fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fb0:	4a14      	ldr	r2, [pc, #80]	; (8002004 <_sbrk+0x5c>)
 8001fb2:	4b15      	ldr	r3, [pc, #84]	; (8002008 <_sbrk+0x60>)
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fbc:	4b13      	ldr	r3, [pc, #76]	; (800200c <_sbrk+0x64>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d102      	bne.n	8001fca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <_sbrk+0x64>)
 8001fc6:	4a12      	ldr	r2, [pc, #72]	; (8002010 <_sbrk+0x68>)
 8001fc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <_sbrk+0x64>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d207      	bcs.n	8001fe8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd8:	f003 fdca 	bl	8005b70 <__errno>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	220c      	movs	r2, #12
 8001fe0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe6:	e009      	b.n	8001ffc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe8:	4b08      	ldr	r3, [pc, #32]	; (800200c <_sbrk+0x64>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fee:	4b07      	ldr	r3, [pc, #28]	; (800200c <_sbrk+0x64>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	4a05      	ldr	r2, [pc, #20]	; (800200c <_sbrk+0x64>)
 8001ff8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	2000c000 	.word	0x2000c000
 8002008:	00000400 	.word	0x00000400
 800200c:	2000035c 	.word	0x2000035c
 8002010:	200004b0 	.word	0x200004b0

08002014 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002020:	f7ff fff8 	bl	8002014 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002024:	480b      	ldr	r0, [pc, #44]	; (8002054 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002026:	490c      	ldr	r1, [pc, #48]	; (8002058 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002028:	4a0c      	ldr	r2, [pc, #48]	; (800205c <LoopFillZerobss+0x16>)
  movs r3, #0
 800202a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800202c:	e002      	b.n	8002034 <LoopCopyDataInit>

0800202e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800202e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002032:	3304      	adds	r3, #4

08002034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002038:	d3f9      	bcc.n	800202e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800203a:	4a09      	ldr	r2, [pc, #36]	; (8002060 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800203c:	4c09      	ldr	r4, [pc, #36]	; (8002064 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800203e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002040:	e001      	b.n	8002046 <LoopFillZerobss>

08002042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002044:	3204      	adds	r2, #4

08002046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002048:	d3fb      	bcc.n	8002042 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800204a:	f003 fd97 	bl	8005b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800204e:	f7ff fa31 	bl	80014b4 <main>
  bx lr
 8002052:	4770      	bx	lr
  ldr r0, =_sdata
 8002054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002058:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800205c:	080097a0 	.word	0x080097a0
  ldr r2, =_sbss
 8002060:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002064:	200004b0 	.word	0x200004b0

08002068 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002068:	e7fe      	b.n	8002068 <ADC1_2_IRQHandler>
	...

0800206c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_Init+0x28>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a07      	ldr	r2, [pc, #28]	; (8002094 <HAL_Init+0x28>)
 8002076:	f043 0310 	orr.w	r3, r3, #16
 800207a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800207c:	2003      	movs	r0, #3
 800207e:	f000 f92b 	bl	80022d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002082:	200f      	movs	r0, #15
 8002084:	f000 f808 	bl	8002098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002088:	f7ff fd8a 	bl	8001ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40022000 	.word	0x40022000

08002098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020a0:	4b12      	ldr	r3, [pc, #72]	; (80020ec <HAL_InitTick+0x54>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <HAL_InitTick+0x58>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	4619      	mov	r1, r3
 80020aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80020b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 f935 	bl	8002326 <HAL_SYSTICK_Config>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e00e      	b.n	80020e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b0f      	cmp	r3, #15
 80020ca:	d80a      	bhi.n	80020e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020cc:	2200      	movs	r2, #0
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	f04f 30ff 	mov.w	r0, #4294967295
 80020d4:	f000 f90b 	bl	80022ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d8:	4a06      	ldr	r2, [pc, #24]	; (80020f4 <HAL_InitTick+0x5c>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	e000      	b.n	80020e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000008 	.word	0x20000008
 80020f0:	20000010 	.word	0x20000010
 80020f4:	2000000c 	.word	0x2000000c

080020f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <HAL_IncTick+0x1c>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	461a      	mov	r2, r3
 8002102:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_IncTick+0x20>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4413      	add	r3, r2
 8002108:	4a03      	ldr	r2, [pc, #12]	; (8002118 <HAL_IncTick+0x20>)
 800210a:	6013      	str	r3, [r2, #0]
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr
 8002114:	20000010 	.word	0x20000010
 8002118:	20000360 	.word	0x20000360

0800211c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return uwTick;
 8002120:	4b02      	ldr	r3, [pc, #8]	; (800212c <HAL_GetTick+0x10>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	20000360 	.word	0x20000360

08002130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002138:	f7ff fff0 	bl	800211c <HAL_GetTick>
 800213c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d005      	beq.n	8002156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <HAL_Delay+0x44>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002156:	bf00      	nop
 8002158:	f7ff ffe0 	bl	800211c <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	429a      	cmp	r2, r3
 8002166:	d8f7      	bhi.n	8002158 <HAL_Delay+0x28>
  {
  }
}
 8002168:	bf00      	nop
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000010 	.word	0x20000010

08002178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <__NVIC_SetPriorityGrouping+0x44>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002194:	4013      	ands	r3, r2
 8002196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021aa:	4a04      	ldr	r2, [pc, #16]	; (80021bc <__NVIC_SetPriorityGrouping+0x44>)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	60d3      	str	r3, [r2, #12]
}
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <__NVIC_GetPriorityGrouping+0x18>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	0a1b      	lsrs	r3, r3, #8
 80021ca:	f003 0307 	and.w	r3, r3, #7
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	6039      	str	r1, [r7, #0]
 80021e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	db0a      	blt.n	8002206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	490c      	ldr	r1, [pc, #48]	; (8002228 <__NVIC_SetPriority+0x4c>)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	0112      	lsls	r2, r2, #4
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	440b      	add	r3, r1
 8002200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002204:	e00a      	b.n	800221c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4908      	ldr	r1, [pc, #32]	; (800222c <__NVIC_SetPriority+0x50>)
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	3b04      	subs	r3, #4
 8002214:	0112      	lsls	r2, r2, #4
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	440b      	add	r3, r1
 800221a:	761a      	strb	r2, [r3, #24]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	e000e100 	.word	0xe000e100
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002230:	b480      	push	{r7}
 8002232:	b089      	sub	sp, #36	; 0x24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f1c3 0307 	rsb	r3, r3, #7
 800224a:	2b04      	cmp	r3, #4
 800224c:	bf28      	it	cs
 800224e:	2304      	movcs	r3, #4
 8002250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3304      	adds	r3, #4
 8002256:	2b06      	cmp	r3, #6
 8002258:	d902      	bls.n	8002260 <NVIC_EncodePriority+0x30>
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3b03      	subs	r3, #3
 800225e:	e000      	b.n	8002262 <NVIC_EncodePriority+0x32>
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	f04f 32ff 	mov.w	r2, #4294967295
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43da      	mvns	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	401a      	ands	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002278:	f04f 31ff 	mov.w	r1, #4294967295
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	43d9      	mvns	r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002288:	4313      	orrs	r3, r2
         );
}
 800228a:	4618      	mov	r0, r3
 800228c:	3724      	adds	r7, #36	; 0x24
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3b01      	subs	r3, #1
 80022a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022a4:	d301      	bcc.n	80022aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022a6:	2301      	movs	r3, #1
 80022a8:	e00f      	b.n	80022ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022aa:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <SysTick_Config+0x40>)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022b2:	210f      	movs	r1, #15
 80022b4:	f04f 30ff 	mov.w	r0, #4294967295
 80022b8:	f7ff ff90 	bl	80021dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <SysTick_Config+0x40>)
 80022be:	2200      	movs	r2, #0
 80022c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022c2:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <SysTick_Config+0x40>)
 80022c4:	2207      	movs	r2, #7
 80022c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	e000e010 	.word	0xe000e010

080022d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f7ff ff49 	bl	8002178 <__NVIC_SetPriorityGrouping>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b086      	sub	sp, #24
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	4603      	mov	r3, r0
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002300:	f7ff ff5e 	bl	80021c0 <__NVIC_GetPriorityGrouping>
 8002304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	6978      	ldr	r0, [r7, #20]
 800230c:	f7ff ff90 	bl	8002230 <NVIC_EncodePriority>
 8002310:	4602      	mov	r2, r0
 8002312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002316:	4611      	mov	r1, r2
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff5f 	bl	80021dc <__NVIC_SetPriority>
}
 800231e:	bf00      	nop
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff ffb0 	bl	8002294 <SysTick_Config>
 8002334:	4603      	mov	r3, r0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002340:	b480      	push	{r7}
 8002342:	b08b      	sub	sp, #44	; 0x2c
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800234e:	2300      	movs	r3, #0
 8002350:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002352:	e179      	b.n	8002648 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002354:	2201      	movs	r2, #1
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	69fa      	ldr	r2, [r7, #28]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	429a      	cmp	r2, r3
 800236e:	f040 8168 	bne.w	8002642 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4a96      	ldr	r2, [pc, #600]	; (80025d0 <HAL_GPIO_Init+0x290>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d05e      	beq.n	800243a <HAL_GPIO_Init+0xfa>
 800237c:	4a94      	ldr	r2, [pc, #592]	; (80025d0 <HAL_GPIO_Init+0x290>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d875      	bhi.n	800246e <HAL_GPIO_Init+0x12e>
 8002382:	4a94      	ldr	r2, [pc, #592]	; (80025d4 <HAL_GPIO_Init+0x294>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d058      	beq.n	800243a <HAL_GPIO_Init+0xfa>
 8002388:	4a92      	ldr	r2, [pc, #584]	; (80025d4 <HAL_GPIO_Init+0x294>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d86f      	bhi.n	800246e <HAL_GPIO_Init+0x12e>
 800238e:	4a92      	ldr	r2, [pc, #584]	; (80025d8 <HAL_GPIO_Init+0x298>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d052      	beq.n	800243a <HAL_GPIO_Init+0xfa>
 8002394:	4a90      	ldr	r2, [pc, #576]	; (80025d8 <HAL_GPIO_Init+0x298>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d869      	bhi.n	800246e <HAL_GPIO_Init+0x12e>
 800239a:	4a90      	ldr	r2, [pc, #576]	; (80025dc <HAL_GPIO_Init+0x29c>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d04c      	beq.n	800243a <HAL_GPIO_Init+0xfa>
 80023a0:	4a8e      	ldr	r2, [pc, #568]	; (80025dc <HAL_GPIO_Init+0x29c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d863      	bhi.n	800246e <HAL_GPIO_Init+0x12e>
 80023a6:	4a8e      	ldr	r2, [pc, #568]	; (80025e0 <HAL_GPIO_Init+0x2a0>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d046      	beq.n	800243a <HAL_GPIO_Init+0xfa>
 80023ac:	4a8c      	ldr	r2, [pc, #560]	; (80025e0 <HAL_GPIO_Init+0x2a0>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d85d      	bhi.n	800246e <HAL_GPIO_Init+0x12e>
 80023b2:	2b12      	cmp	r3, #18
 80023b4:	d82a      	bhi.n	800240c <HAL_GPIO_Init+0xcc>
 80023b6:	2b12      	cmp	r3, #18
 80023b8:	d859      	bhi.n	800246e <HAL_GPIO_Init+0x12e>
 80023ba:	a201      	add	r2, pc, #4	; (adr r2, 80023c0 <HAL_GPIO_Init+0x80>)
 80023bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c0:	0800243b 	.word	0x0800243b
 80023c4:	08002415 	.word	0x08002415
 80023c8:	08002427 	.word	0x08002427
 80023cc:	08002469 	.word	0x08002469
 80023d0:	0800246f 	.word	0x0800246f
 80023d4:	0800246f 	.word	0x0800246f
 80023d8:	0800246f 	.word	0x0800246f
 80023dc:	0800246f 	.word	0x0800246f
 80023e0:	0800246f 	.word	0x0800246f
 80023e4:	0800246f 	.word	0x0800246f
 80023e8:	0800246f 	.word	0x0800246f
 80023ec:	0800246f 	.word	0x0800246f
 80023f0:	0800246f 	.word	0x0800246f
 80023f4:	0800246f 	.word	0x0800246f
 80023f8:	0800246f 	.word	0x0800246f
 80023fc:	0800246f 	.word	0x0800246f
 8002400:	0800246f 	.word	0x0800246f
 8002404:	0800241d 	.word	0x0800241d
 8002408:	08002431 	.word	0x08002431
 800240c:	4a75      	ldr	r2, [pc, #468]	; (80025e4 <HAL_GPIO_Init+0x2a4>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d013      	beq.n	800243a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002412:	e02c      	b.n	800246e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	623b      	str	r3, [r7, #32]
          break;
 800241a:	e029      	b.n	8002470 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	3304      	adds	r3, #4
 8002422:	623b      	str	r3, [r7, #32]
          break;
 8002424:	e024      	b.n	8002470 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	3308      	adds	r3, #8
 800242c:	623b      	str	r3, [r7, #32]
          break;
 800242e:	e01f      	b.n	8002470 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	330c      	adds	r3, #12
 8002436:	623b      	str	r3, [r7, #32]
          break;
 8002438:	e01a      	b.n	8002470 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d102      	bne.n	8002448 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002442:	2304      	movs	r3, #4
 8002444:	623b      	str	r3, [r7, #32]
          break;
 8002446:	e013      	b.n	8002470 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d105      	bne.n	800245c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002450:	2308      	movs	r3, #8
 8002452:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69fa      	ldr	r2, [r7, #28]
 8002458:	611a      	str	r2, [r3, #16]
          break;
 800245a:	e009      	b.n	8002470 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800245c:	2308      	movs	r3, #8
 800245e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69fa      	ldr	r2, [r7, #28]
 8002464:	615a      	str	r2, [r3, #20]
          break;
 8002466:	e003      	b.n	8002470 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002468:	2300      	movs	r3, #0
 800246a:	623b      	str	r3, [r7, #32]
          break;
 800246c:	e000      	b.n	8002470 <HAL_GPIO_Init+0x130>
          break;
 800246e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	2bff      	cmp	r3, #255	; 0xff
 8002474:	d801      	bhi.n	800247a <HAL_GPIO_Init+0x13a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	e001      	b.n	800247e <HAL_GPIO_Init+0x13e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3304      	adds	r3, #4
 800247e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	2bff      	cmp	r3, #255	; 0xff
 8002484:	d802      	bhi.n	800248c <HAL_GPIO_Init+0x14c>
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	e002      	b.n	8002492 <HAL_GPIO_Init+0x152>
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	3b08      	subs	r3, #8
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	210f      	movs	r1, #15
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	fa01 f303 	lsl.w	r3, r1, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	401a      	ands	r2, r3
 80024a4:	6a39      	ldr	r1, [r7, #32]
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ac:	431a      	orrs	r2, r3
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 80c1 	beq.w	8002642 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024c0:	4b49      	ldr	r3, [pc, #292]	; (80025e8 <HAL_GPIO_Init+0x2a8>)
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	4a48      	ldr	r2, [pc, #288]	; (80025e8 <HAL_GPIO_Init+0x2a8>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6193      	str	r3, [r2, #24]
 80024cc:	4b46      	ldr	r3, [pc, #280]	; (80025e8 <HAL_GPIO_Init+0x2a8>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024d8:	4a44      	ldr	r2, [pc, #272]	; (80025ec <HAL_GPIO_Init+0x2ac>)
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	089b      	lsrs	r3, r3, #2
 80024de:	3302      	adds	r3, #2
 80024e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	220f      	movs	r2, #15
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	4013      	ands	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a3c      	ldr	r2, [pc, #240]	; (80025f0 <HAL_GPIO_Init+0x2b0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d01f      	beq.n	8002544 <HAL_GPIO_Init+0x204>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a3b      	ldr	r2, [pc, #236]	; (80025f4 <HAL_GPIO_Init+0x2b4>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d019      	beq.n	8002540 <HAL_GPIO_Init+0x200>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a3a      	ldr	r2, [pc, #232]	; (80025f8 <HAL_GPIO_Init+0x2b8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d013      	beq.n	800253c <HAL_GPIO_Init+0x1fc>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a39      	ldr	r2, [pc, #228]	; (80025fc <HAL_GPIO_Init+0x2bc>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d00d      	beq.n	8002538 <HAL_GPIO_Init+0x1f8>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a38      	ldr	r2, [pc, #224]	; (8002600 <HAL_GPIO_Init+0x2c0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d007      	beq.n	8002534 <HAL_GPIO_Init+0x1f4>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a37      	ldr	r2, [pc, #220]	; (8002604 <HAL_GPIO_Init+0x2c4>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d101      	bne.n	8002530 <HAL_GPIO_Init+0x1f0>
 800252c:	2305      	movs	r3, #5
 800252e:	e00a      	b.n	8002546 <HAL_GPIO_Init+0x206>
 8002530:	2306      	movs	r3, #6
 8002532:	e008      	b.n	8002546 <HAL_GPIO_Init+0x206>
 8002534:	2304      	movs	r3, #4
 8002536:	e006      	b.n	8002546 <HAL_GPIO_Init+0x206>
 8002538:	2303      	movs	r3, #3
 800253a:	e004      	b.n	8002546 <HAL_GPIO_Init+0x206>
 800253c:	2302      	movs	r3, #2
 800253e:	e002      	b.n	8002546 <HAL_GPIO_Init+0x206>
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <HAL_GPIO_Init+0x206>
 8002544:	2300      	movs	r3, #0
 8002546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002548:	f002 0203 	and.w	r2, r2, #3
 800254c:	0092      	lsls	r2, r2, #2
 800254e:	4093      	lsls	r3, r2
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4313      	orrs	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002556:	4925      	ldr	r1, [pc, #148]	; (80025ec <HAL_GPIO_Init+0x2ac>)
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	089b      	lsrs	r3, r3, #2
 800255c:	3302      	adds	r3, #2
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d006      	beq.n	800257e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002570:	4b25      	ldr	r3, [pc, #148]	; (8002608 <HAL_GPIO_Init+0x2c8>)
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	4924      	ldr	r1, [pc, #144]	; (8002608 <HAL_GPIO_Init+0x2c8>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	4313      	orrs	r3, r2
 800257a:	608b      	str	r3, [r1, #8]
 800257c:	e006      	b.n	800258c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800257e:	4b22      	ldr	r3, [pc, #136]	; (8002608 <HAL_GPIO_Init+0x2c8>)
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	43db      	mvns	r3, r3
 8002586:	4920      	ldr	r1, [pc, #128]	; (8002608 <HAL_GPIO_Init+0x2c8>)
 8002588:	4013      	ands	r3, r2
 800258a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d006      	beq.n	80025a6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002598:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <HAL_GPIO_Init+0x2c8>)
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	491a      	ldr	r1, [pc, #104]	; (8002608 <HAL_GPIO_Init+0x2c8>)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60cb      	str	r3, [r1, #12]
 80025a4:	e006      	b.n	80025b4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025a6:	4b18      	ldr	r3, [pc, #96]	; (8002608 <HAL_GPIO_Init+0x2c8>)
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	43db      	mvns	r3, r3
 80025ae:	4916      	ldr	r1, [pc, #88]	; (8002608 <HAL_GPIO_Init+0x2c8>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d025      	beq.n	800260c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025c0:	4b11      	ldr	r3, [pc, #68]	; (8002608 <HAL_GPIO_Init+0x2c8>)
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	4910      	ldr	r1, [pc, #64]	; (8002608 <HAL_GPIO_Init+0x2c8>)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
 80025cc:	e025      	b.n	800261a <HAL_GPIO_Init+0x2da>
 80025ce:	bf00      	nop
 80025d0:	10320000 	.word	0x10320000
 80025d4:	10310000 	.word	0x10310000
 80025d8:	10220000 	.word	0x10220000
 80025dc:	10210000 	.word	0x10210000
 80025e0:	10120000 	.word	0x10120000
 80025e4:	10110000 	.word	0x10110000
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40010000 	.word	0x40010000
 80025f0:	40010800 	.word	0x40010800
 80025f4:	40010c00 	.word	0x40010c00
 80025f8:	40011000 	.word	0x40011000
 80025fc:	40011400 	.word	0x40011400
 8002600:	40011800 	.word	0x40011800
 8002604:	40011c00 	.word	0x40011c00
 8002608:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800260c:	4b15      	ldr	r3, [pc, #84]	; (8002664 <HAL_GPIO_Init+0x324>)
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	43db      	mvns	r3, r3
 8002614:	4913      	ldr	r1, [pc, #76]	; (8002664 <HAL_GPIO_Init+0x324>)
 8002616:	4013      	ands	r3, r2
 8002618:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d006      	beq.n	8002634 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002626:	4b0f      	ldr	r3, [pc, #60]	; (8002664 <HAL_GPIO_Init+0x324>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	490e      	ldr	r1, [pc, #56]	; (8002664 <HAL_GPIO_Init+0x324>)
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]
 8002632:	e006      	b.n	8002642 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002634:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_GPIO_Init+0x324>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	43db      	mvns	r3, r3
 800263c:	4909      	ldr	r1, [pc, #36]	; (8002664 <HAL_GPIO_Init+0x324>)
 800263e:	4013      	ands	r3, r2
 8002640:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	3301      	adds	r3, #1
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	fa22 f303 	lsr.w	r3, r2, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	f47f ae7e 	bne.w	8002354 <HAL_GPIO_Init+0x14>
  }
}
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	372c      	adds	r7, #44	; 0x2c
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr
 8002664:	40010400 	.word	0x40010400

08002668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	807b      	strh	r3, [r7, #2]
 8002674:	4613      	mov	r3, r2
 8002676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002678:	787b      	ldrb	r3, [r7, #1]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800267e:	887a      	ldrh	r2, [r7, #2]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002684:	e003      	b.n	800268e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002686:	887b      	ldrh	r3, [r7, #2]
 8002688:	041a      	lsls	r2, r3, #16
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	611a      	str	r2, [r3, #16]
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr

08002698 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026aa:	887a      	ldrh	r2, [r7, #2]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4013      	ands	r3, r2
 80026b0:	041a      	lsls	r2, r3, #16
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	43d9      	mvns	r1, r3
 80026b6:	887b      	ldrh	r3, [r7, #2]
 80026b8:	400b      	ands	r3, r1
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	611a      	str	r2, [r3, #16]
}
 80026c0:	bf00      	nop
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr
	...

080026cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e12b      	b.n	8002936 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d106      	bne.n	80026f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff fa86 	bl	8001c04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2224      	movs	r2, #36	; 0x24
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0201 	bic.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800271e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800272e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002730:	f000 fcda 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 8002734:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4a81      	ldr	r2, [pc, #516]	; (8002940 <HAL_I2C_Init+0x274>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d807      	bhi.n	8002750 <HAL_I2C_Init+0x84>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4a80      	ldr	r2, [pc, #512]	; (8002944 <HAL_I2C_Init+0x278>)
 8002744:	4293      	cmp	r3, r2
 8002746:	bf94      	ite	ls
 8002748:	2301      	movls	r3, #1
 800274a:	2300      	movhi	r3, #0
 800274c:	b2db      	uxtb	r3, r3
 800274e:	e006      	b.n	800275e <HAL_I2C_Init+0x92>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4a7d      	ldr	r2, [pc, #500]	; (8002948 <HAL_I2C_Init+0x27c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	bf94      	ite	ls
 8002758:	2301      	movls	r3, #1
 800275a:	2300      	movhi	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e0e7      	b.n	8002936 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4a78      	ldr	r2, [pc, #480]	; (800294c <HAL_I2C_Init+0x280>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	0c9b      	lsrs	r3, r3, #18
 8002770:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	430a      	orrs	r2, r1
 8002784:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	4a6a      	ldr	r2, [pc, #424]	; (8002940 <HAL_I2C_Init+0x274>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d802      	bhi.n	80027a0 <HAL_I2C_Init+0xd4>
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	3301      	adds	r3, #1
 800279e:	e009      	b.n	80027b4 <HAL_I2C_Init+0xe8>
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027a6:	fb02 f303 	mul.w	r3, r2, r3
 80027aa:	4a69      	ldr	r2, [pc, #420]	; (8002950 <HAL_I2C_Init+0x284>)
 80027ac:	fba2 2303 	umull	r2, r3, r2, r3
 80027b0:	099b      	lsrs	r3, r3, #6
 80027b2:	3301      	adds	r3, #1
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	430b      	orrs	r3, r1
 80027ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	495c      	ldr	r1, [pc, #368]	; (8002940 <HAL_I2C_Init+0x274>)
 80027d0:	428b      	cmp	r3, r1
 80027d2:	d819      	bhi.n	8002808 <HAL_I2C_Init+0x13c>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1e59      	subs	r1, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	fbb1 f3f3 	udiv	r3, r1, r3
 80027e2:	1c59      	adds	r1, r3, #1
 80027e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027e8:	400b      	ands	r3, r1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <HAL_I2C_Init+0x138>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1e59      	subs	r1, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80027fc:	3301      	adds	r3, #1
 80027fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002802:	e051      	b.n	80028a8 <HAL_I2C_Init+0x1dc>
 8002804:	2304      	movs	r3, #4
 8002806:	e04f      	b.n	80028a8 <HAL_I2C_Init+0x1dc>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d111      	bne.n	8002834 <HAL_I2C_Init+0x168>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	1e58      	subs	r0, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	440b      	add	r3, r1
 800281e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002822:	3301      	adds	r3, #1
 8002824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002828:	2b00      	cmp	r3, #0
 800282a:	bf0c      	ite	eq
 800282c:	2301      	moveq	r3, #1
 800282e:	2300      	movne	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	e012      	b.n	800285a <HAL_I2C_Init+0x18e>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	1e58      	subs	r0, r3, #1
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6859      	ldr	r1, [r3, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	0099      	lsls	r1, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	fbb0 f3f3 	udiv	r3, r0, r3
 800284a:	3301      	adds	r3, #1
 800284c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf0c      	ite	eq
 8002854:	2301      	moveq	r3, #1
 8002856:	2300      	movne	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_I2C_Init+0x196>
 800285e:	2301      	movs	r3, #1
 8002860:	e022      	b.n	80028a8 <HAL_I2C_Init+0x1dc>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10e      	bne.n	8002888 <HAL_I2C_Init+0x1bc>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1e58      	subs	r0, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6859      	ldr	r1, [r3, #4]
 8002872:	460b      	mov	r3, r1
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	440b      	add	r3, r1
 8002878:	fbb0 f3f3 	udiv	r3, r0, r3
 800287c:	3301      	adds	r3, #1
 800287e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002886:	e00f      	b.n	80028a8 <HAL_I2C_Init+0x1dc>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	1e58      	subs	r0, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6859      	ldr	r1, [r3, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	0099      	lsls	r1, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	fbb0 f3f3 	udiv	r3, r0, r3
 800289e:	3301      	adds	r3, #1
 80028a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	6809      	ldr	r1, [r1, #0]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69da      	ldr	r2, [r3, #28]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6911      	ldr	r1, [r2, #16]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68d2      	ldr	r2, [r2, #12]
 80028e2:	4311      	orrs	r1, r2
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	430b      	orrs	r3, r1
 80028ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695a      	ldr	r2, [r3, #20]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0201 	orr.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2220      	movs	r2, #32
 8002922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	000186a0 	.word	0x000186a0
 8002944:	001e847f 	.word	0x001e847f
 8002948:	003d08ff 	.word	0x003d08ff
 800294c:	431bde83 	.word	0x431bde83
 8002950:	10624dd3 	.word	0x10624dd3

08002954 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e272      	b.n	8002e4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 8087 	beq.w	8002a82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002974:	4b92      	ldr	r3, [pc, #584]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 030c 	and.w	r3, r3, #12
 800297c:	2b04      	cmp	r3, #4
 800297e:	d00c      	beq.n	800299a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002980:	4b8f      	ldr	r3, [pc, #572]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 030c 	and.w	r3, r3, #12
 8002988:	2b08      	cmp	r3, #8
 800298a:	d112      	bne.n	80029b2 <HAL_RCC_OscConfig+0x5e>
 800298c:	4b8c      	ldr	r3, [pc, #560]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002998:	d10b      	bne.n	80029b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299a:	4b89      	ldr	r3, [pc, #548]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d06c      	beq.n	8002a80 <HAL_RCC_OscConfig+0x12c>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d168      	bne.n	8002a80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e24c      	b.n	8002e4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ba:	d106      	bne.n	80029ca <HAL_RCC_OscConfig+0x76>
 80029bc:	4b80      	ldr	r3, [pc, #512]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a7f      	ldr	r2, [pc, #508]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 80029c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	e02e      	b.n	8002a28 <HAL_RCC_OscConfig+0xd4>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10c      	bne.n	80029ec <HAL_RCC_OscConfig+0x98>
 80029d2:	4b7b      	ldr	r3, [pc, #492]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a7a      	ldr	r2, [pc, #488]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 80029d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	4b78      	ldr	r3, [pc, #480]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a77      	ldr	r2, [pc, #476]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 80029e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	e01d      	b.n	8002a28 <HAL_RCC_OscConfig+0xd4>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f4:	d10c      	bne.n	8002a10 <HAL_RCC_OscConfig+0xbc>
 80029f6:	4b72      	ldr	r3, [pc, #456]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a71      	ldr	r2, [pc, #452]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 80029fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	4b6f      	ldr	r3, [pc, #444]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a6e      	ldr	r2, [pc, #440]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 8002a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	e00b      	b.n	8002a28 <HAL_RCC_OscConfig+0xd4>
 8002a10:	4b6b      	ldr	r3, [pc, #428]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a6a      	ldr	r2, [pc, #424]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 8002a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1a:	6013      	str	r3, [r2, #0]
 8002a1c:	4b68      	ldr	r3, [pc, #416]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a67      	ldr	r2, [pc, #412]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 8002a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d013      	beq.n	8002a58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7ff fb74 	bl	800211c <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a38:	f7ff fb70 	bl	800211c <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	; 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e200      	b.n	8002e4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4a:	4b5d      	ldr	r3, [pc, #372]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f0      	beq.n	8002a38 <HAL_RCC_OscConfig+0xe4>
 8002a56:	e014      	b.n	8002a82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a58:	f7ff fb60 	bl	800211c <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a60:	f7ff fb5c 	bl	800211c <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b64      	cmp	r3, #100	; 0x64
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e1ec      	b.n	8002e4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a72:	4b53      	ldr	r3, [pc, #332]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0x10c>
 8002a7e:	e000      	b.n	8002a82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d063      	beq.n	8002b56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a8e:	4b4c      	ldr	r3, [pc, #304]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f003 030c 	and.w	r3, r3, #12
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00b      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a9a:	4b49      	ldr	r3, [pc, #292]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f003 030c 	and.w	r3, r3, #12
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d11c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x18c>
 8002aa6:	4b46      	ldr	r3, [pc, #280]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d116      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab2:	4b43      	ldr	r3, [pc, #268]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d005      	beq.n	8002aca <HAL_RCC_OscConfig+0x176>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d001      	beq.n	8002aca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e1c0      	b.n	8002e4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aca:	4b3d      	ldr	r3, [pc, #244]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4939      	ldr	r1, [pc, #228]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ade:	e03a      	b.n	8002b56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d020      	beq.n	8002b2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ae8:	4b36      	ldr	r3, [pc, #216]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aee:	f7ff fb15 	bl	800211c <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af6:	f7ff fb11 	bl	800211c <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e1a1      	b.n	8002e4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b08:	4b2d      	ldr	r3, [pc, #180]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b14:	4b2a      	ldr	r3, [pc, #168]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	4927      	ldr	r1, [pc, #156]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	600b      	str	r3, [r1, #0]
 8002b28:	e015      	b.n	8002b56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b2a:	4b26      	ldr	r3, [pc, #152]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7ff faf4 	bl	800211c <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b38:	f7ff faf0 	bl	800211c <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e180      	b.n	8002e4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4a:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d03a      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d019      	beq.n	8002b9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b6a:	4b17      	ldr	r3, [pc, #92]	; (8002bc8 <HAL_RCC_OscConfig+0x274>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b70:	f7ff fad4 	bl	800211c <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b78:	f7ff fad0 	bl	800211c <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e160      	b.n	8002e4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b96:	2001      	movs	r0, #1
 8002b98:	f000 face 	bl	8003138 <RCC_Delay>
 8002b9c:	e01c      	b.n	8002bd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <HAL_RCC_OscConfig+0x274>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba4:	f7ff faba 	bl	800211c <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002baa:	e00f      	b.n	8002bcc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bac:	f7ff fab6 	bl	800211c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d908      	bls.n	8002bcc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e146      	b.n	8002e4c <HAL_RCC_OscConfig+0x4f8>
 8002bbe:	bf00      	nop
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	42420000 	.word	0x42420000
 8002bc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bcc:	4b92      	ldr	r3, [pc, #584]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1e9      	bne.n	8002bac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80a6 	beq.w	8002d32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be6:	2300      	movs	r3, #0
 8002be8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bea:	4b8b      	ldr	r3, [pc, #556]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10d      	bne.n	8002c12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf6:	4b88      	ldr	r3, [pc, #544]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	4a87      	ldr	r2, [pc, #540]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c00:	61d3      	str	r3, [r2, #28]
 8002c02:	4b85      	ldr	r3, [pc, #532]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	60bb      	str	r3, [r7, #8]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c12:	4b82      	ldr	r3, [pc, #520]	; (8002e1c <HAL_RCC_OscConfig+0x4c8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d118      	bne.n	8002c50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c1e:	4b7f      	ldr	r3, [pc, #508]	; (8002e1c <HAL_RCC_OscConfig+0x4c8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a7e      	ldr	r2, [pc, #504]	; (8002e1c <HAL_RCC_OscConfig+0x4c8>)
 8002c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c2a:	f7ff fa77 	bl	800211c <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c32:	f7ff fa73 	bl	800211c <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b64      	cmp	r3, #100	; 0x64
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e103      	b.n	8002e4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c44:	4b75      	ldr	r3, [pc, #468]	; (8002e1c <HAL_RCC_OscConfig+0x4c8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0f0      	beq.n	8002c32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d106      	bne.n	8002c66 <HAL_RCC_OscConfig+0x312>
 8002c58:	4b6f      	ldr	r3, [pc, #444]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	4a6e      	ldr	r2, [pc, #440]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	6213      	str	r3, [r2, #32]
 8002c64:	e02d      	b.n	8002cc2 <HAL_RCC_OscConfig+0x36e>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10c      	bne.n	8002c88 <HAL_RCC_OscConfig+0x334>
 8002c6e:	4b6a      	ldr	r3, [pc, #424]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	4a69      	ldr	r2, [pc, #420]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	6213      	str	r3, [r2, #32]
 8002c7a:	4b67      	ldr	r3, [pc, #412]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	4a66      	ldr	r2, [pc, #408]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002c80:	f023 0304 	bic.w	r3, r3, #4
 8002c84:	6213      	str	r3, [r2, #32]
 8002c86:	e01c      	b.n	8002cc2 <HAL_RCC_OscConfig+0x36e>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	2b05      	cmp	r3, #5
 8002c8e:	d10c      	bne.n	8002caa <HAL_RCC_OscConfig+0x356>
 8002c90:	4b61      	ldr	r3, [pc, #388]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	4a60      	ldr	r2, [pc, #384]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002c96:	f043 0304 	orr.w	r3, r3, #4
 8002c9a:	6213      	str	r3, [r2, #32]
 8002c9c:	4b5e      	ldr	r3, [pc, #376]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	4a5d      	ldr	r2, [pc, #372]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	6213      	str	r3, [r2, #32]
 8002ca8:	e00b      	b.n	8002cc2 <HAL_RCC_OscConfig+0x36e>
 8002caa:	4b5b      	ldr	r3, [pc, #364]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	4a5a      	ldr	r2, [pc, #360]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002cb0:	f023 0301 	bic.w	r3, r3, #1
 8002cb4:	6213      	str	r3, [r2, #32]
 8002cb6:	4b58      	ldr	r3, [pc, #352]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	4a57      	ldr	r2, [pc, #348]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	f023 0304 	bic.w	r3, r3, #4
 8002cc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d015      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cca:	f7ff fa27 	bl	800211c <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd0:	e00a      	b.n	8002ce8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd2:	f7ff fa23 	bl	800211c <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e0b1      	b.n	8002e4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce8:	4b4b      	ldr	r3, [pc, #300]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0ee      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x37e>
 8002cf4:	e014      	b.n	8002d20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf6:	f7ff fa11 	bl	800211c <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cfc:	e00a      	b.n	8002d14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfe:	f7ff fa0d 	bl	800211c <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e09b      	b.n	8002e4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d14:	4b40      	ldr	r3, [pc, #256]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1ee      	bne.n	8002cfe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d20:	7dfb      	ldrb	r3, [r7, #23]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d105      	bne.n	8002d32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d26:	4b3c      	ldr	r3, [pc, #240]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	4a3b      	ldr	r2, [pc, #236]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 8087 	beq.w	8002e4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d3c:	4b36      	ldr	r3, [pc, #216]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 030c 	and.w	r3, r3, #12
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d061      	beq.n	8002e0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d146      	bne.n	8002dde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d50:	4b33      	ldr	r3, [pc, #204]	; (8002e20 <HAL_RCC_OscConfig+0x4cc>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d56:	f7ff f9e1 	bl	800211c <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d5e:	f7ff f9dd 	bl	800211c <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e06d      	b.n	8002e4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d70:	4b29      	ldr	r3, [pc, #164]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1f0      	bne.n	8002d5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d84:	d108      	bne.n	8002d98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d86:	4b24      	ldr	r3, [pc, #144]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	4921      	ldr	r1, [pc, #132]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d98:	4b1f      	ldr	r3, [pc, #124]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a19      	ldr	r1, [r3, #32]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	430b      	orrs	r3, r1
 8002daa:	491b      	ldr	r1, [pc, #108]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db0:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <HAL_RCC_OscConfig+0x4cc>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db6:	f7ff f9b1 	bl	800211c <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbe:	f7ff f9ad 	bl	800211c <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e03d      	b.n	8002e4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dd0:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f0      	beq.n	8002dbe <HAL_RCC_OscConfig+0x46a>
 8002ddc:	e035      	b.n	8002e4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dde:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <HAL_RCC_OscConfig+0x4cc>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de4:	f7ff f99a 	bl	800211c <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dec:	f7ff f996 	bl	800211c <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e026      	b.n	8002e4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dfe:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <HAL_RCC_OscConfig+0x4c4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x498>
 8002e0a:	e01e      	b.n	8002e4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d107      	bne.n	8002e24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e019      	b.n	8002e4c <HAL_RCC_OscConfig+0x4f8>
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40007000 	.word	0x40007000
 8002e20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_RCC_OscConfig+0x500>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d106      	bne.n	8002e46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d001      	beq.n	8002e4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40021000 	.word	0x40021000

08002e58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0d0      	b.n	800300e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e6c:	4b6a      	ldr	r3, [pc, #424]	; (8003018 <HAL_RCC_ClockConfig+0x1c0>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d910      	bls.n	8002e9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7a:	4b67      	ldr	r3, [pc, #412]	; (8003018 <HAL_RCC_ClockConfig+0x1c0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f023 0207 	bic.w	r2, r3, #7
 8002e82:	4965      	ldr	r1, [pc, #404]	; (8003018 <HAL_RCC_ClockConfig+0x1c0>)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8a:	4b63      	ldr	r3, [pc, #396]	; (8003018 <HAL_RCC_ClockConfig+0x1c0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e0b8      	b.n	800300e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d020      	beq.n	8002eea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eb4:	4b59      	ldr	r3, [pc, #356]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4a58      	ldr	r2, [pc, #352]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002eba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ebe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d005      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ecc:	4b53      	ldr	r3, [pc, #332]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	4a52      	ldr	r2, [pc, #328]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002ed2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ed6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed8:	4b50      	ldr	r3, [pc, #320]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	494d      	ldr	r1, [pc, #308]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d040      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d107      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efe:	4b47      	ldr	r3, [pc, #284]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d115      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e07f      	b.n	800300e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d107      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f16:	4b41      	ldr	r3, [pc, #260]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d109      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e073      	b.n	800300e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f26:	4b3d      	ldr	r3, [pc, #244]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e06b      	b.n	800300e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f36:	4b39      	ldr	r3, [pc, #228]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f023 0203 	bic.w	r2, r3, #3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4936      	ldr	r1, [pc, #216]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f48:	f7ff f8e8 	bl	800211c <HAL_GetTick>
 8002f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4e:	e00a      	b.n	8002f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f50:	f7ff f8e4 	bl	800211c <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e053      	b.n	800300e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f66:	4b2d      	ldr	r3, [pc, #180]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f003 020c 	and.w	r2, r3, #12
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d1eb      	bne.n	8002f50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f78:	4b27      	ldr	r3, [pc, #156]	; (8003018 <HAL_RCC_ClockConfig+0x1c0>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d210      	bcs.n	8002fa8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b24      	ldr	r3, [pc, #144]	; (8003018 <HAL_RCC_ClockConfig+0x1c0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 0207 	bic.w	r2, r3, #7
 8002f8e:	4922      	ldr	r1, [pc, #136]	; (8003018 <HAL_RCC_ClockConfig+0x1c0>)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f96:	4b20      	ldr	r3, [pc, #128]	; (8003018 <HAL_RCC_ClockConfig+0x1c0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e032      	b.n	800300e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d008      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb4:	4b19      	ldr	r3, [pc, #100]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	4916      	ldr	r1, [pc, #88]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d009      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fd2:	4b12      	ldr	r3, [pc, #72]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	490e      	ldr	r1, [pc, #56]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fe6:	f000 f821 	bl	800302c <HAL_RCC_GetSysClockFreq>
 8002fea:	4602      	mov	r2, r0
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	490a      	ldr	r1, [pc, #40]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff8:	5ccb      	ldrb	r3, [r1, r3]
 8002ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffe:	4a09      	ldr	r2, [pc, #36]	; (8003024 <HAL_RCC_ClockConfig+0x1cc>)
 8003000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003002:	4b09      	ldr	r3, [pc, #36]	; (8003028 <HAL_RCC_ClockConfig+0x1d0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff f846 	bl	8002098 <HAL_InitTick>

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40022000 	.word	0x40022000
 800301c:	40021000 	.word	0x40021000
 8003020:	08009340 	.word	0x08009340
 8003024:	20000008 	.word	0x20000008
 8003028:	2000000c 	.word	0x2000000c

0800302c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	2300      	movs	r3, #0
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	2300      	movs	r3, #0
 800303c:	617b      	str	r3, [r7, #20]
 800303e:	2300      	movs	r3, #0
 8003040:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003042:	2300      	movs	r3, #0
 8003044:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003046:	4b1e      	ldr	r3, [pc, #120]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b04      	cmp	r3, #4
 8003054:	d002      	beq.n	800305c <HAL_RCC_GetSysClockFreq+0x30>
 8003056:	2b08      	cmp	r3, #8
 8003058:	d003      	beq.n	8003062 <HAL_RCC_GetSysClockFreq+0x36>
 800305a:	e027      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800305c:	4b19      	ldr	r3, [pc, #100]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800305e:	613b      	str	r3, [r7, #16]
      break;
 8003060:	e027      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	0c9b      	lsrs	r3, r3, #18
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	4a17      	ldr	r2, [pc, #92]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800306c:	5cd3      	ldrb	r3, [r2, r3]
 800306e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d010      	beq.n	800309c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800307a:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	0c5b      	lsrs	r3, r3, #17
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	4a11      	ldr	r2, [pc, #68]	; (80030cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003086:	5cd3      	ldrb	r3, [r2, r3]
 8003088:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a0d      	ldr	r2, [pc, #52]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800308e:	fb03 f202 	mul.w	r2, r3, r2
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	fbb2 f3f3 	udiv	r3, r2, r3
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	e004      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a0c      	ldr	r2, [pc, #48]	; (80030d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030a0:	fb02 f303 	mul.w	r3, r2, r3
 80030a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	613b      	str	r3, [r7, #16]
      break;
 80030aa:	e002      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030ac:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ae:	613b      	str	r3, [r7, #16]
      break;
 80030b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030b2:	693b      	ldr	r3, [r7, #16]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	371c      	adds	r7, #28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40021000 	.word	0x40021000
 80030c4:	007a1200 	.word	0x007a1200
 80030c8:	08009358 	.word	0x08009358
 80030cc:	08009368 	.word	0x08009368
 80030d0:	003d0900 	.word	0x003d0900

080030d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d8:	4b02      	ldr	r3, [pc, #8]	; (80030e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80030da:	681b      	ldr	r3, [r3, #0]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr
 80030e4:	20000008 	.word	0x20000008

080030e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030ec:	f7ff fff2 	bl	80030d4 <HAL_RCC_GetHCLKFreq>
 80030f0:	4602      	mov	r2, r0
 80030f2:	4b05      	ldr	r3, [pc, #20]	; (8003108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	0a1b      	lsrs	r3, r3, #8
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	4903      	ldr	r1, [pc, #12]	; (800310c <HAL_RCC_GetPCLK1Freq+0x24>)
 80030fe:	5ccb      	ldrb	r3, [r1, r3]
 8003100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003104:	4618      	mov	r0, r3
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40021000 	.word	0x40021000
 800310c:	08009350 	.word	0x08009350

08003110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003114:	f7ff ffde 	bl	80030d4 <HAL_RCC_GetHCLKFreq>
 8003118:	4602      	mov	r2, r0
 800311a:	4b05      	ldr	r3, [pc, #20]	; (8003130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	0adb      	lsrs	r3, r3, #11
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	4903      	ldr	r1, [pc, #12]	; (8003134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003126:	5ccb      	ldrb	r3, [r1, r3]
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800312c:	4618      	mov	r0, r3
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40021000 	.word	0x40021000
 8003134:	08009350 	.word	0x08009350

08003138 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003140:	4b0a      	ldr	r3, [pc, #40]	; (800316c <RCC_Delay+0x34>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a0a      	ldr	r2, [pc, #40]	; (8003170 <RCC_Delay+0x38>)
 8003146:	fba2 2303 	umull	r2, r3, r2, r3
 800314a:	0a5b      	lsrs	r3, r3, #9
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	fb02 f303 	mul.w	r3, r2, r3
 8003152:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003154:	bf00      	nop
  }
  while (Delay --);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	1e5a      	subs	r2, r3, #1
 800315a:	60fa      	str	r2, [r7, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1f9      	bne.n	8003154 <RCC_Delay+0x1c>
}
 8003160:	bf00      	nop
 8003162:	bf00      	nop
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr
 800316c:	20000008 	.word	0x20000008
 8003170:	10624dd3 	.word	0x10624dd3

08003174 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e076      	b.n	8003274 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	2b00      	cmp	r3, #0
 800318c:	d108      	bne.n	80031a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003196:	d009      	beq.n	80031ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	61da      	str	r2, [r3, #28]
 800319e:	e005      	b.n	80031ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d106      	bne.n	80031cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7fe fd5a 	bl	8001c80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800321c:	431a      	orrs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003230:	ea42 0103 	orr.w	r1, r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003238:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	0c1a      	lsrs	r2, r3, #16
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f002 0204 	and.w	r2, r2, #4
 8003252:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	69da      	ldr	r2, [r3, #28]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003262:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	4613      	mov	r3, r2
 800328a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <HAL_SPI_Transmit+0x22>
 800329a:	2302      	movs	r3, #2
 800329c:	e12d      	b.n	80034fa <HAL_SPI_Transmit+0x27e>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032a6:	f7fe ff39 	bl	800211c <HAL_GetTick>
 80032aa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032ac:	88fb      	ldrh	r3, [r7, #6]
 80032ae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d002      	beq.n	80032c2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032bc:	2302      	movs	r3, #2
 80032be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032c0:	e116      	b.n	80034f0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <HAL_SPI_Transmit+0x52>
 80032c8:	88fb      	ldrh	r3, [r7, #6]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d102      	bne.n	80032d4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032d2:	e10d      	b.n	80034f0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2203      	movs	r2, #3
 80032d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	88fa      	ldrh	r2, [r7, #6]
 80032ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	88fa      	ldrh	r2, [r7, #6]
 80032f2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800331a:	d10f      	bne.n	800333c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800332a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800333a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003346:	2b40      	cmp	r3, #64	; 0x40
 8003348:	d007      	beq.n	800335a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003358:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003362:	d14f      	bne.n	8003404 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <HAL_SPI_Transmit+0xf6>
 800336c:	8afb      	ldrh	r3, [r7, #22]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d142      	bne.n	80033f8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	881a      	ldrh	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	1c9a      	adds	r2, r3, #2
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003396:	e02f      	b.n	80033f8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d112      	bne.n	80033cc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	881a      	ldrh	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	1c9a      	adds	r2, r3, #2
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80033ca:	e015      	b.n	80033f8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033cc:	f7fe fea6 	bl	800211c <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d803      	bhi.n	80033e4 <HAL_SPI_Transmit+0x168>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e2:	d102      	bne.n	80033ea <HAL_SPI_Transmit+0x16e>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d106      	bne.n	80033f8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80033f6:	e07b      	b.n	80034f0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1ca      	bne.n	8003398 <HAL_SPI_Transmit+0x11c>
 8003402:	e050      	b.n	80034a6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d002      	beq.n	8003412 <HAL_SPI_Transmit+0x196>
 800340c:	8afb      	ldrh	r3, [r7, #22]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d144      	bne.n	800349c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	330c      	adds	r3, #12
 800341c:	7812      	ldrb	r2, [r2, #0]
 800341e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800342e:	b29b      	uxth	r3, r3
 8003430:	3b01      	subs	r3, #1
 8003432:	b29a      	uxth	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003438:	e030      	b.n	800349c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b02      	cmp	r3, #2
 8003446:	d113      	bne.n	8003470 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	330c      	adds	r3, #12
 8003452:	7812      	ldrb	r2, [r2, #0]
 8003454:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003464:	b29b      	uxth	r3, r3
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	86da      	strh	r2, [r3, #54]	; 0x36
 800346e:	e015      	b.n	800349c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003470:	f7fe fe54 	bl	800211c <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d803      	bhi.n	8003488 <HAL_SPI_Transmit+0x20c>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003486:	d102      	bne.n	800348e <HAL_SPI_Transmit+0x212>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d106      	bne.n	800349c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800349a:	e029      	b.n	80034f0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1c9      	bne.n	800343a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	6839      	ldr	r1, [r7, #0]
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 fbd8 	bl	8003c60 <SPI_EndRxTxTransaction>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2220      	movs	r2, #32
 80034ba:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10a      	bne.n	80034da <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034c4:	2300      	movs	r3, #0
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	613b      	str	r3, [r7, #16]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	77fb      	strb	r3, [r7, #31]
 80034e6:	e003      	b.n	80034f0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3720      	adds	r7, #32
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b088      	sub	sp, #32
 8003506:	af02      	add	r7, sp, #8
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b01      	cmp	r3, #1
 8003520:	d002      	beq.n	8003528 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003522:	2302      	movs	r3, #2
 8003524:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003526:	e0fb      	b.n	8003720 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003530:	d112      	bne.n	8003558 <HAL_SPI_Receive+0x56>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10e      	bne.n	8003558 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2204      	movs	r2, #4
 800353e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003542:	88fa      	ldrh	r2, [r7, #6]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	4613      	mov	r3, r2
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	68b9      	ldr	r1, [r7, #8]
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 f8ef 	bl	8003732 <HAL_SPI_TransmitReceive>
 8003554:	4603      	mov	r3, r0
 8003556:	e0e8      	b.n	800372a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_SPI_Receive+0x64>
 8003562:	2302      	movs	r3, #2
 8003564:	e0e1      	b.n	800372a <HAL_SPI_Receive+0x228>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800356e:	f7fe fdd5 	bl	800211c <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <HAL_SPI_Receive+0x7e>
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d102      	bne.n	8003586 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003584:	e0cc      	b.n	8003720 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2204      	movs	r2, #4
 800358a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	88fa      	ldrh	r2, [r7, #6]
 800359e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	88fa      	ldrh	r2, [r7, #6]
 80035a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035cc:	d10f      	bne.n	80035ee <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f8:	2b40      	cmp	r3, #64	; 0x40
 80035fa:	d007      	beq.n	800360c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800360a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d16a      	bne.n	80036ea <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003614:	e032      	b.n	800367c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b01      	cmp	r3, #1
 8003622:	d115      	bne.n	8003650 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f103 020c 	add.w	r2, r3, #12
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003630:	7812      	ldrb	r2, [r2, #0]
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003644:	b29b      	uxth	r3, r3
 8003646:	3b01      	subs	r3, #1
 8003648:	b29a      	uxth	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800364e:	e015      	b.n	800367c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003650:	f7fe fd64 	bl	800211c <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	429a      	cmp	r2, r3
 800365e:	d803      	bhi.n	8003668 <HAL_SPI_Receive+0x166>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003666:	d102      	bne.n	800366e <HAL_SPI_Receive+0x16c>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800367a:	e051      	b.n	8003720 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003680:	b29b      	uxth	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1c7      	bne.n	8003616 <HAL_SPI_Receive+0x114>
 8003686:	e035      	b.n	80036f4 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b01      	cmp	r3, #1
 8003694:	d113      	bne.n	80036be <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a0:	b292      	uxth	r2, r2
 80036a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a8:	1c9a      	adds	r2, r3, #2
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036bc:	e015      	b.n	80036ea <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036be:	f7fe fd2d 	bl	800211c <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d803      	bhi.n	80036d6 <HAL_SPI_Receive+0x1d4>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d4:	d102      	bne.n	80036dc <HAL_SPI_Receive+0x1da>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d106      	bne.n	80036ea <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80036e8:	e01a      	b.n	8003720 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1c9      	bne.n	8003688 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	6839      	ldr	r1, [r7, #0]
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 fa5f 	bl	8003bbc <SPI_EndRxTransaction>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	75fb      	strb	r3, [r7, #23]
 8003716:	e003      	b.n	8003720 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003728:	7dfb      	ldrb	r3, [r7, #23]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b08c      	sub	sp, #48	; 0x30
 8003736:	af00      	add	r7, sp, #0
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003740:	2301      	movs	r3, #1
 8003742:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_SPI_TransmitReceive+0x26>
 8003754:	2302      	movs	r3, #2
 8003756:	e198      	b.n	8003a8a <HAL_SPI_TransmitReceive+0x358>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003760:	f7fe fcdc 	bl	800211c <HAL_GetTick>
 8003764:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800376c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003776:	887b      	ldrh	r3, [r7, #2]
 8003778:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800377a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800377e:	2b01      	cmp	r3, #1
 8003780:	d00f      	beq.n	80037a2 <HAL_SPI_TransmitReceive+0x70>
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003788:	d107      	bne.n	800379a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d103      	bne.n	800379a <HAL_SPI_TransmitReceive+0x68>
 8003792:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003796:	2b04      	cmp	r3, #4
 8003798:	d003      	beq.n	80037a2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800379a:	2302      	movs	r3, #2
 800379c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037a0:	e16d      	b.n	8003a7e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <HAL_SPI_TransmitReceive+0x82>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <HAL_SPI_TransmitReceive+0x82>
 80037ae:	887b      	ldrh	r3, [r7, #2]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d103      	bne.n	80037bc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037ba:	e160      	b.n	8003a7e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d003      	beq.n	80037d0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2205      	movs	r2, #5
 80037cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	887a      	ldrh	r2, [r7, #2]
 80037e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	887a      	ldrh	r2, [r7, #2]
 80037e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	887a      	ldrh	r2, [r7, #2]
 80037f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	887a      	ldrh	r2, [r7, #2]
 80037f8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003810:	2b40      	cmp	r3, #64	; 0x40
 8003812:	d007      	beq.n	8003824 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003822:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800382c:	d17c      	bne.n	8003928 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <HAL_SPI_TransmitReceive+0x10a>
 8003836:	8b7b      	ldrh	r3, [r7, #26]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d16a      	bne.n	8003912 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	881a      	ldrh	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	1c9a      	adds	r2, r3, #2
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003860:	e057      	b.n	8003912 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b02      	cmp	r3, #2
 800386e:	d11b      	bne.n	80038a8 <HAL_SPI_TransmitReceive+0x176>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d016      	beq.n	80038a8 <HAL_SPI_TransmitReceive+0x176>
 800387a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387c:	2b01      	cmp	r3, #1
 800387e:	d113      	bne.n	80038a8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003884:	881a      	ldrh	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	1c9a      	adds	r2, r3, #2
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800389a:	b29b      	uxth	r3, r3
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d119      	bne.n	80038ea <HAL_SPI_TransmitReceive+0x1b8>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d014      	beq.n	80038ea <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	b292      	uxth	r2, r2
 80038cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	1c9a      	adds	r2, r3, #2
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038dc:	b29b      	uxth	r3, r3
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038e6:	2301      	movs	r3, #1
 80038e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038ea:	f7fe fc17 	bl	800211c <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d80b      	bhi.n	8003912 <HAL_SPI_TransmitReceive+0x1e0>
 80038fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003900:	d007      	beq.n	8003912 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003910:	e0b5      	b.n	8003a7e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003916:	b29b      	uxth	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1a2      	bne.n	8003862 <HAL_SPI_TransmitReceive+0x130>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003920:	b29b      	uxth	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d19d      	bne.n	8003862 <HAL_SPI_TransmitReceive+0x130>
 8003926:	e080      	b.n	8003a2a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <HAL_SPI_TransmitReceive+0x204>
 8003930:	8b7b      	ldrh	r3, [r7, #26]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d16f      	bne.n	8003a16 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	330c      	adds	r3, #12
 8003940:	7812      	ldrb	r2, [r2, #0]
 8003942:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003952:	b29b      	uxth	r3, r3
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800395c:	e05b      	b.n	8003a16 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b02      	cmp	r3, #2
 800396a:	d11c      	bne.n	80039a6 <HAL_SPI_TransmitReceive+0x274>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d017      	beq.n	80039a6 <HAL_SPI_TransmitReceive+0x274>
 8003976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003978:	2b01      	cmp	r3, #1
 800397a:	d114      	bne.n	80039a6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	330c      	adds	r3, #12
 8003986:	7812      	ldrb	r2, [r2, #0]
 8003988:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003998:	b29b      	uxth	r3, r3
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d119      	bne.n	80039e8 <HAL_SPI_TransmitReceive+0x2b6>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d014      	beq.n	80039e8 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039e4:	2301      	movs	r3, #1
 80039e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039e8:	f7fe fb98 	bl	800211c <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d803      	bhi.n	8003a00 <HAL_SPI_TransmitReceive+0x2ce>
 80039f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fe:	d102      	bne.n	8003a06 <HAL_SPI_TransmitReceive+0x2d4>
 8003a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d107      	bne.n	8003a16 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003a14:	e033      	b.n	8003a7e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d19e      	bne.n	800395e <HAL_SPI_TransmitReceive+0x22c>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d199      	bne.n	800395e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 f916 	bl	8003c60 <SPI_EndRxTxTransaction>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d006      	beq.n	8003a48 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2220      	movs	r2, #32
 8003a44:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a46:	e01a      	b.n	8003a7e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10a      	bne.n	8003a66 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a50:	2300      	movs	r3, #0
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a74:	e003      	b.n	8003a7e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3730      	adds	r7, #48	; 0x30
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aa0:	b2db      	uxtb	r3, r3
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b088      	sub	sp, #32
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	603b      	str	r3, [r7, #0]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003abc:	f7fe fb2e 	bl	800211c <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	4413      	add	r3, r2
 8003aca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003acc:	f7fe fb26 	bl	800211c <HAL_GetTick>
 8003ad0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ad2:	4b39      	ldr	r3, [pc, #228]	; (8003bb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	015b      	lsls	r3, r3, #5
 8003ad8:	0d1b      	lsrs	r3, r3, #20
 8003ada:	69fa      	ldr	r2, [r7, #28]
 8003adc:	fb02 f303 	mul.w	r3, r2, r3
 8003ae0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ae2:	e054      	b.n	8003b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aea:	d050      	beq.n	8003b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003aec:	f7fe fb16 	bl	800211c <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	69fa      	ldr	r2, [r7, #28]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d902      	bls.n	8003b02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d13d      	bne.n	8003b7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b1a:	d111      	bne.n	8003b40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b24:	d004      	beq.n	8003b30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2e:	d107      	bne.n	8003b40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b48:	d10f      	bne.n	8003b6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e017      	b.n	8003bae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4013      	ands	r3, r2
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	bf0c      	ite	eq
 8003b9e:	2301      	moveq	r3, #1
 8003ba0:	2300      	movne	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d19b      	bne.n	8003ae4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3720      	adds	r7, #32
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000008 	.word	0x20000008

08003bbc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bd0:	d111      	bne.n	8003bf6 <SPI_EndRxTransaction+0x3a>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bda:	d004      	beq.n	8003be6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be4:	d107      	bne.n	8003bf6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bf4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bfe:	d117      	bne.n	8003c30 <SPI_EndRxTransaction+0x74>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c08:	d112      	bne.n	8003c30 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2200      	movs	r2, #0
 8003c12:	2101      	movs	r1, #1
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f7ff ff49 	bl	8003aac <SPI_WaitFlagStateUntilTimeout>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d01a      	beq.n	8003c56 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c24:	f043 0220 	orr.w	r2, r3, #32
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e013      	b.n	8003c58 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2200      	movs	r2, #0
 8003c38:	2180      	movs	r1, #128	; 0x80
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f7ff ff36 	bl	8003aac <SPI_WaitFlagStateUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d007      	beq.n	8003c56 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4a:	f043 0220 	orr.w	r2, r3, #32
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e000      	b.n	8003c58 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af02      	add	r7, sp, #8
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2200      	movs	r2, #0
 8003c74:	2180      	movs	r1, #128	; 0x80
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f7ff ff18 	bl	8003aac <SPI_WaitFlagStateUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d007      	beq.n	8003c92 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c86:	f043 0220 	orr.w	r2, r3, #32
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e000      	b.n	8003c94 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e041      	b.n	8003d32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d106      	bne.n	8003cc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fe f826 	bl	8001d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4610      	mov	r0, r2
 8003cdc:	f000 fb3a 	bl	8004354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b082      	sub	sp, #8
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e041      	b.n	8003dd0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d106      	bne.n	8003d66 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f839 	bl	8003dd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	3304      	adds	r3, #4
 8003d76:	4619      	mov	r1, r3
 8003d78:	4610      	mov	r0, r2
 8003d7a:	f000 faeb 	bl	8004354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc80      	pop	{r7}
 8003de8:	4770      	bx	lr
	...

08003dec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d109      	bne.n	8003e10 <HAL_TIM_PWM_Start+0x24>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	bf14      	ite	ne
 8003e08:	2301      	movne	r3, #1
 8003e0a:	2300      	moveq	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	e022      	b.n	8003e56 <HAL_TIM_PWM_Start+0x6a>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d109      	bne.n	8003e2a <HAL_TIM_PWM_Start+0x3e>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	bf14      	ite	ne
 8003e22:	2301      	movne	r3, #1
 8003e24:	2300      	moveq	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	e015      	b.n	8003e56 <HAL_TIM_PWM_Start+0x6a>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d109      	bne.n	8003e44 <HAL_TIM_PWM_Start+0x58>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	bf14      	ite	ne
 8003e3c:	2301      	movne	r3, #1
 8003e3e:	2300      	moveq	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	e008      	b.n	8003e56 <HAL_TIM_PWM_Start+0x6a>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	bf14      	ite	ne
 8003e50:	2301      	movne	r3, #1
 8003e52:	2300      	moveq	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e072      	b.n	8003f44 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d104      	bne.n	8003e6e <HAL_TIM_PWM_Start+0x82>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e6c:	e013      	b.n	8003e96 <HAL_TIM_PWM_Start+0xaa>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d104      	bne.n	8003e7e <HAL_TIM_PWM_Start+0x92>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e7c:	e00b      	b.n	8003e96 <HAL_TIM_PWM_Start+0xaa>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d104      	bne.n	8003e8e <HAL_TIM_PWM_Start+0xa2>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e8c:	e003      	b.n	8003e96 <HAL_TIM_PWM_Start+0xaa>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2202      	movs	r2, #2
 8003e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	6839      	ldr	r1, [r7, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fd14 	bl	80048cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a28      	ldr	r2, [pc, #160]	; (8003f4c <HAL_TIM_PWM_Start+0x160>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d004      	beq.n	8003eb8 <HAL_TIM_PWM_Start+0xcc>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a27      	ldr	r2, [pc, #156]	; (8003f50 <HAL_TIM_PWM_Start+0x164>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d101      	bne.n	8003ebc <HAL_TIM_PWM_Start+0xd0>
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e000      	b.n	8003ebe <HAL_TIM_PWM_Start+0xd2>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d007      	beq.n	8003ed2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ed0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a1d      	ldr	r2, [pc, #116]	; (8003f4c <HAL_TIM_PWM_Start+0x160>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d018      	beq.n	8003f0e <HAL_TIM_PWM_Start+0x122>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a1b      	ldr	r2, [pc, #108]	; (8003f50 <HAL_TIM_PWM_Start+0x164>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d013      	beq.n	8003f0e <HAL_TIM_PWM_Start+0x122>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eee:	d00e      	beq.n	8003f0e <HAL_TIM_PWM_Start+0x122>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a17      	ldr	r2, [pc, #92]	; (8003f54 <HAL_TIM_PWM_Start+0x168>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d009      	beq.n	8003f0e <HAL_TIM_PWM_Start+0x122>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a16      	ldr	r2, [pc, #88]	; (8003f58 <HAL_TIM_PWM_Start+0x16c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d004      	beq.n	8003f0e <HAL_TIM_PWM_Start+0x122>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a14      	ldr	r2, [pc, #80]	; (8003f5c <HAL_TIM_PWM_Start+0x170>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d111      	bne.n	8003f32 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2b06      	cmp	r3, #6
 8003f1e:	d010      	beq.n	8003f42 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0201 	orr.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f30:	e007      	b.n	8003f42 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0201 	orr.w	r2, r2, #1
 8003f40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40012c00 	.word	0x40012c00
 8003f50:	40013400 	.word	0x40013400
 8003f54:	40000400 	.word	0x40000400
 8003f58:	40000800 	.word	0x40000800
 8003f5c:	40000c00 	.word	0x40000c00

08003f60 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	6839      	ldr	r1, [r7, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 fcaa 	bl	80048cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a2e      	ldr	r2, [pc, #184]	; (8004038 <HAL_TIM_PWM_Stop+0xd8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d004      	beq.n	8003f8c <HAL_TIM_PWM_Stop+0x2c>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a2d      	ldr	r2, [pc, #180]	; (800403c <HAL_TIM_PWM_Stop+0xdc>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d101      	bne.n	8003f90 <HAL_TIM_PWM_Stop+0x30>
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e000      	b.n	8003f92 <HAL_TIM_PWM_Stop+0x32>
 8003f90:	2300      	movs	r3, #0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d017      	beq.n	8003fc6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6a1a      	ldr	r2, [r3, #32]
 8003f9c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10f      	bne.n	8003fc6 <HAL_TIM_PWM_Stop+0x66>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6a1a      	ldr	r2, [r3, #32]
 8003fac:	f240 4344 	movw	r3, #1092	; 0x444
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d107      	bne.n	8003fc6 <HAL_TIM_PWM_Stop+0x66>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6a1a      	ldr	r2, [r3, #32]
 8003fcc:	f241 1311 	movw	r3, #4369	; 0x1111
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10f      	bne.n	8003ff6 <HAL_TIM_PWM_Stop+0x96>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6a1a      	ldr	r2, [r3, #32]
 8003fdc:	f240 4344 	movw	r3, #1092	; 0x444
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d107      	bne.n	8003ff6 <HAL_TIM_PWM_Stop+0x96>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0201 	bic.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d104      	bne.n	8004006 <HAL_TIM_PWM_Stop+0xa6>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004004:	e013      	b.n	800402e <HAL_TIM_PWM_Stop+0xce>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b04      	cmp	r3, #4
 800400a:	d104      	bne.n	8004016 <HAL_TIM_PWM_Stop+0xb6>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004014:	e00b      	b.n	800402e <HAL_TIM_PWM_Stop+0xce>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b08      	cmp	r3, #8
 800401a:	d104      	bne.n	8004026 <HAL_TIM_PWM_Stop+0xc6>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004024:	e003      	b.n	800402e <HAL_TIM_PWM_Stop+0xce>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40012c00 	.word	0x40012c00
 800403c:	40013400 	.word	0x40013400

08004040 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004056:	2b01      	cmp	r3, #1
 8004058:	d101      	bne.n	800405e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800405a:	2302      	movs	r3, #2
 800405c:	e0ae      	b.n	80041bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b0c      	cmp	r3, #12
 800406a:	f200 809f 	bhi.w	80041ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800406e:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004074:	080040a9 	.word	0x080040a9
 8004078:	080041ad 	.word	0x080041ad
 800407c:	080041ad 	.word	0x080041ad
 8004080:	080041ad 	.word	0x080041ad
 8004084:	080040e9 	.word	0x080040e9
 8004088:	080041ad 	.word	0x080041ad
 800408c:	080041ad 	.word	0x080041ad
 8004090:	080041ad 	.word	0x080041ad
 8004094:	0800412b 	.word	0x0800412b
 8004098:	080041ad 	.word	0x080041ad
 800409c:	080041ad 	.word	0x080041ad
 80040a0:	080041ad 	.word	0x080041ad
 80040a4:	0800416b 	.word	0x0800416b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68b9      	ldr	r1, [r7, #8]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 f9ca 	bl	8004448 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699a      	ldr	r2, [r3, #24]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0208 	orr.w	r2, r2, #8
 80040c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0204 	bic.w	r2, r2, #4
 80040d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6999      	ldr	r1, [r3, #24]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	619a      	str	r2, [r3, #24]
      break;
 80040e6:	e064      	b.n	80041b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68b9      	ldr	r1, [r7, #8]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 fa1a 	bl	8004528 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699a      	ldr	r2, [r3, #24]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699a      	ldr	r2, [r3, #24]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6999      	ldr	r1, [r3, #24]
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	021a      	lsls	r2, r3, #8
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	619a      	str	r2, [r3, #24]
      break;
 8004128:	e043      	b.n	80041b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fa6d 	bl	8004610 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	69da      	ldr	r2, [r3, #28]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 0208 	orr.w	r2, r2, #8
 8004144:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69da      	ldr	r2, [r3, #28]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0204 	bic.w	r2, r2, #4
 8004154:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	69d9      	ldr	r1, [r3, #28]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	691a      	ldr	r2, [r3, #16]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	61da      	str	r2, [r3, #28]
      break;
 8004168:	e023      	b.n	80041b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68b9      	ldr	r1, [r7, #8]
 8004170:	4618      	mov	r0, r3
 8004172:	f000 fac1 	bl	80046f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69da      	ldr	r2, [r3, #28]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69da      	ldr	r2, [r3, #28]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69d9      	ldr	r1, [r3, #28]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	021a      	lsls	r2, r3, #8
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	61da      	str	r2, [r3, #28]
      break;
 80041aa:	e002      	b.n	80041b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	75fb      	strb	r3, [r7, #23]
      break;
 80041b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <HAL_TIM_ConfigClockSource+0x1c>
 80041dc:	2302      	movs	r3, #2
 80041de:	e0b4      	b.n	800434a <HAL_TIM_ConfigClockSource+0x186>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004206:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004218:	d03e      	beq.n	8004298 <HAL_TIM_ConfigClockSource+0xd4>
 800421a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800421e:	f200 8087 	bhi.w	8004330 <HAL_TIM_ConfigClockSource+0x16c>
 8004222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004226:	f000 8086 	beq.w	8004336 <HAL_TIM_ConfigClockSource+0x172>
 800422a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800422e:	d87f      	bhi.n	8004330 <HAL_TIM_ConfigClockSource+0x16c>
 8004230:	2b70      	cmp	r3, #112	; 0x70
 8004232:	d01a      	beq.n	800426a <HAL_TIM_ConfigClockSource+0xa6>
 8004234:	2b70      	cmp	r3, #112	; 0x70
 8004236:	d87b      	bhi.n	8004330 <HAL_TIM_ConfigClockSource+0x16c>
 8004238:	2b60      	cmp	r3, #96	; 0x60
 800423a:	d050      	beq.n	80042de <HAL_TIM_ConfigClockSource+0x11a>
 800423c:	2b60      	cmp	r3, #96	; 0x60
 800423e:	d877      	bhi.n	8004330 <HAL_TIM_ConfigClockSource+0x16c>
 8004240:	2b50      	cmp	r3, #80	; 0x50
 8004242:	d03c      	beq.n	80042be <HAL_TIM_ConfigClockSource+0xfa>
 8004244:	2b50      	cmp	r3, #80	; 0x50
 8004246:	d873      	bhi.n	8004330 <HAL_TIM_ConfigClockSource+0x16c>
 8004248:	2b40      	cmp	r3, #64	; 0x40
 800424a:	d058      	beq.n	80042fe <HAL_TIM_ConfigClockSource+0x13a>
 800424c:	2b40      	cmp	r3, #64	; 0x40
 800424e:	d86f      	bhi.n	8004330 <HAL_TIM_ConfigClockSource+0x16c>
 8004250:	2b30      	cmp	r3, #48	; 0x30
 8004252:	d064      	beq.n	800431e <HAL_TIM_ConfigClockSource+0x15a>
 8004254:	2b30      	cmp	r3, #48	; 0x30
 8004256:	d86b      	bhi.n	8004330 <HAL_TIM_ConfigClockSource+0x16c>
 8004258:	2b20      	cmp	r3, #32
 800425a:	d060      	beq.n	800431e <HAL_TIM_ConfigClockSource+0x15a>
 800425c:	2b20      	cmp	r3, #32
 800425e:	d867      	bhi.n	8004330 <HAL_TIM_ConfigClockSource+0x16c>
 8004260:	2b00      	cmp	r3, #0
 8004262:	d05c      	beq.n	800431e <HAL_TIM_ConfigClockSource+0x15a>
 8004264:	2b10      	cmp	r3, #16
 8004266:	d05a      	beq.n	800431e <HAL_TIM_ConfigClockSource+0x15a>
 8004268:	e062      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800427a:	f000 fb08 	bl	800488e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800428c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	609a      	str	r2, [r3, #8]
      break;
 8004296:	e04f      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042a8:	f000 faf1 	bl	800488e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689a      	ldr	r2, [r3, #8]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042ba:	609a      	str	r2, [r3, #8]
      break;
 80042bc:	e03c      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ca:	461a      	mov	r2, r3
 80042cc:	f000 fa68 	bl	80047a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2150      	movs	r1, #80	; 0x50
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 fabf 	bl	800485a <TIM_ITRx_SetConfig>
      break;
 80042dc:	e02c      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042ea:	461a      	mov	r2, r3
 80042ec:	f000 fa86 	bl	80047fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2160      	movs	r1, #96	; 0x60
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 faaf 	bl	800485a <TIM_ITRx_SetConfig>
      break;
 80042fc:	e01c      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800430a:	461a      	mov	r2, r3
 800430c:	f000 fa48 	bl	80047a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2140      	movs	r1, #64	; 0x40
 8004316:	4618      	mov	r0, r3
 8004318:	f000 fa9f 	bl	800485a <TIM_ITRx_SetConfig>
      break;
 800431c:	e00c      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4619      	mov	r1, r3
 8004328:	4610      	mov	r0, r2
 800432a:	f000 fa96 	bl	800485a <TIM_ITRx_SetConfig>
      break;
 800432e:	e003      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	73fb      	strb	r3, [r7, #15]
      break;
 8004334:	e000      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004336:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004348:	7bfb      	ldrb	r3, [r7, #15]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a33      	ldr	r2, [pc, #204]	; (8004434 <TIM_Base_SetConfig+0xe0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d013      	beq.n	8004394 <TIM_Base_SetConfig+0x40>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a32      	ldr	r2, [pc, #200]	; (8004438 <TIM_Base_SetConfig+0xe4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00f      	beq.n	8004394 <TIM_Base_SetConfig+0x40>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437a:	d00b      	beq.n	8004394 <TIM_Base_SetConfig+0x40>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a2f      	ldr	r2, [pc, #188]	; (800443c <TIM_Base_SetConfig+0xe8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d007      	beq.n	8004394 <TIM_Base_SetConfig+0x40>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a2e      	ldr	r2, [pc, #184]	; (8004440 <TIM_Base_SetConfig+0xec>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d003      	beq.n	8004394 <TIM_Base_SetConfig+0x40>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a2d      	ldr	r2, [pc, #180]	; (8004444 <TIM_Base_SetConfig+0xf0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d108      	bne.n	80043a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a22      	ldr	r2, [pc, #136]	; (8004434 <TIM_Base_SetConfig+0xe0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d013      	beq.n	80043d6 <TIM_Base_SetConfig+0x82>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a21      	ldr	r2, [pc, #132]	; (8004438 <TIM_Base_SetConfig+0xe4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d00f      	beq.n	80043d6 <TIM_Base_SetConfig+0x82>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043bc:	d00b      	beq.n	80043d6 <TIM_Base_SetConfig+0x82>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a1e      	ldr	r2, [pc, #120]	; (800443c <TIM_Base_SetConfig+0xe8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d007      	beq.n	80043d6 <TIM_Base_SetConfig+0x82>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a1d      	ldr	r2, [pc, #116]	; (8004440 <TIM_Base_SetConfig+0xec>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d003      	beq.n	80043d6 <TIM_Base_SetConfig+0x82>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a1c      	ldr	r2, [pc, #112]	; (8004444 <TIM_Base_SetConfig+0xf0>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d108      	bne.n	80043e8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a09      	ldr	r2, [pc, #36]	; (8004434 <TIM_Base_SetConfig+0xe0>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d003      	beq.n	800441c <TIM_Base_SetConfig+0xc8>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a08      	ldr	r2, [pc, #32]	; (8004438 <TIM_Base_SetConfig+0xe4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d103      	bne.n	8004424 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	615a      	str	r2, [r3, #20]
}
 800442a:	bf00      	nop
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr
 8004434:	40012c00 	.word	0x40012c00
 8004438:	40013400 	.word	0x40013400
 800443c:	40000400 	.word	0x40000400
 8004440:	40000800 	.word	0x40000800
 8004444:	40000c00 	.word	0x40000c00

08004448 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	f023 0201 	bic.w	r2, r3, #1
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0303 	bic.w	r3, r3, #3
 800447e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f023 0302 	bic.w	r3, r3, #2
 8004490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a20      	ldr	r2, [pc, #128]	; (8004520 <TIM_OC1_SetConfig+0xd8>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d003      	beq.n	80044ac <TIM_OC1_SetConfig+0x64>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a1f      	ldr	r2, [pc, #124]	; (8004524 <TIM_OC1_SetConfig+0xdc>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d10c      	bne.n	80044c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f023 0308 	bic.w	r3, r3, #8
 80044b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f023 0304 	bic.w	r3, r3, #4
 80044c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a15      	ldr	r2, [pc, #84]	; (8004520 <TIM_OC1_SetConfig+0xd8>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d003      	beq.n	80044d6 <TIM_OC1_SetConfig+0x8e>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a14      	ldr	r2, [pc, #80]	; (8004524 <TIM_OC1_SetConfig+0xdc>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d111      	bne.n	80044fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	621a      	str	r2, [r3, #32]
}
 8004514:	bf00      	nop
 8004516:	371c      	adds	r7, #28
 8004518:	46bd      	mov	sp, r7
 800451a:	bc80      	pop	{r7}
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40012c00 	.word	0x40012c00
 8004524:	40013400 	.word	0x40013400

08004528 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	f023 0210 	bic.w	r2, r3, #16
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800455e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	021b      	lsls	r3, r3, #8
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	4313      	orrs	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f023 0320 	bic.w	r3, r3, #32
 8004572:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	4313      	orrs	r3, r2
 800457e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a21      	ldr	r2, [pc, #132]	; (8004608 <TIM_OC2_SetConfig+0xe0>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d003      	beq.n	8004590 <TIM_OC2_SetConfig+0x68>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a20      	ldr	r2, [pc, #128]	; (800460c <TIM_OC2_SetConfig+0xe4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d10d      	bne.n	80045ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a16      	ldr	r2, [pc, #88]	; (8004608 <TIM_OC2_SetConfig+0xe0>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d003      	beq.n	80045bc <TIM_OC2_SetConfig+0x94>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a15      	ldr	r2, [pc, #84]	; (800460c <TIM_OC2_SetConfig+0xe4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d113      	bne.n	80045e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	621a      	str	r2, [r3, #32]
}
 80045fe:	bf00      	nop
 8004600:	371c      	adds	r7, #28
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr
 8004608:	40012c00 	.word	0x40012c00
 800460c:	40013400 	.word	0x40013400

08004610 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0303 	bic.w	r3, r3, #3
 8004646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	021b      	lsls	r3, r3, #8
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	4313      	orrs	r3, r2
 8004664:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a21      	ldr	r2, [pc, #132]	; (80046f0 <TIM_OC3_SetConfig+0xe0>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d003      	beq.n	8004676 <TIM_OC3_SetConfig+0x66>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a20      	ldr	r2, [pc, #128]	; (80046f4 <TIM_OC3_SetConfig+0xe4>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d10d      	bne.n	8004692 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800467c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	021b      	lsls	r3, r3, #8
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	4313      	orrs	r3, r2
 8004688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a16      	ldr	r2, [pc, #88]	; (80046f0 <TIM_OC3_SetConfig+0xe0>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d003      	beq.n	80046a2 <TIM_OC3_SetConfig+0x92>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a15      	ldr	r2, [pc, #84]	; (80046f4 <TIM_OC3_SetConfig+0xe4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d113      	bne.n	80046ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	621a      	str	r2, [r3, #32]
}
 80046e4:	bf00      	nop
 80046e6:	371c      	adds	r7, #28
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bc80      	pop	{r7}
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	40012c00 	.word	0x40012c00
 80046f4:	40013400 	.word	0x40013400

080046f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	021b      	lsls	r3, r3, #8
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	4313      	orrs	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004742:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	031b      	lsls	r3, r3, #12
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a11      	ldr	r2, [pc, #68]	; (8004798 <TIM_OC4_SetConfig+0xa0>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d003      	beq.n	8004760 <TIM_OC4_SetConfig+0x68>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a10      	ldr	r2, [pc, #64]	; (800479c <TIM_OC4_SetConfig+0xa4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d109      	bne.n	8004774 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004766:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	019b      	lsls	r3, r3, #6
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	4313      	orrs	r3, r2
 8004772:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	621a      	str	r2, [r3, #32]
}
 800478e:	bf00      	nop
 8004790:	371c      	adds	r7, #28
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr
 8004798:	40012c00 	.word	0x40012c00
 800479c:	40013400 	.word	0x40013400

080047a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	f023 0201 	bic.w	r2, r3, #1
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	011b      	lsls	r3, r3, #4
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f023 030a 	bic.w	r3, r3, #10
 80047dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	621a      	str	r2, [r3, #32]
}
 80047f2:	bf00      	nop
 80047f4:	371c      	adds	r7, #28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bc80      	pop	{r7}
 80047fa:	4770      	bx	lr

080047fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	f023 0210 	bic.w	r2, r3, #16
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	031b      	lsls	r3, r3, #12
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	4313      	orrs	r3, r2
 8004830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004838:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	4313      	orrs	r3, r2
 8004842:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	621a      	str	r2, [r3, #32]
}
 8004850:	bf00      	nop
 8004852:	371c      	adds	r7, #28
 8004854:	46bd      	mov	sp, r7
 8004856:	bc80      	pop	{r7}
 8004858:	4770      	bx	lr

0800485a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800485a:	b480      	push	{r7}
 800485c:	b085      	sub	sp, #20
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
 8004862:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004870:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	f043 0307 	orr.w	r3, r3, #7
 800487c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	609a      	str	r2, [r3, #8]
}
 8004884:	bf00      	nop
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	bc80      	pop	{r7}
 800488c:	4770      	bx	lr

0800488e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800488e:	b480      	push	{r7}
 8004890:	b087      	sub	sp, #28
 8004892:	af00      	add	r7, sp, #0
 8004894:	60f8      	str	r0, [r7, #12]
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	607a      	str	r2, [r7, #4]
 800489a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	021a      	lsls	r2, r3, #8
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	431a      	orrs	r2, r3
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	609a      	str	r2, [r3, #8]
}
 80048c2:	bf00      	nop
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr

080048cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f003 031f 	and.w	r3, r3, #31
 80048de:	2201      	movs	r2, #1
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a1a      	ldr	r2, [r3, #32]
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	43db      	mvns	r3, r3
 80048ee:	401a      	ands	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a1a      	ldr	r2, [r3, #32]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f003 031f 	and.w	r3, r3, #31
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	fa01 f303 	lsl.w	r3, r1, r3
 8004904:	431a      	orrs	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	621a      	str	r2, [r3, #32]
}
 800490a:	bf00      	nop
 800490c:	371c      	adds	r7, #28
 800490e:	46bd      	mov	sp, r7
 8004910:	bc80      	pop	{r7}
 8004912:	4770      	bx	lr

08004914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004928:	2302      	movs	r3, #2
 800492a:	e050      	b.n	80049ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004952:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a1b      	ldr	r2, [pc, #108]	; (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d018      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a19      	ldr	r2, [pc, #100]	; (80049dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d013      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004982:	d00e      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a15      	ldr	r2, [pc, #84]	; (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d009      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a14      	ldr	r2, [pc, #80]	; (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d004      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a12      	ldr	r2, [pc, #72]	; (80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d10c      	bne.n	80049bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bc80      	pop	{r7}
 80049d6:	4770      	bx	lr
 80049d8:	40012c00 	.word	0x40012c00
 80049dc:	40013400 	.word	0x40013400
 80049e0:	40000400 	.word	0x40000400
 80049e4:	40000800 	.word	0x40000800
 80049e8:	40000c00 	.word	0x40000c00

080049ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e042      	b.n	8004a84 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d106      	bne.n	8004a18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7fd f9ca 	bl	8001dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2224      	movs	r2, #36	; 0x24
 8004a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f82b 	bl	8004a8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	691a      	ldr	r2, [r3, #16]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	695a      	ldr	r2, [r3, #20]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689a      	ldr	r2, [r3, #8]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004ac6:	f023 030c 	bic.w	r3, r3, #12
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6812      	ldr	r2, [r2, #0]
 8004ace:	68b9      	ldr	r1, [r7, #8]
 8004ad0:	430b      	orrs	r3, r1
 8004ad2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699a      	ldr	r2, [r3, #24]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a2c      	ldr	r2, [pc, #176]	; (8004ba0 <UART_SetConfig+0x114>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d103      	bne.n	8004afc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004af4:	f7fe fb0c 	bl	8003110 <HAL_RCC_GetPCLK2Freq>
 8004af8:	60f8      	str	r0, [r7, #12]
 8004afa:	e002      	b.n	8004b02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004afc:	f7fe faf4 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 8004b00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4613      	mov	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	009a      	lsls	r2, r3, #2
 8004b0c:	441a      	add	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b18:	4a22      	ldr	r2, [pc, #136]	; (8004ba4 <UART_SetConfig+0x118>)
 8004b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1e:	095b      	lsrs	r3, r3, #5
 8004b20:	0119      	lsls	r1, r3, #4
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4613      	mov	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	009a      	lsls	r2, r3, #2
 8004b2c:	441a      	add	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b38:	4b1a      	ldr	r3, [pc, #104]	; (8004ba4 <UART_SetConfig+0x118>)
 8004b3a:	fba3 0302 	umull	r0, r3, r3, r2
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	2064      	movs	r0, #100	; 0x64
 8004b42:	fb00 f303 	mul.w	r3, r0, r3
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	3332      	adds	r3, #50	; 0x32
 8004b4c:	4a15      	ldr	r2, [pc, #84]	; (8004ba4 <UART_SetConfig+0x118>)
 8004b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b52:	095b      	lsrs	r3, r3, #5
 8004b54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b58:	4419      	add	r1, r3
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	009a      	lsls	r2, r3, #2
 8004b64:	441a      	add	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b70:	4b0c      	ldr	r3, [pc, #48]	; (8004ba4 <UART_SetConfig+0x118>)
 8004b72:	fba3 0302 	umull	r0, r3, r3, r2
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	2064      	movs	r0, #100	; 0x64
 8004b7a:	fb00 f303 	mul.w	r3, r0, r3
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	3332      	adds	r3, #50	; 0x32
 8004b84:	4a07      	ldr	r2, [pc, #28]	; (8004ba4 <UART_SetConfig+0x118>)
 8004b86:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	f003 020f 	and.w	r2, r3, #15
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	440a      	add	r2, r1
 8004b96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b98:	bf00      	nop
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40013800 	.word	0x40013800
 8004ba4:	51eb851f 	.word	0x51eb851f

08004ba8 <__cvt>:
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bae:	461f      	mov	r7, r3
 8004bb0:	bfbb      	ittet	lt
 8004bb2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004bb6:	461f      	movlt	r7, r3
 8004bb8:	2300      	movge	r3, #0
 8004bba:	232d      	movlt	r3, #45	; 0x2d
 8004bbc:	b088      	sub	sp, #32
 8004bbe:	4614      	mov	r4, r2
 8004bc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004bc2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004bc4:	7013      	strb	r3, [r2, #0]
 8004bc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004bc8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004bcc:	f023 0820 	bic.w	r8, r3, #32
 8004bd0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004bd4:	d005      	beq.n	8004be2 <__cvt+0x3a>
 8004bd6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004bda:	d100      	bne.n	8004bde <__cvt+0x36>
 8004bdc:	3501      	adds	r5, #1
 8004bde:	2302      	movs	r3, #2
 8004be0:	e000      	b.n	8004be4 <__cvt+0x3c>
 8004be2:	2303      	movs	r3, #3
 8004be4:	aa07      	add	r2, sp, #28
 8004be6:	9204      	str	r2, [sp, #16]
 8004be8:	aa06      	add	r2, sp, #24
 8004bea:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004bee:	e9cd 3500 	strd	r3, r5, [sp]
 8004bf2:	4622      	mov	r2, r4
 8004bf4:	463b      	mov	r3, r7
 8004bf6:	f001 f887 	bl	8005d08 <_dtoa_r>
 8004bfa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004bfe:	4606      	mov	r6, r0
 8004c00:	d102      	bne.n	8004c08 <__cvt+0x60>
 8004c02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c04:	07db      	lsls	r3, r3, #31
 8004c06:	d522      	bpl.n	8004c4e <__cvt+0xa6>
 8004c08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c0c:	eb06 0905 	add.w	r9, r6, r5
 8004c10:	d110      	bne.n	8004c34 <__cvt+0x8c>
 8004c12:	7833      	ldrb	r3, [r6, #0]
 8004c14:	2b30      	cmp	r3, #48	; 0x30
 8004c16:	d10a      	bne.n	8004c2e <__cvt+0x86>
 8004c18:	2200      	movs	r2, #0
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	4639      	mov	r1, r7
 8004c20:	f7fb ff2e 	bl	8000a80 <__aeabi_dcmpeq>
 8004c24:	b918      	cbnz	r0, 8004c2e <__cvt+0x86>
 8004c26:	f1c5 0501 	rsb	r5, r5, #1
 8004c2a:	f8ca 5000 	str.w	r5, [sl]
 8004c2e:	f8da 3000 	ldr.w	r3, [sl]
 8004c32:	4499      	add	r9, r3
 8004c34:	2200      	movs	r2, #0
 8004c36:	2300      	movs	r3, #0
 8004c38:	4620      	mov	r0, r4
 8004c3a:	4639      	mov	r1, r7
 8004c3c:	f7fb ff20 	bl	8000a80 <__aeabi_dcmpeq>
 8004c40:	b108      	cbz	r0, 8004c46 <__cvt+0x9e>
 8004c42:	f8cd 901c 	str.w	r9, [sp, #28]
 8004c46:	2230      	movs	r2, #48	; 0x30
 8004c48:	9b07      	ldr	r3, [sp, #28]
 8004c4a:	454b      	cmp	r3, r9
 8004c4c:	d307      	bcc.n	8004c5e <__cvt+0xb6>
 8004c4e:	4630      	mov	r0, r6
 8004c50:	9b07      	ldr	r3, [sp, #28]
 8004c52:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004c54:	1b9b      	subs	r3, r3, r6
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	b008      	add	sp, #32
 8004c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c5e:	1c59      	adds	r1, r3, #1
 8004c60:	9107      	str	r1, [sp, #28]
 8004c62:	701a      	strb	r2, [r3, #0]
 8004c64:	e7f0      	b.n	8004c48 <__cvt+0xa0>

08004c66 <__exponent>:
 8004c66:	4603      	mov	r3, r0
 8004c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c6a:	2900      	cmp	r1, #0
 8004c6c:	f803 2b02 	strb.w	r2, [r3], #2
 8004c70:	bfb6      	itet	lt
 8004c72:	222d      	movlt	r2, #45	; 0x2d
 8004c74:	222b      	movge	r2, #43	; 0x2b
 8004c76:	4249      	neglt	r1, r1
 8004c78:	2909      	cmp	r1, #9
 8004c7a:	7042      	strb	r2, [r0, #1]
 8004c7c:	dd2a      	ble.n	8004cd4 <__exponent+0x6e>
 8004c7e:	f10d 0207 	add.w	r2, sp, #7
 8004c82:	4617      	mov	r7, r2
 8004c84:	260a      	movs	r6, #10
 8004c86:	fb91 f5f6 	sdiv	r5, r1, r6
 8004c8a:	4694      	mov	ip, r2
 8004c8c:	fb06 1415 	mls	r4, r6, r5, r1
 8004c90:	3430      	adds	r4, #48	; 0x30
 8004c92:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004c96:	460c      	mov	r4, r1
 8004c98:	2c63      	cmp	r4, #99	; 0x63
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	f102 32ff 	add.w	r2, r2, #4294967295
 8004ca0:	dcf1      	bgt.n	8004c86 <__exponent+0x20>
 8004ca2:	3130      	adds	r1, #48	; 0x30
 8004ca4:	f1ac 0402 	sub.w	r4, ip, #2
 8004ca8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004cac:	4622      	mov	r2, r4
 8004cae:	1c41      	adds	r1, r0, #1
 8004cb0:	42ba      	cmp	r2, r7
 8004cb2:	d30a      	bcc.n	8004cca <__exponent+0x64>
 8004cb4:	f10d 0209 	add.w	r2, sp, #9
 8004cb8:	eba2 020c 	sub.w	r2, r2, ip
 8004cbc:	42bc      	cmp	r4, r7
 8004cbe:	bf88      	it	hi
 8004cc0:	2200      	movhi	r2, #0
 8004cc2:	4413      	add	r3, r2
 8004cc4:	1a18      	subs	r0, r3, r0
 8004cc6:	b003      	add	sp, #12
 8004cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cca:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004cce:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004cd2:	e7ed      	b.n	8004cb0 <__exponent+0x4a>
 8004cd4:	2330      	movs	r3, #48	; 0x30
 8004cd6:	3130      	adds	r1, #48	; 0x30
 8004cd8:	7083      	strb	r3, [r0, #2]
 8004cda:	70c1      	strb	r1, [r0, #3]
 8004cdc:	1d03      	adds	r3, r0, #4
 8004cde:	e7f1      	b.n	8004cc4 <__exponent+0x5e>

08004ce0 <_printf_float>:
 8004ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce4:	b091      	sub	sp, #68	; 0x44
 8004ce6:	460c      	mov	r4, r1
 8004ce8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004cec:	4616      	mov	r6, r2
 8004cee:	461f      	mov	r7, r3
 8004cf0:	4605      	mov	r5, r0
 8004cf2:	f000 fef3 	bl	8005adc <_localeconv_r>
 8004cf6:	6803      	ldr	r3, [r0, #0]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8004cfc:	f7fb fa94 	bl	8000228 <strlen>
 8004d00:	2300      	movs	r3, #0
 8004d02:	930e      	str	r3, [sp, #56]	; 0x38
 8004d04:	f8d8 3000 	ldr.w	r3, [r8]
 8004d08:	900a      	str	r0, [sp, #40]	; 0x28
 8004d0a:	3307      	adds	r3, #7
 8004d0c:	f023 0307 	bic.w	r3, r3, #7
 8004d10:	f103 0208 	add.w	r2, r3, #8
 8004d14:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004d18:	f8d4 b000 	ldr.w	fp, [r4]
 8004d1c:	f8c8 2000 	str.w	r2, [r8]
 8004d20:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004d24:	4652      	mov	r2, sl
 8004d26:	4643      	mov	r3, r8
 8004d28:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004d2c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004d30:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d32:	f04f 32ff 	mov.w	r2, #4294967295
 8004d36:	4650      	mov	r0, sl
 8004d38:	4b9c      	ldr	r3, [pc, #624]	; (8004fac <_printf_float+0x2cc>)
 8004d3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d3c:	f7fb fed2 	bl	8000ae4 <__aeabi_dcmpun>
 8004d40:	bb70      	cbnz	r0, 8004da0 <_printf_float+0xc0>
 8004d42:	f04f 32ff 	mov.w	r2, #4294967295
 8004d46:	4650      	mov	r0, sl
 8004d48:	4b98      	ldr	r3, [pc, #608]	; (8004fac <_printf_float+0x2cc>)
 8004d4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d4c:	f7fb feac 	bl	8000aa8 <__aeabi_dcmple>
 8004d50:	bb30      	cbnz	r0, 8004da0 <_printf_float+0xc0>
 8004d52:	2200      	movs	r2, #0
 8004d54:	2300      	movs	r3, #0
 8004d56:	4650      	mov	r0, sl
 8004d58:	4641      	mov	r1, r8
 8004d5a:	f7fb fe9b 	bl	8000a94 <__aeabi_dcmplt>
 8004d5e:	b110      	cbz	r0, 8004d66 <_printf_float+0x86>
 8004d60:	232d      	movs	r3, #45	; 0x2d
 8004d62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d66:	4a92      	ldr	r2, [pc, #584]	; (8004fb0 <_printf_float+0x2d0>)
 8004d68:	4b92      	ldr	r3, [pc, #584]	; (8004fb4 <_printf_float+0x2d4>)
 8004d6a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004d6e:	bf94      	ite	ls
 8004d70:	4690      	movls	r8, r2
 8004d72:	4698      	movhi	r8, r3
 8004d74:	2303      	movs	r3, #3
 8004d76:	f04f 0a00 	mov.w	sl, #0
 8004d7a:	6123      	str	r3, [r4, #16]
 8004d7c:	f02b 0304 	bic.w	r3, fp, #4
 8004d80:	6023      	str	r3, [r4, #0]
 8004d82:	4633      	mov	r3, r6
 8004d84:	4621      	mov	r1, r4
 8004d86:	4628      	mov	r0, r5
 8004d88:	9700      	str	r7, [sp, #0]
 8004d8a:	aa0f      	add	r2, sp, #60	; 0x3c
 8004d8c:	f000 f9d6 	bl	800513c <_printf_common>
 8004d90:	3001      	adds	r0, #1
 8004d92:	f040 8090 	bne.w	8004eb6 <_printf_float+0x1d6>
 8004d96:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9a:	b011      	add	sp, #68	; 0x44
 8004d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004da0:	4652      	mov	r2, sl
 8004da2:	4643      	mov	r3, r8
 8004da4:	4650      	mov	r0, sl
 8004da6:	4641      	mov	r1, r8
 8004da8:	f7fb fe9c 	bl	8000ae4 <__aeabi_dcmpun>
 8004dac:	b148      	cbz	r0, 8004dc2 <_printf_float+0xe2>
 8004dae:	f1b8 0f00 	cmp.w	r8, #0
 8004db2:	bfb8      	it	lt
 8004db4:	232d      	movlt	r3, #45	; 0x2d
 8004db6:	4a80      	ldr	r2, [pc, #512]	; (8004fb8 <_printf_float+0x2d8>)
 8004db8:	bfb8      	it	lt
 8004dba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004dbe:	4b7f      	ldr	r3, [pc, #508]	; (8004fbc <_printf_float+0x2dc>)
 8004dc0:	e7d3      	b.n	8004d6a <_printf_float+0x8a>
 8004dc2:	6863      	ldr	r3, [r4, #4]
 8004dc4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004dc8:	1c5a      	adds	r2, r3, #1
 8004dca:	d142      	bne.n	8004e52 <_printf_float+0x172>
 8004dcc:	2306      	movs	r3, #6
 8004dce:	6063      	str	r3, [r4, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	9206      	str	r2, [sp, #24]
 8004dd4:	aa0e      	add	r2, sp, #56	; 0x38
 8004dd6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004dda:	aa0d      	add	r2, sp, #52	; 0x34
 8004ddc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004de0:	9203      	str	r2, [sp, #12]
 8004de2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004de6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004dea:	6023      	str	r3, [r4, #0]
 8004dec:	6863      	ldr	r3, [r4, #4]
 8004dee:	4652      	mov	r2, sl
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	4628      	mov	r0, r5
 8004df4:	4643      	mov	r3, r8
 8004df6:	910b      	str	r1, [sp, #44]	; 0x2c
 8004df8:	f7ff fed6 	bl	8004ba8 <__cvt>
 8004dfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004dfe:	4680      	mov	r8, r0
 8004e00:	2947      	cmp	r1, #71	; 0x47
 8004e02:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e04:	d108      	bne.n	8004e18 <_printf_float+0x138>
 8004e06:	1cc8      	adds	r0, r1, #3
 8004e08:	db02      	blt.n	8004e10 <_printf_float+0x130>
 8004e0a:	6863      	ldr	r3, [r4, #4]
 8004e0c:	4299      	cmp	r1, r3
 8004e0e:	dd40      	ble.n	8004e92 <_printf_float+0x1b2>
 8004e10:	f1a9 0902 	sub.w	r9, r9, #2
 8004e14:	fa5f f989 	uxtb.w	r9, r9
 8004e18:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004e1c:	d81f      	bhi.n	8004e5e <_printf_float+0x17e>
 8004e1e:	464a      	mov	r2, r9
 8004e20:	3901      	subs	r1, #1
 8004e22:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e26:	910d      	str	r1, [sp, #52]	; 0x34
 8004e28:	f7ff ff1d 	bl	8004c66 <__exponent>
 8004e2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e2e:	4682      	mov	sl, r0
 8004e30:	1813      	adds	r3, r2, r0
 8004e32:	2a01      	cmp	r2, #1
 8004e34:	6123      	str	r3, [r4, #16]
 8004e36:	dc02      	bgt.n	8004e3e <_printf_float+0x15e>
 8004e38:	6822      	ldr	r2, [r4, #0]
 8004e3a:	07d2      	lsls	r2, r2, #31
 8004e3c:	d501      	bpl.n	8004e42 <_printf_float+0x162>
 8004e3e:	3301      	adds	r3, #1
 8004e40:	6123      	str	r3, [r4, #16]
 8004e42:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d09b      	beq.n	8004d82 <_printf_float+0xa2>
 8004e4a:	232d      	movs	r3, #45	; 0x2d
 8004e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e50:	e797      	b.n	8004d82 <_printf_float+0xa2>
 8004e52:	2947      	cmp	r1, #71	; 0x47
 8004e54:	d1bc      	bne.n	8004dd0 <_printf_float+0xf0>
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1ba      	bne.n	8004dd0 <_printf_float+0xf0>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e7b7      	b.n	8004dce <_printf_float+0xee>
 8004e5e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004e62:	d118      	bne.n	8004e96 <_printf_float+0x1b6>
 8004e64:	2900      	cmp	r1, #0
 8004e66:	6863      	ldr	r3, [r4, #4]
 8004e68:	dd0b      	ble.n	8004e82 <_printf_float+0x1a2>
 8004e6a:	6121      	str	r1, [r4, #16]
 8004e6c:	b913      	cbnz	r3, 8004e74 <_printf_float+0x194>
 8004e6e:	6822      	ldr	r2, [r4, #0]
 8004e70:	07d0      	lsls	r0, r2, #31
 8004e72:	d502      	bpl.n	8004e7a <_printf_float+0x19a>
 8004e74:	3301      	adds	r3, #1
 8004e76:	440b      	add	r3, r1
 8004e78:	6123      	str	r3, [r4, #16]
 8004e7a:	f04f 0a00 	mov.w	sl, #0
 8004e7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004e80:	e7df      	b.n	8004e42 <_printf_float+0x162>
 8004e82:	b913      	cbnz	r3, 8004e8a <_printf_float+0x1aa>
 8004e84:	6822      	ldr	r2, [r4, #0]
 8004e86:	07d2      	lsls	r2, r2, #31
 8004e88:	d501      	bpl.n	8004e8e <_printf_float+0x1ae>
 8004e8a:	3302      	adds	r3, #2
 8004e8c:	e7f4      	b.n	8004e78 <_printf_float+0x198>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e7f2      	b.n	8004e78 <_printf_float+0x198>
 8004e92:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004e96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e98:	4299      	cmp	r1, r3
 8004e9a:	db05      	blt.n	8004ea8 <_printf_float+0x1c8>
 8004e9c:	6823      	ldr	r3, [r4, #0]
 8004e9e:	6121      	str	r1, [r4, #16]
 8004ea0:	07d8      	lsls	r0, r3, #31
 8004ea2:	d5ea      	bpl.n	8004e7a <_printf_float+0x19a>
 8004ea4:	1c4b      	adds	r3, r1, #1
 8004ea6:	e7e7      	b.n	8004e78 <_printf_float+0x198>
 8004ea8:	2900      	cmp	r1, #0
 8004eaa:	bfcc      	ite	gt
 8004eac:	2201      	movgt	r2, #1
 8004eae:	f1c1 0202 	rsble	r2, r1, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	e7e0      	b.n	8004e78 <_printf_float+0x198>
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	055a      	lsls	r2, r3, #21
 8004eba:	d407      	bmi.n	8004ecc <_printf_float+0x1ec>
 8004ebc:	6923      	ldr	r3, [r4, #16]
 8004ebe:	4642      	mov	r2, r8
 8004ec0:	4631      	mov	r1, r6
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	47b8      	blx	r7
 8004ec6:	3001      	adds	r0, #1
 8004ec8:	d12b      	bne.n	8004f22 <_printf_float+0x242>
 8004eca:	e764      	b.n	8004d96 <_printf_float+0xb6>
 8004ecc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004ed0:	f240 80dd 	bls.w	800508e <_printf_float+0x3ae>
 8004ed4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2300      	movs	r3, #0
 8004edc:	f7fb fdd0 	bl	8000a80 <__aeabi_dcmpeq>
 8004ee0:	2800      	cmp	r0, #0
 8004ee2:	d033      	beq.n	8004f4c <_printf_float+0x26c>
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	4631      	mov	r1, r6
 8004ee8:	4628      	mov	r0, r5
 8004eea:	4a35      	ldr	r2, [pc, #212]	; (8004fc0 <_printf_float+0x2e0>)
 8004eec:	47b8      	blx	r7
 8004eee:	3001      	adds	r0, #1
 8004ef0:	f43f af51 	beq.w	8004d96 <_printf_float+0xb6>
 8004ef4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	db02      	blt.n	8004f02 <_printf_float+0x222>
 8004efc:	6823      	ldr	r3, [r4, #0]
 8004efe:	07d8      	lsls	r0, r3, #31
 8004f00:	d50f      	bpl.n	8004f22 <_printf_float+0x242>
 8004f02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f06:	4631      	mov	r1, r6
 8004f08:	4628      	mov	r0, r5
 8004f0a:	47b8      	blx	r7
 8004f0c:	3001      	adds	r0, #1
 8004f0e:	f43f af42 	beq.w	8004d96 <_printf_float+0xb6>
 8004f12:	f04f 0800 	mov.w	r8, #0
 8004f16:	f104 091a 	add.w	r9, r4, #26
 8004f1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	4543      	cmp	r3, r8
 8004f20:	dc09      	bgt.n	8004f36 <_printf_float+0x256>
 8004f22:	6823      	ldr	r3, [r4, #0]
 8004f24:	079b      	lsls	r3, r3, #30
 8004f26:	f100 8104 	bmi.w	8005132 <_printf_float+0x452>
 8004f2a:	68e0      	ldr	r0, [r4, #12]
 8004f2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f2e:	4298      	cmp	r0, r3
 8004f30:	bfb8      	it	lt
 8004f32:	4618      	movlt	r0, r3
 8004f34:	e731      	b.n	8004d9a <_printf_float+0xba>
 8004f36:	2301      	movs	r3, #1
 8004f38:	464a      	mov	r2, r9
 8004f3a:	4631      	mov	r1, r6
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	47b8      	blx	r7
 8004f40:	3001      	adds	r0, #1
 8004f42:	f43f af28 	beq.w	8004d96 <_printf_float+0xb6>
 8004f46:	f108 0801 	add.w	r8, r8, #1
 8004f4a:	e7e6      	b.n	8004f1a <_printf_float+0x23a>
 8004f4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	dc38      	bgt.n	8004fc4 <_printf_float+0x2e4>
 8004f52:	2301      	movs	r3, #1
 8004f54:	4631      	mov	r1, r6
 8004f56:	4628      	mov	r0, r5
 8004f58:	4a19      	ldr	r2, [pc, #100]	; (8004fc0 <_printf_float+0x2e0>)
 8004f5a:	47b8      	blx	r7
 8004f5c:	3001      	adds	r0, #1
 8004f5e:	f43f af1a 	beq.w	8004d96 <_printf_float+0xb6>
 8004f62:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004f66:	4313      	orrs	r3, r2
 8004f68:	d102      	bne.n	8004f70 <_printf_float+0x290>
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	07d9      	lsls	r1, r3, #31
 8004f6e:	d5d8      	bpl.n	8004f22 <_printf_float+0x242>
 8004f70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f74:	4631      	mov	r1, r6
 8004f76:	4628      	mov	r0, r5
 8004f78:	47b8      	blx	r7
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	f43f af0b 	beq.w	8004d96 <_printf_float+0xb6>
 8004f80:	f04f 0900 	mov.w	r9, #0
 8004f84:	f104 0a1a 	add.w	sl, r4, #26
 8004f88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f8a:	425b      	negs	r3, r3
 8004f8c:	454b      	cmp	r3, r9
 8004f8e:	dc01      	bgt.n	8004f94 <_printf_float+0x2b4>
 8004f90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f92:	e794      	b.n	8004ebe <_printf_float+0x1de>
 8004f94:	2301      	movs	r3, #1
 8004f96:	4652      	mov	r2, sl
 8004f98:	4631      	mov	r1, r6
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	47b8      	blx	r7
 8004f9e:	3001      	adds	r0, #1
 8004fa0:	f43f aef9 	beq.w	8004d96 <_printf_float+0xb6>
 8004fa4:	f109 0901 	add.w	r9, r9, #1
 8004fa8:	e7ee      	b.n	8004f88 <_printf_float+0x2a8>
 8004faa:	bf00      	nop
 8004fac:	7fefffff 	.word	0x7fefffff
 8004fb0:	0800936a 	.word	0x0800936a
 8004fb4:	0800936e 	.word	0x0800936e
 8004fb8:	08009372 	.word	0x08009372
 8004fbc:	08009376 	.word	0x08009376
 8004fc0:	0800937a 	.word	0x0800937a
 8004fc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	bfa8      	it	ge
 8004fcc:	461a      	movge	r2, r3
 8004fce:	2a00      	cmp	r2, #0
 8004fd0:	4691      	mov	r9, r2
 8004fd2:	dc37      	bgt.n	8005044 <_printf_float+0x364>
 8004fd4:	f04f 0b00 	mov.w	fp, #0
 8004fd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fdc:	f104 021a 	add.w	r2, r4, #26
 8004fe0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004fe4:	ebaa 0309 	sub.w	r3, sl, r9
 8004fe8:	455b      	cmp	r3, fp
 8004fea:	dc33      	bgt.n	8005054 <_printf_float+0x374>
 8004fec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	db3b      	blt.n	800506c <_printf_float+0x38c>
 8004ff4:	6823      	ldr	r3, [r4, #0]
 8004ff6:	07da      	lsls	r2, r3, #31
 8004ff8:	d438      	bmi.n	800506c <_printf_float+0x38c>
 8004ffa:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004ffe:	eba2 0903 	sub.w	r9, r2, r3
 8005002:	eba2 020a 	sub.w	r2, r2, sl
 8005006:	4591      	cmp	r9, r2
 8005008:	bfa8      	it	ge
 800500a:	4691      	movge	r9, r2
 800500c:	f1b9 0f00 	cmp.w	r9, #0
 8005010:	dc34      	bgt.n	800507c <_printf_float+0x39c>
 8005012:	f04f 0800 	mov.w	r8, #0
 8005016:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800501a:	f104 0a1a 	add.w	sl, r4, #26
 800501e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005022:	1a9b      	subs	r3, r3, r2
 8005024:	eba3 0309 	sub.w	r3, r3, r9
 8005028:	4543      	cmp	r3, r8
 800502a:	f77f af7a 	ble.w	8004f22 <_printf_float+0x242>
 800502e:	2301      	movs	r3, #1
 8005030:	4652      	mov	r2, sl
 8005032:	4631      	mov	r1, r6
 8005034:	4628      	mov	r0, r5
 8005036:	47b8      	blx	r7
 8005038:	3001      	adds	r0, #1
 800503a:	f43f aeac 	beq.w	8004d96 <_printf_float+0xb6>
 800503e:	f108 0801 	add.w	r8, r8, #1
 8005042:	e7ec      	b.n	800501e <_printf_float+0x33e>
 8005044:	4613      	mov	r3, r2
 8005046:	4631      	mov	r1, r6
 8005048:	4642      	mov	r2, r8
 800504a:	4628      	mov	r0, r5
 800504c:	47b8      	blx	r7
 800504e:	3001      	adds	r0, #1
 8005050:	d1c0      	bne.n	8004fd4 <_printf_float+0x2f4>
 8005052:	e6a0      	b.n	8004d96 <_printf_float+0xb6>
 8005054:	2301      	movs	r3, #1
 8005056:	4631      	mov	r1, r6
 8005058:	4628      	mov	r0, r5
 800505a:	920b      	str	r2, [sp, #44]	; 0x2c
 800505c:	47b8      	blx	r7
 800505e:	3001      	adds	r0, #1
 8005060:	f43f ae99 	beq.w	8004d96 <_printf_float+0xb6>
 8005064:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005066:	f10b 0b01 	add.w	fp, fp, #1
 800506a:	e7b9      	b.n	8004fe0 <_printf_float+0x300>
 800506c:	4631      	mov	r1, r6
 800506e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005072:	4628      	mov	r0, r5
 8005074:	47b8      	blx	r7
 8005076:	3001      	adds	r0, #1
 8005078:	d1bf      	bne.n	8004ffa <_printf_float+0x31a>
 800507a:	e68c      	b.n	8004d96 <_printf_float+0xb6>
 800507c:	464b      	mov	r3, r9
 800507e:	4631      	mov	r1, r6
 8005080:	4628      	mov	r0, r5
 8005082:	eb08 020a 	add.w	r2, r8, sl
 8005086:	47b8      	blx	r7
 8005088:	3001      	adds	r0, #1
 800508a:	d1c2      	bne.n	8005012 <_printf_float+0x332>
 800508c:	e683      	b.n	8004d96 <_printf_float+0xb6>
 800508e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005090:	2a01      	cmp	r2, #1
 8005092:	dc01      	bgt.n	8005098 <_printf_float+0x3b8>
 8005094:	07db      	lsls	r3, r3, #31
 8005096:	d539      	bpl.n	800510c <_printf_float+0x42c>
 8005098:	2301      	movs	r3, #1
 800509a:	4642      	mov	r2, r8
 800509c:	4631      	mov	r1, r6
 800509e:	4628      	mov	r0, r5
 80050a0:	47b8      	blx	r7
 80050a2:	3001      	adds	r0, #1
 80050a4:	f43f ae77 	beq.w	8004d96 <_printf_float+0xb6>
 80050a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050ac:	4631      	mov	r1, r6
 80050ae:	4628      	mov	r0, r5
 80050b0:	47b8      	blx	r7
 80050b2:	3001      	adds	r0, #1
 80050b4:	f43f ae6f 	beq.w	8004d96 <_printf_float+0xb6>
 80050b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050bc:	2200      	movs	r2, #0
 80050be:	2300      	movs	r3, #0
 80050c0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80050c4:	f7fb fcdc 	bl	8000a80 <__aeabi_dcmpeq>
 80050c8:	b9d8      	cbnz	r0, 8005102 <_printf_float+0x422>
 80050ca:	f109 33ff 	add.w	r3, r9, #4294967295
 80050ce:	f108 0201 	add.w	r2, r8, #1
 80050d2:	4631      	mov	r1, r6
 80050d4:	4628      	mov	r0, r5
 80050d6:	47b8      	blx	r7
 80050d8:	3001      	adds	r0, #1
 80050da:	d10e      	bne.n	80050fa <_printf_float+0x41a>
 80050dc:	e65b      	b.n	8004d96 <_printf_float+0xb6>
 80050de:	2301      	movs	r3, #1
 80050e0:	464a      	mov	r2, r9
 80050e2:	4631      	mov	r1, r6
 80050e4:	4628      	mov	r0, r5
 80050e6:	47b8      	blx	r7
 80050e8:	3001      	adds	r0, #1
 80050ea:	f43f ae54 	beq.w	8004d96 <_printf_float+0xb6>
 80050ee:	f108 0801 	add.w	r8, r8, #1
 80050f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050f4:	3b01      	subs	r3, #1
 80050f6:	4543      	cmp	r3, r8
 80050f8:	dcf1      	bgt.n	80050de <_printf_float+0x3fe>
 80050fa:	4653      	mov	r3, sl
 80050fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005100:	e6de      	b.n	8004ec0 <_printf_float+0x1e0>
 8005102:	f04f 0800 	mov.w	r8, #0
 8005106:	f104 091a 	add.w	r9, r4, #26
 800510a:	e7f2      	b.n	80050f2 <_printf_float+0x412>
 800510c:	2301      	movs	r3, #1
 800510e:	4642      	mov	r2, r8
 8005110:	e7df      	b.n	80050d2 <_printf_float+0x3f2>
 8005112:	2301      	movs	r3, #1
 8005114:	464a      	mov	r2, r9
 8005116:	4631      	mov	r1, r6
 8005118:	4628      	mov	r0, r5
 800511a:	47b8      	blx	r7
 800511c:	3001      	adds	r0, #1
 800511e:	f43f ae3a 	beq.w	8004d96 <_printf_float+0xb6>
 8005122:	f108 0801 	add.w	r8, r8, #1
 8005126:	68e3      	ldr	r3, [r4, #12]
 8005128:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800512a:	1a5b      	subs	r3, r3, r1
 800512c:	4543      	cmp	r3, r8
 800512e:	dcf0      	bgt.n	8005112 <_printf_float+0x432>
 8005130:	e6fb      	b.n	8004f2a <_printf_float+0x24a>
 8005132:	f04f 0800 	mov.w	r8, #0
 8005136:	f104 0919 	add.w	r9, r4, #25
 800513a:	e7f4      	b.n	8005126 <_printf_float+0x446>

0800513c <_printf_common>:
 800513c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005140:	4616      	mov	r6, r2
 8005142:	4699      	mov	r9, r3
 8005144:	688a      	ldr	r2, [r1, #8]
 8005146:	690b      	ldr	r3, [r1, #16]
 8005148:	4607      	mov	r7, r0
 800514a:	4293      	cmp	r3, r2
 800514c:	bfb8      	it	lt
 800514e:	4613      	movlt	r3, r2
 8005150:	6033      	str	r3, [r6, #0]
 8005152:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005156:	460c      	mov	r4, r1
 8005158:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800515c:	b10a      	cbz	r2, 8005162 <_printf_common+0x26>
 800515e:	3301      	adds	r3, #1
 8005160:	6033      	str	r3, [r6, #0]
 8005162:	6823      	ldr	r3, [r4, #0]
 8005164:	0699      	lsls	r1, r3, #26
 8005166:	bf42      	ittt	mi
 8005168:	6833      	ldrmi	r3, [r6, #0]
 800516a:	3302      	addmi	r3, #2
 800516c:	6033      	strmi	r3, [r6, #0]
 800516e:	6825      	ldr	r5, [r4, #0]
 8005170:	f015 0506 	ands.w	r5, r5, #6
 8005174:	d106      	bne.n	8005184 <_printf_common+0x48>
 8005176:	f104 0a19 	add.w	sl, r4, #25
 800517a:	68e3      	ldr	r3, [r4, #12]
 800517c:	6832      	ldr	r2, [r6, #0]
 800517e:	1a9b      	subs	r3, r3, r2
 8005180:	42ab      	cmp	r3, r5
 8005182:	dc2b      	bgt.n	80051dc <_printf_common+0xa0>
 8005184:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005188:	1e13      	subs	r3, r2, #0
 800518a:	6822      	ldr	r2, [r4, #0]
 800518c:	bf18      	it	ne
 800518e:	2301      	movne	r3, #1
 8005190:	0692      	lsls	r2, r2, #26
 8005192:	d430      	bmi.n	80051f6 <_printf_common+0xba>
 8005194:	4649      	mov	r1, r9
 8005196:	4638      	mov	r0, r7
 8005198:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800519c:	47c0      	blx	r8
 800519e:	3001      	adds	r0, #1
 80051a0:	d023      	beq.n	80051ea <_printf_common+0xae>
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	6922      	ldr	r2, [r4, #16]
 80051a6:	f003 0306 	and.w	r3, r3, #6
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	bf14      	ite	ne
 80051ae:	2500      	movne	r5, #0
 80051b0:	6833      	ldreq	r3, [r6, #0]
 80051b2:	f04f 0600 	mov.w	r6, #0
 80051b6:	bf08      	it	eq
 80051b8:	68e5      	ldreq	r5, [r4, #12]
 80051ba:	f104 041a 	add.w	r4, r4, #26
 80051be:	bf08      	it	eq
 80051c0:	1aed      	subeq	r5, r5, r3
 80051c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80051c6:	bf08      	it	eq
 80051c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051cc:	4293      	cmp	r3, r2
 80051ce:	bfc4      	itt	gt
 80051d0:	1a9b      	subgt	r3, r3, r2
 80051d2:	18ed      	addgt	r5, r5, r3
 80051d4:	42b5      	cmp	r5, r6
 80051d6:	d11a      	bne.n	800520e <_printf_common+0xd2>
 80051d8:	2000      	movs	r0, #0
 80051da:	e008      	b.n	80051ee <_printf_common+0xb2>
 80051dc:	2301      	movs	r3, #1
 80051de:	4652      	mov	r2, sl
 80051e0:	4649      	mov	r1, r9
 80051e2:	4638      	mov	r0, r7
 80051e4:	47c0      	blx	r8
 80051e6:	3001      	adds	r0, #1
 80051e8:	d103      	bne.n	80051f2 <_printf_common+0xb6>
 80051ea:	f04f 30ff 	mov.w	r0, #4294967295
 80051ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051f2:	3501      	adds	r5, #1
 80051f4:	e7c1      	b.n	800517a <_printf_common+0x3e>
 80051f6:	2030      	movs	r0, #48	; 0x30
 80051f8:	18e1      	adds	r1, r4, r3
 80051fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005204:	4422      	add	r2, r4
 8005206:	3302      	adds	r3, #2
 8005208:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800520c:	e7c2      	b.n	8005194 <_printf_common+0x58>
 800520e:	2301      	movs	r3, #1
 8005210:	4622      	mov	r2, r4
 8005212:	4649      	mov	r1, r9
 8005214:	4638      	mov	r0, r7
 8005216:	47c0      	blx	r8
 8005218:	3001      	adds	r0, #1
 800521a:	d0e6      	beq.n	80051ea <_printf_common+0xae>
 800521c:	3601      	adds	r6, #1
 800521e:	e7d9      	b.n	80051d4 <_printf_common+0x98>

08005220 <_printf_i>:
 8005220:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005224:	7e0f      	ldrb	r7, [r1, #24]
 8005226:	4691      	mov	r9, r2
 8005228:	2f78      	cmp	r7, #120	; 0x78
 800522a:	4680      	mov	r8, r0
 800522c:	460c      	mov	r4, r1
 800522e:	469a      	mov	sl, r3
 8005230:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005232:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005236:	d807      	bhi.n	8005248 <_printf_i+0x28>
 8005238:	2f62      	cmp	r7, #98	; 0x62
 800523a:	d80a      	bhi.n	8005252 <_printf_i+0x32>
 800523c:	2f00      	cmp	r7, #0
 800523e:	f000 80d5 	beq.w	80053ec <_printf_i+0x1cc>
 8005242:	2f58      	cmp	r7, #88	; 0x58
 8005244:	f000 80c1 	beq.w	80053ca <_printf_i+0x1aa>
 8005248:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800524c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005250:	e03a      	b.n	80052c8 <_printf_i+0xa8>
 8005252:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005256:	2b15      	cmp	r3, #21
 8005258:	d8f6      	bhi.n	8005248 <_printf_i+0x28>
 800525a:	a101      	add	r1, pc, #4	; (adr r1, 8005260 <_printf_i+0x40>)
 800525c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005260:	080052b9 	.word	0x080052b9
 8005264:	080052cd 	.word	0x080052cd
 8005268:	08005249 	.word	0x08005249
 800526c:	08005249 	.word	0x08005249
 8005270:	08005249 	.word	0x08005249
 8005274:	08005249 	.word	0x08005249
 8005278:	080052cd 	.word	0x080052cd
 800527c:	08005249 	.word	0x08005249
 8005280:	08005249 	.word	0x08005249
 8005284:	08005249 	.word	0x08005249
 8005288:	08005249 	.word	0x08005249
 800528c:	080053d3 	.word	0x080053d3
 8005290:	080052f9 	.word	0x080052f9
 8005294:	0800538d 	.word	0x0800538d
 8005298:	08005249 	.word	0x08005249
 800529c:	08005249 	.word	0x08005249
 80052a0:	080053f5 	.word	0x080053f5
 80052a4:	08005249 	.word	0x08005249
 80052a8:	080052f9 	.word	0x080052f9
 80052ac:	08005249 	.word	0x08005249
 80052b0:	08005249 	.word	0x08005249
 80052b4:	08005395 	.word	0x08005395
 80052b8:	682b      	ldr	r3, [r5, #0]
 80052ba:	1d1a      	adds	r2, r3, #4
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	602a      	str	r2, [r5, #0]
 80052c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052c8:	2301      	movs	r3, #1
 80052ca:	e0a0      	b.n	800540e <_printf_i+0x1ee>
 80052cc:	6820      	ldr	r0, [r4, #0]
 80052ce:	682b      	ldr	r3, [r5, #0]
 80052d0:	0607      	lsls	r7, r0, #24
 80052d2:	f103 0104 	add.w	r1, r3, #4
 80052d6:	6029      	str	r1, [r5, #0]
 80052d8:	d501      	bpl.n	80052de <_printf_i+0xbe>
 80052da:	681e      	ldr	r6, [r3, #0]
 80052dc:	e003      	b.n	80052e6 <_printf_i+0xc6>
 80052de:	0646      	lsls	r6, r0, #25
 80052e0:	d5fb      	bpl.n	80052da <_printf_i+0xba>
 80052e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80052e6:	2e00      	cmp	r6, #0
 80052e8:	da03      	bge.n	80052f2 <_printf_i+0xd2>
 80052ea:	232d      	movs	r3, #45	; 0x2d
 80052ec:	4276      	negs	r6, r6
 80052ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052f2:	230a      	movs	r3, #10
 80052f4:	4859      	ldr	r0, [pc, #356]	; (800545c <_printf_i+0x23c>)
 80052f6:	e012      	b.n	800531e <_printf_i+0xfe>
 80052f8:	682b      	ldr	r3, [r5, #0]
 80052fa:	6820      	ldr	r0, [r4, #0]
 80052fc:	1d19      	adds	r1, r3, #4
 80052fe:	6029      	str	r1, [r5, #0]
 8005300:	0605      	lsls	r5, r0, #24
 8005302:	d501      	bpl.n	8005308 <_printf_i+0xe8>
 8005304:	681e      	ldr	r6, [r3, #0]
 8005306:	e002      	b.n	800530e <_printf_i+0xee>
 8005308:	0641      	lsls	r1, r0, #25
 800530a:	d5fb      	bpl.n	8005304 <_printf_i+0xe4>
 800530c:	881e      	ldrh	r6, [r3, #0]
 800530e:	2f6f      	cmp	r7, #111	; 0x6f
 8005310:	bf0c      	ite	eq
 8005312:	2308      	moveq	r3, #8
 8005314:	230a      	movne	r3, #10
 8005316:	4851      	ldr	r0, [pc, #324]	; (800545c <_printf_i+0x23c>)
 8005318:	2100      	movs	r1, #0
 800531a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800531e:	6865      	ldr	r5, [r4, #4]
 8005320:	2d00      	cmp	r5, #0
 8005322:	bfa8      	it	ge
 8005324:	6821      	ldrge	r1, [r4, #0]
 8005326:	60a5      	str	r5, [r4, #8]
 8005328:	bfa4      	itt	ge
 800532a:	f021 0104 	bicge.w	r1, r1, #4
 800532e:	6021      	strge	r1, [r4, #0]
 8005330:	b90e      	cbnz	r6, 8005336 <_printf_i+0x116>
 8005332:	2d00      	cmp	r5, #0
 8005334:	d04b      	beq.n	80053ce <_printf_i+0x1ae>
 8005336:	4615      	mov	r5, r2
 8005338:	fbb6 f1f3 	udiv	r1, r6, r3
 800533c:	fb03 6711 	mls	r7, r3, r1, r6
 8005340:	5dc7      	ldrb	r7, [r0, r7]
 8005342:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005346:	4637      	mov	r7, r6
 8005348:	42bb      	cmp	r3, r7
 800534a:	460e      	mov	r6, r1
 800534c:	d9f4      	bls.n	8005338 <_printf_i+0x118>
 800534e:	2b08      	cmp	r3, #8
 8005350:	d10b      	bne.n	800536a <_printf_i+0x14a>
 8005352:	6823      	ldr	r3, [r4, #0]
 8005354:	07de      	lsls	r6, r3, #31
 8005356:	d508      	bpl.n	800536a <_printf_i+0x14a>
 8005358:	6923      	ldr	r3, [r4, #16]
 800535a:	6861      	ldr	r1, [r4, #4]
 800535c:	4299      	cmp	r1, r3
 800535e:	bfde      	ittt	le
 8005360:	2330      	movle	r3, #48	; 0x30
 8005362:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005366:	f105 35ff 	addle.w	r5, r5, #4294967295
 800536a:	1b52      	subs	r2, r2, r5
 800536c:	6122      	str	r2, [r4, #16]
 800536e:	464b      	mov	r3, r9
 8005370:	4621      	mov	r1, r4
 8005372:	4640      	mov	r0, r8
 8005374:	f8cd a000 	str.w	sl, [sp]
 8005378:	aa03      	add	r2, sp, #12
 800537a:	f7ff fedf 	bl	800513c <_printf_common>
 800537e:	3001      	adds	r0, #1
 8005380:	d14a      	bne.n	8005418 <_printf_i+0x1f8>
 8005382:	f04f 30ff 	mov.w	r0, #4294967295
 8005386:	b004      	add	sp, #16
 8005388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	f043 0320 	orr.w	r3, r3, #32
 8005392:	6023      	str	r3, [r4, #0]
 8005394:	2778      	movs	r7, #120	; 0x78
 8005396:	4832      	ldr	r0, [pc, #200]	; (8005460 <_printf_i+0x240>)
 8005398:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	6829      	ldr	r1, [r5, #0]
 80053a0:	061f      	lsls	r7, r3, #24
 80053a2:	f851 6b04 	ldr.w	r6, [r1], #4
 80053a6:	d402      	bmi.n	80053ae <_printf_i+0x18e>
 80053a8:	065f      	lsls	r7, r3, #25
 80053aa:	bf48      	it	mi
 80053ac:	b2b6      	uxthmi	r6, r6
 80053ae:	07df      	lsls	r7, r3, #31
 80053b0:	bf48      	it	mi
 80053b2:	f043 0320 	orrmi.w	r3, r3, #32
 80053b6:	6029      	str	r1, [r5, #0]
 80053b8:	bf48      	it	mi
 80053ba:	6023      	strmi	r3, [r4, #0]
 80053bc:	b91e      	cbnz	r6, 80053c6 <_printf_i+0x1a6>
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	f023 0320 	bic.w	r3, r3, #32
 80053c4:	6023      	str	r3, [r4, #0]
 80053c6:	2310      	movs	r3, #16
 80053c8:	e7a6      	b.n	8005318 <_printf_i+0xf8>
 80053ca:	4824      	ldr	r0, [pc, #144]	; (800545c <_printf_i+0x23c>)
 80053cc:	e7e4      	b.n	8005398 <_printf_i+0x178>
 80053ce:	4615      	mov	r5, r2
 80053d0:	e7bd      	b.n	800534e <_printf_i+0x12e>
 80053d2:	682b      	ldr	r3, [r5, #0]
 80053d4:	6826      	ldr	r6, [r4, #0]
 80053d6:	1d18      	adds	r0, r3, #4
 80053d8:	6961      	ldr	r1, [r4, #20]
 80053da:	6028      	str	r0, [r5, #0]
 80053dc:	0635      	lsls	r5, r6, #24
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	d501      	bpl.n	80053e6 <_printf_i+0x1c6>
 80053e2:	6019      	str	r1, [r3, #0]
 80053e4:	e002      	b.n	80053ec <_printf_i+0x1cc>
 80053e6:	0670      	lsls	r0, r6, #25
 80053e8:	d5fb      	bpl.n	80053e2 <_printf_i+0x1c2>
 80053ea:	8019      	strh	r1, [r3, #0]
 80053ec:	2300      	movs	r3, #0
 80053ee:	4615      	mov	r5, r2
 80053f0:	6123      	str	r3, [r4, #16]
 80053f2:	e7bc      	b.n	800536e <_printf_i+0x14e>
 80053f4:	682b      	ldr	r3, [r5, #0]
 80053f6:	2100      	movs	r1, #0
 80053f8:	1d1a      	adds	r2, r3, #4
 80053fa:	602a      	str	r2, [r5, #0]
 80053fc:	681d      	ldr	r5, [r3, #0]
 80053fe:	6862      	ldr	r2, [r4, #4]
 8005400:	4628      	mov	r0, r5
 8005402:	f000 fbe2 	bl	8005bca <memchr>
 8005406:	b108      	cbz	r0, 800540c <_printf_i+0x1ec>
 8005408:	1b40      	subs	r0, r0, r5
 800540a:	6060      	str	r0, [r4, #4]
 800540c:	6863      	ldr	r3, [r4, #4]
 800540e:	6123      	str	r3, [r4, #16]
 8005410:	2300      	movs	r3, #0
 8005412:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005416:	e7aa      	b.n	800536e <_printf_i+0x14e>
 8005418:	462a      	mov	r2, r5
 800541a:	4649      	mov	r1, r9
 800541c:	4640      	mov	r0, r8
 800541e:	6923      	ldr	r3, [r4, #16]
 8005420:	47d0      	blx	sl
 8005422:	3001      	adds	r0, #1
 8005424:	d0ad      	beq.n	8005382 <_printf_i+0x162>
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	079b      	lsls	r3, r3, #30
 800542a:	d413      	bmi.n	8005454 <_printf_i+0x234>
 800542c:	68e0      	ldr	r0, [r4, #12]
 800542e:	9b03      	ldr	r3, [sp, #12]
 8005430:	4298      	cmp	r0, r3
 8005432:	bfb8      	it	lt
 8005434:	4618      	movlt	r0, r3
 8005436:	e7a6      	b.n	8005386 <_printf_i+0x166>
 8005438:	2301      	movs	r3, #1
 800543a:	4632      	mov	r2, r6
 800543c:	4649      	mov	r1, r9
 800543e:	4640      	mov	r0, r8
 8005440:	47d0      	blx	sl
 8005442:	3001      	adds	r0, #1
 8005444:	d09d      	beq.n	8005382 <_printf_i+0x162>
 8005446:	3501      	adds	r5, #1
 8005448:	68e3      	ldr	r3, [r4, #12]
 800544a:	9903      	ldr	r1, [sp, #12]
 800544c:	1a5b      	subs	r3, r3, r1
 800544e:	42ab      	cmp	r3, r5
 8005450:	dcf2      	bgt.n	8005438 <_printf_i+0x218>
 8005452:	e7eb      	b.n	800542c <_printf_i+0x20c>
 8005454:	2500      	movs	r5, #0
 8005456:	f104 0619 	add.w	r6, r4, #25
 800545a:	e7f5      	b.n	8005448 <_printf_i+0x228>
 800545c:	0800937c 	.word	0x0800937c
 8005460:	0800938d 	.word	0x0800938d

08005464 <_scanf_float>:
 8005464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005468:	b087      	sub	sp, #28
 800546a:	9303      	str	r3, [sp, #12]
 800546c:	688b      	ldr	r3, [r1, #8]
 800546e:	4617      	mov	r7, r2
 8005470:	1e5a      	subs	r2, r3, #1
 8005472:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005476:	bf85      	ittet	hi
 8005478:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800547c:	195b      	addhi	r3, r3, r5
 800547e:	2300      	movls	r3, #0
 8005480:	9302      	strhi	r3, [sp, #8]
 8005482:	bf88      	it	hi
 8005484:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005488:	468b      	mov	fp, r1
 800548a:	f04f 0500 	mov.w	r5, #0
 800548e:	bf8c      	ite	hi
 8005490:	608b      	strhi	r3, [r1, #8]
 8005492:	9302      	strls	r3, [sp, #8]
 8005494:	680b      	ldr	r3, [r1, #0]
 8005496:	4680      	mov	r8, r0
 8005498:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800549c:	f84b 3b1c 	str.w	r3, [fp], #28
 80054a0:	460c      	mov	r4, r1
 80054a2:	465e      	mov	r6, fp
 80054a4:	46aa      	mov	sl, r5
 80054a6:	46a9      	mov	r9, r5
 80054a8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80054ac:	9501      	str	r5, [sp, #4]
 80054ae:	68a2      	ldr	r2, [r4, #8]
 80054b0:	b152      	cbz	r2, 80054c8 <_scanf_float+0x64>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b4e      	cmp	r3, #78	; 0x4e
 80054b8:	d864      	bhi.n	8005584 <_scanf_float+0x120>
 80054ba:	2b40      	cmp	r3, #64	; 0x40
 80054bc:	d83c      	bhi.n	8005538 <_scanf_float+0xd4>
 80054be:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80054c2:	b2c8      	uxtb	r0, r1
 80054c4:	280e      	cmp	r0, #14
 80054c6:	d93a      	bls.n	800553e <_scanf_float+0xda>
 80054c8:	f1b9 0f00 	cmp.w	r9, #0
 80054cc:	d003      	beq.n	80054d6 <_scanf_float+0x72>
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054d4:	6023      	str	r3, [r4, #0]
 80054d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054da:	f1ba 0f01 	cmp.w	sl, #1
 80054de:	f200 8113 	bhi.w	8005708 <_scanf_float+0x2a4>
 80054e2:	455e      	cmp	r6, fp
 80054e4:	f200 8105 	bhi.w	80056f2 <_scanf_float+0x28e>
 80054e8:	2501      	movs	r5, #1
 80054ea:	4628      	mov	r0, r5
 80054ec:	b007      	add	sp, #28
 80054ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054f2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80054f6:	2a0d      	cmp	r2, #13
 80054f8:	d8e6      	bhi.n	80054c8 <_scanf_float+0x64>
 80054fa:	a101      	add	r1, pc, #4	; (adr r1, 8005500 <_scanf_float+0x9c>)
 80054fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005500:	0800563f 	.word	0x0800563f
 8005504:	080054c9 	.word	0x080054c9
 8005508:	080054c9 	.word	0x080054c9
 800550c:	080054c9 	.word	0x080054c9
 8005510:	0800569f 	.word	0x0800569f
 8005514:	08005677 	.word	0x08005677
 8005518:	080054c9 	.word	0x080054c9
 800551c:	080054c9 	.word	0x080054c9
 8005520:	0800564d 	.word	0x0800564d
 8005524:	080054c9 	.word	0x080054c9
 8005528:	080054c9 	.word	0x080054c9
 800552c:	080054c9 	.word	0x080054c9
 8005530:	080054c9 	.word	0x080054c9
 8005534:	08005605 	.word	0x08005605
 8005538:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800553c:	e7db      	b.n	80054f6 <_scanf_float+0x92>
 800553e:	290e      	cmp	r1, #14
 8005540:	d8c2      	bhi.n	80054c8 <_scanf_float+0x64>
 8005542:	a001      	add	r0, pc, #4	; (adr r0, 8005548 <_scanf_float+0xe4>)
 8005544:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005548:	080055f7 	.word	0x080055f7
 800554c:	080054c9 	.word	0x080054c9
 8005550:	080055f7 	.word	0x080055f7
 8005554:	0800568b 	.word	0x0800568b
 8005558:	080054c9 	.word	0x080054c9
 800555c:	080055a5 	.word	0x080055a5
 8005560:	080055e1 	.word	0x080055e1
 8005564:	080055e1 	.word	0x080055e1
 8005568:	080055e1 	.word	0x080055e1
 800556c:	080055e1 	.word	0x080055e1
 8005570:	080055e1 	.word	0x080055e1
 8005574:	080055e1 	.word	0x080055e1
 8005578:	080055e1 	.word	0x080055e1
 800557c:	080055e1 	.word	0x080055e1
 8005580:	080055e1 	.word	0x080055e1
 8005584:	2b6e      	cmp	r3, #110	; 0x6e
 8005586:	d809      	bhi.n	800559c <_scanf_float+0x138>
 8005588:	2b60      	cmp	r3, #96	; 0x60
 800558a:	d8b2      	bhi.n	80054f2 <_scanf_float+0x8e>
 800558c:	2b54      	cmp	r3, #84	; 0x54
 800558e:	d077      	beq.n	8005680 <_scanf_float+0x21c>
 8005590:	2b59      	cmp	r3, #89	; 0x59
 8005592:	d199      	bne.n	80054c8 <_scanf_float+0x64>
 8005594:	2d07      	cmp	r5, #7
 8005596:	d197      	bne.n	80054c8 <_scanf_float+0x64>
 8005598:	2508      	movs	r5, #8
 800559a:	e029      	b.n	80055f0 <_scanf_float+0x18c>
 800559c:	2b74      	cmp	r3, #116	; 0x74
 800559e:	d06f      	beq.n	8005680 <_scanf_float+0x21c>
 80055a0:	2b79      	cmp	r3, #121	; 0x79
 80055a2:	e7f6      	b.n	8005592 <_scanf_float+0x12e>
 80055a4:	6821      	ldr	r1, [r4, #0]
 80055a6:	05c8      	lsls	r0, r1, #23
 80055a8:	d51a      	bpl.n	80055e0 <_scanf_float+0x17c>
 80055aa:	9b02      	ldr	r3, [sp, #8]
 80055ac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80055b0:	6021      	str	r1, [r4, #0]
 80055b2:	f109 0901 	add.w	r9, r9, #1
 80055b6:	b11b      	cbz	r3, 80055c0 <_scanf_float+0x15c>
 80055b8:	3b01      	subs	r3, #1
 80055ba:	3201      	adds	r2, #1
 80055bc:	9302      	str	r3, [sp, #8]
 80055be:	60a2      	str	r2, [r4, #8]
 80055c0:	68a3      	ldr	r3, [r4, #8]
 80055c2:	3b01      	subs	r3, #1
 80055c4:	60a3      	str	r3, [r4, #8]
 80055c6:	6923      	ldr	r3, [r4, #16]
 80055c8:	3301      	adds	r3, #1
 80055ca:	6123      	str	r3, [r4, #16]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3b01      	subs	r3, #1
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	607b      	str	r3, [r7, #4]
 80055d4:	f340 8084 	ble.w	80056e0 <_scanf_float+0x27c>
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	3301      	adds	r3, #1
 80055dc:	603b      	str	r3, [r7, #0]
 80055de:	e766      	b.n	80054ae <_scanf_float+0x4a>
 80055e0:	eb1a 0f05 	cmn.w	sl, r5
 80055e4:	f47f af70 	bne.w	80054c8 <_scanf_float+0x64>
 80055e8:	6822      	ldr	r2, [r4, #0]
 80055ea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80055ee:	6022      	str	r2, [r4, #0]
 80055f0:	f806 3b01 	strb.w	r3, [r6], #1
 80055f4:	e7e4      	b.n	80055c0 <_scanf_float+0x15c>
 80055f6:	6822      	ldr	r2, [r4, #0]
 80055f8:	0610      	lsls	r0, r2, #24
 80055fa:	f57f af65 	bpl.w	80054c8 <_scanf_float+0x64>
 80055fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005602:	e7f4      	b.n	80055ee <_scanf_float+0x18a>
 8005604:	f1ba 0f00 	cmp.w	sl, #0
 8005608:	d10e      	bne.n	8005628 <_scanf_float+0x1c4>
 800560a:	f1b9 0f00 	cmp.w	r9, #0
 800560e:	d10e      	bne.n	800562e <_scanf_float+0x1ca>
 8005610:	6822      	ldr	r2, [r4, #0]
 8005612:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005616:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800561a:	d108      	bne.n	800562e <_scanf_float+0x1ca>
 800561c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005620:	f04f 0a01 	mov.w	sl, #1
 8005624:	6022      	str	r2, [r4, #0]
 8005626:	e7e3      	b.n	80055f0 <_scanf_float+0x18c>
 8005628:	f1ba 0f02 	cmp.w	sl, #2
 800562c:	d055      	beq.n	80056da <_scanf_float+0x276>
 800562e:	2d01      	cmp	r5, #1
 8005630:	d002      	beq.n	8005638 <_scanf_float+0x1d4>
 8005632:	2d04      	cmp	r5, #4
 8005634:	f47f af48 	bne.w	80054c8 <_scanf_float+0x64>
 8005638:	3501      	adds	r5, #1
 800563a:	b2ed      	uxtb	r5, r5
 800563c:	e7d8      	b.n	80055f0 <_scanf_float+0x18c>
 800563e:	f1ba 0f01 	cmp.w	sl, #1
 8005642:	f47f af41 	bne.w	80054c8 <_scanf_float+0x64>
 8005646:	f04f 0a02 	mov.w	sl, #2
 800564a:	e7d1      	b.n	80055f0 <_scanf_float+0x18c>
 800564c:	b97d      	cbnz	r5, 800566e <_scanf_float+0x20a>
 800564e:	f1b9 0f00 	cmp.w	r9, #0
 8005652:	f47f af3c 	bne.w	80054ce <_scanf_float+0x6a>
 8005656:	6822      	ldr	r2, [r4, #0]
 8005658:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800565c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005660:	f47f af39 	bne.w	80054d6 <_scanf_float+0x72>
 8005664:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005668:	2501      	movs	r5, #1
 800566a:	6022      	str	r2, [r4, #0]
 800566c:	e7c0      	b.n	80055f0 <_scanf_float+0x18c>
 800566e:	2d03      	cmp	r5, #3
 8005670:	d0e2      	beq.n	8005638 <_scanf_float+0x1d4>
 8005672:	2d05      	cmp	r5, #5
 8005674:	e7de      	b.n	8005634 <_scanf_float+0x1d0>
 8005676:	2d02      	cmp	r5, #2
 8005678:	f47f af26 	bne.w	80054c8 <_scanf_float+0x64>
 800567c:	2503      	movs	r5, #3
 800567e:	e7b7      	b.n	80055f0 <_scanf_float+0x18c>
 8005680:	2d06      	cmp	r5, #6
 8005682:	f47f af21 	bne.w	80054c8 <_scanf_float+0x64>
 8005686:	2507      	movs	r5, #7
 8005688:	e7b2      	b.n	80055f0 <_scanf_float+0x18c>
 800568a:	6822      	ldr	r2, [r4, #0]
 800568c:	0591      	lsls	r1, r2, #22
 800568e:	f57f af1b 	bpl.w	80054c8 <_scanf_float+0x64>
 8005692:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005696:	6022      	str	r2, [r4, #0]
 8005698:	f8cd 9004 	str.w	r9, [sp, #4]
 800569c:	e7a8      	b.n	80055f0 <_scanf_float+0x18c>
 800569e:	6822      	ldr	r2, [r4, #0]
 80056a0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80056a4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80056a8:	d006      	beq.n	80056b8 <_scanf_float+0x254>
 80056aa:	0550      	lsls	r0, r2, #21
 80056ac:	f57f af0c 	bpl.w	80054c8 <_scanf_float+0x64>
 80056b0:	f1b9 0f00 	cmp.w	r9, #0
 80056b4:	f43f af0f 	beq.w	80054d6 <_scanf_float+0x72>
 80056b8:	0591      	lsls	r1, r2, #22
 80056ba:	bf58      	it	pl
 80056bc:	9901      	ldrpl	r1, [sp, #4]
 80056be:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80056c2:	bf58      	it	pl
 80056c4:	eba9 0101 	subpl.w	r1, r9, r1
 80056c8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80056cc:	f04f 0900 	mov.w	r9, #0
 80056d0:	bf58      	it	pl
 80056d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80056d6:	6022      	str	r2, [r4, #0]
 80056d8:	e78a      	b.n	80055f0 <_scanf_float+0x18c>
 80056da:	f04f 0a03 	mov.w	sl, #3
 80056de:	e787      	b.n	80055f0 <_scanf_float+0x18c>
 80056e0:	4639      	mov	r1, r7
 80056e2:	4640      	mov	r0, r8
 80056e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80056e8:	4798      	blx	r3
 80056ea:	2800      	cmp	r0, #0
 80056ec:	f43f aedf 	beq.w	80054ae <_scanf_float+0x4a>
 80056f0:	e6ea      	b.n	80054c8 <_scanf_float+0x64>
 80056f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056f6:	463a      	mov	r2, r7
 80056f8:	4640      	mov	r0, r8
 80056fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056fe:	4798      	blx	r3
 8005700:	6923      	ldr	r3, [r4, #16]
 8005702:	3b01      	subs	r3, #1
 8005704:	6123      	str	r3, [r4, #16]
 8005706:	e6ec      	b.n	80054e2 <_scanf_float+0x7e>
 8005708:	1e6b      	subs	r3, r5, #1
 800570a:	2b06      	cmp	r3, #6
 800570c:	d825      	bhi.n	800575a <_scanf_float+0x2f6>
 800570e:	2d02      	cmp	r5, #2
 8005710:	d836      	bhi.n	8005780 <_scanf_float+0x31c>
 8005712:	455e      	cmp	r6, fp
 8005714:	f67f aee8 	bls.w	80054e8 <_scanf_float+0x84>
 8005718:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800571c:	463a      	mov	r2, r7
 800571e:	4640      	mov	r0, r8
 8005720:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005724:	4798      	blx	r3
 8005726:	6923      	ldr	r3, [r4, #16]
 8005728:	3b01      	subs	r3, #1
 800572a:	6123      	str	r3, [r4, #16]
 800572c:	e7f1      	b.n	8005712 <_scanf_float+0x2ae>
 800572e:	9802      	ldr	r0, [sp, #8]
 8005730:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005734:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005738:	463a      	mov	r2, r7
 800573a:	9002      	str	r0, [sp, #8]
 800573c:	4640      	mov	r0, r8
 800573e:	4798      	blx	r3
 8005740:	6923      	ldr	r3, [r4, #16]
 8005742:	3b01      	subs	r3, #1
 8005744:	6123      	str	r3, [r4, #16]
 8005746:	f10a 3aff 	add.w	sl, sl, #4294967295
 800574a:	fa5f fa8a 	uxtb.w	sl, sl
 800574e:	f1ba 0f02 	cmp.w	sl, #2
 8005752:	d1ec      	bne.n	800572e <_scanf_float+0x2ca>
 8005754:	3d03      	subs	r5, #3
 8005756:	b2ed      	uxtb	r5, r5
 8005758:	1b76      	subs	r6, r6, r5
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	05da      	lsls	r2, r3, #23
 800575e:	d52f      	bpl.n	80057c0 <_scanf_float+0x35c>
 8005760:	055b      	lsls	r3, r3, #21
 8005762:	d510      	bpl.n	8005786 <_scanf_float+0x322>
 8005764:	455e      	cmp	r6, fp
 8005766:	f67f aebf 	bls.w	80054e8 <_scanf_float+0x84>
 800576a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800576e:	463a      	mov	r2, r7
 8005770:	4640      	mov	r0, r8
 8005772:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005776:	4798      	blx	r3
 8005778:	6923      	ldr	r3, [r4, #16]
 800577a:	3b01      	subs	r3, #1
 800577c:	6123      	str	r3, [r4, #16]
 800577e:	e7f1      	b.n	8005764 <_scanf_float+0x300>
 8005780:	46aa      	mov	sl, r5
 8005782:	9602      	str	r6, [sp, #8]
 8005784:	e7df      	b.n	8005746 <_scanf_float+0x2e2>
 8005786:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800578a:	6923      	ldr	r3, [r4, #16]
 800578c:	2965      	cmp	r1, #101	; 0x65
 800578e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005792:	f106 35ff 	add.w	r5, r6, #4294967295
 8005796:	6123      	str	r3, [r4, #16]
 8005798:	d00c      	beq.n	80057b4 <_scanf_float+0x350>
 800579a:	2945      	cmp	r1, #69	; 0x45
 800579c:	d00a      	beq.n	80057b4 <_scanf_float+0x350>
 800579e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057a2:	463a      	mov	r2, r7
 80057a4:	4640      	mov	r0, r8
 80057a6:	4798      	blx	r3
 80057a8:	6923      	ldr	r3, [r4, #16]
 80057aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80057ae:	3b01      	subs	r3, #1
 80057b0:	1eb5      	subs	r5, r6, #2
 80057b2:	6123      	str	r3, [r4, #16]
 80057b4:	463a      	mov	r2, r7
 80057b6:	4640      	mov	r0, r8
 80057b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057bc:	4798      	blx	r3
 80057be:	462e      	mov	r6, r5
 80057c0:	6825      	ldr	r5, [r4, #0]
 80057c2:	f015 0510 	ands.w	r5, r5, #16
 80057c6:	d155      	bne.n	8005874 <_scanf_float+0x410>
 80057c8:	7035      	strb	r5, [r6, #0]
 80057ca:	6823      	ldr	r3, [r4, #0]
 80057cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d4:	d11d      	bne.n	8005812 <_scanf_float+0x3ae>
 80057d6:	9b01      	ldr	r3, [sp, #4]
 80057d8:	454b      	cmp	r3, r9
 80057da:	eba3 0209 	sub.w	r2, r3, r9
 80057de:	d125      	bne.n	800582c <_scanf_float+0x3c8>
 80057e0:	2200      	movs	r2, #0
 80057e2:	4659      	mov	r1, fp
 80057e4:	4640      	mov	r0, r8
 80057e6:	f002 fc23 	bl	8008030 <_strtod_r>
 80057ea:	9b03      	ldr	r3, [sp, #12]
 80057ec:	f8d4 c000 	ldr.w	ip, [r4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f01c 0f02 	tst.w	ip, #2
 80057f6:	4606      	mov	r6, r0
 80057f8:	460f      	mov	r7, r1
 80057fa:	f103 0204 	add.w	r2, r3, #4
 80057fe:	d020      	beq.n	8005842 <_scanf_float+0x3de>
 8005800:	9903      	ldr	r1, [sp, #12]
 8005802:	600a      	str	r2, [r1, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	e9c3 6700 	strd	r6, r7, [r3]
 800580a:	68e3      	ldr	r3, [r4, #12]
 800580c:	3301      	adds	r3, #1
 800580e:	60e3      	str	r3, [r4, #12]
 8005810:	e66b      	b.n	80054ea <_scanf_float+0x86>
 8005812:	9b04      	ldr	r3, [sp, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d0e3      	beq.n	80057e0 <_scanf_float+0x37c>
 8005818:	9905      	ldr	r1, [sp, #20]
 800581a:	230a      	movs	r3, #10
 800581c:	462a      	mov	r2, r5
 800581e:	4640      	mov	r0, r8
 8005820:	3101      	adds	r1, #1
 8005822:	f002 fc89 	bl	8008138 <_strtol_r>
 8005826:	9b04      	ldr	r3, [sp, #16]
 8005828:	9e05      	ldr	r6, [sp, #20]
 800582a:	1ac2      	subs	r2, r0, r3
 800582c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005830:	429e      	cmp	r6, r3
 8005832:	bf28      	it	cs
 8005834:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005838:	4630      	mov	r0, r6
 800583a:	490f      	ldr	r1, [pc, #60]	; (8005878 <_scanf_float+0x414>)
 800583c:	f000 f8e2 	bl	8005a04 <siprintf>
 8005840:	e7ce      	b.n	80057e0 <_scanf_float+0x37c>
 8005842:	f01c 0f04 	tst.w	ip, #4
 8005846:	d1db      	bne.n	8005800 <_scanf_float+0x39c>
 8005848:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800584c:	f8cc 2000 	str.w	r2, [ip]
 8005850:	f8d3 8000 	ldr.w	r8, [r3]
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	f7fb f944 	bl	8000ae4 <__aeabi_dcmpun>
 800585c:	b128      	cbz	r0, 800586a <_scanf_float+0x406>
 800585e:	4807      	ldr	r0, [pc, #28]	; (800587c <_scanf_float+0x418>)
 8005860:	f000 f9c2 	bl	8005be8 <nanf>
 8005864:	f8c8 0000 	str.w	r0, [r8]
 8005868:	e7cf      	b.n	800580a <_scanf_float+0x3a6>
 800586a:	4630      	mov	r0, r6
 800586c:	4639      	mov	r1, r7
 800586e:	f7fb f997 	bl	8000ba0 <__aeabi_d2f>
 8005872:	e7f7      	b.n	8005864 <_scanf_float+0x400>
 8005874:	2500      	movs	r5, #0
 8005876:	e638      	b.n	80054ea <_scanf_float+0x86>
 8005878:	0800939e 	.word	0x0800939e
 800587c:	08009735 	.word	0x08009735

08005880 <std>:
 8005880:	2300      	movs	r3, #0
 8005882:	b510      	push	{r4, lr}
 8005884:	4604      	mov	r4, r0
 8005886:	e9c0 3300 	strd	r3, r3, [r0]
 800588a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800588e:	6083      	str	r3, [r0, #8]
 8005890:	8181      	strh	r1, [r0, #12]
 8005892:	6643      	str	r3, [r0, #100]	; 0x64
 8005894:	81c2      	strh	r2, [r0, #14]
 8005896:	6183      	str	r3, [r0, #24]
 8005898:	4619      	mov	r1, r3
 800589a:	2208      	movs	r2, #8
 800589c:	305c      	adds	r0, #92	; 0x5c
 800589e:	f000 f914 	bl	8005aca <memset>
 80058a2:	4b0d      	ldr	r3, [pc, #52]	; (80058d8 <std+0x58>)
 80058a4:	6224      	str	r4, [r4, #32]
 80058a6:	6263      	str	r3, [r4, #36]	; 0x24
 80058a8:	4b0c      	ldr	r3, [pc, #48]	; (80058dc <std+0x5c>)
 80058aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80058ac:	4b0c      	ldr	r3, [pc, #48]	; (80058e0 <std+0x60>)
 80058ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058b0:	4b0c      	ldr	r3, [pc, #48]	; (80058e4 <std+0x64>)
 80058b2:	6323      	str	r3, [r4, #48]	; 0x30
 80058b4:	4b0c      	ldr	r3, [pc, #48]	; (80058e8 <std+0x68>)
 80058b6:	429c      	cmp	r4, r3
 80058b8:	d006      	beq.n	80058c8 <std+0x48>
 80058ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80058be:	4294      	cmp	r4, r2
 80058c0:	d002      	beq.n	80058c8 <std+0x48>
 80058c2:	33d0      	adds	r3, #208	; 0xd0
 80058c4:	429c      	cmp	r4, r3
 80058c6:	d105      	bne.n	80058d4 <std+0x54>
 80058c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80058cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058d0:	f000 b978 	b.w	8005bc4 <__retarget_lock_init_recursive>
 80058d4:	bd10      	pop	{r4, pc}
 80058d6:	bf00      	nop
 80058d8:	08005a45 	.word	0x08005a45
 80058dc:	08005a67 	.word	0x08005a67
 80058e0:	08005a9f 	.word	0x08005a9f
 80058e4:	08005ac3 	.word	0x08005ac3
 80058e8:	20000364 	.word	0x20000364

080058ec <stdio_exit_handler>:
 80058ec:	4a02      	ldr	r2, [pc, #8]	; (80058f8 <stdio_exit_handler+0xc>)
 80058ee:	4903      	ldr	r1, [pc, #12]	; (80058fc <stdio_exit_handler+0x10>)
 80058f0:	4803      	ldr	r0, [pc, #12]	; (8005900 <stdio_exit_handler+0x14>)
 80058f2:	f000 b869 	b.w	80059c8 <_fwalk_sglue>
 80058f6:	bf00      	nop
 80058f8:	20000014 	.word	0x20000014
 80058fc:	080084f1 	.word	0x080084f1
 8005900:	20000020 	.word	0x20000020

08005904 <cleanup_stdio>:
 8005904:	6841      	ldr	r1, [r0, #4]
 8005906:	4b0c      	ldr	r3, [pc, #48]	; (8005938 <cleanup_stdio+0x34>)
 8005908:	b510      	push	{r4, lr}
 800590a:	4299      	cmp	r1, r3
 800590c:	4604      	mov	r4, r0
 800590e:	d001      	beq.n	8005914 <cleanup_stdio+0x10>
 8005910:	f002 fdee 	bl	80084f0 <_fflush_r>
 8005914:	68a1      	ldr	r1, [r4, #8]
 8005916:	4b09      	ldr	r3, [pc, #36]	; (800593c <cleanup_stdio+0x38>)
 8005918:	4299      	cmp	r1, r3
 800591a:	d002      	beq.n	8005922 <cleanup_stdio+0x1e>
 800591c:	4620      	mov	r0, r4
 800591e:	f002 fde7 	bl	80084f0 <_fflush_r>
 8005922:	68e1      	ldr	r1, [r4, #12]
 8005924:	4b06      	ldr	r3, [pc, #24]	; (8005940 <cleanup_stdio+0x3c>)
 8005926:	4299      	cmp	r1, r3
 8005928:	d004      	beq.n	8005934 <cleanup_stdio+0x30>
 800592a:	4620      	mov	r0, r4
 800592c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005930:	f002 bdde 	b.w	80084f0 <_fflush_r>
 8005934:	bd10      	pop	{r4, pc}
 8005936:	bf00      	nop
 8005938:	20000364 	.word	0x20000364
 800593c:	200003cc 	.word	0x200003cc
 8005940:	20000434 	.word	0x20000434

08005944 <global_stdio_init.part.0>:
 8005944:	b510      	push	{r4, lr}
 8005946:	4b0b      	ldr	r3, [pc, #44]	; (8005974 <global_stdio_init.part.0+0x30>)
 8005948:	4c0b      	ldr	r4, [pc, #44]	; (8005978 <global_stdio_init.part.0+0x34>)
 800594a:	4a0c      	ldr	r2, [pc, #48]	; (800597c <global_stdio_init.part.0+0x38>)
 800594c:	4620      	mov	r0, r4
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	2104      	movs	r1, #4
 8005952:	2200      	movs	r2, #0
 8005954:	f7ff ff94 	bl	8005880 <std>
 8005958:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800595c:	2201      	movs	r2, #1
 800595e:	2109      	movs	r1, #9
 8005960:	f7ff ff8e 	bl	8005880 <std>
 8005964:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005968:	2202      	movs	r2, #2
 800596a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800596e:	2112      	movs	r1, #18
 8005970:	f7ff bf86 	b.w	8005880 <std>
 8005974:	2000049c 	.word	0x2000049c
 8005978:	20000364 	.word	0x20000364
 800597c:	080058ed 	.word	0x080058ed

08005980 <__sfp_lock_acquire>:
 8005980:	4801      	ldr	r0, [pc, #4]	; (8005988 <__sfp_lock_acquire+0x8>)
 8005982:	f000 b920 	b.w	8005bc6 <__retarget_lock_acquire_recursive>
 8005986:	bf00      	nop
 8005988:	200004a5 	.word	0x200004a5

0800598c <__sfp_lock_release>:
 800598c:	4801      	ldr	r0, [pc, #4]	; (8005994 <__sfp_lock_release+0x8>)
 800598e:	f000 b91b 	b.w	8005bc8 <__retarget_lock_release_recursive>
 8005992:	bf00      	nop
 8005994:	200004a5 	.word	0x200004a5

08005998 <__sinit>:
 8005998:	b510      	push	{r4, lr}
 800599a:	4604      	mov	r4, r0
 800599c:	f7ff fff0 	bl	8005980 <__sfp_lock_acquire>
 80059a0:	6a23      	ldr	r3, [r4, #32]
 80059a2:	b11b      	cbz	r3, 80059ac <__sinit+0x14>
 80059a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059a8:	f7ff bff0 	b.w	800598c <__sfp_lock_release>
 80059ac:	4b04      	ldr	r3, [pc, #16]	; (80059c0 <__sinit+0x28>)
 80059ae:	6223      	str	r3, [r4, #32]
 80059b0:	4b04      	ldr	r3, [pc, #16]	; (80059c4 <__sinit+0x2c>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1f5      	bne.n	80059a4 <__sinit+0xc>
 80059b8:	f7ff ffc4 	bl	8005944 <global_stdio_init.part.0>
 80059bc:	e7f2      	b.n	80059a4 <__sinit+0xc>
 80059be:	bf00      	nop
 80059c0:	08005905 	.word	0x08005905
 80059c4:	2000049c 	.word	0x2000049c

080059c8 <_fwalk_sglue>:
 80059c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059cc:	4607      	mov	r7, r0
 80059ce:	4688      	mov	r8, r1
 80059d0:	4614      	mov	r4, r2
 80059d2:	2600      	movs	r6, #0
 80059d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059d8:	f1b9 0901 	subs.w	r9, r9, #1
 80059dc:	d505      	bpl.n	80059ea <_fwalk_sglue+0x22>
 80059de:	6824      	ldr	r4, [r4, #0]
 80059e0:	2c00      	cmp	r4, #0
 80059e2:	d1f7      	bne.n	80059d4 <_fwalk_sglue+0xc>
 80059e4:	4630      	mov	r0, r6
 80059e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059ea:	89ab      	ldrh	r3, [r5, #12]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d907      	bls.n	8005a00 <_fwalk_sglue+0x38>
 80059f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059f4:	3301      	adds	r3, #1
 80059f6:	d003      	beq.n	8005a00 <_fwalk_sglue+0x38>
 80059f8:	4629      	mov	r1, r5
 80059fa:	4638      	mov	r0, r7
 80059fc:	47c0      	blx	r8
 80059fe:	4306      	orrs	r6, r0
 8005a00:	3568      	adds	r5, #104	; 0x68
 8005a02:	e7e9      	b.n	80059d8 <_fwalk_sglue+0x10>

08005a04 <siprintf>:
 8005a04:	b40e      	push	{r1, r2, r3}
 8005a06:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a0a:	b500      	push	{lr}
 8005a0c:	b09c      	sub	sp, #112	; 0x70
 8005a0e:	ab1d      	add	r3, sp, #116	; 0x74
 8005a10:	9002      	str	r0, [sp, #8]
 8005a12:	9006      	str	r0, [sp, #24]
 8005a14:	9107      	str	r1, [sp, #28]
 8005a16:	9104      	str	r1, [sp, #16]
 8005a18:	4808      	ldr	r0, [pc, #32]	; (8005a3c <siprintf+0x38>)
 8005a1a:	4909      	ldr	r1, [pc, #36]	; (8005a40 <siprintf+0x3c>)
 8005a1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a20:	9105      	str	r1, [sp, #20]
 8005a22:	6800      	ldr	r0, [r0, #0]
 8005a24:	a902      	add	r1, sp, #8
 8005a26:	9301      	str	r3, [sp, #4]
 8005a28:	f002 fbe2 	bl	80081f0 <_svfiprintf_r>
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	9b02      	ldr	r3, [sp, #8]
 8005a30:	701a      	strb	r2, [r3, #0]
 8005a32:	b01c      	add	sp, #112	; 0x70
 8005a34:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a38:	b003      	add	sp, #12
 8005a3a:	4770      	bx	lr
 8005a3c:	2000006c 	.word	0x2000006c
 8005a40:	ffff0208 	.word	0xffff0208

08005a44 <__sread>:
 8005a44:	b510      	push	{r4, lr}
 8005a46:	460c      	mov	r4, r1
 8005a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a4c:	f000 f86c 	bl	8005b28 <_read_r>
 8005a50:	2800      	cmp	r0, #0
 8005a52:	bfab      	itete	ge
 8005a54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a56:	89a3      	ldrhlt	r3, [r4, #12]
 8005a58:	181b      	addge	r3, r3, r0
 8005a5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a5e:	bfac      	ite	ge
 8005a60:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a62:	81a3      	strhlt	r3, [r4, #12]
 8005a64:	bd10      	pop	{r4, pc}

08005a66 <__swrite>:
 8005a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a6a:	461f      	mov	r7, r3
 8005a6c:	898b      	ldrh	r3, [r1, #12]
 8005a6e:	4605      	mov	r5, r0
 8005a70:	05db      	lsls	r3, r3, #23
 8005a72:	460c      	mov	r4, r1
 8005a74:	4616      	mov	r6, r2
 8005a76:	d505      	bpl.n	8005a84 <__swrite+0x1e>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a80:	f000 f840 	bl	8005b04 <_lseek_r>
 8005a84:	89a3      	ldrh	r3, [r4, #12]
 8005a86:	4632      	mov	r2, r6
 8005a88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a8c:	81a3      	strh	r3, [r4, #12]
 8005a8e:	4628      	mov	r0, r5
 8005a90:	463b      	mov	r3, r7
 8005a92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a9a:	f000 b857 	b.w	8005b4c <_write_r>

08005a9e <__sseek>:
 8005a9e:	b510      	push	{r4, lr}
 8005aa0:	460c      	mov	r4, r1
 8005aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aa6:	f000 f82d 	bl	8005b04 <_lseek_r>
 8005aaa:	1c43      	adds	r3, r0, #1
 8005aac:	89a3      	ldrh	r3, [r4, #12]
 8005aae:	bf15      	itete	ne
 8005ab0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ab2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ab6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005aba:	81a3      	strheq	r3, [r4, #12]
 8005abc:	bf18      	it	ne
 8005abe:	81a3      	strhne	r3, [r4, #12]
 8005ac0:	bd10      	pop	{r4, pc}

08005ac2 <__sclose>:
 8005ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ac6:	f000 b80d 	b.w	8005ae4 <_close_r>

08005aca <memset>:
 8005aca:	4603      	mov	r3, r0
 8005acc:	4402      	add	r2, r0
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d100      	bne.n	8005ad4 <memset+0xa>
 8005ad2:	4770      	bx	lr
 8005ad4:	f803 1b01 	strb.w	r1, [r3], #1
 8005ad8:	e7f9      	b.n	8005ace <memset+0x4>
	...

08005adc <_localeconv_r>:
 8005adc:	4800      	ldr	r0, [pc, #0]	; (8005ae0 <_localeconv_r+0x4>)
 8005ade:	4770      	bx	lr
 8005ae0:	20000160 	.word	0x20000160

08005ae4 <_close_r>:
 8005ae4:	b538      	push	{r3, r4, r5, lr}
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	4d05      	ldr	r5, [pc, #20]	; (8005b00 <_close_r+0x1c>)
 8005aea:	4604      	mov	r4, r0
 8005aec:	4608      	mov	r0, r1
 8005aee:	602b      	str	r3, [r5, #0]
 8005af0:	f7fc fa29 	bl	8001f46 <_close>
 8005af4:	1c43      	adds	r3, r0, #1
 8005af6:	d102      	bne.n	8005afe <_close_r+0x1a>
 8005af8:	682b      	ldr	r3, [r5, #0]
 8005afa:	b103      	cbz	r3, 8005afe <_close_r+0x1a>
 8005afc:	6023      	str	r3, [r4, #0]
 8005afe:	bd38      	pop	{r3, r4, r5, pc}
 8005b00:	200004a0 	.word	0x200004a0

08005b04 <_lseek_r>:
 8005b04:	b538      	push	{r3, r4, r5, lr}
 8005b06:	4604      	mov	r4, r0
 8005b08:	4608      	mov	r0, r1
 8005b0a:	4611      	mov	r1, r2
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	4d05      	ldr	r5, [pc, #20]	; (8005b24 <_lseek_r+0x20>)
 8005b10:	602a      	str	r2, [r5, #0]
 8005b12:	461a      	mov	r2, r3
 8005b14:	f7fc fa3b 	bl	8001f8e <_lseek>
 8005b18:	1c43      	adds	r3, r0, #1
 8005b1a:	d102      	bne.n	8005b22 <_lseek_r+0x1e>
 8005b1c:	682b      	ldr	r3, [r5, #0]
 8005b1e:	b103      	cbz	r3, 8005b22 <_lseek_r+0x1e>
 8005b20:	6023      	str	r3, [r4, #0]
 8005b22:	bd38      	pop	{r3, r4, r5, pc}
 8005b24:	200004a0 	.word	0x200004a0

08005b28 <_read_r>:
 8005b28:	b538      	push	{r3, r4, r5, lr}
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	4608      	mov	r0, r1
 8005b2e:	4611      	mov	r1, r2
 8005b30:	2200      	movs	r2, #0
 8005b32:	4d05      	ldr	r5, [pc, #20]	; (8005b48 <_read_r+0x20>)
 8005b34:	602a      	str	r2, [r5, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	f7fc f9cc 	bl	8001ed4 <_read>
 8005b3c:	1c43      	adds	r3, r0, #1
 8005b3e:	d102      	bne.n	8005b46 <_read_r+0x1e>
 8005b40:	682b      	ldr	r3, [r5, #0]
 8005b42:	b103      	cbz	r3, 8005b46 <_read_r+0x1e>
 8005b44:	6023      	str	r3, [r4, #0]
 8005b46:	bd38      	pop	{r3, r4, r5, pc}
 8005b48:	200004a0 	.word	0x200004a0

08005b4c <_write_r>:
 8005b4c:	b538      	push	{r3, r4, r5, lr}
 8005b4e:	4604      	mov	r4, r0
 8005b50:	4608      	mov	r0, r1
 8005b52:	4611      	mov	r1, r2
 8005b54:	2200      	movs	r2, #0
 8005b56:	4d05      	ldr	r5, [pc, #20]	; (8005b6c <_write_r+0x20>)
 8005b58:	602a      	str	r2, [r5, #0]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	f7fc f9d7 	bl	8001f0e <_write>
 8005b60:	1c43      	adds	r3, r0, #1
 8005b62:	d102      	bne.n	8005b6a <_write_r+0x1e>
 8005b64:	682b      	ldr	r3, [r5, #0]
 8005b66:	b103      	cbz	r3, 8005b6a <_write_r+0x1e>
 8005b68:	6023      	str	r3, [r4, #0]
 8005b6a:	bd38      	pop	{r3, r4, r5, pc}
 8005b6c:	200004a0 	.word	0x200004a0

08005b70 <__errno>:
 8005b70:	4b01      	ldr	r3, [pc, #4]	; (8005b78 <__errno+0x8>)
 8005b72:	6818      	ldr	r0, [r3, #0]
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	2000006c 	.word	0x2000006c

08005b7c <__libc_init_array>:
 8005b7c:	b570      	push	{r4, r5, r6, lr}
 8005b7e:	2600      	movs	r6, #0
 8005b80:	4d0c      	ldr	r5, [pc, #48]	; (8005bb4 <__libc_init_array+0x38>)
 8005b82:	4c0d      	ldr	r4, [pc, #52]	; (8005bb8 <__libc_init_array+0x3c>)
 8005b84:	1b64      	subs	r4, r4, r5
 8005b86:	10a4      	asrs	r4, r4, #2
 8005b88:	42a6      	cmp	r6, r4
 8005b8a:	d109      	bne.n	8005ba0 <__libc_init_array+0x24>
 8005b8c:	f003 fbc2 	bl	8009314 <_init>
 8005b90:	2600      	movs	r6, #0
 8005b92:	4d0a      	ldr	r5, [pc, #40]	; (8005bbc <__libc_init_array+0x40>)
 8005b94:	4c0a      	ldr	r4, [pc, #40]	; (8005bc0 <__libc_init_array+0x44>)
 8005b96:	1b64      	subs	r4, r4, r5
 8005b98:	10a4      	asrs	r4, r4, #2
 8005b9a:	42a6      	cmp	r6, r4
 8005b9c:	d105      	bne.n	8005baa <__libc_init_array+0x2e>
 8005b9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba4:	4798      	blx	r3
 8005ba6:	3601      	adds	r6, #1
 8005ba8:	e7ee      	b.n	8005b88 <__libc_init_array+0xc>
 8005baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bae:	4798      	blx	r3
 8005bb0:	3601      	adds	r6, #1
 8005bb2:	e7f2      	b.n	8005b9a <__libc_init_array+0x1e>
 8005bb4:	08009798 	.word	0x08009798
 8005bb8:	08009798 	.word	0x08009798
 8005bbc:	08009798 	.word	0x08009798
 8005bc0:	0800979c 	.word	0x0800979c

08005bc4 <__retarget_lock_init_recursive>:
 8005bc4:	4770      	bx	lr

08005bc6 <__retarget_lock_acquire_recursive>:
 8005bc6:	4770      	bx	lr

08005bc8 <__retarget_lock_release_recursive>:
 8005bc8:	4770      	bx	lr

08005bca <memchr>:
 8005bca:	4603      	mov	r3, r0
 8005bcc:	b510      	push	{r4, lr}
 8005bce:	b2c9      	uxtb	r1, r1
 8005bd0:	4402      	add	r2, r0
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	d101      	bne.n	8005bdc <memchr+0x12>
 8005bd8:	2000      	movs	r0, #0
 8005bda:	e003      	b.n	8005be4 <memchr+0x1a>
 8005bdc:	7804      	ldrb	r4, [r0, #0]
 8005bde:	3301      	adds	r3, #1
 8005be0:	428c      	cmp	r4, r1
 8005be2:	d1f6      	bne.n	8005bd2 <memchr+0x8>
 8005be4:	bd10      	pop	{r4, pc}
	...

08005be8 <nanf>:
 8005be8:	4800      	ldr	r0, [pc, #0]	; (8005bec <nanf+0x4>)
 8005bea:	4770      	bx	lr
 8005bec:	7fc00000 	.word	0x7fc00000

08005bf0 <quorem>:
 8005bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf4:	6903      	ldr	r3, [r0, #16]
 8005bf6:	690c      	ldr	r4, [r1, #16]
 8005bf8:	4607      	mov	r7, r0
 8005bfa:	42a3      	cmp	r3, r4
 8005bfc:	db7f      	blt.n	8005cfe <quorem+0x10e>
 8005bfe:	3c01      	subs	r4, #1
 8005c00:	f100 0514 	add.w	r5, r0, #20
 8005c04:	f101 0814 	add.w	r8, r1, #20
 8005c08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c0c:	9301      	str	r3, [sp, #4]
 8005c0e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c16:	3301      	adds	r3, #1
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c1e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c22:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c26:	d331      	bcc.n	8005c8c <quorem+0x9c>
 8005c28:	f04f 0e00 	mov.w	lr, #0
 8005c2c:	4640      	mov	r0, r8
 8005c2e:	46ac      	mov	ip, r5
 8005c30:	46f2      	mov	sl, lr
 8005c32:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c36:	b293      	uxth	r3, r2
 8005c38:	fb06 e303 	mla	r3, r6, r3, lr
 8005c3c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c40:	0c1a      	lsrs	r2, r3, #16
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	fb06 220e 	mla	r2, r6, lr, r2
 8005c48:	ebaa 0303 	sub.w	r3, sl, r3
 8005c4c:	f8dc a000 	ldr.w	sl, [ip]
 8005c50:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c54:	fa1f fa8a 	uxth.w	sl, sl
 8005c58:	4453      	add	r3, sl
 8005c5a:	f8dc a000 	ldr.w	sl, [ip]
 8005c5e:	b292      	uxth	r2, r2
 8005c60:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005c64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c6e:	4581      	cmp	r9, r0
 8005c70:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c74:	f84c 3b04 	str.w	r3, [ip], #4
 8005c78:	d2db      	bcs.n	8005c32 <quorem+0x42>
 8005c7a:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c7e:	b92b      	cbnz	r3, 8005c8c <quorem+0x9c>
 8005c80:	9b01      	ldr	r3, [sp, #4]
 8005c82:	3b04      	subs	r3, #4
 8005c84:	429d      	cmp	r5, r3
 8005c86:	461a      	mov	r2, r3
 8005c88:	d32d      	bcc.n	8005ce6 <quorem+0xf6>
 8005c8a:	613c      	str	r4, [r7, #16]
 8005c8c:	4638      	mov	r0, r7
 8005c8e:	f001 f9df 	bl	8007050 <__mcmp>
 8005c92:	2800      	cmp	r0, #0
 8005c94:	db23      	blt.n	8005cde <quorem+0xee>
 8005c96:	4629      	mov	r1, r5
 8005c98:	2000      	movs	r0, #0
 8005c9a:	3601      	adds	r6, #1
 8005c9c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ca0:	f8d1 c000 	ldr.w	ip, [r1]
 8005ca4:	b293      	uxth	r3, r2
 8005ca6:	1ac3      	subs	r3, r0, r3
 8005ca8:	0c12      	lsrs	r2, r2, #16
 8005caa:	fa1f f08c 	uxth.w	r0, ip
 8005cae:	4403      	add	r3, r0
 8005cb0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005cb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cbe:	45c1      	cmp	r9, r8
 8005cc0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005cc4:	f841 3b04 	str.w	r3, [r1], #4
 8005cc8:	d2e8      	bcs.n	8005c9c <quorem+0xac>
 8005cca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cd2:	b922      	cbnz	r2, 8005cde <quorem+0xee>
 8005cd4:	3b04      	subs	r3, #4
 8005cd6:	429d      	cmp	r5, r3
 8005cd8:	461a      	mov	r2, r3
 8005cda:	d30a      	bcc.n	8005cf2 <quorem+0x102>
 8005cdc:	613c      	str	r4, [r7, #16]
 8005cde:	4630      	mov	r0, r6
 8005ce0:	b003      	add	sp, #12
 8005ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce6:	6812      	ldr	r2, [r2, #0]
 8005ce8:	3b04      	subs	r3, #4
 8005cea:	2a00      	cmp	r2, #0
 8005cec:	d1cd      	bne.n	8005c8a <quorem+0x9a>
 8005cee:	3c01      	subs	r4, #1
 8005cf0:	e7c8      	b.n	8005c84 <quorem+0x94>
 8005cf2:	6812      	ldr	r2, [r2, #0]
 8005cf4:	3b04      	subs	r3, #4
 8005cf6:	2a00      	cmp	r2, #0
 8005cf8:	d1f0      	bne.n	8005cdc <quorem+0xec>
 8005cfa:	3c01      	subs	r4, #1
 8005cfc:	e7eb      	b.n	8005cd6 <quorem+0xe6>
 8005cfe:	2000      	movs	r0, #0
 8005d00:	e7ee      	b.n	8005ce0 <quorem+0xf0>
 8005d02:	0000      	movs	r0, r0
 8005d04:	0000      	movs	r0, r0
	...

08005d08 <_dtoa_r>:
 8005d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d0c:	4616      	mov	r6, r2
 8005d0e:	461f      	mov	r7, r3
 8005d10:	69c4      	ldr	r4, [r0, #28]
 8005d12:	b099      	sub	sp, #100	; 0x64
 8005d14:	4605      	mov	r5, r0
 8005d16:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005d1a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005d1e:	b974      	cbnz	r4, 8005d3e <_dtoa_r+0x36>
 8005d20:	2010      	movs	r0, #16
 8005d22:	f000 fe1d 	bl	8006960 <malloc>
 8005d26:	4602      	mov	r2, r0
 8005d28:	61e8      	str	r0, [r5, #28]
 8005d2a:	b920      	cbnz	r0, 8005d36 <_dtoa_r+0x2e>
 8005d2c:	21ef      	movs	r1, #239	; 0xef
 8005d2e:	4bac      	ldr	r3, [pc, #688]	; (8005fe0 <_dtoa_r+0x2d8>)
 8005d30:	48ac      	ldr	r0, [pc, #688]	; (8005fe4 <_dtoa_r+0x2dc>)
 8005d32:	f002 fc55 	bl	80085e0 <__assert_func>
 8005d36:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d3a:	6004      	str	r4, [r0, #0]
 8005d3c:	60c4      	str	r4, [r0, #12]
 8005d3e:	69eb      	ldr	r3, [r5, #28]
 8005d40:	6819      	ldr	r1, [r3, #0]
 8005d42:	b151      	cbz	r1, 8005d5a <_dtoa_r+0x52>
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	2301      	movs	r3, #1
 8005d48:	4093      	lsls	r3, r2
 8005d4a:	604a      	str	r2, [r1, #4]
 8005d4c:	608b      	str	r3, [r1, #8]
 8005d4e:	4628      	mov	r0, r5
 8005d50:	f000 fefa 	bl	8006b48 <_Bfree>
 8005d54:	2200      	movs	r2, #0
 8005d56:	69eb      	ldr	r3, [r5, #28]
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	1e3b      	subs	r3, r7, #0
 8005d5c:	bfaf      	iteee	ge
 8005d5e:	2300      	movge	r3, #0
 8005d60:	2201      	movlt	r2, #1
 8005d62:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005d66:	9305      	strlt	r3, [sp, #20]
 8005d68:	bfa8      	it	ge
 8005d6a:	f8c8 3000 	strge.w	r3, [r8]
 8005d6e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005d72:	4b9d      	ldr	r3, [pc, #628]	; (8005fe8 <_dtoa_r+0x2e0>)
 8005d74:	bfb8      	it	lt
 8005d76:	f8c8 2000 	strlt.w	r2, [r8]
 8005d7a:	ea33 0309 	bics.w	r3, r3, r9
 8005d7e:	d119      	bne.n	8005db4 <_dtoa_r+0xac>
 8005d80:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d84:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005d86:	6013      	str	r3, [r2, #0]
 8005d88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d8c:	4333      	orrs	r3, r6
 8005d8e:	f000 8589 	beq.w	80068a4 <_dtoa_r+0xb9c>
 8005d92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005d94:	b953      	cbnz	r3, 8005dac <_dtoa_r+0xa4>
 8005d96:	4b95      	ldr	r3, [pc, #596]	; (8005fec <_dtoa_r+0x2e4>)
 8005d98:	e023      	b.n	8005de2 <_dtoa_r+0xda>
 8005d9a:	4b95      	ldr	r3, [pc, #596]	; (8005ff0 <_dtoa_r+0x2e8>)
 8005d9c:	9303      	str	r3, [sp, #12]
 8005d9e:	3308      	adds	r3, #8
 8005da0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005da2:	6013      	str	r3, [r2, #0]
 8005da4:	9803      	ldr	r0, [sp, #12]
 8005da6:	b019      	add	sp, #100	; 0x64
 8005da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dac:	4b8f      	ldr	r3, [pc, #572]	; (8005fec <_dtoa_r+0x2e4>)
 8005dae:	9303      	str	r3, [sp, #12]
 8005db0:	3303      	adds	r3, #3
 8005db2:	e7f5      	b.n	8005da0 <_dtoa_r+0x98>
 8005db4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005db8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005dbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	f7fa fe5c 	bl	8000a80 <__aeabi_dcmpeq>
 8005dc8:	4680      	mov	r8, r0
 8005dca:	b160      	cbz	r0, 8005de6 <_dtoa_r+0xde>
 8005dcc:	2301      	movs	r3, #1
 8005dce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005dd0:	6013      	str	r3, [r2, #0]
 8005dd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 8562 	beq.w	800689e <_dtoa_r+0xb96>
 8005dda:	4b86      	ldr	r3, [pc, #536]	; (8005ff4 <_dtoa_r+0x2ec>)
 8005ddc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005dde:	6013      	str	r3, [r2, #0]
 8005de0:	3b01      	subs	r3, #1
 8005de2:	9303      	str	r3, [sp, #12]
 8005de4:	e7de      	b.n	8005da4 <_dtoa_r+0x9c>
 8005de6:	ab16      	add	r3, sp, #88	; 0x58
 8005de8:	9301      	str	r3, [sp, #4]
 8005dea:	ab17      	add	r3, sp, #92	; 0x5c
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	4628      	mov	r0, r5
 8005df0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005df4:	f001 fa3c 	bl	8007270 <__d2b>
 8005df8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005dfc:	4682      	mov	sl, r0
 8005dfe:	2c00      	cmp	r4, #0
 8005e00:	d07e      	beq.n	8005f00 <_dtoa_r+0x1f8>
 8005e02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e08:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005e0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e10:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005e14:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005e18:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	2200      	movs	r2, #0
 8005e20:	4b75      	ldr	r3, [pc, #468]	; (8005ff8 <_dtoa_r+0x2f0>)
 8005e22:	f7fa fa0d 	bl	8000240 <__aeabi_dsub>
 8005e26:	a368      	add	r3, pc, #416	; (adr r3, 8005fc8 <_dtoa_r+0x2c0>)
 8005e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2c:	f7fa fbc0 	bl	80005b0 <__aeabi_dmul>
 8005e30:	a367      	add	r3, pc, #412	; (adr r3, 8005fd0 <_dtoa_r+0x2c8>)
 8005e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e36:	f7fa fa05 	bl	8000244 <__adddf3>
 8005e3a:	4606      	mov	r6, r0
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	460f      	mov	r7, r1
 8005e40:	f7fa fb4c 	bl	80004dc <__aeabi_i2d>
 8005e44:	a364      	add	r3, pc, #400	; (adr r3, 8005fd8 <_dtoa_r+0x2d0>)
 8005e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4a:	f7fa fbb1 	bl	80005b0 <__aeabi_dmul>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	460b      	mov	r3, r1
 8005e52:	4630      	mov	r0, r6
 8005e54:	4639      	mov	r1, r7
 8005e56:	f7fa f9f5 	bl	8000244 <__adddf3>
 8005e5a:	4606      	mov	r6, r0
 8005e5c:	460f      	mov	r7, r1
 8005e5e:	f7fa fe57 	bl	8000b10 <__aeabi_d2iz>
 8005e62:	2200      	movs	r2, #0
 8005e64:	4683      	mov	fp, r0
 8005e66:	2300      	movs	r3, #0
 8005e68:	4630      	mov	r0, r6
 8005e6a:	4639      	mov	r1, r7
 8005e6c:	f7fa fe12 	bl	8000a94 <__aeabi_dcmplt>
 8005e70:	b148      	cbz	r0, 8005e86 <_dtoa_r+0x17e>
 8005e72:	4658      	mov	r0, fp
 8005e74:	f7fa fb32 	bl	80004dc <__aeabi_i2d>
 8005e78:	4632      	mov	r2, r6
 8005e7a:	463b      	mov	r3, r7
 8005e7c:	f7fa fe00 	bl	8000a80 <__aeabi_dcmpeq>
 8005e80:	b908      	cbnz	r0, 8005e86 <_dtoa_r+0x17e>
 8005e82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e86:	f1bb 0f16 	cmp.w	fp, #22
 8005e8a:	d857      	bhi.n	8005f3c <_dtoa_r+0x234>
 8005e8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e90:	4b5a      	ldr	r3, [pc, #360]	; (8005ffc <_dtoa_r+0x2f4>)
 8005e92:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9a:	f7fa fdfb 	bl	8000a94 <__aeabi_dcmplt>
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	d04e      	beq.n	8005f40 <_dtoa_r+0x238>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ea8:	930f      	str	r3, [sp, #60]	; 0x3c
 8005eaa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005eac:	1b1b      	subs	r3, r3, r4
 8005eae:	1e5a      	subs	r2, r3, #1
 8005eb0:	bf46      	itte	mi
 8005eb2:	f1c3 0901 	rsbmi	r9, r3, #1
 8005eb6:	2300      	movmi	r3, #0
 8005eb8:	f04f 0900 	movpl.w	r9, #0
 8005ebc:	9209      	str	r2, [sp, #36]	; 0x24
 8005ebe:	bf48      	it	mi
 8005ec0:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005ec2:	f1bb 0f00 	cmp.w	fp, #0
 8005ec6:	db3d      	blt.n	8005f44 <_dtoa_r+0x23c>
 8005ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eca:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005ece:	445b      	add	r3, fp
 8005ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	930a      	str	r3, [sp, #40]	; 0x28
 8005ed6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ed8:	2b09      	cmp	r3, #9
 8005eda:	d867      	bhi.n	8005fac <_dtoa_r+0x2a4>
 8005edc:	2b05      	cmp	r3, #5
 8005ede:	bfc4      	itt	gt
 8005ee0:	3b04      	subgt	r3, #4
 8005ee2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005ee4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ee6:	bfc8      	it	gt
 8005ee8:	2400      	movgt	r4, #0
 8005eea:	f1a3 0302 	sub.w	r3, r3, #2
 8005eee:	bfd8      	it	le
 8005ef0:	2401      	movle	r4, #1
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	f200 8086 	bhi.w	8006004 <_dtoa_r+0x2fc>
 8005ef8:	e8df f003 	tbb	[pc, r3]
 8005efc:	5637392c 	.word	0x5637392c
 8005f00:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005f04:	441c      	add	r4, r3
 8005f06:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005f0a:	2b20      	cmp	r3, #32
 8005f0c:	bfc1      	itttt	gt
 8005f0e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f12:	fa09 f903 	lslgt.w	r9, r9, r3
 8005f16:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005f1a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005f1e:	bfd6      	itet	le
 8005f20:	f1c3 0320 	rsble	r3, r3, #32
 8005f24:	ea49 0003 	orrgt.w	r0, r9, r3
 8005f28:	fa06 f003 	lslle.w	r0, r6, r3
 8005f2c:	f7fa fac6 	bl	80004bc <__aeabi_ui2d>
 8005f30:	2201      	movs	r2, #1
 8005f32:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005f36:	3c01      	subs	r4, #1
 8005f38:	9213      	str	r2, [sp, #76]	; 0x4c
 8005f3a:	e76f      	b.n	8005e1c <_dtoa_r+0x114>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e7b3      	b.n	8005ea8 <_dtoa_r+0x1a0>
 8005f40:	900f      	str	r0, [sp, #60]	; 0x3c
 8005f42:	e7b2      	b.n	8005eaa <_dtoa_r+0x1a2>
 8005f44:	f1cb 0300 	rsb	r3, fp, #0
 8005f48:	930a      	str	r3, [sp, #40]	; 0x28
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	eba9 090b 	sub.w	r9, r9, fp
 8005f50:	930e      	str	r3, [sp, #56]	; 0x38
 8005f52:	e7c0      	b.n	8005ed6 <_dtoa_r+0x1ce>
 8005f54:	2300      	movs	r3, #0
 8005f56:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	dc55      	bgt.n	800600a <_dtoa_r+0x302>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	461a      	mov	r2, r3
 8005f62:	9306      	str	r3, [sp, #24]
 8005f64:	9308      	str	r3, [sp, #32]
 8005f66:	9223      	str	r2, [sp, #140]	; 0x8c
 8005f68:	e00b      	b.n	8005f82 <_dtoa_r+0x27a>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e7f3      	b.n	8005f56 <_dtoa_r+0x24e>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f74:	445b      	add	r3, fp
 8005f76:	9306      	str	r3, [sp, #24]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	9308      	str	r3, [sp, #32]
 8005f7e:	bfb8      	it	lt
 8005f80:	2301      	movlt	r3, #1
 8005f82:	2100      	movs	r1, #0
 8005f84:	2204      	movs	r2, #4
 8005f86:	69e8      	ldr	r0, [r5, #28]
 8005f88:	f102 0614 	add.w	r6, r2, #20
 8005f8c:	429e      	cmp	r6, r3
 8005f8e:	d940      	bls.n	8006012 <_dtoa_r+0x30a>
 8005f90:	6041      	str	r1, [r0, #4]
 8005f92:	4628      	mov	r0, r5
 8005f94:	f000 fd98 	bl	8006ac8 <_Balloc>
 8005f98:	9003      	str	r0, [sp, #12]
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	d13c      	bne.n	8006018 <_dtoa_r+0x310>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	f240 11af 	movw	r1, #431	; 0x1af
 8005fa4:	4b16      	ldr	r3, [pc, #88]	; (8006000 <_dtoa_r+0x2f8>)
 8005fa6:	e6c3      	b.n	8005d30 <_dtoa_r+0x28>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e7e1      	b.n	8005f70 <_dtoa_r+0x268>
 8005fac:	2401      	movs	r4, #1
 8005fae:	2300      	movs	r3, #0
 8005fb0:	940b      	str	r4, [sp, #44]	; 0x2c
 8005fb2:	9322      	str	r3, [sp, #136]	; 0x88
 8005fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb8:	2200      	movs	r2, #0
 8005fba:	9306      	str	r3, [sp, #24]
 8005fbc:	9308      	str	r3, [sp, #32]
 8005fbe:	2312      	movs	r3, #18
 8005fc0:	e7d1      	b.n	8005f66 <_dtoa_r+0x25e>
 8005fc2:	bf00      	nop
 8005fc4:	f3af 8000 	nop.w
 8005fc8:	636f4361 	.word	0x636f4361
 8005fcc:	3fd287a7 	.word	0x3fd287a7
 8005fd0:	8b60c8b3 	.word	0x8b60c8b3
 8005fd4:	3fc68a28 	.word	0x3fc68a28
 8005fd8:	509f79fb 	.word	0x509f79fb
 8005fdc:	3fd34413 	.word	0x3fd34413
 8005fe0:	080093b0 	.word	0x080093b0
 8005fe4:	080093c7 	.word	0x080093c7
 8005fe8:	7ff00000 	.word	0x7ff00000
 8005fec:	080093ac 	.word	0x080093ac
 8005ff0:	080093a3 	.word	0x080093a3
 8005ff4:	0800937b 	.word	0x0800937b
 8005ff8:	3ff80000 	.word	0x3ff80000
 8005ffc:	080094b8 	.word	0x080094b8
 8006000:	0800941f 	.word	0x0800941f
 8006004:	2301      	movs	r3, #1
 8006006:	930b      	str	r3, [sp, #44]	; 0x2c
 8006008:	e7d4      	b.n	8005fb4 <_dtoa_r+0x2ac>
 800600a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800600c:	9306      	str	r3, [sp, #24]
 800600e:	9308      	str	r3, [sp, #32]
 8006010:	e7b7      	b.n	8005f82 <_dtoa_r+0x27a>
 8006012:	3101      	adds	r1, #1
 8006014:	0052      	lsls	r2, r2, #1
 8006016:	e7b7      	b.n	8005f88 <_dtoa_r+0x280>
 8006018:	69eb      	ldr	r3, [r5, #28]
 800601a:	9a03      	ldr	r2, [sp, #12]
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	9b08      	ldr	r3, [sp, #32]
 8006020:	2b0e      	cmp	r3, #14
 8006022:	f200 80a8 	bhi.w	8006176 <_dtoa_r+0x46e>
 8006026:	2c00      	cmp	r4, #0
 8006028:	f000 80a5 	beq.w	8006176 <_dtoa_r+0x46e>
 800602c:	f1bb 0f00 	cmp.w	fp, #0
 8006030:	dd34      	ble.n	800609c <_dtoa_r+0x394>
 8006032:	4b9a      	ldr	r3, [pc, #616]	; (800629c <_dtoa_r+0x594>)
 8006034:	f00b 020f 	and.w	r2, fp, #15
 8006038:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800603c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006040:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006044:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006048:	ea4f 142b 	mov.w	r4, fp, asr #4
 800604c:	d016      	beq.n	800607c <_dtoa_r+0x374>
 800604e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006052:	4b93      	ldr	r3, [pc, #588]	; (80062a0 <_dtoa_r+0x598>)
 8006054:	2703      	movs	r7, #3
 8006056:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800605a:	f7fa fbd3 	bl	8000804 <__aeabi_ddiv>
 800605e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006062:	f004 040f 	and.w	r4, r4, #15
 8006066:	4e8e      	ldr	r6, [pc, #568]	; (80062a0 <_dtoa_r+0x598>)
 8006068:	b954      	cbnz	r4, 8006080 <_dtoa_r+0x378>
 800606a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800606e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006072:	f7fa fbc7 	bl	8000804 <__aeabi_ddiv>
 8006076:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800607a:	e029      	b.n	80060d0 <_dtoa_r+0x3c8>
 800607c:	2702      	movs	r7, #2
 800607e:	e7f2      	b.n	8006066 <_dtoa_r+0x35e>
 8006080:	07e1      	lsls	r1, r4, #31
 8006082:	d508      	bpl.n	8006096 <_dtoa_r+0x38e>
 8006084:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006088:	e9d6 2300 	ldrd	r2, r3, [r6]
 800608c:	f7fa fa90 	bl	80005b0 <__aeabi_dmul>
 8006090:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006094:	3701      	adds	r7, #1
 8006096:	1064      	asrs	r4, r4, #1
 8006098:	3608      	adds	r6, #8
 800609a:	e7e5      	b.n	8006068 <_dtoa_r+0x360>
 800609c:	f000 80a5 	beq.w	80061ea <_dtoa_r+0x4e2>
 80060a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060a4:	f1cb 0400 	rsb	r4, fp, #0
 80060a8:	4b7c      	ldr	r3, [pc, #496]	; (800629c <_dtoa_r+0x594>)
 80060aa:	f004 020f 	and.w	r2, r4, #15
 80060ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b6:	f7fa fa7b 	bl	80005b0 <__aeabi_dmul>
 80060ba:	2702      	movs	r7, #2
 80060bc:	2300      	movs	r3, #0
 80060be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060c2:	4e77      	ldr	r6, [pc, #476]	; (80062a0 <_dtoa_r+0x598>)
 80060c4:	1124      	asrs	r4, r4, #4
 80060c6:	2c00      	cmp	r4, #0
 80060c8:	f040 8084 	bne.w	80061d4 <_dtoa_r+0x4cc>
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1d2      	bne.n	8006076 <_dtoa_r+0x36e>
 80060d0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80060d4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80060d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 8087 	beq.w	80061ee <_dtoa_r+0x4e6>
 80060e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060e4:	2200      	movs	r2, #0
 80060e6:	4b6f      	ldr	r3, [pc, #444]	; (80062a4 <_dtoa_r+0x59c>)
 80060e8:	f7fa fcd4 	bl	8000a94 <__aeabi_dcmplt>
 80060ec:	2800      	cmp	r0, #0
 80060ee:	d07e      	beq.n	80061ee <_dtoa_r+0x4e6>
 80060f0:	9b08      	ldr	r3, [sp, #32]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d07b      	beq.n	80061ee <_dtoa_r+0x4e6>
 80060f6:	9b06      	ldr	r3, [sp, #24]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	dd38      	ble.n	800616e <_dtoa_r+0x466>
 80060fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006100:	2200      	movs	r2, #0
 8006102:	4b69      	ldr	r3, [pc, #420]	; (80062a8 <_dtoa_r+0x5a0>)
 8006104:	f7fa fa54 	bl	80005b0 <__aeabi_dmul>
 8006108:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800610c:	9c06      	ldr	r4, [sp, #24]
 800610e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8006112:	3701      	adds	r7, #1
 8006114:	4638      	mov	r0, r7
 8006116:	f7fa f9e1 	bl	80004dc <__aeabi_i2d>
 800611a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800611e:	f7fa fa47 	bl	80005b0 <__aeabi_dmul>
 8006122:	2200      	movs	r2, #0
 8006124:	4b61      	ldr	r3, [pc, #388]	; (80062ac <_dtoa_r+0x5a4>)
 8006126:	f7fa f88d 	bl	8000244 <__adddf3>
 800612a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800612e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006132:	9611      	str	r6, [sp, #68]	; 0x44
 8006134:	2c00      	cmp	r4, #0
 8006136:	d15d      	bne.n	80061f4 <_dtoa_r+0x4ec>
 8006138:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800613c:	2200      	movs	r2, #0
 800613e:	4b5c      	ldr	r3, [pc, #368]	; (80062b0 <_dtoa_r+0x5a8>)
 8006140:	f7fa f87e 	bl	8000240 <__aeabi_dsub>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800614c:	4633      	mov	r3, r6
 800614e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006150:	f7fa fcbe 	bl	8000ad0 <__aeabi_dcmpgt>
 8006154:	2800      	cmp	r0, #0
 8006156:	f040 8295 	bne.w	8006684 <_dtoa_r+0x97c>
 800615a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800615e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006160:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006164:	f7fa fc96 	bl	8000a94 <__aeabi_dcmplt>
 8006168:	2800      	cmp	r0, #0
 800616a:	f040 8289 	bne.w	8006680 <_dtoa_r+0x978>
 800616e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006172:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006176:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006178:	2b00      	cmp	r3, #0
 800617a:	f2c0 8151 	blt.w	8006420 <_dtoa_r+0x718>
 800617e:	f1bb 0f0e 	cmp.w	fp, #14
 8006182:	f300 814d 	bgt.w	8006420 <_dtoa_r+0x718>
 8006186:	4b45      	ldr	r3, [pc, #276]	; (800629c <_dtoa_r+0x594>)
 8006188:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800618c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006190:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006194:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006196:	2b00      	cmp	r3, #0
 8006198:	f280 80da 	bge.w	8006350 <_dtoa_r+0x648>
 800619c:	9b08      	ldr	r3, [sp, #32]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f300 80d6 	bgt.w	8006350 <_dtoa_r+0x648>
 80061a4:	f040 826b 	bne.w	800667e <_dtoa_r+0x976>
 80061a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061ac:	2200      	movs	r2, #0
 80061ae:	4b40      	ldr	r3, [pc, #256]	; (80062b0 <_dtoa_r+0x5a8>)
 80061b0:	f7fa f9fe 	bl	80005b0 <__aeabi_dmul>
 80061b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061b8:	f7fa fc80 	bl	8000abc <__aeabi_dcmpge>
 80061bc:	9c08      	ldr	r4, [sp, #32]
 80061be:	4626      	mov	r6, r4
 80061c0:	2800      	cmp	r0, #0
 80061c2:	f040 8241 	bne.w	8006648 <_dtoa_r+0x940>
 80061c6:	2331      	movs	r3, #49	; 0x31
 80061c8:	9f03      	ldr	r7, [sp, #12]
 80061ca:	f10b 0b01 	add.w	fp, fp, #1
 80061ce:	f807 3b01 	strb.w	r3, [r7], #1
 80061d2:	e23d      	b.n	8006650 <_dtoa_r+0x948>
 80061d4:	07e2      	lsls	r2, r4, #31
 80061d6:	d505      	bpl.n	80061e4 <_dtoa_r+0x4dc>
 80061d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80061dc:	f7fa f9e8 	bl	80005b0 <__aeabi_dmul>
 80061e0:	2301      	movs	r3, #1
 80061e2:	3701      	adds	r7, #1
 80061e4:	1064      	asrs	r4, r4, #1
 80061e6:	3608      	adds	r6, #8
 80061e8:	e76d      	b.n	80060c6 <_dtoa_r+0x3be>
 80061ea:	2702      	movs	r7, #2
 80061ec:	e770      	b.n	80060d0 <_dtoa_r+0x3c8>
 80061ee:	46d8      	mov	r8, fp
 80061f0:	9c08      	ldr	r4, [sp, #32]
 80061f2:	e78f      	b.n	8006114 <_dtoa_r+0x40c>
 80061f4:	9903      	ldr	r1, [sp, #12]
 80061f6:	4b29      	ldr	r3, [pc, #164]	; (800629c <_dtoa_r+0x594>)
 80061f8:	4421      	add	r1, r4
 80061fa:	9112      	str	r1, [sp, #72]	; 0x48
 80061fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006202:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006206:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800620a:	2900      	cmp	r1, #0
 800620c:	d054      	beq.n	80062b8 <_dtoa_r+0x5b0>
 800620e:	2000      	movs	r0, #0
 8006210:	4928      	ldr	r1, [pc, #160]	; (80062b4 <_dtoa_r+0x5ac>)
 8006212:	f7fa faf7 	bl	8000804 <__aeabi_ddiv>
 8006216:	463b      	mov	r3, r7
 8006218:	4632      	mov	r2, r6
 800621a:	f7fa f811 	bl	8000240 <__aeabi_dsub>
 800621e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006222:	9f03      	ldr	r7, [sp, #12]
 8006224:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006228:	f7fa fc72 	bl	8000b10 <__aeabi_d2iz>
 800622c:	4604      	mov	r4, r0
 800622e:	f7fa f955 	bl	80004dc <__aeabi_i2d>
 8006232:	4602      	mov	r2, r0
 8006234:	460b      	mov	r3, r1
 8006236:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800623a:	f7fa f801 	bl	8000240 <__aeabi_dsub>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	3430      	adds	r4, #48	; 0x30
 8006244:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006248:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800624c:	f807 4b01 	strb.w	r4, [r7], #1
 8006250:	f7fa fc20 	bl	8000a94 <__aeabi_dcmplt>
 8006254:	2800      	cmp	r0, #0
 8006256:	d173      	bne.n	8006340 <_dtoa_r+0x638>
 8006258:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800625c:	2000      	movs	r0, #0
 800625e:	4911      	ldr	r1, [pc, #68]	; (80062a4 <_dtoa_r+0x59c>)
 8006260:	f7f9 ffee 	bl	8000240 <__aeabi_dsub>
 8006264:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006268:	f7fa fc14 	bl	8000a94 <__aeabi_dcmplt>
 800626c:	2800      	cmp	r0, #0
 800626e:	f040 80b6 	bne.w	80063de <_dtoa_r+0x6d6>
 8006272:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006274:	429f      	cmp	r7, r3
 8006276:	f43f af7a 	beq.w	800616e <_dtoa_r+0x466>
 800627a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800627e:	2200      	movs	r2, #0
 8006280:	4b09      	ldr	r3, [pc, #36]	; (80062a8 <_dtoa_r+0x5a0>)
 8006282:	f7fa f995 	bl	80005b0 <__aeabi_dmul>
 8006286:	2200      	movs	r2, #0
 8006288:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800628c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006290:	4b05      	ldr	r3, [pc, #20]	; (80062a8 <_dtoa_r+0x5a0>)
 8006292:	f7fa f98d 	bl	80005b0 <__aeabi_dmul>
 8006296:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800629a:	e7c3      	b.n	8006224 <_dtoa_r+0x51c>
 800629c:	080094b8 	.word	0x080094b8
 80062a0:	08009490 	.word	0x08009490
 80062a4:	3ff00000 	.word	0x3ff00000
 80062a8:	40240000 	.word	0x40240000
 80062ac:	401c0000 	.word	0x401c0000
 80062b0:	40140000 	.word	0x40140000
 80062b4:	3fe00000 	.word	0x3fe00000
 80062b8:	4630      	mov	r0, r6
 80062ba:	4639      	mov	r1, r7
 80062bc:	f7fa f978 	bl	80005b0 <__aeabi_dmul>
 80062c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80062c6:	9c03      	ldr	r4, [sp, #12]
 80062c8:	9314      	str	r3, [sp, #80]	; 0x50
 80062ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062ce:	f7fa fc1f 	bl	8000b10 <__aeabi_d2iz>
 80062d2:	9015      	str	r0, [sp, #84]	; 0x54
 80062d4:	f7fa f902 	bl	80004dc <__aeabi_i2d>
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062e0:	f7f9 ffae 	bl	8000240 <__aeabi_dsub>
 80062e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062e6:	4606      	mov	r6, r0
 80062e8:	3330      	adds	r3, #48	; 0x30
 80062ea:	f804 3b01 	strb.w	r3, [r4], #1
 80062ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062f0:	460f      	mov	r7, r1
 80062f2:	429c      	cmp	r4, r3
 80062f4:	f04f 0200 	mov.w	r2, #0
 80062f8:	d124      	bne.n	8006344 <_dtoa_r+0x63c>
 80062fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80062fe:	4baf      	ldr	r3, [pc, #700]	; (80065bc <_dtoa_r+0x8b4>)
 8006300:	f7f9 ffa0 	bl	8000244 <__adddf3>
 8006304:	4602      	mov	r2, r0
 8006306:	460b      	mov	r3, r1
 8006308:	4630      	mov	r0, r6
 800630a:	4639      	mov	r1, r7
 800630c:	f7fa fbe0 	bl	8000ad0 <__aeabi_dcmpgt>
 8006310:	2800      	cmp	r0, #0
 8006312:	d163      	bne.n	80063dc <_dtoa_r+0x6d4>
 8006314:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006318:	2000      	movs	r0, #0
 800631a:	49a8      	ldr	r1, [pc, #672]	; (80065bc <_dtoa_r+0x8b4>)
 800631c:	f7f9 ff90 	bl	8000240 <__aeabi_dsub>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	4630      	mov	r0, r6
 8006326:	4639      	mov	r1, r7
 8006328:	f7fa fbb4 	bl	8000a94 <__aeabi_dcmplt>
 800632c:	2800      	cmp	r0, #0
 800632e:	f43f af1e 	beq.w	800616e <_dtoa_r+0x466>
 8006332:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006334:	1e7b      	subs	r3, r7, #1
 8006336:	9314      	str	r3, [sp, #80]	; 0x50
 8006338:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800633c:	2b30      	cmp	r3, #48	; 0x30
 800633e:	d0f8      	beq.n	8006332 <_dtoa_r+0x62a>
 8006340:	46c3      	mov	fp, r8
 8006342:	e03b      	b.n	80063bc <_dtoa_r+0x6b4>
 8006344:	4b9e      	ldr	r3, [pc, #632]	; (80065c0 <_dtoa_r+0x8b8>)
 8006346:	f7fa f933 	bl	80005b0 <__aeabi_dmul>
 800634a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800634e:	e7bc      	b.n	80062ca <_dtoa_r+0x5c2>
 8006350:	9f03      	ldr	r7, [sp, #12]
 8006352:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006356:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800635a:	4640      	mov	r0, r8
 800635c:	4649      	mov	r1, r9
 800635e:	f7fa fa51 	bl	8000804 <__aeabi_ddiv>
 8006362:	f7fa fbd5 	bl	8000b10 <__aeabi_d2iz>
 8006366:	4604      	mov	r4, r0
 8006368:	f7fa f8b8 	bl	80004dc <__aeabi_i2d>
 800636c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006370:	f7fa f91e 	bl	80005b0 <__aeabi_dmul>
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	4640      	mov	r0, r8
 800637a:	4649      	mov	r1, r9
 800637c:	f7f9 ff60 	bl	8000240 <__aeabi_dsub>
 8006380:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006384:	f807 6b01 	strb.w	r6, [r7], #1
 8006388:	9e03      	ldr	r6, [sp, #12]
 800638a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800638e:	1bbe      	subs	r6, r7, r6
 8006390:	45b4      	cmp	ip, r6
 8006392:	4602      	mov	r2, r0
 8006394:	460b      	mov	r3, r1
 8006396:	d136      	bne.n	8006406 <_dtoa_r+0x6fe>
 8006398:	f7f9 ff54 	bl	8000244 <__adddf3>
 800639c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063a0:	4680      	mov	r8, r0
 80063a2:	4689      	mov	r9, r1
 80063a4:	f7fa fb94 	bl	8000ad0 <__aeabi_dcmpgt>
 80063a8:	bb58      	cbnz	r0, 8006402 <_dtoa_r+0x6fa>
 80063aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063ae:	4640      	mov	r0, r8
 80063b0:	4649      	mov	r1, r9
 80063b2:	f7fa fb65 	bl	8000a80 <__aeabi_dcmpeq>
 80063b6:	b108      	cbz	r0, 80063bc <_dtoa_r+0x6b4>
 80063b8:	07e3      	lsls	r3, r4, #31
 80063ba:	d422      	bmi.n	8006402 <_dtoa_r+0x6fa>
 80063bc:	4651      	mov	r1, sl
 80063be:	4628      	mov	r0, r5
 80063c0:	f000 fbc2 	bl	8006b48 <_Bfree>
 80063c4:	2300      	movs	r3, #0
 80063c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80063c8:	703b      	strb	r3, [r7, #0]
 80063ca:	f10b 0301 	add.w	r3, fp, #1
 80063ce:	6013      	str	r3, [r2, #0]
 80063d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f43f ace6 	beq.w	8005da4 <_dtoa_r+0x9c>
 80063d8:	601f      	str	r7, [r3, #0]
 80063da:	e4e3      	b.n	8005da4 <_dtoa_r+0x9c>
 80063dc:	4627      	mov	r7, r4
 80063de:	463b      	mov	r3, r7
 80063e0:	461f      	mov	r7, r3
 80063e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063e6:	2a39      	cmp	r2, #57	; 0x39
 80063e8:	d107      	bne.n	80063fa <_dtoa_r+0x6f2>
 80063ea:	9a03      	ldr	r2, [sp, #12]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d1f7      	bne.n	80063e0 <_dtoa_r+0x6d8>
 80063f0:	2230      	movs	r2, #48	; 0x30
 80063f2:	9903      	ldr	r1, [sp, #12]
 80063f4:	f108 0801 	add.w	r8, r8, #1
 80063f8:	700a      	strb	r2, [r1, #0]
 80063fa:	781a      	ldrb	r2, [r3, #0]
 80063fc:	3201      	adds	r2, #1
 80063fe:	701a      	strb	r2, [r3, #0]
 8006400:	e79e      	b.n	8006340 <_dtoa_r+0x638>
 8006402:	46d8      	mov	r8, fp
 8006404:	e7eb      	b.n	80063de <_dtoa_r+0x6d6>
 8006406:	2200      	movs	r2, #0
 8006408:	4b6d      	ldr	r3, [pc, #436]	; (80065c0 <_dtoa_r+0x8b8>)
 800640a:	f7fa f8d1 	bl	80005b0 <__aeabi_dmul>
 800640e:	2200      	movs	r2, #0
 8006410:	2300      	movs	r3, #0
 8006412:	4680      	mov	r8, r0
 8006414:	4689      	mov	r9, r1
 8006416:	f7fa fb33 	bl	8000a80 <__aeabi_dcmpeq>
 800641a:	2800      	cmp	r0, #0
 800641c:	d09b      	beq.n	8006356 <_dtoa_r+0x64e>
 800641e:	e7cd      	b.n	80063bc <_dtoa_r+0x6b4>
 8006420:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006422:	2a00      	cmp	r2, #0
 8006424:	f000 80c4 	beq.w	80065b0 <_dtoa_r+0x8a8>
 8006428:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800642a:	2a01      	cmp	r2, #1
 800642c:	f300 80a8 	bgt.w	8006580 <_dtoa_r+0x878>
 8006430:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006432:	2a00      	cmp	r2, #0
 8006434:	f000 80a0 	beq.w	8006578 <_dtoa_r+0x870>
 8006438:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800643c:	464f      	mov	r7, r9
 800643e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006440:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006442:	2101      	movs	r1, #1
 8006444:	441a      	add	r2, r3
 8006446:	4628      	mov	r0, r5
 8006448:	4499      	add	r9, r3
 800644a:	9209      	str	r2, [sp, #36]	; 0x24
 800644c:	f000 fc7c 	bl	8006d48 <__i2b>
 8006450:	4606      	mov	r6, r0
 8006452:	b15f      	cbz	r7, 800646c <_dtoa_r+0x764>
 8006454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006456:	2b00      	cmp	r3, #0
 8006458:	dd08      	ble.n	800646c <_dtoa_r+0x764>
 800645a:	42bb      	cmp	r3, r7
 800645c:	bfa8      	it	ge
 800645e:	463b      	movge	r3, r7
 8006460:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006462:	eba9 0903 	sub.w	r9, r9, r3
 8006466:	1aff      	subs	r7, r7, r3
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	9309      	str	r3, [sp, #36]	; 0x24
 800646c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800646e:	b1f3      	cbz	r3, 80064ae <_dtoa_r+0x7a6>
 8006470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006472:	2b00      	cmp	r3, #0
 8006474:	f000 80a0 	beq.w	80065b8 <_dtoa_r+0x8b0>
 8006478:	2c00      	cmp	r4, #0
 800647a:	dd10      	ble.n	800649e <_dtoa_r+0x796>
 800647c:	4631      	mov	r1, r6
 800647e:	4622      	mov	r2, r4
 8006480:	4628      	mov	r0, r5
 8006482:	f000 fd1f 	bl	8006ec4 <__pow5mult>
 8006486:	4652      	mov	r2, sl
 8006488:	4601      	mov	r1, r0
 800648a:	4606      	mov	r6, r0
 800648c:	4628      	mov	r0, r5
 800648e:	f000 fc71 	bl	8006d74 <__multiply>
 8006492:	4680      	mov	r8, r0
 8006494:	4651      	mov	r1, sl
 8006496:	4628      	mov	r0, r5
 8006498:	f000 fb56 	bl	8006b48 <_Bfree>
 800649c:	46c2      	mov	sl, r8
 800649e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064a0:	1b1a      	subs	r2, r3, r4
 80064a2:	d004      	beq.n	80064ae <_dtoa_r+0x7a6>
 80064a4:	4651      	mov	r1, sl
 80064a6:	4628      	mov	r0, r5
 80064a8:	f000 fd0c 	bl	8006ec4 <__pow5mult>
 80064ac:	4682      	mov	sl, r0
 80064ae:	2101      	movs	r1, #1
 80064b0:	4628      	mov	r0, r5
 80064b2:	f000 fc49 	bl	8006d48 <__i2b>
 80064b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064b8:	4604      	mov	r4, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f340 8082 	ble.w	80065c4 <_dtoa_r+0x8bc>
 80064c0:	461a      	mov	r2, r3
 80064c2:	4601      	mov	r1, r0
 80064c4:	4628      	mov	r0, r5
 80064c6:	f000 fcfd 	bl	8006ec4 <__pow5mult>
 80064ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064cc:	4604      	mov	r4, r0
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	dd7b      	ble.n	80065ca <_dtoa_r+0x8c2>
 80064d2:	f04f 0800 	mov.w	r8, #0
 80064d6:	6923      	ldr	r3, [r4, #16]
 80064d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80064dc:	6918      	ldr	r0, [r3, #16]
 80064de:	f000 fbe5 	bl	8006cac <__hi0bits>
 80064e2:	f1c0 0020 	rsb	r0, r0, #32
 80064e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064e8:	4418      	add	r0, r3
 80064ea:	f010 001f 	ands.w	r0, r0, #31
 80064ee:	f000 8092 	beq.w	8006616 <_dtoa_r+0x90e>
 80064f2:	f1c0 0320 	rsb	r3, r0, #32
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	f340 8085 	ble.w	8006606 <_dtoa_r+0x8fe>
 80064fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064fe:	f1c0 001c 	rsb	r0, r0, #28
 8006502:	4403      	add	r3, r0
 8006504:	4481      	add	r9, r0
 8006506:	4407      	add	r7, r0
 8006508:	9309      	str	r3, [sp, #36]	; 0x24
 800650a:	f1b9 0f00 	cmp.w	r9, #0
 800650e:	dd05      	ble.n	800651c <_dtoa_r+0x814>
 8006510:	4651      	mov	r1, sl
 8006512:	464a      	mov	r2, r9
 8006514:	4628      	mov	r0, r5
 8006516:	f000 fd2f 	bl	8006f78 <__lshift>
 800651a:	4682      	mov	sl, r0
 800651c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800651e:	2b00      	cmp	r3, #0
 8006520:	dd05      	ble.n	800652e <_dtoa_r+0x826>
 8006522:	4621      	mov	r1, r4
 8006524:	461a      	mov	r2, r3
 8006526:	4628      	mov	r0, r5
 8006528:	f000 fd26 	bl	8006f78 <__lshift>
 800652c:	4604      	mov	r4, r0
 800652e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006530:	2b00      	cmp	r3, #0
 8006532:	d072      	beq.n	800661a <_dtoa_r+0x912>
 8006534:	4621      	mov	r1, r4
 8006536:	4650      	mov	r0, sl
 8006538:	f000 fd8a 	bl	8007050 <__mcmp>
 800653c:	2800      	cmp	r0, #0
 800653e:	da6c      	bge.n	800661a <_dtoa_r+0x912>
 8006540:	2300      	movs	r3, #0
 8006542:	4651      	mov	r1, sl
 8006544:	220a      	movs	r2, #10
 8006546:	4628      	mov	r0, r5
 8006548:	f000 fb20 	bl	8006b8c <__multadd>
 800654c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800654e:	4682      	mov	sl, r0
 8006550:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 81ac 	beq.w	80068b2 <_dtoa_r+0xbaa>
 800655a:	2300      	movs	r3, #0
 800655c:	4631      	mov	r1, r6
 800655e:	220a      	movs	r2, #10
 8006560:	4628      	mov	r0, r5
 8006562:	f000 fb13 	bl	8006b8c <__multadd>
 8006566:	9b06      	ldr	r3, [sp, #24]
 8006568:	4606      	mov	r6, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	f300 8093 	bgt.w	8006696 <_dtoa_r+0x98e>
 8006570:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006572:	2b02      	cmp	r3, #2
 8006574:	dc59      	bgt.n	800662a <_dtoa_r+0x922>
 8006576:	e08e      	b.n	8006696 <_dtoa_r+0x98e>
 8006578:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800657a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800657e:	e75d      	b.n	800643c <_dtoa_r+0x734>
 8006580:	9b08      	ldr	r3, [sp, #32]
 8006582:	1e5c      	subs	r4, r3, #1
 8006584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006586:	42a3      	cmp	r3, r4
 8006588:	bfbf      	itttt	lt
 800658a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800658c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800658e:	1ae3      	sublt	r3, r4, r3
 8006590:	18d2      	addlt	r2, r2, r3
 8006592:	bfa8      	it	ge
 8006594:	1b1c      	subge	r4, r3, r4
 8006596:	9b08      	ldr	r3, [sp, #32]
 8006598:	bfbe      	ittt	lt
 800659a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800659c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800659e:	2400      	movlt	r4, #0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	bfb5      	itete	lt
 80065a4:	eba9 0703 	sublt.w	r7, r9, r3
 80065a8:	464f      	movge	r7, r9
 80065aa:	2300      	movlt	r3, #0
 80065ac:	9b08      	ldrge	r3, [sp, #32]
 80065ae:	e747      	b.n	8006440 <_dtoa_r+0x738>
 80065b0:	464f      	mov	r7, r9
 80065b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80065b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80065b6:	e74c      	b.n	8006452 <_dtoa_r+0x74a>
 80065b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065ba:	e773      	b.n	80064a4 <_dtoa_r+0x79c>
 80065bc:	3fe00000 	.word	0x3fe00000
 80065c0:	40240000 	.word	0x40240000
 80065c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	dc18      	bgt.n	80065fc <_dtoa_r+0x8f4>
 80065ca:	9b04      	ldr	r3, [sp, #16]
 80065cc:	b9b3      	cbnz	r3, 80065fc <_dtoa_r+0x8f4>
 80065ce:	9b05      	ldr	r3, [sp, #20]
 80065d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065d4:	b993      	cbnz	r3, 80065fc <_dtoa_r+0x8f4>
 80065d6:	9b05      	ldr	r3, [sp, #20]
 80065d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065dc:	0d1b      	lsrs	r3, r3, #20
 80065de:	051b      	lsls	r3, r3, #20
 80065e0:	b17b      	cbz	r3, 8006602 <_dtoa_r+0x8fa>
 80065e2:	f04f 0801 	mov.w	r8, #1
 80065e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065e8:	f109 0901 	add.w	r9, r9, #1
 80065ec:	3301      	adds	r3, #1
 80065ee:	9309      	str	r3, [sp, #36]	; 0x24
 80065f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f47f af6f 	bne.w	80064d6 <_dtoa_r+0x7ce>
 80065f8:	2001      	movs	r0, #1
 80065fa:	e774      	b.n	80064e6 <_dtoa_r+0x7de>
 80065fc:	f04f 0800 	mov.w	r8, #0
 8006600:	e7f6      	b.n	80065f0 <_dtoa_r+0x8e8>
 8006602:	4698      	mov	r8, r3
 8006604:	e7f4      	b.n	80065f0 <_dtoa_r+0x8e8>
 8006606:	d080      	beq.n	800650a <_dtoa_r+0x802>
 8006608:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800660a:	331c      	adds	r3, #28
 800660c:	441a      	add	r2, r3
 800660e:	4499      	add	r9, r3
 8006610:	441f      	add	r7, r3
 8006612:	9209      	str	r2, [sp, #36]	; 0x24
 8006614:	e779      	b.n	800650a <_dtoa_r+0x802>
 8006616:	4603      	mov	r3, r0
 8006618:	e7f6      	b.n	8006608 <_dtoa_r+0x900>
 800661a:	9b08      	ldr	r3, [sp, #32]
 800661c:	2b00      	cmp	r3, #0
 800661e:	dc34      	bgt.n	800668a <_dtoa_r+0x982>
 8006620:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006622:	2b02      	cmp	r3, #2
 8006624:	dd31      	ble.n	800668a <_dtoa_r+0x982>
 8006626:	9b08      	ldr	r3, [sp, #32]
 8006628:	9306      	str	r3, [sp, #24]
 800662a:	9b06      	ldr	r3, [sp, #24]
 800662c:	b963      	cbnz	r3, 8006648 <_dtoa_r+0x940>
 800662e:	4621      	mov	r1, r4
 8006630:	2205      	movs	r2, #5
 8006632:	4628      	mov	r0, r5
 8006634:	f000 faaa 	bl	8006b8c <__multadd>
 8006638:	4601      	mov	r1, r0
 800663a:	4604      	mov	r4, r0
 800663c:	4650      	mov	r0, sl
 800663e:	f000 fd07 	bl	8007050 <__mcmp>
 8006642:	2800      	cmp	r0, #0
 8006644:	f73f adbf 	bgt.w	80061c6 <_dtoa_r+0x4be>
 8006648:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800664a:	9f03      	ldr	r7, [sp, #12]
 800664c:	ea6f 0b03 	mvn.w	fp, r3
 8006650:	f04f 0800 	mov.w	r8, #0
 8006654:	4621      	mov	r1, r4
 8006656:	4628      	mov	r0, r5
 8006658:	f000 fa76 	bl	8006b48 <_Bfree>
 800665c:	2e00      	cmp	r6, #0
 800665e:	f43f aead 	beq.w	80063bc <_dtoa_r+0x6b4>
 8006662:	f1b8 0f00 	cmp.w	r8, #0
 8006666:	d005      	beq.n	8006674 <_dtoa_r+0x96c>
 8006668:	45b0      	cmp	r8, r6
 800666a:	d003      	beq.n	8006674 <_dtoa_r+0x96c>
 800666c:	4641      	mov	r1, r8
 800666e:	4628      	mov	r0, r5
 8006670:	f000 fa6a 	bl	8006b48 <_Bfree>
 8006674:	4631      	mov	r1, r6
 8006676:	4628      	mov	r0, r5
 8006678:	f000 fa66 	bl	8006b48 <_Bfree>
 800667c:	e69e      	b.n	80063bc <_dtoa_r+0x6b4>
 800667e:	2400      	movs	r4, #0
 8006680:	4626      	mov	r6, r4
 8006682:	e7e1      	b.n	8006648 <_dtoa_r+0x940>
 8006684:	46c3      	mov	fp, r8
 8006686:	4626      	mov	r6, r4
 8006688:	e59d      	b.n	80061c6 <_dtoa_r+0x4be>
 800668a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 80c8 	beq.w	8006822 <_dtoa_r+0xb1a>
 8006692:	9b08      	ldr	r3, [sp, #32]
 8006694:	9306      	str	r3, [sp, #24]
 8006696:	2f00      	cmp	r7, #0
 8006698:	dd05      	ble.n	80066a6 <_dtoa_r+0x99e>
 800669a:	4631      	mov	r1, r6
 800669c:	463a      	mov	r2, r7
 800669e:	4628      	mov	r0, r5
 80066a0:	f000 fc6a 	bl	8006f78 <__lshift>
 80066a4:	4606      	mov	r6, r0
 80066a6:	f1b8 0f00 	cmp.w	r8, #0
 80066aa:	d05b      	beq.n	8006764 <_dtoa_r+0xa5c>
 80066ac:	4628      	mov	r0, r5
 80066ae:	6871      	ldr	r1, [r6, #4]
 80066b0:	f000 fa0a 	bl	8006ac8 <_Balloc>
 80066b4:	4607      	mov	r7, r0
 80066b6:	b928      	cbnz	r0, 80066c4 <_dtoa_r+0x9bc>
 80066b8:	4602      	mov	r2, r0
 80066ba:	f240 21ef 	movw	r1, #751	; 0x2ef
 80066be:	4b81      	ldr	r3, [pc, #516]	; (80068c4 <_dtoa_r+0xbbc>)
 80066c0:	f7ff bb36 	b.w	8005d30 <_dtoa_r+0x28>
 80066c4:	6932      	ldr	r2, [r6, #16]
 80066c6:	f106 010c 	add.w	r1, r6, #12
 80066ca:	3202      	adds	r2, #2
 80066cc:	0092      	lsls	r2, r2, #2
 80066ce:	300c      	adds	r0, #12
 80066d0:	f001 ff72 	bl	80085b8 <memcpy>
 80066d4:	2201      	movs	r2, #1
 80066d6:	4639      	mov	r1, r7
 80066d8:	4628      	mov	r0, r5
 80066da:	f000 fc4d 	bl	8006f78 <__lshift>
 80066de:	46b0      	mov	r8, r6
 80066e0:	4606      	mov	r6, r0
 80066e2:	9b03      	ldr	r3, [sp, #12]
 80066e4:	9a03      	ldr	r2, [sp, #12]
 80066e6:	3301      	adds	r3, #1
 80066e8:	9308      	str	r3, [sp, #32]
 80066ea:	9b06      	ldr	r3, [sp, #24]
 80066ec:	4413      	add	r3, r2
 80066ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80066f0:	9b04      	ldr	r3, [sp, #16]
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	930a      	str	r3, [sp, #40]	; 0x28
 80066f8:	9b08      	ldr	r3, [sp, #32]
 80066fa:	4621      	mov	r1, r4
 80066fc:	3b01      	subs	r3, #1
 80066fe:	4650      	mov	r0, sl
 8006700:	9304      	str	r3, [sp, #16]
 8006702:	f7ff fa75 	bl	8005bf0 <quorem>
 8006706:	4641      	mov	r1, r8
 8006708:	9006      	str	r0, [sp, #24]
 800670a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800670e:	4650      	mov	r0, sl
 8006710:	f000 fc9e 	bl	8007050 <__mcmp>
 8006714:	4632      	mov	r2, r6
 8006716:	9009      	str	r0, [sp, #36]	; 0x24
 8006718:	4621      	mov	r1, r4
 800671a:	4628      	mov	r0, r5
 800671c:	f000 fcb4 	bl	8007088 <__mdiff>
 8006720:	68c2      	ldr	r2, [r0, #12]
 8006722:	4607      	mov	r7, r0
 8006724:	bb02      	cbnz	r2, 8006768 <_dtoa_r+0xa60>
 8006726:	4601      	mov	r1, r0
 8006728:	4650      	mov	r0, sl
 800672a:	f000 fc91 	bl	8007050 <__mcmp>
 800672e:	4602      	mov	r2, r0
 8006730:	4639      	mov	r1, r7
 8006732:	4628      	mov	r0, r5
 8006734:	920c      	str	r2, [sp, #48]	; 0x30
 8006736:	f000 fa07 	bl	8006b48 <_Bfree>
 800673a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800673c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800673e:	9f08      	ldr	r7, [sp, #32]
 8006740:	ea43 0102 	orr.w	r1, r3, r2
 8006744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006746:	4319      	orrs	r1, r3
 8006748:	d110      	bne.n	800676c <_dtoa_r+0xa64>
 800674a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800674e:	d029      	beq.n	80067a4 <_dtoa_r+0xa9c>
 8006750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006752:	2b00      	cmp	r3, #0
 8006754:	dd02      	ble.n	800675c <_dtoa_r+0xa54>
 8006756:	9b06      	ldr	r3, [sp, #24]
 8006758:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800675c:	9b04      	ldr	r3, [sp, #16]
 800675e:	f883 9000 	strb.w	r9, [r3]
 8006762:	e777      	b.n	8006654 <_dtoa_r+0x94c>
 8006764:	4630      	mov	r0, r6
 8006766:	e7ba      	b.n	80066de <_dtoa_r+0x9d6>
 8006768:	2201      	movs	r2, #1
 800676a:	e7e1      	b.n	8006730 <_dtoa_r+0xa28>
 800676c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800676e:	2b00      	cmp	r3, #0
 8006770:	db04      	blt.n	800677c <_dtoa_r+0xa74>
 8006772:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006774:	430b      	orrs	r3, r1
 8006776:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006778:	430b      	orrs	r3, r1
 800677a:	d120      	bne.n	80067be <_dtoa_r+0xab6>
 800677c:	2a00      	cmp	r2, #0
 800677e:	dded      	ble.n	800675c <_dtoa_r+0xa54>
 8006780:	4651      	mov	r1, sl
 8006782:	2201      	movs	r2, #1
 8006784:	4628      	mov	r0, r5
 8006786:	f000 fbf7 	bl	8006f78 <__lshift>
 800678a:	4621      	mov	r1, r4
 800678c:	4682      	mov	sl, r0
 800678e:	f000 fc5f 	bl	8007050 <__mcmp>
 8006792:	2800      	cmp	r0, #0
 8006794:	dc03      	bgt.n	800679e <_dtoa_r+0xa96>
 8006796:	d1e1      	bne.n	800675c <_dtoa_r+0xa54>
 8006798:	f019 0f01 	tst.w	r9, #1
 800679c:	d0de      	beq.n	800675c <_dtoa_r+0xa54>
 800679e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80067a2:	d1d8      	bne.n	8006756 <_dtoa_r+0xa4e>
 80067a4:	2339      	movs	r3, #57	; 0x39
 80067a6:	9a04      	ldr	r2, [sp, #16]
 80067a8:	7013      	strb	r3, [r2, #0]
 80067aa:	463b      	mov	r3, r7
 80067ac:	461f      	mov	r7, r3
 80067ae:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	2a39      	cmp	r2, #57	; 0x39
 80067b6:	d06b      	beq.n	8006890 <_dtoa_r+0xb88>
 80067b8:	3201      	adds	r2, #1
 80067ba:	701a      	strb	r2, [r3, #0]
 80067bc:	e74a      	b.n	8006654 <_dtoa_r+0x94c>
 80067be:	2a00      	cmp	r2, #0
 80067c0:	dd07      	ble.n	80067d2 <_dtoa_r+0xaca>
 80067c2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80067c6:	d0ed      	beq.n	80067a4 <_dtoa_r+0xa9c>
 80067c8:	9a04      	ldr	r2, [sp, #16]
 80067ca:	f109 0301 	add.w	r3, r9, #1
 80067ce:	7013      	strb	r3, [r2, #0]
 80067d0:	e740      	b.n	8006654 <_dtoa_r+0x94c>
 80067d2:	9b08      	ldr	r3, [sp, #32]
 80067d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067d6:	f803 9c01 	strb.w	r9, [r3, #-1]
 80067da:	4293      	cmp	r3, r2
 80067dc:	d042      	beq.n	8006864 <_dtoa_r+0xb5c>
 80067de:	4651      	mov	r1, sl
 80067e0:	2300      	movs	r3, #0
 80067e2:	220a      	movs	r2, #10
 80067e4:	4628      	mov	r0, r5
 80067e6:	f000 f9d1 	bl	8006b8c <__multadd>
 80067ea:	45b0      	cmp	r8, r6
 80067ec:	4682      	mov	sl, r0
 80067ee:	f04f 0300 	mov.w	r3, #0
 80067f2:	f04f 020a 	mov.w	r2, #10
 80067f6:	4641      	mov	r1, r8
 80067f8:	4628      	mov	r0, r5
 80067fa:	d107      	bne.n	800680c <_dtoa_r+0xb04>
 80067fc:	f000 f9c6 	bl	8006b8c <__multadd>
 8006800:	4680      	mov	r8, r0
 8006802:	4606      	mov	r6, r0
 8006804:	9b08      	ldr	r3, [sp, #32]
 8006806:	3301      	adds	r3, #1
 8006808:	9308      	str	r3, [sp, #32]
 800680a:	e775      	b.n	80066f8 <_dtoa_r+0x9f0>
 800680c:	f000 f9be 	bl	8006b8c <__multadd>
 8006810:	4631      	mov	r1, r6
 8006812:	4680      	mov	r8, r0
 8006814:	2300      	movs	r3, #0
 8006816:	220a      	movs	r2, #10
 8006818:	4628      	mov	r0, r5
 800681a:	f000 f9b7 	bl	8006b8c <__multadd>
 800681e:	4606      	mov	r6, r0
 8006820:	e7f0      	b.n	8006804 <_dtoa_r+0xafc>
 8006822:	9b08      	ldr	r3, [sp, #32]
 8006824:	9306      	str	r3, [sp, #24]
 8006826:	9f03      	ldr	r7, [sp, #12]
 8006828:	4621      	mov	r1, r4
 800682a:	4650      	mov	r0, sl
 800682c:	f7ff f9e0 	bl	8005bf0 <quorem>
 8006830:	9b03      	ldr	r3, [sp, #12]
 8006832:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006836:	f807 9b01 	strb.w	r9, [r7], #1
 800683a:	1afa      	subs	r2, r7, r3
 800683c:	9b06      	ldr	r3, [sp, #24]
 800683e:	4293      	cmp	r3, r2
 8006840:	dd07      	ble.n	8006852 <_dtoa_r+0xb4a>
 8006842:	4651      	mov	r1, sl
 8006844:	2300      	movs	r3, #0
 8006846:	220a      	movs	r2, #10
 8006848:	4628      	mov	r0, r5
 800684a:	f000 f99f 	bl	8006b8c <__multadd>
 800684e:	4682      	mov	sl, r0
 8006850:	e7ea      	b.n	8006828 <_dtoa_r+0xb20>
 8006852:	9b06      	ldr	r3, [sp, #24]
 8006854:	f04f 0800 	mov.w	r8, #0
 8006858:	2b00      	cmp	r3, #0
 800685a:	bfcc      	ite	gt
 800685c:	461f      	movgt	r7, r3
 800685e:	2701      	movle	r7, #1
 8006860:	9b03      	ldr	r3, [sp, #12]
 8006862:	441f      	add	r7, r3
 8006864:	4651      	mov	r1, sl
 8006866:	2201      	movs	r2, #1
 8006868:	4628      	mov	r0, r5
 800686a:	f000 fb85 	bl	8006f78 <__lshift>
 800686e:	4621      	mov	r1, r4
 8006870:	4682      	mov	sl, r0
 8006872:	f000 fbed 	bl	8007050 <__mcmp>
 8006876:	2800      	cmp	r0, #0
 8006878:	dc97      	bgt.n	80067aa <_dtoa_r+0xaa2>
 800687a:	d102      	bne.n	8006882 <_dtoa_r+0xb7a>
 800687c:	f019 0f01 	tst.w	r9, #1
 8006880:	d193      	bne.n	80067aa <_dtoa_r+0xaa2>
 8006882:	463b      	mov	r3, r7
 8006884:	461f      	mov	r7, r3
 8006886:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800688a:	2a30      	cmp	r2, #48	; 0x30
 800688c:	d0fa      	beq.n	8006884 <_dtoa_r+0xb7c>
 800688e:	e6e1      	b.n	8006654 <_dtoa_r+0x94c>
 8006890:	9a03      	ldr	r2, [sp, #12]
 8006892:	429a      	cmp	r2, r3
 8006894:	d18a      	bne.n	80067ac <_dtoa_r+0xaa4>
 8006896:	2331      	movs	r3, #49	; 0x31
 8006898:	f10b 0b01 	add.w	fp, fp, #1
 800689c:	e797      	b.n	80067ce <_dtoa_r+0xac6>
 800689e:	4b0a      	ldr	r3, [pc, #40]	; (80068c8 <_dtoa_r+0xbc0>)
 80068a0:	f7ff ba9f 	b.w	8005de2 <_dtoa_r+0xda>
 80068a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f47f aa77 	bne.w	8005d9a <_dtoa_r+0x92>
 80068ac:	4b07      	ldr	r3, [pc, #28]	; (80068cc <_dtoa_r+0xbc4>)
 80068ae:	f7ff ba98 	b.w	8005de2 <_dtoa_r+0xda>
 80068b2:	9b06      	ldr	r3, [sp, #24]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	dcb6      	bgt.n	8006826 <_dtoa_r+0xb1e>
 80068b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	f73f aeb5 	bgt.w	800662a <_dtoa_r+0x922>
 80068c0:	e7b1      	b.n	8006826 <_dtoa_r+0xb1e>
 80068c2:	bf00      	nop
 80068c4:	0800941f 	.word	0x0800941f
 80068c8:	0800937a 	.word	0x0800937a
 80068cc:	080093a3 	.word	0x080093a3

080068d0 <_free_r>:
 80068d0:	b538      	push	{r3, r4, r5, lr}
 80068d2:	4605      	mov	r5, r0
 80068d4:	2900      	cmp	r1, #0
 80068d6:	d040      	beq.n	800695a <_free_r+0x8a>
 80068d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068dc:	1f0c      	subs	r4, r1, #4
 80068de:	2b00      	cmp	r3, #0
 80068e0:	bfb8      	it	lt
 80068e2:	18e4      	addlt	r4, r4, r3
 80068e4:	f000 f8e4 	bl	8006ab0 <__malloc_lock>
 80068e8:	4a1c      	ldr	r2, [pc, #112]	; (800695c <_free_r+0x8c>)
 80068ea:	6813      	ldr	r3, [r2, #0]
 80068ec:	b933      	cbnz	r3, 80068fc <_free_r+0x2c>
 80068ee:	6063      	str	r3, [r4, #4]
 80068f0:	6014      	str	r4, [r2, #0]
 80068f2:	4628      	mov	r0, r5
 80068f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068f8:	f000 b8e0 	b.w	8006abc <__malloc_unlock>
 80068fc:	42a3      	cmp	r3, r4
 80068fe:	d908      	bls.n	8006912 <_free_r+0x42>
 8006900:	6820      	ldr	r0, [r4, #0]
 8006902:	1821      	adds	r1, r4, r0
 8006904:	428b      	cmp	r3, r1
 8006906:	bf01      	itttt	eq
 8006908:	6819      	ldreq	r1, [r3, #0]
 800690a:	685b      	ldreq	r3, [r3, #4]
 800690c:	1809      	addeq	r1, r1, r0
 800690e:	6021      	streq	r1, [r4, #0]
 8006910:	e7ed      	b.n	80068ee <_free_r+0x1e>
 8006912:	461a      	mov	r2, r3
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	b10b      	cbz	r3, 800691c <_free_r+0x4c>
 8006918:	42a3      	cmp	r3, r4
 800691a:	d9fa      	bls.n	8006912 <_free_r+0x42>
 800691c:	6811      	ldr	r1, [r2, #0]
 800691e:	1850      	adds	r0, r2, r1
 8006920:	42a0      	cmp	r0, r4
 8006922:	d10b      	bne.n	800693c <_free_r+0x6c>
 8006924:	6820      	ldr	r0, [r4, #0]
 8006926:	4401      	add	r1, r0
 8006928:	1850      	adds	r0, r2, r1
 800692a:	4283      	cmp	r3, r0
 800692c:	6011      	str	r1, [r2, #0]
 800692e:	d1e0      	bne.n	80068f2 <_free_r+0x22>
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	4408      	add	r0, r1
 8006936:	6010      	str	r0, [r2, #0]
 8006938:	6053      	str	r3, [r2, #4]
 800693a:	e7da      	b.n	80068f2 <_free_r+0x22>
 800693c:	d902      	bls.n	8006944 <_free_r+0x74>
 800693e:	230c      	movs	r3, #12
 8006940:	602b      	str	r3, [r5, #0]
 8006942:	e7d6      	b.n	80068f2 <_free_r+0x22>
 8006944:	6820      	ldr	r0, [r4, #0]
 8006946:	1821      	adds	r1, r4, r0
 8006948:	428b      	cmp	r3, r1
 800694a:	bf01      	itttt	eq
 800694c:	6819      	ldreq	r1, [r3, #0]
 800694e:	685b      	ldreq	r3, [r3, #4]
 8006950:	1809      	addeq	r1, r1, r0
 8006952:	6021      	streq	r1, [r4, #0]
 8006954:	6063      	str	r3, [r4, #4]
 8006956:	6054      	str	r4, [r2, #4]
 8006958:	e7cb      	b.n	80068f2 <_free_r+0x22>
 800695a:	bd38      	pop	{r3, r4, r5, pc}
 800695c:	200004a8 	.word	0x200004a8

08006960 <malloc>:
 8006960:	4b02      	ldr	r3, [pc, #8]	; (800696c <malloc+0xc>)
 8006962:	4601      	mov	r1, r0
 8006964:	6818      	ldr	r0, [r3, #0]
 8006966:	f000 b823 	b.w	80069b0 <_malloc_r>
 800696a:	bf00      	nop
 800696c:	2000006c 	.word	0x2000006c

08006970 <sbrk_aligned>:
 8006970:	b570      	push	{r4, r5, r6, lr}
 8006972:	4e0e      	ldr	r6, [pc, #56]	; (80069ac <sbrk_aligned+0x3c>)
 8006974:	460c      	mov	r4, r1
 8006976:	6831      	ldr	r1, [r6, #0]
 8006978:	4605      	mov	r5, r0
 800697a:	b911      	cbnz	r1, 8006982 <sbrk_aligned+0x12>
 800697c:	f001 fe0c 	bl	8008598 <_sbrk_r>
 8006980:	6030      	str	r0, [r6, #0]
 8006982:	4621      	mov	r1, r4
 8006984:	4628      	mov	r0, r5
 8006986:	f001 fe07 	bl	8008598 <_sbrk_r>
 800698a:	1c43      	adds	r3, r0, #1
 800698c:	d00a      	beq.n	80069a4 <sbrk_aligned+0x34>
 800698e:	1cc4      	adds	r4, r0, #3
 8006990:	f024 0403 	bic.w	r4, r4, #3
 8006994:	42a0      	cmp	r0, r4
 8006996:	d007      	beq.n	80069a8 <sbrk_aligned+0x38>
 8006998:	1a21      	subs	r1, r4, r0
 800699a:	4628      	mov	r0, r5
 800699c:	f001 fdfc 	bl	8008598 <_sbrk_r>
 80069a0:	3001      	adds	r0, #1
 80069a2:	d101      	bne.n	80069a8 <sbrk_aligned+0x38>
 80069a4:	f04f 34ff 	mov.w	r4, #4294967295
 80069a8:	4620      	mov	r0, r4
 80069aa:	bd70      	pop	{r4, r5, r6, pc}
 80069ac:	200004ac 	.word	0x200004ac

080069b0 <_malloc_r>:
 80069b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069b4:	1ccd      	adds	r5, r1, #3
 80069b6:	f025 0503 	bic.w	r5, r5, #3
 80069ba:	3508      	adds	r5, #8
 80069bc:	2d0c      	cmp	r5, #12
 80069be:	bf38      	it	cc
 80069c0:	250c      	movcc	r5, #12
 80069c2:	2d00      	cmp	r5, #0
 80069c4:	4607      	mov	r7, r0
 80069c6:	db01      	blt.n	80069cc <_malloc_r+0x1c>
 80069c8:	42a9      	cmp	r1, r5
 80069ca:	d905      	bls.n	80069d8 <_malloc_r+0x28>
 80069cc:	230c      	movs	r3, #12
 80069ce:	2600      	movs	r6, #0
 80069d0:	603b      	str	r3, [r7, #0]
 80069d2:	4630      	mov	r0, r6
 80069d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006aac <_malloc_r+0xfc>
 80069dc:	f000 f868 	bl	8006ab0 <__malloc_lock>
 80069e0:	f8d8 3000 	ldr.w	r3, [r8]
 80069e4:	461c      	mov	r4, r3
 80069e6:	bb5c      	cbnz	r4, 8006a40 <_malloc_r+0x90>
 80069e8:	4629      	mov	r1, r5
 80069ea:	4638      	mov	r0, r7
 80069ec:	f7ff ffc0 	bl	8006970 <sbrk_aligned>
 80069f0:	1c43      	adds	r3, r0, #1
 80069f2:	4604      	mov	r4, r0
 80069f4:	d155      	bne.n	8006aa2 <_malloc_r+0xf2>
 80069f6:	f8d8 4000 	ldr.w	r4, [r8]
 80069fa:	4626      	mov	r6, r4
 80069fc:	2e00      	cmp	r6, #0
 80069fe:	d145      	bne.n	8006a8c <_malloc_r+0xdc>
 8006a00:	2c00      	cmp	r4, #0
 8006a02:	d048      	beq.n	8006a96 <_malloc_r+0xe6>
 8006a04:	6823      	ldr	r3, [r4, #0]
 8006a06:	4631      	mov	r1, r6
 8006a08:	4638      	mov	r0, r7
 8006a0a:	eb04 0903 	add.w	r9, r4, r3
 8006a0e:	f001 fdc3 	bl	8008598 <_sbrk_r>
 8006a12:	4581      	cmp	r9, r0
 8006a14:	d13f      	bne.n	8006a96 <_malloc_r+0xe6>
 8006a16:	6821      	ldr	r1, [r4, #0]
 8006a18:	4638      	mov	r0, r7
 8006a1a:	1a6d      	subs	r5, r5, r1
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	f7ff ffa7 	bl	8006970 <sbrk_aligned>
 8006a22:	3001      	adds	r0, #1
 8006a24:	d037      	beq.n	8006a96 <_malloc_r+0xe6>
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	442b      	add	r3, r5
 8006a2a:	6023      	str	r3, [r4, #0]
 8006a2c:	f8d8 3000 	ldr.w	r3, [r8]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d038      	beq.n	8006aa6 <_malloc_r+0xf6>
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	42a2      	cmp	r2, r4
 8006a38:	d12b      	bne.n	8006a92 <_malloc_r+0xe2>
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	605a      	str	r2, [r3, #4]
 8006a3e:	e00f      	b.n	8006a60 <_malloc_r+0xb0>
 8006a40:	6822      	ldr	r2, [r4, #0]
 8006a42:	1b52      	subs	r2, r2, r5
 8006a44:	d41f      	bmi.n	8006a86 <_malloc_r+0xd6>
 8006a46:	2a0b      	cmp	r2, #11
 8006a48:	d917      	bls.n	8006a7a <_malloc_r+0xca>
 8006a4a:	1961      	adds	r1, r4, r5
 8006a4c:	42a3      	cmp	r3, r4
 8006a4e:	6025      	str	r5, [r4, #0]
 8006a50:	bf18      	it	ne
 8006a52:	6059      	strne	r1, [r3, #4]
 8006a54:	6863      	ldr	r3, [r4, #4]
 8006a56:	bf08      	it	eq
 8006a58:	f8c8 1000 	streq.w	r1, [r8]
 8006a5c:	5162      	str	r2, [r4, r5]
 8006a5e:	604b      	str	r3, [r1, #4]
 8006a60:	4638      	mov	r0, r7
 8006a62:	f104 060b 	add.w	r6, r4, #11
 8006a66:	f000 f829 	bl	8006abc <__malloc_unlock>
 8006a6a:	f026 0607 	bic.w	r6, r6, #7
 8006a6e:	1d23      	adds	r3, r4, #4
 8006a70:	1af2      	subs	r2, r6, r3
 8006a72:	d0ae      	beq.n	80069d2 <_malloc_r+0x22>
 8006a74:	1b9b      	subs	r3, r3, r6
 8006a76:	50a3      	str	r3, [r4, r2]
 8006a78:	e7ab      	b.n	80069d2 <_malloc_r+0x22>
 8006a7a:	42a3      	cmp	r3, r4
 8006a7c:	6862      	ldr	r2, [r4, #4]
 8006a7e:	d1dd      	bne.n	8006a3c <_malloc_r+0x8c>
 8006a80:	f8c8 2000 	str.w	r2, [r8]
 8006a84:	e7ec      	b.n	8006a60 <_malloc_r+0xb0>
 8006a86:	4623      	mov	r3, r4
 8006a88:	6864      	ldr	r4, [r4, #4]
 8006a8a:	e7ac      	b.n	80069e6 <_malloc_r+0x36>
 8006a8c:	4634      	mov	r4, r6
 8006a8e:	6876      	ldr	r6, [r6, #4]
 8006a90:	e7b4      	b.n	80069fc <_malloc_r+0x4c>
 8006a92:	4613      	mov	r3, r2
 8006a94:	e7cc      	b.n	8006a30 <_malloc_r+0x80>
 8006a96:	230c      	movs	r3, #12
 8006a98:	4638      	mov	r0, r7
 8006a9a:	603b      	str	r3, [r7, #0]
 8006a9c:	f000 f80e 	bl	8006abc <__malloc_unlock>
 8006aa0:	e797      	b.n	80069d2 <_malloc_r+0x22>
 8006aa2:	6025      	str	r5, [r4, #0]
 8006aa4:	e7dc      	b.n	8006a60 <_malloc_r+0xb0>
 8006aa6:	605b      	str	r3, [r3, #4]
 8006aa8:	deff      	udf	#255	; 0xff
 8006aaa:	bf00      	nop
 8006aac:	200004a8 	.word	0x200004a8

08006ab0 <__malloc_lock>:
 8006ab0:	4801      	ldr	r0, [pc, #4]	; (8006ab8 <__malloc_lock+0x8>)
 8006ab2:	f7ff b888 	b.w	8005bc6 <__retarget_lock_acquire_recursive>
 8006ab6:	bf00      	nop
 8006ab8:	200004a4 	.word	0x200004a4

08006abc <__malloc_unlock>:
 8006abc:	4801      	ldr	r0, [pc, #4]	; (8006ac4 <__malloc_unlock+0x8>)
 8006abe:	f7ff b883 	b.w	8005bc8 <__retarget_lock_release_recursive>
 8006ac2:	bf00      	nop
 8006ac4:	200004a4 	.word	0x200004a4

08006ac8 <_Balloc>:
 8006ac8:	b570      	push	{r4, r5, r6, lr}
 8006aca:	69c6      	ldr	r6, [r0, #28]
 8006acc:	4604      	mov	r4, r0
 8006ace:	460d      	mov	r5, r1
 8006ad0:	b976      	cbnz	r6, 8006af0 <_Balloc+0x28>
 8006ad2:	2010      	movs	r0, #16
 8006ad4:	f7ff ff44 	bl	8006960 <malloc>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	61e0      	str	r0, [r4, #28]
 8006adc:	b920      	cbnz	r0, 8006ae8 <_Balloc+0x20>
 8006ade:	216b      	movs	r1, #107	; 0x6b
 8006ae0:	4b17      	ldr	r3, [pc, #92]	; (8006b40 <_Balloc+0x78>)
 8006ae2:	4818      	ldr	r0, [pc, #96]	; (8006b44 <_Balloc+0x7c>)
 8006ae4:	f001 fd7c 	bl	80085e0 <__assert_func>
 8006ae8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006aec:	6006      	str	r6, [r0, #0]
 8006aee:	60c6      	str	r6, [r0, #12]
 8006af0:	69e6      	ldr	r6, [r4, #28]
 8006af2:	68f3      	ldr	r3, [r6, #12]
 8006af4:	b183      	cbz	r3, 8006b18 <_Balloc+0x50>
 8006af6:	69e3      	ldr	r3, [r4, #28]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006afe:	b9b8      	cbnz	r0, 8006b30 <_Balloc+0x68>
 8006b00:	2101      	movs	r1, #1
 8006b02:	fa01 f605 	lsl.w	r6, r1, r5
 8006b06:	1d72      	adds	r2, r6, #5
 8006b08:	4620      	mov	r0, r4
 8006b0a:	0092      	lsls	r2, r2, #2
 8006b0c:	f001 fd86 	bl	800861c <_calloc_r>
 8006b10:	b160      	cbz	r0, 8006b2c <_Balloc+0x64>
 8006b12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b16:	e00e      	b.n	8006b36 <_Balloc+0x6e>
 8006b18:	2221      	movs	r2, #33	; 0x21
 8006b1a:	2104      	movs	r1, #4
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	f001 fd7d 	bl	800861c <_calloc_r>
 8006b22:	69e3      	ldr	r3, [r4, #28]
 8006b24:	60f0      	str	r0, [r6, #12]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e4      	bne.n	8006af6 <_Balloc+0x2e>
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	bd70      	pop	{r4, r5, r6, pc}
 8006b30:	6802      	ldr	r2, [r0, #0]
 8006b32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b36:	2300      	movs	r3, #0
 8006b38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b3c:	e7f7      	b.n	8006b2e <_Balloc+0x66>
 8006b3e:	bf00      	nop
 8006b40:	080093b0 	.word	0x080093b0
 8006b44:	08009430 	.word	0x08009430

08006b48 <_Bfree>:
 8006b48:	b570      	push	{r4, r5, r6, lr}
 8006b4a:	69c6      	ldr	r6, [r0, #28]
 8006b4c:	4605      	mov	r5, r0
 8006b4e:	460c      	mov	r4, r1
 8006b50:	b976      	cbnz	r6, 8006b70 <_Bfree+0x28>
 8006b52:	2010      	movs	r0, #16
 8006b54:	f7ff ff04 	bl	8006960 <malloc>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	61e8      	str	r0, [r5, #28]
 8006b5c:	b920      	cbnz	r0, 8006b68 <_Bfree+0x20>
 8006b5e:	218f      	movs	r1, #143	; 0x8f
 8006b60:	4b08      	ldr	r3, [pc, #32]	; (8006b84 <_Bfree+0x3c>)
 8006b62:	4809      	ldr	r0, [pc, #36]	; (8006b88 <_Bfree+0x40>)
 8006b64:	f001 fd3c 	bl	80085e0 <__assert_func>
 8006b68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b6c:	6006      	str	r6, [r0, #0]
 8006b6e:	60c6      	str	r6, [r0, #12]
 8006b70:	b13c      	cbz	r4, 8006b82 <_Bfree+0x3a>
 8006b72:	69eb      	ldr	r3, [r5, #28]
 8006b74:	6862      	ldr	r2, [r4, #4]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b7c:	6021      	str	r1, [r4, #0]
 8006b7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b82:	bd70      	pop	{r4, r5, r6, pc}
 8006b84:	080093b0 	.word	0x080093b0
 8006b88:	08009430 	.word	0x08009430

08006b8c <__multadd>:
 8006b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b90:	4607      	mov	r7, r0
 8006b92:	460c      	mov	r4, r1
 8006b94:	461e      	mov	r6, r3
 8006b96:	2000      	movs	r0, #0
 8006b98:	690d      	ldr	r5, [r1, #16]
 8006b9a:	f101 0c14 	add.w	ip, r1, #20
 8006b9e:	f8dc 3000 	ldr.w	r3, [ip]
 8006ba2:	3001      	adds	r0, #1
 8006ba4:	b299      	uxth	r1, r3
 8006ba6:	fb02 6101 	mla	r1, r2, r1, r6
 8006baa:	0c1e      	lsrs	r6, r3, #16
 8006bac:	0c0b      	lsrs	r3, r1, #16
 8006bae:	fb02 3306 	mla	r3, r2, r6, r3
 8006bb2:	b289      	uxth	r1, r1
 8006bb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006bb8:	4285      	cmp	r5, r0
 8006bba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006bbe:	f84c 1b04 	str.w	r1, [ip], #4
 8006bc2:	dcec      	bgt.n	8006b9e <__multadd+0x12>
 8006bc4:	b30e      	cbz	r6, 8006c0a <__multadd+0x7e>
 8006bc6:	68a3      	ldr	r3, [r4, #8]
 8006bc8:	42ab      	cmp	r3, r5
 8006bca:	dc19      	bgt.n	8006c00 <__multadd+0x74>
 8006bcc:	6861      	ldr	r1, [r4, #4]
 8006bce:	4638      	mov	r0, r7
 8006bd0:	3101      	adds	r1, #1
 8006bd2:	f7ff ff79 	bl	8006ac8 <_Balloc>
 8006bd6:	4680      	mov	r8, r0
 8006bd8:	b928      	cbnz	r0, 8006be6 <__multadd+0x5a>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	21ba      	movs	r1, #186	; 0xba
 8006bde:	4b0c      	ldr	r3, [pc, #48]	; (8006c10 <__multadd+0x84>)
 8006be0:	480c      	ldr	r0, [pc, #48]	; (8006c14 <__multadd+0x88>)
 8006be2:	f001 fcfd 	bl	80085e0 <__assert_func>
 8006be6:	6922      	ldr	r2, [r4, #16]
 8006be8:	f104 010c 	add.w	r1, r4, #12
 8006bec:	3202      	adds	r2, #2
 8006bee:	0092      	lsls	r2, r2, #2
 8006bf0:	300c      	adds	r0, #12
 8006bf2:	f001 fce1 	bl	80085b8 <memcpy>
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	4638      	mov	r0, r7
 8006bfa:	f7ff ffa5 	bl	8006b48 <_Bfree>
 8006bfe:	4644      	mov	r4, r8
 8006c00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c04:	3501      	adds	r5, #1
 8006c06:	615e      	str	r6, [r3, #20]
 8006c08:	6125      	str	r5, [r4, #16]
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c10:	0800941f 	.word	0x0800941f
 8006c14:	08009430 	.word	0x08009430

08006c18 <__s2b>:
 8006c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c1c:	4615      	mov	r5, r2
 8006c1e:	2209      	movs	r2, #9
 8006c20:	461f      	mov	r7, r3
 8006c22:	3308      	adds	r3, #8
 8006c24:	460c      	mov	r4, r1
 8006c26:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c2a:	4606      	mov	r6, r0
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	2100      	movs	r1, #0
 8006c30:	429a      	cmp	r2, r3
 8006c32:	db09      	blt.n	8006c48 <__s2b+0x30>
 8006c34:	4630      	mov	r0, r6
 8006c36:	f7ff ff47 	bl	8006ac8 <_Balloc>
 8006c3a:	b940      	cbnz	r0, 8006c4e <__s2b+0x36>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	21d3      	movs	r1, #211	; 0xd3
 8006c40:	4b18      	ldr	r3, [pc, #96]	; (8006ca4 <__s2b+0x8c>)
 8006c42:	4819      	ldr	r0, [pc, #100]	; (8006ca8 <__s2b+0x90>)
 8006c44:	f001 fccc 	bl	80085e0 <__assert_func>
 8006c48:	0052      	lsls	r2, r2, #1
 8006c4a:	3101      	adds	r1, #1
 8006c4c:	e7f0      	b.n	8006c30 <__s2b+0x18>
 8006c4e:	9b08      	ldr	r3, [sp, #32]
 8006c50:	2d09      	cmp	r5, #9
 8006c52:	6143      	str	r3, [r0, #20]
 8006c54:	f04f 0301 	mov.w	r3, #1
 8006c58:	6103      	str	r3, [r0, #16]
 8006c5a:	dd16      	ble.n	8006c8a <__s2b+0x72>
 8006c5c:	f104 0909 	add.w	r9, r4, #9
 8006c60:	46c8      	mov	r8, r9
 8006c62:	442c      	add	r4, r5
 8006c64:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006c68:	4601      	mov	r1, r0
 8006c6a:	220a      	movs	r2, #10
 8006c6c:	4630      	mov	r0, r6
 8006c6e:	3b30      	subs	r3, #48	; 0x30
 8006c70:	f7ff ff8c 	bl	8006b8c <__multadd>
 8006c74:	45a0      	cmp	r8, r4
 8006c76:	d1f5      	bne.n	8006c64 <__s2b+0x4c>
 8006c78:	f1a5 0408 	sub.w	r4, r5, #8
 8006c7c:	444c      	add	r4, r9
 8006c7e:	1b2d      	subs	r5, r5, r4
 8006c80:	1963      	adds	r3, r4, r5
 8006c82:	42bb      	cmp	r3, r7
 8006c84:	db04      	blt.n	8006c90 <__s2b+0x78>
 8006c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c8a:	2509      	movs	r5, #9
 8006c8c:	340a      	adds	r4, #10
 8006c8e:	e7f6      	b.n	8006c7e <__s2b+0x66>
 8006c90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006c94:	4601      	mov	r1, r0
 8006c96:	220a      	movs	r2, #10
 8006c98:	4630      	mov	r0, r6
 8006c9a:	3b30      	subs	r3, #48	; 0x30
 8006c9c:	f7ff ff76 	bl	8006b8c <__multadd>
 8006ca0:	e7ee      	b.n	8006c80 <__s2b+0x68>
 8006ca2:	bf00      	nop
 8006ca4:	0800941f 	.word	0x0800941f
 8006ca8:	08009430 	.word	0x08009430

08006cac <__hi0bits>:
 8006cac:	0c02      	lsrs	r2, r0, #16
 8006cae:	0412      	lsls	r2, r2, #16
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	b9ca      	cbnz	r2, 8006ce8 <__hi0bits+0x3c>
 8006cb4:	0403      	lsls	r3, r0, #16
 8006cb6:	2010      	movs	r0, #16
 8006cb8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006cbc:	bf04      	itt	eq
 8006cbe:	021b      	lsleq	r3, r3, #8
 8006cc0:	3008      	addeq	r0, #8
 8006cc2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006cc6:	bf04      	itt	eq
 8006cc8:	011b      	lsleq	r3, r3, #4
 8006cca:	3004      	addeq	r0, #4
 8006ccc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006cd0:	bf04      	itt	eq
 8006cd2:	009b      	lsleq	r3, r3, #2
 8006cd4:	3002      	addeq	r0, #2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	db05      	blt.n	8006ce6 <__hi0bits+0x3a>
 8006cda:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006cde:	f100 0001 	add.w	r0, r0, #1
 8006ce2:	bf08      	it	eq
 8006ce4:	2020      	moveq	r0, #32
 8006ce6:	4770      	bx	lr
 8006ce8:	2000      	movs	r0, #0
 8006cea:	e7e5      	b.n	8006cb8 <__hi0bits+0xc>

08006cec <__lo0bits>:
 8006cec:	6803      	ldr	r3, [r0, #0]
 8006cee:	4602      	mov	r2, r0
 8006cf0:	f013 0007 	ands.w	r0, r3, #7
 8006cf4:	d00b      	beq.n	8006d0e <__lo0bits+0x22>
 8006cf6:	07d9      	lsls	r1, r3, #31
 8006cf8:	d421      	bmi.n	8006d3e <__lo0bits+0x52>
 8006cfa:	0798      	lsls	r0, r3, #30
 8006cfc:	bf49      	itett	mi
 8006cfe:	085b      	lsrmi	r3, r3, #1
 8006d00:	089b      	lsrpl	r3, r3, #2
 8006d02:	2001      	movmi	r0, #1
 8006d04:	6013      	strmi	r3, [r2, #0]
 8006d06:	bf5c      	itt	pl
 8006d08:	2002      	movpl	r0, #2
 8006d0a:	6013      	strpl	r3, [r2, #0]
 8006d0c:	4770      	bx	lr
 8006d0e:	b299      	uxth	r1, r3
 8006d10:	b909      	cbnz	r1, 8006d16 <__lo0bits+0x2a>
 8006d12:	2010      	movs	r0, #16
 8006d14:	0c1b      	lsrs	r3, r3, #16
 8006d16:	b2d9      	uxtb	r1, r3
 8006d18:	b909      	cbnz	r1, 8006d1e <__lo0bits+0x32>
 8006d1a:	3008      	adds	r0, #8
 8006d1c:	0a1b      	lsrs	r3, r3, #8
 8006d1e:	0719      	lsls	r1, r3, #28
 8006d20:	bf04      	itt	eq
 8006d22:	091b      	lsreq	r3, r3, #4
 8006d24:	3004      	addeq	r0, #4
 8006d26:	0799      	lsls	r1, r3, #30
 8006d28:	bf04      	itt	eq
 8006d2a:	089b      	lsreq	r3, r3, #2
 8006d2c:	3002      	addeq	r0, #2
 8006d2e:	07d9      	lsls	r1, r3, #31
 8006d30:	d403      	bmi.n	8006d3a <__lo0bits+0x4e>
 8006d32:	085b      	lsrs	r3, r3, #1
 8006d34:	f100 0001 	add.w	r0, r0, #1
 8006d38:	d003      	beq.n	8006d42 <__lo0bits+0x56>
 8006d3a:	6013      	str	r3, [r2, #0]
 8006d3c:	4770      	bx	lr
 8006d3e:	2000      	movs	r0, #0
 8006d40:	4770      	bx	lr
 8006d42:	2020      	movs	r0, #32
 8006d44:	4770      	bx	lr
	...

08006d48 <__i2b>:
 8006d48:	b510      	push	{r4, lr}
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	f7ff febb 	bl	8006ac8 <_Balloc>
 8006d52:	4602      	mov	r2, r0
 8006d54:	b928      	cbnz	r0, 8006d62 <__i2b+0x1a>
 8006d56:	f240 1145 	movw	r1, #325	; 0x145
 8006d5a:	4b04      	ldr	r3, [pc, #16]	; (8006d6c <__i2b+0x24>)
 8006d5c:	4804      	ldr	r0, [pc, #16]	; (8006d70 <__i2b+0x28>)
 8006d5e:	f001 fc3f 	bl	80085e0 <__assert_func>
 8006d62:	2301      	movs	r3, #1
 8006d64:	6144      	str	r4, [r0, #20]
 8006d66:	6103      	str	r3, [r0, #16]
 8006d68:	bd10      	pop	{r4, pc}
 8006d6a:	bf00      	nop
 8006d6c:	0800941f 	.word	0x0800941f
 8006d70:	08009430 	.word	0x08009430

08006d74 <__multiply>:
 8006d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d78:	4691      	mov	r9, r2
 8006d7a:	690a      	ldr	r2, [r1, #16]
 8006d7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006d80:	460c      	mov	r4, r1
 8006d82:	429a      	cmp	r2, r3
 8006d84:	bfbe      	ittt	lt
 8006d86:	460b      	movlt	r3, r1
 8006d88:	464c      	movlt	r4, r9
 8006d8a:	4699      	movlt	r9, r3
 8006d8c:	6927      	ldr	r7, [r4, #16]
 8006d8e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006d92:	68a3      	ldr	r3, [r4, #8]
 8006d94:	6861      	ldr	r1, [r4, #4]
 8006d96:	eb07 060a 	add.w	r6, r7, sl
 8006d9a:	42b3      	cmp	r3, r6
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	bfb8      	it	lt
 8006da0:	3101      	addlt	r1, #1
 8006da2:	f7ff fe91 	bl	8006ac8 <_Balloc>
 8006da6:	b930      	cbnz	r0, 8006db6 <__multiply+0x42>
 8006da8:	4602      	mov	r2, r0
 8006daa:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006dae:	4b43      	ldr	r3, [pc, #268]	; (8006ebc <__multiply+0x148>)
 8006db0:	4843      	ldr	r0, [pc, #268]	; (8006ec0 <__multiply+0x14c>)
 8006db2:	f001 fc15 	bl	80085e0 <__assert_func>
 8006db6:	f100 0514 	add.w	r5, r0, #20
 8006dba:	462b      	mov	r3, r5
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006dc2:	4543      	cmp	r3, r8
 8006dc4:	d321      	bcc.n	8006e0a <__multiply+0x96>
 8006dc6:	f104 0314 	add.w	r3, r4, #20
 8006dca:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006dce:	f109 0314 	add.w	r3, r9, #20
 8006dd2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006dd6:	9202      	str	r2, [sp, #8]
 8006dd8:	1b3a      	subs	r2, r7, r4
 8006dda:	3a15      	subs	r2, #21
 8006ddc:	f022 0203 	bic.w	r2, r2, #3
 8006de0:	3204      	adds	r2, #4
 8006de2:	f104 0115 	add.w	r1, r4, #21
 8006de6:	428f      	cmp	r7, r1
 8006de8:	bf38      	it	cc
 8006dea:	2204      	movcc	r2, #4
 8006dec:	9201      	str	r2, [sp, #4]
 8006dee:	9a02      	ldr	r2, [sp, #8]
 8006df0:	9303      	str	r3, [sp, #12]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d80c      	bhi.n	8006e10 <__multiply+0x9c>
 8006df6:	2e00      	cmp	r6, #0
 8006df8:	dd03      	ble.n	8006e02 <__multiply+0x8e>
 8006dfa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d05a      	beq.n	8006eb8 <__multiply+0x144>
 8006e02:	6106      	str	r6, [r0, #16]
 8006e04:	b005      	add	sp, #20
 8006e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e0a:	f843 2b04 	str.w	r2, [r3], #4
 8006e0e:	e7d8      	b.n	8006dc2 <__multiply+0x4e>
 8006e10:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e14:	f1ba 0f00 	cmp.w	sl, #0
 8006e18:	d023      	beq.n	8006e62 <__multiply+0xee>
 8006e1a:	46a9      	mov	r9, r5
 8006e1c:	f04f 0c00 	mov.w	ip, #0
 8006e20:	f104 0e14 	add.w	lr, r4, #20
 8006e24:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006e28:	f8d9 1000 	ldr.w	r1, [r9]
 8006e2c:	fa1f fb82 	uxth.w	fp, r2
 8006e30:	b289      	uxth	r1, r1
 8006e32:	fb0a 110b 	mla	r1, sl, fp, r1
 8006e36:	4461      	add	r1, ip
 8006e38:	f8d9 c000 	ldr.w	ip, [r9]
 8006e3c:	0c12      	lsrs	r2, r2, #16
 8006e3e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006e42:	fb0a c202 	mla	r2, sl, r2, ip
 8006e46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006e4a:	b289      	uxth	r1, r1
 8006e4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006e50:	4577      	cmp	r7, lr
 8006e52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e56:	f849 1b04 	str.w	r1, [r9], #4
 8006e5a:	d8e3      	bhi.n	8006e24 <__multiply+0xb0>
 8006e5c:	9a01      	ldr	r2, [sp, #4]
 8006e5e:	f845 c002 	str.w	ip, [r5, r2]
 8006e62:	9a03      	ldr	r2, [sp, #12]
 8006e64:	3304      	adds	r3, #4
 8006e66:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006e6a:	f1b9 0f00 	cmp.w	r9, #0
 8006e6e:	d021      	beq.n	8006eb4 <__multiply+0x140>
 8006e70:	46ae      	mov	lr, r5
 8006e72:	f04f 0a00 	mov.w	sl, #0
 8006e76:	6829      	ldr	r1, [r5, #0]
 8006e78:	f104 0c14 	add.w	ip, r4, #20
 8006e7c:	f8bc b000 	ldrh.w	fp, [ip]
 8006e80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006e84:	b289      	uxth	r1, r1
 8006e86:	fb09 220b 	mla	r2, r9, fp, r2
 8006e8a:	4452      	add	r2, sl
 8006e8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006e90:	f84e 1b04 	str.w	r1, [lr], #4
 8006e94:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006e98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006e9c:	f8be 1000 	ldrh.w	r1, [lr]
 8006ea0:	4567      	cmp	r7, ip
 8006ea2:	fb09 110a 	mla	r1, r9, sl, r1
 8006ea6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006eaa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006eae:	d8e5      	bhi.n	8006e7c <__multiply+0x108>
 8006eb0:	9a01      	ldr	r2, [sp, #4]
 8006eb2:	50a9      	str	r1, [r5, r2]
 8006eb4:	3504      	adds	r5, #4
 8006eb6:	e79a      	b.n	8006dee <__multiply+0x7a>
 8006eb8:	3e01      	subs	r6, #1
 8006eba:	e79c      	b.n	8006df6 <__multiply+0x82>
 8006ebc:	0800941f 	.word	0x0800941f
 8006ec0:	08009430 	.word	0x08009430

08006ec4 <__pow5mult>:
 8006ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ec8:	4615      	mov	r5, r2
 8006eca:	f012 0203 	ands.w	r2, r2, #3
 8006ece:	4606      	mov	r6, r0
 8006ed0:	460f      	mov	r7, r1
 8006ed2:	d007      	beq.n	8006ee4 <__pow5mult+0x20>
 8006ed4:	4c25      	ldr	r4, [pc, #148]	; (8006f6c <__pow5mult+0xa8>)
 8006ed6:	3a01      	subs	r2, #1
 8006ed8:	2300      	movs	r3, #0
 8006eda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ede:	f7ff fe55 	bl	8006b8c <__multadd>
 8006ee2:	4607      	mov	r7, r0
 8006ee4:	10ad      	asrs	r5, r5, #2
 8006ee6:	d03d      	beq.n	8006f64 <__pow5mult+0xa0>
 8006ee8:	69f4      	ldr	r4, [r6, #28]
 8006eea:	b97c      	cbnz	r4, 8006f0c <__pow5mult+0x48>
 8006eec:	2010      	movs	r0, #16
 8006eee:	f7ff fd37 	bl	8006960 <malloc>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	61f0      	str	r0, [r6, #28]
 8006ef6:	b928      	cbnz	r0, 8006f04 <__pow5mult+0x40>
 8006ef8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006efc:	4b1c      	ldr	r3, [pc, #112]	; (8006f70 <__pow5mult+0xac>)
 8006efe:	481d      	ldr	r0, [pc, #116]	; (8006f74 <__pow5mult+0xb0>)
 8006f00:	f001 fb6e 	bl	80085e0 <__assert_func>
 8006f04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f08:	6004      	str	r4, [r0, #0]
 8006f0a:	60c4      	str	r4, [r0, #12]
 8006f0c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006f10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f14:	b94c      	cbnz	r4, 8006f2a <__pow5mult+0x66>
 8006f16:	f240 2171 	movw	r1, #625	; 0x271
 8006f1a:	4630      	mov	r0, r6
 8006f1c:	f7ff ff14 	bl	8006d48 <__i2b>
 8006f20:	2300      	movs	r3, #0
 8006f22:	4604      	mov	r4, r0
 8006f24:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f28:	6003      	str	r3, [r0, #0]
 8006f2a:	f04f 0900 	mov.w	r9, #0
 8006f2e:	07eb      	lsls	r3, r5, #31
 8006f30:	d50a      	bpl.n	8006f48 <__pow5mult+0x84>
 8006f32:	4639      	mov	r1, r7
 8006f34:	4622      	mov	r2, r4
 8006f36:	4630      	mov	r0, r6
 8006f38:	f7ff ff1c 	bl	8006d74 <__multiply>
 8006f3c:	4680      	mov	r8, r0
 8006f3e:	4639      	mov	r1, r7
 8006f40:	4630      	mov	r0, r6
 8006f42:	f7ff fe01 	bl	8006b48 <_Bfree>
 8006f46:	4647      	mov	r7, r8
 8006f48:	106d      	asrs	r5, r5, #1
 8006f4a:	d00b      	beq.n	8006f64 <__pow5mult+0xa0>
 8006f4c:	6820      	ldr	r0, [r4, #0]
 8006f4e:	b938      	cbnz	r0, 8006f60 <__pow5mult+0x9c>
 8006f50:	4622      	mov	r2, r4
 8006f52:	4621      	mov	r1, r4
 8006f54:	4630      	mov	r0, r6
 8006f56:	f7ff ff0d 	bl	8006d74 <__multiply>
 8006f5a:	6020      	str	r0, [r4, #0]
 8006f5c:	f8c0 9000 	str.w	r9, [r0]
 8006f60:	4604      	mov	r4, r0
 8006f62:	e7e4      	b.n	8006f2e <__pow5mult+0x6a>
 8006f64:	4638      	mov	r0, r7
 8006f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f6a:	bf00      	nop
 8006f6c:	08009580 	.word	0x08009580
 8006f70:	080093b0 	.word	0x080093b0
 8006f74:	08009430 	.word	0x08009430

08006f78 <__lshift>:
 8006f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f7c:	460c      	mov	r4, r1
 8006f7e:	4607      	mov	r7, r0
 8006f80:	4691      	mov	r9, r2
 8006f82:	6923      	ldr	r3, [r4, #16]
 8006f84:	6849      	ldr	r1, [r1, #4]
 8006f86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f8a:	68a3      	ldr	r3, [r4, #8]
 8006f8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f90:	f108 0601 	add.w	r6, r8, #1
 8006f94:	42b3      	cmp	r3, r6
 8006f96:	db0b      	blt.n	8006fb0 <__lshift+0x38>
 8006f98:	4638      	mov	r0, r7
 8006f9a:	f7ff fd95 	bl	8006ac8 <_Balloc>
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	b948      	cbnz	r0, 8006fb6 <__lshift+0x3e>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006fa8:	4b27      	ldr	r3, [pc, #156]	; (8007048 <__lshift+0xd0>)
 8006faa:	4828      	ldr	r0, [pc, #160]	; (800704c <__lshift+0xd4>)
 8006fac:	f001 fb18 	bl	80085e0 <__assert_func>
 8006fb0:	3101      	adds	r1, #1
 8006fb2:	005b      	lsls	r3, r3, #1
 8006fb4:	e7ee      	b.n	8006f94 <__lshift+0x1c>
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	f100 0114 	add.w	r1, r0, #20
 8006fbc:	f100 0210 	add.w	r2, r0, #16
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	4553      	cmp	r3, sl
 8006fc4:	db33      	blt.n	800702e <__lshift+0xb6>
 8006fc6:	6920      	ldr	r0, [r4, #16]
 8006fc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fcc:	f104 0314 	add.w	r3, r4, #20
 8006fd0:	f019 091f 	ands.w	r9, r9, #31
 8006fd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006fd8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006fdc:	d02b      	beq.n	8007036 <__lshift+0xbe>
 8006fde:	468a      	mov	sl, r1
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f1c9 0e20 	rsb	lr, r9, #32
 8006fe6:	6818      	ldr	r0, [r3, #0]
 8006fe8:	fa00 f009 	lsl.w	r0, r0, r9
 8006fec:	4310      	orrs	r0, r2
 8006fee:	f84a 0b04 	str.w	r0, [sl], #4
 8006ff2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ff6:	459c      	cmp	ip, r3
 8006ff8:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ffc:	d8f3      	bhi.n	8006fe6 <__lshift+0x6e>
 8006ffe:	ebac 0304 	sub.w	r3, ip, r4
 8007002:	3b15      	subs	r3, #21
 8007004:	f023 0303 	bic.w	r3, r3, #3
 8007008:	3304      	adds	r3, #4
 800700a:	f104 0015 	add.w	r0, r4, #21
 800700e:	4584      	cmp	ip, r0
 8007010:	bf38      	it	cc
 8007012:	2304      	movcc	r3, #4
 8007014:	50ca      	str	r2, [r1, r3]
 8007016:	b10a      	cbz	r2, 800701c <__lshift+0xa4>
 8007018:	f108 0602 	add.w	r6, r8, #2
 800701c:	3e01      	subs	r6, #1
 800701e:	4638      	mov	r0, r7
 8007020:	4621      	mov	r1, r4
 8007022:	612e      	str	r6, [r5, #16]
 8007024:	f7ff fd90 	bl	8006b48 <_Bfree>
 8007028:	4628      	mov	r0, r5
 800702a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800702e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007032:	3301      	adds	r3, #1
 8007034:	e7c5      	b.n	8006fc2 <__lshift+0x4a>
 8007036:	3904      	subs	r1, #4
 8007038:	f853 2b04 	ldr.w	r2, [r3], #4
 800703c:	459c      	cmp	ip, r3
 800703e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007042:	d8f9      	bhi.n	8007038 <__lshift+0xc0>
 8007044:	e7ea      	b.n	800701c <__lshift+0xa4>
 8007046:	bf00      	nop
 8007048:	0800941f 	.word	0x0800941f
 800704c:	08009430 	.word	0x08009430

08007050 <__mcmp>:
 8007050:	4603      	mov	r3, r0
 8007052:	690a      	ldr	r2, [r1, #16]
 8007054:	6900      	ldr	r0, [r0, #16]
 8007056:	b530      	push	{r4, r5, lr}
 8007058:	1a80      	subs	r0, r0, r2
 800705a:	d10d      	bne.n	8007078 <__mcmp+0x28>
 800705c:	3314      	adds	r3, #20
 800705e:	3114      	adds	r1, #20
 8007060:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007064:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007068:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800706c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007070:	4295      	cmp	r5, r2
 8007072:	d002      	beq.n	800707a <__mcmp+0x2a>
 8007074:	d304      	bcc.n	8007080 <__mcmp+0x30>
 8007076:	2001      	movs	r0, #1
 8007078:	bd30      	pop	{r4, r5, pc}
 800707a:	42a3      	cmp	r3, r4
 800707c:	d3f4      	bcc.n	8007068 <__mcmp+0x18>
 800707e:	e7fb      	b.n	8007078 <__mcmp+0x28>
 8007080:	f04f 30ff 	mov.w	r0, #4294967295
 8007084:	e7f8      	b.n	8007078 <__mcmp+0x28>
	...

08007088 <__mdiff>:
 8007088:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800708c:	460d      	mov	r5, r1
 800708e:	4607      	mov	r7, r0
 8007090:	4611      	mov	r1, r2
 8007092:	4628      	mov	r0, r5
 8007094:	4614      	mov	r4, r2
 8007096:	f7ff ffdb 	bl	8007050 <__mcmp>
 800709a:	1e06      	subs	r6, r0, #0
 800709c:	d111      	bne.n	80070c2 <__mdiff+0x3a>
 800709e:	4631      	mov	r1, r6
 80070a0:	4638      	mov	r0, r7
 80070a2:	f7ff fd11 	bl	8006ac8 <_Balloc>
 80070a6:	4602      	mov	r2, r0
 80070a8:	b928      	cbnz	r0, 80070b6 <__mdiff+0x2e>
 80070aa:	f240 2137 	movw	r1, #567	; 0x237
 80070ae:	4b3a      	ldr	r3, [pc, #232]	; (8007198 <__mdiff+0x110>)
 80070b0:	483a      	ldr	r0, [pc, #232]	; (800719c <__mdiff+0x114>)
 80070b2:	f001 fa95 	bl	80085e0 <__assert_func>
 80070b6:	2301      	movs	r3, #1
 80070b8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80070bc:	4610      	mov	r0, r2
 80070be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c2:	bfa4      	itt	ge
 80070c4:	4623      	movge	r3, r4
 80070c6:	462c      	movge	r4, r5
 80070c8:	4638      	mov	r0, r7
 80070ca:	6861      	ldr	r1, [r4, #4]
 80070cc:	bfa6      	itte	ge
 80070ce:	461d      	movge	r5, r3
 80070d0:	2600      	movge	r6, #0
 80070d2:	2601      	movlt	r6, #1
 80070d4:	f7ff fcf8 	bl	8006ac8 <_Balloc>
 80070d8:	4602      	mov	r2, r0
 80070da:	b918      	cbnz	r0, 80070e4 <__mdiff+0x5c>
 80070dc:	f240 2145 	movw	r1, #581	; 0x245
 80070e0:	4b2d      	ldr	r3, [pc, #180]	; (8007198 <__mdiff+0x110>)
 80070e2:	e7e5      	b.n	80070b0 <__mdiff+0x28>
 80070e4:	f102 0814 	add.w	r8, r2, #20
 80070e8:	46c2      	mov	sl, r8
 80070ea:	f04f 0c00 	mov.w	ip, #0
 80070ee:	6927      	ldr	r7, [r4, #16]
 80070f0:	60c6      	str	r6, [r0, #12]
 80070f2:	692e      	ldr	r6, [r5, #16]
 80070f4:	f104 0014 	add.w	r0, r4, #20
 80070f8:	f105 0914 	add.w	r9, r5, #20
 80070fc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007100:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007104:	3410      	adds	r4, #16
 8007106:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800710a:	f859 3b04 	ldr.w	r3, [r9], #4
 800710e:	fa1f f18b 	uxth.w	r1, fp
 8007112:	4461      	add	r1, ip
 8007114:	fa1f fc83 	uxth.w	ip, r3
 8007118:	0c1b      	lsrs	r3, r3, #16
 800711a:	eba1 010c 	sub.w	r1, r1, ip
 800711e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007122:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007126:	b289      	uxth	r1, r1
 8007128:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800712c:	454e      	cmp	r6, r9
 800712e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007132:	f84a 1b04 	str.w	r1, [sl], #4
 8007136:	d8e6      	bhi.n	8007106 <__mdiff+0x7e>
 8007138:	1b73      	subs	r3, r6, r5
 800713a:	3b15      	subs	r3, #21
 800713c:	f023 0303 	bic.w	r3, r3, #3
 8007140:	3515      	adds	r5, #21
 8007142:	3304      	adds	r3, #4
 8007144:	42ae      	cmp	r6, r5
 8007146:	bf38      	it	cc
 8007148:	2304      	movcc	r3, #4
 800714a:	4418      	add	r0, r3
 800714c:	4443      	add	r3, r8
 800714e:	461e      	mov	r6, r3
 8007150:	4605      	mov	r5, r0
 8007152:	4575      	cmp	r5, lr
 8007154:	d30e      	bcc.n	8007174 <__mdiff+0xec>
 8007156:	f10e 0103 	add.w	r1, lr, #3
 800715a:	1a09      	subs	r1, r1, r0
 800715c:	f021 0103 	bic.w	r1, r1, #3
 8007160:	3803      	subs	r0, #3
 8007162:	4586      	cmp	lr, r0
 8007164:	bf38      	it	cc
 8007166:	2100      	movcc	r1, #0
 8007168:	440b      	add	r3, r1
 800716a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800716e:	b189      	cbz	r1, 8007194 <__mdiff+0x10c>
 8007170:	6117      	str	r7, [r2, #16]
 8007172:	e7a3      	b.n	80070bc <__mdiff+0x34>
 8007174:	f855 8b04 	ldr.w	r8, [r5], #4
 8007178:	fa1f f188 	uxth.w	r1, r8
 800717c:	4461      	add	r1, ip
 800717e:	140c      	asrs	r4, r1, #16
 8007180:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007184:	b289      	uxth	r1, r1
 8007186:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800718a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800718e:	f846 1b04 	str.w	r1, [r6], #4
 8007192:	e7de      	b.n	8007152 <__mdiff+0xca>
 8007194:	3f01      	subs	r7, #1
 8007196:	e7e8      	b.n	800716a <__mdiff+0xe2>
 8007198:	0800941f 	.word	0x0800941f
 800719c:	08009430 	.word	0x08009430

080071a0 <__ulp>:
 80071a0:	4b0e      	ldr	r3, [pc, #56]	; (80071dc <__ulp+0x3c>)
 80071a2:	400b      	ands	r3, r1
 80071a4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	dc08      	bgt.n	80071be <__ulp+0x1e>
 80071ac:	425b      	negs	r3, r3
 80071ae:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80071b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80071b6:	da04      	bge.n	80071c2 <__ulp+0x22>
 80071b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80071bc:	4113      	asrs	r3, r2
 80071be:	2200      	movs	r2, #0
 80071c0:	e008      	b.n	80071d4 <__ulp+0x34>
 80071c2:	f1a2 0314 	sub.w	r3, r2, #20
 80071c6:	2b1e      	cmp	r3, #30
 80071c8:	bfd6      	itet	le
 80071ca:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80071ce:	2201      	movgt	r2, #1
 80071d0:	40da      	lsrle	r2, r3
 80071d2:	2300      	movs	r3, #0
 80071d4:	4619      	mov	r1, r3
 80071d6:	4610      	mov	r0, r2
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	7ff00000 	.word	0x7ff00000

080071e0 <__b2d>:
 80071e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e2:	6905      	ldr	r5, [r0, #16]
 80071e4:	f100 0714 	add.w	r7, r0, #20
 80071e8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80071ec:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80071f0:	1f2e      	subs	r6, r5, #4
 80071f2:	4620      	mov	r0, r4
 80071f4:	f7ff fd5a 	bl	8006cac <__hi0bits>
 80071f8:	f1c0 0220 	rsb	r2, r0, #32
 80071fc:	280a      	cmp	r0, #10
 80071fe:	4603      	mov	r3, r0
 8007200:	f8df c068 	ldr.w	ip, [pc, #104]	; 800726c <__b2d+0x8c>
 8007204:	600a      	str	r2, [r1, #0]
 8007206:	dc12      	bgt.n	800722e <__b2d+0x4e>
 8007208:	f1c0 0e0b 	rsb	lr, r0, #11
 800720c:	fa24 f20e 	lsr.w	r2, r4, lr
 8007210:	42b7      	cmp	r7, r6
 8007212:	ea42 010c 	orr.w	r1, r2, ip
 8007216:	bf2c      	ite	cs
 8007218:	2200      	movcs	r2, #0
 800721a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800721e:	3315      	adds	r3, #21
 8007220:	fa04 f303 	lsl.w	r3, r4, r3
 8007224:	fa22 f20e 	lsr.w	r2, r2, lr
 8007228:	431a      	orrs	r2, r3
 800722a:	4610      	mov	r0, r2
 800722c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800722e:	42b7      	cmp	r7, r6
 8007230:	bf2e      	itee	cs
 8007232:	2200      	movcs	r2, #0
 8007234:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007238:	f1a5 0608 	subcc.w	r6, r5, #8
 800723c:	3b0b      	subs	r3, #11
 800723e:	d012      	beq.n	8007266 <__b2d+0x86>
 8007240:	f1c3 0520 	rsb	r5, r3, #32
 8007244:	fa22 f105 	lsr.w	r1, r2, r5
 8007248:	409c      	lsls	r4, r3
 800724a:	430c      	orrs	r4, r1
 800724c:	42be      	cmp	r6, r7
 800724e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8007252:	bf94      	ite	ls
 8007254:	2400      	movls	r4, #0
 8007256:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800725a:	409a      	lsls	r2, r3
 800725c:	40ec      	lsrs	r4, r5
 800725e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007262:	4322      	orrs	r2, r4
 8007264:	e7e1      	b.n	800722a <__b2d+0x4a>
 8007266:	ea44 010c 	orr.w	r1, r4, ip
 800726a:	e7de      	b.n	800722a <__b2d+0x4a>
 800726c:	3ff00000 	.word	0x3ff00000

08007270 <__d2b>:
 8007270:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007272:	2101      	movs	r1, #1
 8007274:	4617      	mov	r7, r2
 8007276:	461c      	mov	r4, r3
 8007278:	9e08      	ldr	r6, [sp, #32]
 800727a:	f7ff fc25 	bl	8006ac8 <_Balloc>
 800727e:	4605      	mov	r5, r0
 8007280:	b930      	cbnz	r0, 8007290 <__d2b+0x20>
 8007282:	4602      	mov	r2, r0
 8007284:	f240 310f 	movw	r1, #783	; 0x30f
 8007288:	4b22      	ldr	r3, [pc, #136]	; (8007314 <__d2b+0xa4>)
 800728a:	4823      	ldr	r0, [pc, #140]	; (8007318 <__d2b+0xa8>)
 800728c:	f001 f9a8 	bl	80085e0 <__assert_func>
 8007290:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007294:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007298:	bb24      	cbnz	r4, 80072e4 <__d2b+0x74>
 800729a:	2f00      	cmp	r7, #0
 800729c:	9301      	str	r3, [sp, #4]
 800729e:	d026      	beq.n	80072ee <__d2b+0x7e>
 80072a0:	4668      	mov	r0, sp
 80072a2:	9700      	str	r7, [sp, #0]
 80072a4:	f7ff fd22 	bl	8006cec <__lo0bits>
 80072a8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80072ac:	b1e8      	cbz	r0, 80072ea <__d2b+0x7a>
 80072ae:	f1c0 0320 	rsb	r3, r0, #32
 80072b2:	fa02 f303 	lsl.w	r3, r2, r3
 80072b6:	430b      	orrs	r3, r1
 80072b8:	40c2      	lsrs	r2, r0
 80072ba:	616b      	str	r3, [r5, #20]
 80072bc:	9201      	str	r2, [sp, #4]
 80072be:	9b01      	ldr	r3, [sp, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	bf14      	ite	ne
 80072c4:	2102      	movne	r1, #2
 80072c6:	2101      	moveq	r1, #1
 80072c8:	61ab      	str	r3, [r5, #24]
 80072ca:	6129      	str	r1, [r5, #16]
 80072cc:	b1bc      	cbz	r4, 80072fe <__d2b+0x8e>
 80072ce:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80072d2:	4404      	add	r4, r0
 80072d4:	6034      	str	r4, [r6, #0]
 80072d6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80072da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072dc:	6018      	str	r0, [r3, #0]
 80072de:	4628      	mov	r0, r5
 80072e0:	b003      	add	sp, #12
 80072e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072e8:	e7d7      	b.n	800729a <__d2b+0x2a>
 80072ea:	6169      	str	r1, [r5, #20]
 80072ec:	e7e7      	b.n	80072be <__d2b+0x4e>
 80072ee:	a801      	add	r0, sp, #4
 80072f0:	f7ff fcfc 	bl	8006cec <__lo0bits>
 80072f4:	9b01      	ldr	r3, [sp, #4]
 80072f6:	2101      	movs	r1, #1
 80072f8:	616b      	str	r3, [r5, #20]
 80072fa:	3020      	adds	r0, #32
 80072fc:	e7e5      	b.n	80072ca <__d2b+0x5a>
 80072fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007302:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007306:	6030      	str	r0, [r6, #0]
 8007308:	6918      	ldr	r0, [r3, #16]
 800730a:	f7ff fccf 	bl	8006cac <__hi0bits>
 800730e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007312:	e7e2      	b.n	80072da <__d2b+0x6a>
 8007314:	0800941f 	.word	0x0800941f
 8007318:	08009430 	.word	0x08009430

0800731c <__ratio>:
 800731c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007320:	4688      	mov	r8, r1
 8007322:	4669      	mov	r1, sp
 8007324:	4681      	mov	r9, r0
 8007326:	f7ff ff5b 	bl	80071e0 <__b2d>
 800732a:	460f      	mov	r7, r1
 800732c:	4604      	mov	r4, r0
 800732e:	460d      	mov	r5, r1
 8007330:	4640      	mov	r0, r8
 8007332:	a901      	add	r1, sp, #4
 8007334:	f7ff ff54 	bl	80071e0 <__b2d>
 8007338:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800733c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007340:	468b      	mov	fp, r1
 8007342:	eba3 0c02 	sub.w	ip, r3, r2
 8007346:	e9dd 3200 	ldrd	r3, r2, [sp]
 800734a:	1a9b      	subs	r3, r3, r2
 800734c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007350:	2b00      	cmp	r3, #0
 8007352:	bfd5      	itete	le
 8007354:	460a      	movle	r2, r1
 8007356:	462a      	movgt	r2, r5
 8007358:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800735c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007360:	bfd8      	it	le
 8007362:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007366:	465b      	mov	r3, fp
 8007368:	4602      	mov	r2, r0
 800736a:	4639      	mov	r1, r7
 800736c:	4620      	mov	r0, r4
 800736e:	f7f9 fa49 	bl	8000804 <__aeabi_ddiv>
 8007372:	b003      	add	sp, #12
 8007374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007378 <__copybits>:
 8007378:	3901      	subs	r1, #1
 800737a:	b570      	push	{r4, r5, r6, lr}
 800737c:	1149      	asrs	r1, r1, #5
 800737e:	6914      	ldr	r4, [r2, #16]
 8007380:	3101      	adds	r1, #1
 8007382:	f102 0314 	add.w	r3, r2, #20
 8007386:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800738a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800738e:	1f05      	subs	r5, r0, #4
 8007390:	42a3      	cmp	r3, r4
 8007392:	d30c      	bcc.n	80073ae <__copybits+0x36>
 8007394:	1aa3      	subs	r3, r4, r2
 8007396:	3b11      	subs	r3, #17
 8007398:	f023 0303 	bic.w	r3, r3, #3
 800739c:	3211      	adds	r2, #17
 800739e:	42a2      	cmp	r2, r4
 80073a0:	bf88      	it	hi
 80073a2:	2300      	movhi	r3, #0
 80073a4:	4418      	add	r0, r3
 80073a6:	2300      	movs	r3, #0
 80073a8:	4288      	cmp	r0, r1
 80073aa:	d305      	bcc.n	80073b8 <__copybits+0x40>
 80073ac:	bd70      	pop	{r4, r5, r6, pc}
 80073ae:	f853 6b04 	ldr.w	r6, [r3], #4
 80073b2:	f845 6f04 	str.w	r6, [r5, #4]!
 80073b6:	e7eb      	b.n	8007390 <__copybits+0x18>
 80073b8:	f840 3b04 	str.w	r3, [r0], #4
 80073bc:	e7f4      	b.n	80073a8 <__copybits+0x30>

080073be <__any_on>:
 80073be:	f100 0214 	add.w	r2, r0, #20
 80073c2:	6900      	ldr	r0, [r0, #16]
 80073c4:	114b      	asrs	r3, r1, #5
 80073c6:	4298      	cmp	r0, r3
 80073c8:	b510      	push	{r4, lr}
 80073ca:	db11      	blt.n	80073f0 <__any_on+0x32>
 80073cc:	dd0a      	ble.n	80073e4 <__any_on+0x26>
 80073ce:	f011 011f 	ands.w	r1, r1, #31
 80073d2:	d007      	beq.n	80073e4 <__any_on+0x26>
 80073d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80073d8:	fa24 f001 	lsr.w	r0, r4, r1
 80073dc:	fa00 f101 	lsl.w	r1, r0, r1
 80073e0:	428c      	cmp	r4, r1
 80073e2:	d10b      	bne.n	80073fc <__any_on+0x3e>
 80073e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d803      	bhi.n	80073f4 <__any_on+0x36>
 80073ec:	2000      	movs	r0, #0
 80073ee:	bd10      	pop	{r4, pc}
 80073f0:	4603      	mov	r3, r0
 80073f2:	e7f7      	b.n	80073e4 <__any_on+0x26>
 80073f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80073f8:	2900      	cmp	r1, #0
 80073fa:	d0f5      	beq.n	80073e8 <__any_on+0x2a>
 80073fc:	2001      	movs	r0, #1
 80073fe:	e7f6      	b.n	80073ee <__any_on+0x30>

08007400 <sulp>:
 8007400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007404:	460f      	mov	r7, r1
 8007406:	4690      	mov	r8, r2
 8007408:	f7ff feca 	bl	80071a0 <__ulp>
 800740c:	4604      	mov	r4, r0
 800740e:	460d      	mov	r5, r1
 8007410:	f1b8 0f00 	cmp.w	r8, #0
 8007414:	d011      	beq.n	800743a <sulp+0x3a>
 8007416:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800741a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800741e:	2b00      	cmp	r3, #0
 8007420:	dd0b      	ble.n	800743a <sulp+0x3a>
 8007422:	2400      	movs	r4, #0
 8007424:	051b      	lsls	r3, r3, #20
 8007426:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800742a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800742e:	4622      	mov	r2, r4
 8007430:	462b      	mov	r3, r5
 8007432:	f7f9 f8bd 	bl	80005b0 <__aeabi_dmul>
 8007436:	4604      	mov	r4, r0
 8007438:	460d      	mov	r5, r1
 800743a:	4620      	mov	r0, r4
 800743c:	4629      	mov	r1, r5
 800743e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007442:	0000      	movs	r0, r0
 8007444:	0000      	movs	r0, r0
	...

08007448 <_strtod_l>:
 8007448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800744c:	b09f      	sub	sp, #124	; 0x7c
 800744e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007450:	2200      	movs	r2, #0
 8007452:	4604      	mov	r4, r0
 8007454:	921a      	str	r2, [sp, #104]	; 0x68
 8007456:	460d      	mov	r5, r1
 8007458:	f04f 0800 	mov.w	r8, #0
 800745c:	f04f 0900 	mov.w	r9, #0
 8007460:	460a      	mov	r2, r1
 8007462:	9219      	str	r2, [sp, #100]	; 0x64
 8007464:	7811      	ldrb	r1, [r2, #0]
 8007466:	292b      	cmp	r1, #43	; 0x2b
 8007468:	d04a      	beq.n	8007500 <_strtod_l+0xb8>
 800746a:	d838      	bhi.n	80074de <_strtod_l+0x96>
 800746c:	290d      	cmp	r1, #13
 800746e:	d832      	bhi.n	80074d6 <_strtod_l+0x8e>
 8007470:	2908      	cmp	r1, #8
 8007472:	d832      	bhi.n	80074da <_strtod_l+0x92>
 8007474:	2900      	cmp	r1, #0
 8007476:	d03b      	beq.n	80074f0 <_strtod_l+0xa8>
 8007478:	2200      	movs	r2, #0
 800747a:	920e      	str	r2, [sp, #56]	; 0x38
 800747c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800747e:	7832      	ldrb	r2, [r6, #0]
 8007480:	2a30      	cmp	r2, #48	; 0x30
 8007482:	f040 80b2 	bne.w	80075ea <_strtod_l+0x1a2>
 8007486:	7872      	ldrb	r2, [r6, #1]
 8007488:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800748c:	2a58      	cmp	r2, #88	; 0x58
 800748e:	d16e      	bne.n	800756e <_strtod_l+0x126>
 8007490:	9302      	str	r3, [sp, #8]
 8007492:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007494:	4620      	mov	r0, r4
 8007496:	9301      	str	r3, [sp, #4]
 8007498:	ab1a      	add	r3, sp, #104	; 0x68
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	4a8c      	ldr	r2, [pc, #560]	; (80076d0 <_strtod_l+0x288>)
 800749e:	ab1b      	add	r3, sp, #108	; 0x6c
 80074a0:	a919      	add	r1, sp, #100	; 0x64
 80074a2:	f001 f937 	bl	8008714 <__gethex>
 80074a6:	f010 070f 	ands.w	r7, r0, #15
 80074aa:	4605      	mov	r5, r0
 80074ac:	d005      	beq.n	80074ba <_strtod_l+0x72>
 80074ae:	2f06      	cmp	r7, #6
 80074b0:	d128      	bne.n	8007504 <_strtod_l+0xbc>
 80074b2:	2300      	movs	r3, #0
 80074b4:	3601      	adds	r6, #1
 80074b6:	9619      	str	r6, [sp, #100]	; 0x64
 80074b8:	930e      	str	r3, [sp, #56]	; 0x38
 80074ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f040 85a0 	bne.w	8008002 <_strtod_l+0xbba>
 80074c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074c4:	b1cb      	cbz	r3, 80074fa <_strtod_l+0xb2>
 80074c6:	4642      	mov	r2, r8
 80074c8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80074cc:	4610      	mov	r0, r2
 80074ce:	4619      	mov	r1, r3
 80074d0:	b01f      	add	sp, #124	; 0x7c
 80074d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d6:	2920      	cmp	r1, #32
 80074d8:	d1ce      	bne.n	8007478 <_strtod_l+0x30>
 80074da:	3201      	adds	r2, #1
 80074dc:	e7c1      	b.n	8007462 <_strtod_l+0x1a>
 80074de:	292d      	cmp	r1, #45	; 0x2d
 80074e0:	d1ca      	bne.n	8007478 <_strtod_l+0x30>
 80074e2:	2101      	movs	r1, #1
 80074e4:	910e      	str	r1, [sp, #56]	; 0x38
 80074e6:	1c51      	adds	r1, r2, #1
 80074e8:	9119      	str	r1, [sp, #100]	; 0x64
 80074ea:	7852      	ldrb	r2, [r2, #1]
 80074ec:	2a00      	cmp	r2, #0
 80074ee:	d1c5      	bne.n	800747c <_strtod_l+0x34>
 80074f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074f2:	9519      	str	r5, [sp, #100]	; 0x64
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f040 8582 	bne.w	8007ffe <_strtod_l+0xbb6>
 80074fa:	4642      	mov	r2, r8
 80074fc:	464b      	mov	r3, r9
 80074fe:	e7e5      	b.n	80074cc <_strtod_l+0x84>
 8007500:	2100      	movs	r1, #0
 8007502:	e7ef      	b.n	80074e4 <_strtod_l+0x9c>
 8007504:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007506:	b13a      	cbz	r2, 8007518 <_strtod_l+0xd0>
 8007508:	2135      	movs	r1, #53	; 0x35
 800750a:	a81c      	add	r0, sp, #112	; 0x70
 800750c:	f7ff ff34 	bl	8007378 <__copybits>
 8007510:	4620      	mov	r0, r4
 8007512:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007514:	f7ff fb18 	bl	8006b48 <_Bfree>
 8007518:	3f01      	subs	r7, #1
 800751a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800751c:	2f04      	cmp	r7, #4
 800751e:	d806      	bhi.n	800752e <_strtod_l+0xe6>
 8007520:	e8df f007 	tbb	[pc, r7]
 8007524:	201d0314 	.word	0x201d0314
 8007528:	14          	.byte	0x14
 8007529:	00          	.byte	0x00
 800752a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800752e:	05e9      	lsls	r1, r5, #23
 8007530:	bf48      	it	mi
 8007532:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007536:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800753a:	0d1b      	lsrs	r3, r3, #20
 800753c:	051b      	lsls	r3, r3, #20
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1bb      	bne.n	80074ba <_strtod_l+0x72>
 8007542:	f7fe fb15 	bl	8005b70 <__errno>
 8007546:	2322      	movs	r3, #34	; 0x22
 8007548:	6003      	str	r3, [r0, #0]
 800754a:	e7b6      	b.n	80074ba <_strtod_l+0x72>
 800754c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007550:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007554:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007558:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800755c:	e7e7      	b.n	800752e <_strtod_l+0xe6>
 800755e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80076d4 <_strtod_l+0x28c>
 8007562:	e7e4      	b.n	800752e <_strtod_l+0xe6>
 8007564:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007568:	f04f 38ff 	mov.w	r8, #4294967295
 800756c:	e7df      	b.n	800752e <_strtod_l+0xe6>
 800756e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007570:	1c5a      	adds	r2, r3, #1
 8007572:	9219      	str	r2, [sp, #100]	; 0x64
 8007574:	785b      	ldrb	r3, [r3, #1]
 8007576:	2b30      	cmp	r3, #48	; 0x30
 8007578:	d0f9      	beq.n	800756e <_strtod_l+0x126>
 800757a:	2b00      	cmp	r3, #0
 800757c:	d09d      	beq.n	80074ba <_strtod_l+0x72>
 800757e:	2301      	movs	r3, #1
 8007580:	f04f 0a00 	mov.w	sl, #0
 8007584:	220a      	movs	r2, #10
 8007586:	46d3      	mov	fp, sl
 8007588:	9305      	str	r3, [sp, #20]
 800758a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800758c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007590:	930b      	str	r3, [sp, #44]	; 0x2c
 8007592:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007594:	7806      	ldrb	r6, [r0, #0]
 8007596:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800759a:	b2d9      	uxtb	r1, r3
 800759c:	2909      	cmp	r1, #9
 800759e:	d926      	bls.n	80075ee <_strtod_l+0x1a6>
 80075a0:	2201      	movs	r2, #1
 80075a2:	494d      	ldr	r1, [pc, #308]	; (80076d8 <_strtod_l+0x290>)
 80075a4:	f000 ffe6 	bl	8008574 <strncmp>
 80075a8:	2800      	cmp	r0, #0
 80075aa:	d030      	beq.n	800760e <_strtod_l+0x1c6>
 80075ac:	2000      	movs	r0, #0
 80075ae:	4632      	mov	r2, r6
 80075b0:	4603      	mov	r3, r0
 80075b2:	465e      	mov	r6, fp
 80075b4:	9008      	str	r0, [sp, #32]
 80075b6:	2a65      	cmp	r2, #101	; 0x65
 80075b8:	d001      	beq.n	80075be <_strtod_l+0x176>
 80075ba:	2a45      	cmp	r2, #69	; 0x45
 80075bc:	d113      	bne.n	80075e6 <_strtod_l+0x19e>
 80075be:	b91e      	cbnz	r6, 80075c8 <_strtod_l+0x180>
 80075c0:	9a05      	ldr	r2, [sp, #20]
 80075c2:	4302      	orrs	r2, r0
 80075c4:	d094      	beq.n	80074f0 <_strtod_l+0xa8>
 80075c6:	2600      	movs	r6, #0
 80075c8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80075ca:	1c6a      	adds	r2, r5, #1
 80075cc:	9219      	str	r2, [sp, #100]	; 0x64
 80075ce:	786a      	ldrb	r2, [r5, #1]
 80075d0:	2a2b      	cmp	r2, #43	; 0x2b
 80075d2:	d074      	beq.n	80076be <_strtod_l+0x276>
 80075d4:	2a2d      	cmp	r2, #45	; 0x2d
 80075d6:	d078      	beq.n	80076ca <_strtod_l+0x282>
 80075d8:	f04f 0c00 	mov.w	ip, #0
 80075dc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80075e0:	2909      	cmp	r1, #9
 80075e2:	d97f      	bls.n	80076e4 <_strtod_l+0x29c>
 80075e4:	9519      	str	r5, [sp, #100]	; 0x64
 80075e6:	2700      	movs	r7, #0
 80075e8:	e09e      	b.n	8007728 <_strtod_l+0x2e0>
 80075ea:	2300      	movs	r3, #0
 80075ec:	e7c8      	b.n	8007580 <_strtod_l+0x138>
 80075ee:	f1bb 0f08 	cmp.w	fp, #8
 80075f2:	bfd8      	it	le
 80075f4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80075f6:	f100 0001 	add.w	r0, r0, #1
 80075fa:	bfd6      	itet	le
 80075fc:	fb02 3301 	mlale	r3, r2, r1, r3
 8007600:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007604:	930a      	strle	r3, [sp, #40]	; 0x28
 8007606:	f10b 0b01 	add.w	fp, fp, #1
 800760a:	9019      	str	r0, [sp, #100]	; 0x64
 800760c:	e7c1      	b.n	8007592 <_strtod_l+0x14a>
 800760e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007610:	1c5a      	adds	r2, r3, #1
 8007612:	9219      	str	r2, [sp, #100]	; 0x64
 8007614:	785a      	ldrb	r2, [r3, #1]
 8007616:	f1bb 0f00 	cmp.w	fp, #0
 800761a:	d037      	beq.n	800768c <_strtod_l+0x244>
 800761c:	465e      	mov	r6, fp
 800761e:	9008      	str	r0, [sp, #32]
 8007620:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007624:	2b09      	cmp	r3, #9
 8007626:	d912      	bls.n	800764e <_strtod_l+0x206>
 8007628:	2301      	movs	r3, #1
 800762a:	e7c4      	b.n	80075b6 <_strtod_l+0x16e>
 800762c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800762e:	3001      	adds	r0, #1
 8007630:	1c5a      	adds	r2, r3, #1
 8007632:	9219      	str	r2, [sp, #100]	; 0x64
 8007634:	785a      	ldrb	r2, [r3, #1]
 8007636:	2a30      	cmp	r2, #48	; 0x30
 8007638:	d0f8      	beq.n	800762c <_strtod_l+0x1e4>
 800763a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800763e:	2b08      	cmp	r3, #8
 8007640:	f200 84e4 	bhi.w	800800c <_strtod_l+0xbc4>
 8007644:	9008      	str	r0, [sp, #32]
 8007646:	2000      	movs	r0, #0
 8007648:	4606      	mov	r6, r0
 800764a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800764c:	930b      	str	r3, [sp, #44]	; 0x2c
 800764e:	3a30      	subs	r2, #48	; 0x30
 8007650:	f100 0301 	add.w	r3, r0, #1
 8007654:	d014      	beq.n	8007680 <_strtod_l+0x238>
 8007656:	9908      	ldr	r1, [sp, #32]
 8007658:	eb00 0c06 	add.w	ip, r0, r6
 800765c:	4419      	add	r1, r3
 800765e:	9108      	str	r1, [sp, #32]
 8007660:	4633      	mov	r3, r6
 8007662:	210a      	movs	r1, #10
 8007664:	4563      	cmp	r3, ip
 8007666:	d113      	bne.n	8007690 <_strtod_l+0x248>
 8007668:	1833      	adds	r3, r6, r0
 800766a:	2b08      	cmp	r3, #8
 800766c:	f106 0601 	add.w	r6, r6, #1
 8007670:	4406      	add	r6, r0
 8007672:	dc1a      	bgt.n	80076aa <_strtod_l+0x262>
 8007674:	230a      	movs	r3, #10
 8007676:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007678:	fb03 2301 	mla	r3, r3, r1, r2
 800767c:	930a      	str	r3, [sp, #40]	; 0x28
 800767e:	2300      	movs	r3, #0
 8007680:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007682:	4618      	mov	r0, r3
 8007684:	1c51      	adds	r1, r2, #1
 8007686:	9119      	str	r1, [sp, #100]	; 0x64
 8007688:	7852      	ldrb	r2, [r2, #1]
 800768a:	e7c9      	b.n	8007620 <_strtod_l+0x1d8>
 800768c:	4658      	mov	r0, fp
 800768e:	e7d2      	b.n	8007636 <_strtod_l+0x1ee>
 8007690:	2b08      	cmp	r3, #8
 8007692:	f103 0301 	add.w	r3, r3, #1
 8007696:	dc03      	bgt.n	80076a0 <_strtod_l+0x258>
 8007698:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800769a:	434f      	muls	r7, r1
 800769c:	970a      	str	r7, [sp, #40]	; 0x28
 800769e:	e7e1      	b.n	8007664 <_strtod_l+0x21c>
 80076a0:	2b10      	cmp	r3, #16
 80076a2:	bfd8      	it	le
 80076a4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80076a8:	e7dc      	b.n	8007664 <_strtod_l+0x21c>
 80076aa:	2e10      	cmp	r6, #16
 80076ac:	bfdc      	itt	le
 80076ae:	230a      	movle	r3, #10
 80076b0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80076b4:	e7e3      	b.n	800767e <_strtod_l+0x236>
 80076b6:	2300      	movs	r3, #0
 80076b8:	9308      	str	r3, [sp, #32]
 80076ba:	2301      	movs	r3, #1
 80076bc:	e780      	b.n	80075c0 <_strtod_l+0x178>
 80076be:	f04f 0c00 	mov.w	ip, #0
 80076c2:	1caa      	adds	r2, r5, #2
 80076c4:	9219      	str	r2, [sp, #100]	; 0x64
 80076c6:	78aa      	ldrb	r2, [r5, #2]
 80076c8:	e788      	b.n	80075dc <_strtod_l+0x194>
 80076ca:	f04f 0c01 	mov.w	ip, #1
 80076ce:	e7f8      	b.n	80076c2 <_strtod_l+0x27a>
 80076d0:	08009590 	.word	0x08009590
 80076d4:	7ff00000 	.word	0x7ff00000
 80076d8:	0800958c 	.word	0x0800958c
 80076dc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80076de:	1c51      	adds	r1, r2, #1
 80076e0:	9119      	str	r1, [sp, #100]	; 0x64
 80076e2:	7852      	ldrb	r2, [r2, #1]
 80076e4:	2a30      	cmp	r2, #48	; 0x30
 80076e6:	d0f9      	beq.n	80076dc <_strtod_l+0x294>
 80076e8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80076ec:	2908      	cmp	r1, #8
 80076ee:	f63f af7a 	bhi.w	80075e6 <_strtod_l+0x19e>
 80076f2:	3a30      	subs	r2, #48	; 0x30
 80076f4:	9209      	str	r2, [sp, #36]	; 0x24
 80076f6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80076f8:	920c      	str	r2, [sp, #48]	; 0x30
 80076fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80076fc:	1c57      	adds	r7, r2, #1
 80076fe:	9719      	str	r7, [sp, #100]	; 0x64
 8007700:	7852      	ldrb	r2, [r2, #1]
 8007702:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007706:	f1be 0f09 	cmp.w	lr, #9
 800770a:	d938      	bls.n	800777e <_strtod_l+0x336>
 800770c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800770e:	1a7f      	subs	r7, r7, r1
 8007710:	2f08      	cmp	r7, #8
 8007712:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007716:	dc03      	bgt.n	8007720 <_strtod_l+0x2d8>
 8007718:	9909      	ldr	r1, [sp, #36]	; 0x24
 800771a:	428f      	cmp	r7, r1
 800771c:	bfa8      	it	ge
 800771e:	460f      	movge	r7, r1
 8007720:	f1bc 0f00 	cmp.w	ip, #0
 8007724:	d000      	beq.n	8007728 <_strtod_l+0x2e0>
 8007726:	427f      	negs	r7, r7
 8007728:	2e00      	cmp	r6, #0
 800772a:	d14f      	bne.n	80077cc <_strtod_l+0x384>
 800772c:	9905      	ldr	r1, [sp, #20]
 800772e:	4301      	orrs	r1, r0
 8007730:	f47f aec3 	bne.w	80074ba <_strtod_l+0x72>
 8007734:	2b00      	cmp	r3, #0
 8007736:	f47f aedb 	bne.w	80074f0 <_strtod_l+0xa8>
 800773a:	2a69      	cmp	r2, #105	; 0x69
 800773c:	d029      	beq.n	8007792 <_strtod_l+0x34a>
 800773e:	dc26      	bgt.n	800778e <_strtod_l+0x346>
 8007740:	2a49      	cmp	r2, #73	; 0x49
 8007742:	d026      	beq.n	8007792 <_strtod_l+0x34a>
 8007744:	2a4e      	cmp	r2, #78	; 0x4e
 8007746:	f47f aed3 	bne.w	80074f0 <_strtod_l+0xa8>
 800774a:	499a      	ldr	r1, [pc, #616]	; (80079b4 <_strtod_l+0x56c>)
 800774c:	a819      	add	r0, sp, #100	; 0x64
 800774e:	f001 fa23 	bl	8008b98 <__match>
 8007752:	2800      	cmp	r0, #0
 8007754:	f43f aecc 	beq.w	80074f0 <_strtod_l+0xa8>
 8007758:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	2b28      	cmp	r3, #40	; 0x28
 800775e:	d12f      	bne.n	80077c0 <_strtod_l+0x378>
 8007760:	4995      	ldr	r1, [pc, #596]	; (80079b8 <_strtod_l+0x570>)
 8007762:	aa1c      	add	r2, sp, #112	; 0x70
 8007764:	a819      	add	r0, sp, #100	; 0x64
 8007766:	f001 fa2b 	bl	8008bc0 <__hexnan>
 800776a:	2805      	cmp	r0, #5
 800776c:	d128      	bne.n	80077c0 <_strtod_l+0x378>
 800776e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007770:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007774:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007778:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800777c:	e69d      	b.n	80074ba <_strtod_l+0x72>
 800777e:	210a      	movs	r1, #10
 8007780:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007782:	fb01 2107 	mla	r1, r1, r7, r2
 8007786:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800778a:	9209      	str	r2, [sp, #36]	; 0x24
 800778c:	e7b5      	b.n	80076fa <_strtod_l+0x2b2>
 800778e:	2a6e      	cmp	r2, #110	; 0x6e
 8007790:	e7d9      	b.n	8007746 <_strtod_l+0x2fe>
 8007792:	498a      	ldr	r1, [pc, #552]	; (80079bc <_strtod_l+0x574>)
 8007794:	a819      	add	r0, sp, #100	; 0x64
 8007796:	f001 f9ff 	bl	8008b98 <__match>
 800779a:	2800      	cmp	r0, #0
 800779c:	f43f aea8 	beq.w	80074f0 <_strtod_l+0xa8>
 80077a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077a2:	4987      	ldr	r1, [pc, #540]	; (80079c0 <_strtod_l+0x578>)
 80077a4:	3b01      	subs	r3, #1
 80077a6:	a819      	add	r0, sp, #100	; 0x64
 80077a8:	9319      	str	r3, [sp, #100]	; 0x64
 80077aa:	f001 f9f5 	bl	8008b98 <__match>
 80077ae:	b910      	cbnz	r0, 80077b6 <_strtod_l+0x36e>
 80077b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077b2:	3301      	adds	r3, #1
 80077b4:	9319      	str	r3, [sp, #100]	; 0x64
 80077b6:	f04f 0800 	mov.w	r8, #0
 80077ba:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80079c4 <_strtod_l+0x57c>
 80077be:	e67c      	b.n	80074ba <_strtod_l+0x72>
 80077c0:	4881      	ldr	r0, [pc, #516]	; (80079c8 <_strtod_l+0x580>)
 80077c2:	f000 ff07 	bl	80085d4 <nan>
 80077c6:	4680      	mov	r8, r0
 80077c8:	4689      	mov	r9, r1
 80077ca:	e676      	b.n	80074ba <_strtod_l+0x72>
 80077cc:	9b08      	ldr	r3, [sp, #32]
 80077ce:	f1bb 0f00 	cmp.w	fp, #0
 80077d2:	bf08      	it	eq
 80077d4:	46b3      	moveq	fp, r6
 80077d6:	1afb      	subs	r3, r7, r3
 80077d8:	2e10      	cmp	r6, #16
 80077da:	980a      	ldr	r0, [sp, #40]	; 0x28
 80077dc:	4635      	mov	r5, r6
 80077de:	9309      	str	r3, [sp, #36]	; 0x24
 80077e0:	bfa8      	it	ge
 80077e2:	2510      	movge	r5, #16
 80077e4:	f7f8 fe6a 	bl	80004bc <__aeabi_ui2d>
 80077e8:	2e09      	cmp	r6, #9
 80077ea:	4680      	mov	r8, r0
 80077ec:	4689      	mov	r9, r1
 80077ee:	dd13      	ble.n	8007818 <_strtod_l+0x3d0>
 80077f0:	4b76      	ldr	r3, [pc, #472]	; (80079cc <_strtod_l+0x584>)
 80077f2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80077f6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80077fa:	f7f8 fed9 	bl	80005b0 <__aeabi_dmul>
 80077fe:	4680      	mov	r8, r0
 8007800:	4650      	mov	r0, sl
 8007802:	4689      	mov	r9, r1
 8007804:	f7f8 fe5a 	bl	80004bc <__aeabi_ui2d>
 8007808:	4602      	mov	r2, r0
 800780a:	460b      	mov	r3, r1
 800780c:	4640      	mov	r0, r8
 800780e:	4649      	mov	r1, r9
 8007810:	f7f8 fd18 	bl	8000244 <__adddf3>
 8007814:	4680      	mov	r8, r0
 8007816:	4689      	mov	r9, r1
 8007818:	2e0f      	cmp	r6, #15
 800781a:	dc36      	bgt.n	800788a <_strtod_l+0x442>
 800781c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800781e:	2b00      	cmp	r3, #0
 8007820:	f43f ae4b 	beq.w	80074ba <_strtod_l+0x72>
 8007824:	dd22      	ble.n	800786c <_strtod_l+0x424>
 8007826:	2b16      	cmp	r3, #22
 8007828:	dc09      	bgt.n	800783e <_strtod_l+0x3f6>
 800782a:	4968      	ldr	r1, [pc, #416]	; (80079cc <_strtod_l+0x584>)
 800782c:	4642      	mov	r2, r8
 800782e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007832:	464b      	mov	r3, r9
 8007834:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007838:	f7f8 feba 	bl	80005b0 <__aeabi_dmul>
 800783c:	e7c3      	b.n	80077c6 <_strtod_l+0x37e>
 800783e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007840:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007844:	4293      	cmp	r3, r2
 8007846:	db20      	blt.n	800788a <_strtod_l+0x442>
 8007848:	4c60      	ldr	r4, [pc, #384]	; (80079cc <_strtod_l+0x584>)
 800784a:	f1c6 060f 	rsb	r6, r6, #15
 800784e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007852:	4642      	mov	r2, r8
 8007854:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007858:	464b      	mov	r3, r9
 800785a:	f7f8 fea9 	bl	80005b0 <__aeabi_dmul>
 800785e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007860:	1b9e      	subs	r6, r3, r6
 8007862:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007866:	e9d4 2300 	ldrd	r2, r3, [r4]
 800786a:	e7e5      	b.n	8007838 <_strtod_l+0x3f0>
 800786c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800786e:	3316      	adds	r3, #22
 8007870:	db0b      	blt.n	800788a <_strtod_l+0x442>
 8007872:	9b08      	ldr	r3, [sp, #32]
 8007874:	4640      	mov	r0, r8
 8007876:	1bdf      	subs	r7, r3, r7
 8007878:	4b54      	ldr	r3, [pc, #336]	; (80079cc <_strtod_l+0x584>)
 800787a:	4649      	mov	r1, r9
 800787c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007880:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007884:	f7f8 ffbe 	bl	8000804 <__aeabi_ddiv>
 8007888:	e79d      	b.n	80077c6 <_strtod_l+0x37e>
 800788a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800788c:	1b75      	subs	r5, r6, r5
 800788e:	441d      	add	r5, r3
 8007890:	2d00      	cmp	r5, #0
 8007892:	dd70      	ble.n	8007976 <_strtod_l+0x52e>
 8007894:	f015 030f 	ands.w	r3, r5, #15
 8007898:	d00a      	beq.n	80078b0 <_strtod_l+0x468>
 800789a:	494c      	ldr	r1, [pc, #304]	; (80079cc <_strtod_l+0x584>)
 800789c:	4642      	mov	r2, r8
 800789e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80078a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078a6:	464b      	mov	r3, r9
 80078a8:	f7f8 fe82 	bl	80005b0 <__aeabi_dmul>
 80078ac:	4680      	mov	r8, r0
 80078ae:	4689      	mov	r9, r1
 80078b0:	f035 050f 	bics.w	r5, r5, #15
 80078b4:	d04d      	beq.n	8007952 <_strtod_l+0x50a>
 80078b6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80078ba:	dd22      	ble.n	8007902 <_strtod_l+0x4ba>
 80078bc:	2600      	movs	r6, #0
 80078be:	46b3      	mov	fp, r6
 80078c0:	960b      	str	r6, [sp, #44]	; 0x2c
 80078c2:	9608      	str	r6, [sp, #32]
 80078c4:	2322      	movs	r3, #34	; 0x22
 80078c6:	f04f 0800 	mov.w	r8, #0
 80078ca:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80079c4 <_strtod_l+0x57c>
 80078ce:	6023      	str	r3, [r4, #0]
 80078d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f43f adf1 	beq.w	80074ba <_strtod_l+0x72>
 80078d8:	4620      	mov	r0, r4
 80078da:	991a      	ldr	r1, [sp, #104]	; 0x68
 80078dc:	f7ff f934 	bl	8006b48 <_Bfree>
 80078e0:	4620      	mov	r0, r4
 80078e2:	9908      	ldr	r1, [sp, #32]
 80078e4:	f7ff f930 	bl	8006b48 <_Bfree>
 80078e8:	4659      	mov	r1, fp
 80078ea:	4620      	mov	r0, r4
 80078ec:	f7ff f92c 	bl	8006b48 <_Bfree>
 80078f0:	4620      	mov	r0, r4
 80078f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078f4:	f7ff f928 	bl	8006b48 <_Bfree>
 80078f8:	4631      	mov	r1, r6
 80078fa:	4620      	mov	r0, r4
 80078fc:	f7ff f924 	bl	8006b48 <_Bfree>
 8007900:	e5db      	b.n	80074ba <_strtod_l+0x72>
 8007902:	4b33      	ldr	r3, [pc, #204]	; (80079d0 <_strtod_l+0x588>)
 8007904:	4640      	mov	r0, r8
 8007906:	9305      	str	r3, [sp, #20]
 8007908:	2300      	movs	r3, #0
 800790a:	4649      	mov	r1, r9
 800790c:	469a      	mov	sl, r3
 800790e:	112d      	asrs	r5, r5, #4
 8007910:	2d01      	cmp	r5, #1
 8007912:	dc21      	bgt.n	8007958 <_strtod_l+0x510>
 8007914:	b10b      	cbz	r3, 800791a <_strtod_l+0x4d2>
 8007916:	4680      	mov	r8, r0
 8007918:	4689      	mov	r9, r1
 800791a:	492d      	ldr	r1, [pc, #180]	; (80079d0 <_strtod_l+0x588>)
 800791c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007920:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007924:	4642      	mov	r2, r8
 8007926:	e9d1 0100 	ldrd	r0, r1, [r1]
 800792a:	464b      	mov	r3, r9
 800792c:	f7f8 fe40 	bl	80005b0 <__aeabi_dmul>
 8007930:	4b24      	ldr	r3, [pc, #144]	; (80079c4 <_strtod_l+0x57c>)
 8007932:	460a      	mov	r2, r1
 8007934:	400b      	ands	r3, r1
 8007936:	4927      	ldr	r1, [pc, #156]	; (80079d4 <_strtod_l+0x58c>)
 8007938:	4680      	mov	r8, r0
 800793a:	428b      	cmp	r3, r1
 800793c:	d8be      	bhi.n	80078bc <_strtod_l+0x474>
 800793e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007942:	428b      	cmp	r3, r1
 8007944:	bf86      	itte	hi
 8007946:	f04f 38ff 	movhi.w	r8, #4294967295
 800794a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80079d8 <_strtod_l+0x590>
 800794e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007952:	2300      	movs	r3, #0
 8007954:	9305      	str	r3, [sp, #20]
 8007956:	e07b      	b.n	8007a50 <_strtod_l+0x608>
 8007958:	07ea      	lsls	r2, r5, #31
 800795a:	d505      	bpl.n	8007968 <_strtod_l+0x520>
 800795c:	9b05      	ldr	r3, [sp, #20]
 800795e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007962:	f7f8 fe25 	bl	80005b0 <__aeabi_dmul>
 8007966:	2301      	movs	r3, #1
 8007968:	9a05      	ldr	r2, [sp, #20]
 800796a:	f10a 0a01 	add.w	sl, sl, #1
 800796e:	3208      	adds	r2, #8
 8007970:	106d      	asrs	r5, r5, #1
 8007972:	9205      	str	r2, [sp, #20]
 8007974:	e7cc      	b.n	8007910 <_strtod_l+0x4c8>
 8007976:	d0ec      	beq.n	8007952 <_strtod_l+0x50a>
 8007978:	426d      	negs	r5, r5
 800797a:	f015 020f 	ands.w	r2, r5, #15
 800797e:	d00a      	beq.n	8007996 <_strtod_l+0x54e>
 8007980:	4b12      	ldr	r3, [pc, #72]	; (80079cc <_strtod_l+0x584>)
 8007982:	4640      	mov	r0, r8
 8007984:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007988:	4649      	mov	r1, r9
 800798a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798e:	f7f8 ff39 	bl	8000804 <__aeabi_ddiv>
 8007992:	4680      	mov	r8, r0
 8007994:	4689      	mov	r9, r1
 8007996:	112d      	asrs	r5, r5, #4
 8007998:	d0db      	beq.n	8007952 <_strtod_l+0x50a>
 800799a:	2d1f      	cmp	r5, #31
 800799c:	dd1e      	ble.n	80079dc <_strtod_l+0x594>
 800799e:	2600      	movs	r6, #0
 80079a0:	46b3      	mov	fp, r6
 80079a2:	960b      	str	r6, [sp, #44]	; 0x2c
 80079a4:	9608      	str	r6, [sp, #32]
 80079a6:	2322      	movs	r3, #34	; 0x22
 80079a8:	f04f 0800 	mov.w	r8, #0
 80079ac:	f04f 0900 	mov.w	r9, #0
 80079b0:	6023      	str	r3, [r4, #0]
 80079b2:	e78d      	b.n	80078d0 <_strtod_l+0x488>
 80079b4:	08009377 	.word	0x08009377
 80079b8:	080095a4 	.word	0x080095a4
 80079bc:	0800936f 	.word	0x0800936f
 80079c0:	080093a6 	.word	0x080093a6
 80079c4:	7ff00000 	.word	0x7ff00000
 80079c8:	08009735 	.word	0x08009735
 80079cc:	080094b8 	.word	0x080094b8
 80079d0:	08009490 	.word	0x08009490
 80079d4:	7ca00000 	.word	0x7ca00000
 80079d8:	7fefffff 	.word	0x7fefffff
 80079dc:	f015 0310 	ands.w	r3, r5, #16
 80079e0:	bf18      	it	ne
 80079e2:	236a      	movne	r3, #106	; 0x6a
 80079e4:	4640      	mov	r0, r8
 80079e6:	9305      	str	r3, [sp, #20]
 80079e8:	4649      	mov	r1, r9
 80079ea:	2300      	movs	r3, #0
 80079ec:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8007cb8 <_strtod_l+0x870>
 80079f0:	07ea      	lsls	r2, r5, #31
 80079f2:	d504      	bpl.n	80079fe <_strtod_l+0x5b6>
 80079f4:	e9da 2300 	ldrd	r2, r3, [sl]
 80079f8:	f7f8 fdda 	bl	80005b0 <__aeabi_dmul>
 80079fc:	2301      	movs	r3, #1
 80079fe:	106d      	asrs	r5, r5, #1
 8007a00:	f10a 0a08 	add.w	sl, sl, #8
 8007a04:	d1f4      	bne.n	80079f0 <_strtod_l+0x5a8>
 8007a06:	b10b      	cbz	r3, 8007a0c <_strtod_l+0x5c4>
 8007a08:	4680      	mov	r8, r0
 8007a0a:	4689      	mov	r9, r1
 8007a0c:	9b05      	ldr	r3, [sp, #20]
 8007a0e:	b1bb      	cbz	r3, 8007a40 <_strtod_l+0x5f8>
 8007a10:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007a14:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	4649      	mov	r1, r9
 8007a1c:	dd10      	ble.n	8007a40 <_strtod_l+0x5f8>
 8007a1e:	2b1f      	cmp	r3, #31
 8007a20:	f340 8128 	ble.w	8007c74 <_strtod_l+0x82c>
 8007a24:	2b34      	cmp	r3, #52	; 0x34
 8007a26:	bfd8      	it	le
 8007a28:	f04f 33ff 	movle.w	r3, #4294967295
 8007a2c:	f04f 0800 	mov.w	r8, #0
 8007a30:	bfcf      	iteee	gt
 8007a32:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007a36:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007a3a:	4093      	lslle	r3, r2
 8007a3c:	ea03 0901 	andle.w	r9, r3, r1
 8007a40:	2200      	movs	r2, #0
 8007a42:	2300      	movs	r3, #0
 8007a44:	4640      	mov	r0, r8
 8007a46:	4649      	mov	r1, r9
 8007a48:	f7f9 f81a 	bl	8000a80 <__aeabi_dcmpeq>
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	d1a6      	bne.n	800799e <_strtod_l+0x556>
 8007a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a52:	465a      	mov	r2, fp
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	4620      	mov	r0, r4
 8007a58:	4633      	mov	r3, r6
 8007a5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a5c:	f7ff f8dc 	bl	8006c18 <__s2b>
 8007a60:	900b      	str	r0, [sp, #44]	; 0x2c
 8007a62:	2800      	cmp	r0, #0
 8007a64:	f43f af2a 	beq.w	80078bc <_strtod_l+0x474>
 8007a68:	2600      	movs	r6, #0
 8007a6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a6c:	9b08      	ldr	r3, [sp, #32]
 8007a6e:	2a00      	cmp	r2, #0
 8007a70:	eba3 0307 	sub.w	r3, r3, r7
 8007a74:	bfa8      	it	ge
 8007a76:	2300      	movge	r3, #0
 8007a78:	46b3      	mov	fp, r6
 8007a7a:	9312      	str	r3, [sp, #72]	; 0x48
 8007a7c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007a80:	9316      	str	r3, [sp, #88]	; 0x58
 8007a82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a84:	4620      	mov	r0, r4
 8007a86:	6859      	ldr	r1, [r3, #4]
 8007a88:	f7ff f81e 	bl	8006ac8 <_Balloc>
 8007a8c:	9008      	str	r0, [sp, #32]
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	f43f af18 	beq.w	80078c4 <_strtod_l+0x47c>
 8007a94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a96:	300c      	adds	r0, #12
 8007a98:	691a      	ldr	r2, [r3, #16]
 8007a9a:	f103 010c 	add.w	r1, r3, #12
 8007a9e:	3202      	adds	r2, #2
 8007aa0:	0092      	lsls	r2, r2, #2
 8007aa2:	f000 fd89 	bl	80085b8 <memcpy>
 8007aa6:	ab1c      	add	r3, sp, #112	; 0x70
 8007aa8:	9301      	str	r3, [sp, #4]
 8007aaa:	ab1b      	add	r3, sp, #108	; 0x6c
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	4642      	mov	r2, r8
 8007ab0:	464b      	mov	r3, r9
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007ab8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8007abc:	f7ff fbd8 	bl	8007270 <__d2b>
 8007ac0:	901a      	str	r0, [sp, #104]	; 0x68
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	f43f aefe 	beq.w	80078c4 <_strtod_l+0x47c>
 8007ac8:	2101      	movs	r1, #1
 8007aca:	4620      	mov	r0, r4
 8007acc:	f7ff f93c 	bl	8006d48 <__i2b>
 8007ad0:	4683      	mov	fp, r0
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	f43f aef6 	beq.w	80078c4 <_strtod_l+0x47c>
 8007ad8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007ada:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007adc:	2f00      	cmp	r7, #0
 8007ade:	bfab      	itete	ge
 8007ae0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8007ae2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007ae4:	eb07 0a03 	addge.w	sl, r7, r3
 8007ae8:	1bdd      	sublt	r5, r3, r7
 8007aea:	9b05      	ldr	r3, [sp, #20]
 8007aec:	bfa8      	it	ge
 8007aee:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007af0:	eba7 0703 	sub.w	r7, r7, r3
 8007af4:	4417      	add	r7, r2
 8007af6:	4b71      	ldr	r3, [pc, #452]	; (8007cbc <_strtod_l+0x874>)
 8007af8:	f107 37ff 	add.w	r7, r7, #4294967295
 8007afc:	bfb8      	it	lt
 8007afe:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8007b02:	429f      	cmp	r7, r3
 8007b04:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007b08:	f280 80c7 	bge.w	8007c9a <_strtod_l+0x852>
 8007b0c:	1bdb      	subs	r3, r3, r7
 8007b0e:	2b1f      	cmp	r3, #31
 8007b10:	f04f 0101 	mov.w	r1, #1
 8007b14:	eba2 0203 	sub.w	r2, r2, r3
 8007b18:	f300 80b3 	bgt.w	8007c82 <_strtod_l+0x83a>
 8007b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b20:	9313      	str	r3, [sp, #76]	; 0x4c
 8007b22:	2300      	movs	r3, #0
 8007b24:	9310      	str	r3, [sp, #64]	; 0x40
 8007b26:	eb0a 0702 	add.w	r7, sl, r2
 8007b2a:	9b05      	ldr	r3, [sp, #20]
 8007b2c:	45ba      	cmp	sl, r7
 8007b2e:	4415      	add	r5, r2
 8007b30:	441d      	add	r5, r3
 8007b32:	4653      	mov	r3, sl
 8007b34:	bfa8      	it	ge
 8007b36:	463b      	movge	r3, r7
 8007b38:	42ab      	cmp	r3, r5
 8007b3a:	bfa8      	it	ge
 8007b3c:	462b      	movge	r3, r5
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	bfc2      	ittt	gt
 8007b42:	1aff      	subgt	r7, r7, r3
 8007b44:	1aed      	subgt	r5, r5, r3
 8007b46:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007b4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	dd17      	ble.n	8007b80 <_strtod_l+0x738>
 8007b50:	4659      	mov	r1, fp
 8007b52:	461a      	mov	r2, r3
 8007b54:	4620      	mov	r0, r4
 8007b56:	f7ff f9b5 	bl	8006ec4 <__pow5mult>
 8007b5a:	4683      	mov	fp, r0
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	f43f aeb1 	beq.w	80078c4 <_strtod_l+0x47c>
 8007b62:	4601      	mov	r1, r0
 8007b64:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007b66:	4620      	mov	r0, r4
 8007b68:	f7ff f904 	bl	8006d74 <__multiply>
 8007b6c:	900a      	str	r0, [sp, #40]	; 0x28
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	f43f aea8 	beq.w	80078c4 <_strtod_l+0x47c>
 8007b74:	4620      	mov	r0, r4
 8007b76:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007b78:	f7fe ffe6 	bl	8006b48 <_Bfree>
 8007b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b7e:	931a      	str	r3, [sp, #104]	; 0x68
 8007b80:	2f00      	cmp	r7, #0
 8007b82:	f300 808f 	bgt.w	8007ca4 <_strtod_l+0x85c>
 8007b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	dd08      	ble.n	8007b9e <_strtod_l+0x756>
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007b90:	9908      	ldr	r1, [sp, #32]
 8007b92:	f7ff f997 	bl	8006ec4 <__pow5mult>
 8007b96:	9008      	str	r0, [sp, #32]
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	f43f ae93 	beq.w	80078c4 <_strtod_l+0x47c>
 8007b9e:	2d00      	cmp	r5, #0
 8007ba0:	dd08      	ble.n	8007bb4 <_strtod_l+0x76c>
 8007ba2:	462a      	mov	r2, r5
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	9908      	ldr	r1, [sp, #32]
 8007ba8:	f7ff f9e6 	bl	8006f78 <__lshift>
 8007bac:	9008      	str	r0, [sp, #32]
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	f43f ae88 	beq.w	80078c4 <_strtod_l+0x47c>
 8007bb4:	f1ba 0f00 	cmp.w	sl, #0
 8007bb8:	dd08      	ble.n	8007bcc <_strtod_l+0x784>
 8007bba:	4659      	mov	r1, fp
 8007bbc:	4652      	mov	r2, sl
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f7ff f9da 	bl	8006f78 <__lshift>
 8007bc4:	4683      	mov	fp, r0
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	f43f ae7c 	beq.w	80078c4 <_strtod_l+0x47c>
 8007bcc:	4620      	mov	r0, r4
 8007bce:	9a08      	ldr	r2, [sp, #32]
 8007bd0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007bd2:	f7ff fa59 	bl	8007088 <__mdiff>
 8007bd6:	4606      	mov	r6, r0
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	f43f ae73 	beq.w	80078c4 <_strtod_l+0x47c>
 8007bde:	2500      	movs	r5, #0
 8007be0:	68c3      	ldr	r3, [r0, #12]
 8007be2:	4659      	mov	r1, fp
 8007be4:	60c5      	str	r5, [r0, #12]
 8007be6:	930a      	str	r3, [sp, #40]	; 0x28
 8007be8:	f7ff fa32 	bl	8007050 <__mcmp>
 8007bec:	42a8      	cmp	r0, r5
 8007bee:	da6b      	bge.n	8007cc8 <_strtod_l+0x880>
 8007bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bf2:	ea53 0308 	orrs.w	r3, r3, r8
 8007bf6:	f040 808f 	bne.w	8007d18 <_strtod_l+0x8d0>
 8007bfa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f040 808a 	bne.w	8007d18 <_strtod_l+0x8d0>
 8007c04:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c08:	0d1b      	lsrs	r3, r3, #20
 8007c0a:	051b      	lsls	r3, r3, #20
 8007c0c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007c10:	f240 8082 	bls.w	8007d18 <_strtod_l+0x8d0>
 8007c14:	6973      	ldr	r3, [r6, #20]
 8007c16:	b913      	cbnz	r3, 8007c1e <_strtod_l+0x7d6>
 8007c18:	6933      	ldr	r3, [r6, #16]
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	dd7c      	ble.n	8007d18 <_strtod_l+0x8d0>
 8007c1e:	4631      	mov	r1, r6
 8007c20:	2201      	movs	r2, #1
 8007c22:	4620      	mov	r0, r4
 8007c24:	f7ff f9a8 	bl	8006f78 <__lshift>
 8007c28:	4659      	mov	r1, fp
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	f7ff fa10 	bl	8007050 <__mcmp>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	dd71      	ble.n	8007d18 <_strtod_l+0x8d0>
 8007c34:	9905      	ldr	r1, [sp, #20]
 8007c36:	464b      	mov	r3, r9
 8007c38:	4a21      	ldr	r2, [pc, #132]	; (8007cc0 <_strtod_l+0x878>)
 8007c3a:	2900      	cmp	r1, #0
 8007c3c:	f000 808d 	beq.w	8007d5a <_strtod_l+0x912>
 8007c40:	ea02 0109 	and.w	r1, r2, r9
 8007c44:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007c48:	f300 8087 	bgt.w	8007d5a <_strtod_l+0x912>
 8007c4c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007c50:	f77f aea9 	ble.w	80079a6 <_strtod_l+0x55e>
 8007c54:	4640      	mov	r0, r8
 8007c56:	4649      	mov	r1, r9
 8007c58:	4b1a      	ldr	r3, [pc, #104]	; (8007cc4 <_strtod_l+0x87c>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f7f8 fca8 	bl	80005b0 <__aeabi_dmul>
 8007c60:	4b17      	ldr	r3, [pc, #92]	; (8007cc0 <_strtod_l+0x878>)
 8007c62:	4680      	mov	r8, r0
 8007c64:	400b      	ands	r3, r1
 8007c66:	4689      	mov	r9, r1
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f47f ae35 	bne.w	80078d8 <_strtod_l+0x490>
 8007c6e:	2322      	movs	r3, #34	; 0x22
 8007c70:	6023      	str	r3, [r4, #0]
 8007c72:	e631      	b.n	80078d8 <_strtod_l+0x490>
 8007c74:	f04f 32ff 	mov.w	r2, #4294967295
 8007c78:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7c:	ea03 0808 	and.w	r8, r3, r8
 8007c80:	e6de      	b.n	8007a40 <_strtod_l+0x5f8>
 8007c82:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8007c86:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8007c8a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8007c8e:	37e2      	adds	r7, #226	; 0xe2
 8007c90:	fa01 f307 	lsl.w	r3, r1, r7
 8007c94:	9310      	str	r3, [sp, #64]	; 0x40
 8007c96:	9113      	str	r1, [sp, #76]	; 0x4c
 8007c98:	e745      	b.n	8007b26 <_strtod_l+0x6de>
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	9310      	str	r3, [sp, #64]	; 0x40
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	9313      	str	r3, [sp, #76]	; 0x4c
 8007ca2:	e740      	b.n	8007b26 <_strtod_l+0x6de>
 8007ca4:	463a      	mov	r2, r7
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007caa:	f7ff f965 	bl	8006f78 <__lshift>
 8007cae:	901a      	str	r0, [sp, #104]	; 0x68
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	f47f af68 	bne.w	8007b86 <_strtod_l+0x73e>
 8007cb6:	e605      	b.n	80078c4 <_strtod_l+0x47c>
 8007cb8:	080095b8 	.word	0x080095b8
 8007cbc:	fffffc02 	.word	0xfffffc02
 8007cc0:	7ff00000 	.word	0x7ff00000
 8007cc4:	39500000 	.word	0x39500000
 8007cc8:	46ca      	mov	sl, r9
 8007cca:	d165      	bne.n	8007d98 <_strtod_l+0x950>
 8007ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007cd2:	b352      	cbz	r2, 8007d2a <_strtod_l+0x8e2>
 8007cd4:	4a9e      	ldr	r2, [pc, #632]	; (8007f50 <_strtod_l+0xb08>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d12a      	bne.n	8007d30 <_strtod_l+0x8e8>
 8007cda:	9b05      	ldr	r3, [sp, #20]
 8007cdc:	4641      	mov	r1, r8
 8007cde:	b1fb      	cbz	r3, 8007d20 <_strtod_l+0x8d8>
 8007ce0:	4b9c      	ldr	r3, [pc, #624]	; (8007f54 <_strtod_l+0xb0c>)
 8007ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce6:	ea09 0303 	and.w	r3, r9, r3
 8007cea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007cee:	d81a      	bhi.n	8007d26 <_strtod_l+0x8de>
 8007cf0:	0d1b      	lsrs	r3, r3, #20
 8007cf2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cfa:	4299      	cmp	r1, r3
 8007cfc:	d118      	bne.n	8007d30 <_strtod_l+0x8e8>
 8007cfe:	4b96      	ldr	r3, [pc, #600]	; (8007f58 <_strtod_l+0xb10>)
 8007d00:	459a      	cmp	sl, r3
 8007d02:	d102      	bne.n	8007d0a <_strtod_l+0x8c2>
 8007d04:	3101      	adds	r1, #1
 8007d06:	f43f addd 	beq.w	80078c4 <_strtod_l+0x47c>
 8007d0a:	f04f 0800 	mov.w	r8, #0
 8007d0e:	4b91      	ldr	r3, [pc, #580]	; (8007f54 <_strtod_l+0xb0c>)
 8007d10:	ea0a 0303 	and.w	r3, sl, r3
 8007d14:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007d18:	9b05      	ldr	r3, [sp, #20]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d19a      	bne.n	8007c54 <_strtod_l+0x80c>
 8007d1e:	e5db      	b.n	80078d8 <_strtod_l+0x490>
 8007d20:	f04f 33ff 	mov.w	r3, #4294967295
 8007d24:	e7e9      	b.n	8007cfa <_strtod_l+0x8b2>
 8007d26:	4613      	mov	r3, r2
 8007d28:	e7e7      	b.n	8007cfa <_strtod_l+0x8b2>
 8007d2a:	ea53 0308 	orrs.w	r3, r3, r8
 8007d2e:	d081      	beq.n	8007c34 <_strtod_l+0x7ec>
 8007d30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d32:	b1e3      	cbz	r3, 8007d6e <_strtod_l+0x926>
 8007d34:	ea13 0f0a 	tst.w	r3, sl
 8007d38:	d0ee      	beq.n	8007d18 <_strtod_l+0x8d0>
 8007d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d3c:	4640      	mov	r0, r8
 8007d3e:	4649      	mov	r1, r9
 8007d40:	9a05      	ldr	r2, [sp, #20]
 8007d42:	b1c3      	cbz	r3, 8007d76 <_strtod_l+0x92e>
 8007d44:	f7ff fb5c 	bl	8007400 <sulp>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007d4e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007d50:	f7f8 fa78 	bl	8000244 <__adddf3>
 8007d54:	4680      	mov	r8, r0
 8007d56:	4689      	mov	r9, r1
 8007d58:	e7de      	b.n	8007d18 <_strtod_l+0x8d0>
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007d60:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007d64:	f04f 38ff 	mov.w	r8, #4294967295
 8007d68:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007d6c:	e7d4      	b.n	8007d18 <_strtod_l+0x8d0>
 8007d6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d70:	ea13 0f08 	tst.w	r3, r8
 8007d74:	e7e0      	b.n	8007d38 <_strtod_l+0x8f0>
 8007d76:	f7ff fb43 	bl	8007400 <sulp>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007d80:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007d82:	f7f8 fa5d 	bl	8000240 <__aeabi_dsub>
 8007d86:	2200      	movs	r2, #0
 8007d88:	2300      	movs	r3, #0
 8007d8a:	4680      	mov	r8, r0
 8007d8c:	4689      	mov	r9, r1
 8007d8e:	f7f8 fe77 	bl	8000a80 <__aeabi_dcmpeq>
 8007d92:	2800      	cmp	r0, #0
 8007d94:	d0c0      	beq.n	8007d18 <_strtod_l+0x8d0>
 8007d96:	e606      	b.n	80079a6 <_strtod_l+0x55e>
 8007d98:	4659      	mov	r1, fp
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	f7ff fabe 	bl	800731c <__ratio>
 8007da0:	4602      	mov	r2, r0
 8007da2:	460b      	mov	r3, r1
 8007da4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007da8:	2200      	movs	r2, #0
 8007daa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007dae:	f7f8 fe7b 	bl	8000aa8 <__aeabi_dcmple>
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d06f      	beq.n	8007e96 <_strtod_l+0xa4e>
 8007db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d17c      	bne.n	8007eb6 <_strtod_l+0xa6e>
 8007dbc:	f1b8 0f00 	cmp.w	r8, #0
 8007dc0:	d159      	bne.n	8007e76 <_strtod_l+0xa2e>
 8007dc2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d17b      	bne.n	8007ec2 <_strtod_l+0xa7a>
 8007dca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007dce:	2200      	movs	r2, #0
 8007dd0:	4b62      	ldr	r3, [pc, #392]	; (8007f5c <_strtod_l+0xb14>)
 8007dd2:	f7f8 fe5f 	bl	8000a94 <__aeabi_dcmplt>
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	d15a      	bne.n	8007e90 <_strtod_l+0xa48>
 8007dda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007dde:	2200      	movs	r2, #0
 8007de0:	4b5f      	ldr	r3, [pc, #380]	; (8007f60 <_strtod_l+0xb18>)
 8007de2:	f7f8 fbe5 	bl	80005b0 <__aeabi_dmul>
 8007de6:	4605      	mov	r5, r0
 8007de8:	460f      	mov	r7, r1
 8007dea:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007dee:	9506      	str	r5, [sp, #24]
 8007df0:	9307      	str	r3, [sp, #28]
 8007df2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007df6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007dfa:	4b56      	ldr	r3, [pc, #344]	; (8007f54 <_strtod_l+0xb0c>)
 8007dfc:	4a55      	ldr	r2, [pc, #340]	; (8007f54 <_strtod_l+0xb0c>)
 8007dfe:	ea0a 0303 	and.w	r3, sl, r3
 8007e02:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e04:	4b57      	ldr	r3, [pc, #348]	; (8007f64 <_strtod_l+0xb1c>)
 8007e06:	ea0a 0202 	and.w	r2, sl, r2
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	f040 80b0 	bne.w	8007f70 <_strtod_l+0xb28>
 8007e10:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007e14:	4640      	mov	r0, r8
 8007e16:	4649      	mov	r1, r9
 8007e18:	f7ff f9c2 	bl	80071a0 <__ulp>
 8007e1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e20:	f7f8 fbc6 	bl	80005b0 <__aeabi_dmul>
 8007e24:	4642      	mov	r2, r8
 8007e26:	464b      	mov	r3, r9
 8007e28:	f7f8 fa0c 	bl	8000244 <__adddf3>
 8007e2c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8007f54 <_strtod_l+0xb0c>
 8007e30:	4a4d      	ldr	r2, [pc, #308]	; (8007f68 <_strtod_l+0xb20>)
 8007e32:	ea01 0a0a 	and.w	sl, r1, sl
 8007e36:	4592      	cmp	sl, r2
 8007e38:	4680      	mov	r8, r0
 8007e3a:	d948      	bls.n	8007ece <_strtod_l+0xa86>
 8007e3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e3e:	4b46      	ldr	r3, [pc, #280]	; (8007f58 <_strtod_l+0xb10>)
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d103      	bne.n	8007e4c <_strtod_l+0xa04>
 8007e44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e46:	3301      	adds	r3, #1
 8007e48:	f43f ad3c 	beq.w	80078c4 <_strtod_l+0x47c>
 8007e4c:	f04f 38ff 	mov.w	r8, #4294967295
 8007e50:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007f58 <_strtod_l+0xb10>
 8007e54:	4620      	mov	r0, r4
 8007e56:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007e58:	f7fe fe76 	bl	8006b48 <_Bfree>
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	9908      	ldr	r1, [sp, #32]
 8007e60:	f7fe fe72 	bl	8006b48 <_Bfree>
 8007e64:	4659      	mov	r1, fp
 8007e66:	4620      	mov	r0, r4
 8007e68:	f7fe fe6e 	bl	8006b48 <_Bfree>
 8007e6c:	4631      	mov	r1, r6
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f7fe fe6a 	bl	8006b48 <_Bfree>
 8007e74:	e605      	b.n	8007a82 <_strtod_l+0x63a>
 8007e76:	f1b8 0f01 	cmp.w	r8, #1
 8007e7a:	d103      	bne.n	8007e84 <_strtod_l+0xa3c>
 8007e7c:	f1b9 0f00 	cmp.w	r9, #0
 8007e80:	f43f ad91 	beq.w	80079a6 <_strtod_l+0x55e>
 8007e84:	2200      	movs	r2, #0
 8007e86:	4b39      	ldr	r3, [pc, #228]	; (8007f6c <_strtod_l+0xb24>)
 8007e88:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007e8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007e8e:	e016      	b.n	8007ebe <_strtod_l+0xa76>
 8007e90:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007e92:	4f33      	ldr	r7, [pc, #204]	; (8007f60 <_strtod_l+0xb18>)
 8007e94:	e7a9      	b.n	8007dea <_strtod_l+0x9a2>
 8007e96:	4b32      	ldr	r3, [pc, #200]	; (8007f60 <_strtod_l+0xb18>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e9e:	f7f8 fb87 	bl	80005b0 <__aeabi_dmul>
 8007ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ea4:	4605      	mov	r5, r0
 8007ea6:	460f      	mov	r7, r1
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d09e      	beq.n	8007dea <_strtod_l+0x9a2>
 8007eac:	4602      	mov	r2, r0
 8007eae:	460b      	mov	r3, r1
 8007eb0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007eb4:	e79d      	b.n	8007df2 <_strtod_l+0x9aa>
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	4b28      	ldr	r3, [pc, #160]	; (8007f5c <_strtod_l+0xb14>)
 8007eba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007ebe:	4f27      	ldr	r7, [pc, #156]	; (8007f5c <_strtod_l+0xb14>)
 8007ec0:	e797      	b.n	8007df2 <_strtod_l+0x9aa>
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	4b29      	ldr	r3, [pc, #164]	; (8007f6c <_strtod_l+0xb24>)
 8007ec6:	4645      	mov	r5, r8
 8007ec8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007ecc:	e7f7      	b.n	8007ebe <_strtod_l+0xa76>
 8007ece:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8007ed2:	9b05      	ldr	r3, [sp, #20]
 8007ed4:	46ca      	mov	sl, r9
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1bc      	bne.n	8007e54 <_strtod_l+0xa0c>
 8007eda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ede:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007ee0:	0d1b      	lsrs	r3, r3, #20
 8007ee2:	051b      	lsls	r3, r3, #20
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d1b5      	bne.n	8007e54 <_strtod_l+0xa0c>
 8007ee8:	4628      	mov	r0, r5
 8007eea:	4639      	mov	r1, r7
 8007eec:	f7f8 fea8 	bl	8000c40 <__aeabi_d2lz>
 8007ef0:	f7f8 fb30 	bl	8000554 <__aeabi_l2d>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	4628      	mov	r0, r5
 8007efa:	4639      	mov	r1, r7
 8007efc:	f7f8 f9a0 	bl	8000240 <__aeabi_dsub>
 8007f00:	460b      	mov	r3, r1
 8007f02:	4602      	mov	r2, r0
 8007f04:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007f08:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f0e:	ea4a 0a08 	orr.w	sl, sl, r8
 8007f12:	ea5a 0a03 	orrs.w	sl, sl, r3
 8007f16:	d06c      	beq.n	8007ff2 <_strtod_l+0xbaa>
 8007f18:	a309      	add	r3, pc, #36	; (adr r3, 8007f40 <_strtod_l+0xaf8>)
 8007f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1e:	f7f8 fdb9 	bl	8000a94 <__aeabi_dcmplt>
 8007f22:	2800      	cmp	r0, #0
 8007f24:	f47f acd8 	bne.w	80078d8 <_strtod_l+0x490>
 8007f28:	a307      	add	r3, pc, #28	; (adr r3, 8007f48 <_strtod_l+0xb00>)
 8007f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f32:	f7f8 fdcd 	bl	8000ad0 <__aeabi_dcmpgt>
 8007f36:	2800      	cmp	r0, #0
 8007f38:	d08c      	beq.n	8007e54 <_strtod_l+0xa0c>
 8007f3a:	e4cd      	b.n	80078d8 <_strtod_l+0x490>
 8007f3c:	f3af 8000 	nop.w
 8007f40:	94a03595 	.word	0x94a03595
 8007f44:	3fdfffff 	.word	0x3fdfffff
 8007f48:	35afe535 	.word	0x35afe535
 8007f4c:	3fe00000 	.word	0x3fe00000
 8007f50:	000fffff 	.word	0x000fffff
 8007f54:	7ff00000 	.word	0x7ff00000
 8007f58:	7fefffff 	.word	0x7fefffff
 8007f5c:	3ff00000 	.word	0x3ff00000
 8007f60:	3fe00000 	.word	0x3fe00000
 8007f64:	7fe00000 	.word	0x7fe00000
 8007f68:	7c9fffff 	.word	0x7c9fffff
 8007f6c:	bff00000 	.word	0xbff00000
 8007f70:	9b05      	ldr	r3, [sp, #20]
 8007f72:	b333      	cbz	r3, 8007fc2 <_strtod_l+0xb7a>
 8007f74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f76:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007f7a:	d822      	bhi.n	8007fc2 <_strtod_l+0xb7a>
 8007f7c:	a328      	add	r3, pc, #160	; (adr r3, 8008020 <_strtod_l+0xbd8>)
 8007f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f82:	4628      	mov	r0, r5
 8007f84:	4639      	mov	r1, r7
 8007f86:	f7f8 fd8f 	bl	8000aa8 <__aeabi_dcmple>
 8007f8a:	b1a0      	cbz	r0, 8007fb6 <_strtod_l+0xb6e>
 8007f8c:	4639      	mov	r1, r7
 8007f8e:	4628      	mov	r0, r5
 8007f90:	f7f8 fde6 	bl	8000b60 <__aeabi_d2uiz>
 8007f94:	2801      	cmp	r0, #1
 8007f96:	bf38      	it	cc
 8007f98:	2001      	movcc	r0, #1
 8007f9a:	f7f8 fa8f 	bl	80004bc <__aeabi_ui2d>
 8007f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fa0:	4605      	mov	r5, r0
 8007fa2:	460f      	mov	r7, r1
 8007fa4:	bb03      	cbnz	r3, 8007fe8 <_strtod_l+0xba0>
 8007fa6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007faa:	9014      	str	r0, [sp, #80]	; 0x50
 8007fac:	9315      	str	r3, [sp, #84]	; 0x54
 8007fae:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007fb2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007fb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007fba:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007fbe:	1a9b      	subs	r3, r3, r2
 8007fc0:	9311      	str	r3, [sp, #68]	; 0x44
 8007fc2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007fc4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007fc6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8007fca:	f7ff f8e9 	bl	80071a0 <__ulp>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4640      	mov	r0, r8
 8007fd4:	4649      	mov	r1, r9
 8007fd6:	f7f8 faeb 	bl	80005b0 <__aeabi_dmul>
 8007fda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fde:	f7f8 f931 	bl	8000244 <__adddf3>
 8007fe2:	4680      	mov	r8, r0
 8007fe4:	4689      	mov	r9, r1
 8007fe6:	e774      	b.n	8007ed2 <_strtod_l+0xa8a>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	460b      	mov	r3, r1
 8007fec:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007ff0:	e7dd      	b.n	8007fae <_strtod_l+0xb66>
 8007ff2:	a30d      	add	r3, pc, #52	; (adr r3, 8008028 <_strtod_l+0xbe0>)
 8007ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff8:	f7f8 fd4c 	bl	8000a94 <__aeabi_dcmplt>
 8007ffc:	e79b      	b.n	8007f36 <_strtod_l+0xaee>
 8007ffe:	2300      	movs	r3, #0
 8008000:	930e      	str	r3, [sp, #56]	; 0x38
 8008002:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008004:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008006:	6013      	str	r3, [r2, #0]
 8008008:	f7ff ba5b 	b.w	80074c2 <_strtod_l+0x7a>
 800800c:	2a65      	cmp	r2, #101	; 0x65
 800800e:	f43f ab52 	beq.w	80076b6 <_strtod_l+0x26e>
 8008012:	2a45      	cmp	r2, #69	; 0x45
 8008014:	f43f ab4f 	beq.w	80076b6 <_strtod_l+0x26e>
 8008018:	2301      	movs	r3, #1
 800801a:	f7ff bb87 	b.w	800772c <_strtod_l+0x2e4>
 800801e:	bf00      	nop
 8008020:	ffc00000 	.word	0xffc00000
 8008024:	41dfffff 	.word	0x41dfffff
 8008028:	94a03595 	.word	0x94a03595
 800802c:	3fcfffff 	.word	0x3fcfffff

08008030 <_strtod_r>:
 8008030:	4b01      	ldr	r3, [pc, #4]	; (8008038 <_strtod_r+0x8>)
 8008032:	f7ff ba09 	b.w	8007448 <_strtod_l>
 8008036:	bf00      	nop
 8008038:	20000070 	.word	0x20000070

0800803c <_strtol_l.constprop.0>:
 800803c:	2b01      	cmp	r3, #1
 800803e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008042:	4686      	mov	lr, r0
 8008044:	4690      	mov	r8, r2
 8008046:	d001      	beq.n	800804c <_strtol_l.constprop.0+0x10>
 8008048:	2b24      	cmp	r3, #36	; 0x24
 800804a:	d906      	bls.n	800805a <_strtol_l.constprop.0+0x1e>
 800804c:	f7fd fd90 	bl	8005b70 <__errno>
 8008050:	2316      	movs	r3, #22
 8008052:	6003      	str	r3, [r0, #0]
 8008054:	2000      	movs	r0, #0
 8008056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800805a:	460d      	mov	r5, r1
 800805c:	4835      	ldr	r0, [pc, #212]	; (8008134 <_strtol_l.constprop.0+0xf8>)
 800805e:	462a      	mov	r2, r5
 8008060:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008064:	5d06      	ldrb	r6, [r0, r4]
 8008066:	f016 0608 	ands.w	r6, r6, #8
 800806a:	d1f8      	bne.n	800805e <_strtol_l.constprop.0+0x22>
 800806c:	2c2d      	cmp	r4, #45	; 0x2d
 800806e:	d12e      	bne.n	80080ce <_strtol_l.constprop.0+0x92>
 8008070:	2601      	movs	r6, #1
 8008072:	782c      	ldrb	r4, [r5, #0]
 8008074:	1c95      	adds	r5, r2, #2
 8008076:	2b00      	cmp	r3, #0
 8008078:	d057      	beq.n	800812a <_strtol_l.constprop.0+0xee>
 800807a:	2b10      	cmp	r3, #16
 800807c:	d109      	bne.n	8008092 <_strtol_l.constprop.0+0x56>
 800807e:	2c30      	cmp	r4, #48	; 0x30
 8008080:	d107      	bne.n	8008092 <_strtol_l.constprop.0+0x56>
 8008082:	782a      	ldrb	r2, [r5, #0]
 8008084:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008088:	2a58      	cmp	r2, #88	; 0x58
 800808a:	d149      	bne.n	8008120 <_strtol_l.constprop.0+0xe4>
 800808c:	2310      	movs	r3, #16
 800808e:	786c      	ldrb	r4, [r5, #1]
 8008090:	3502      	adds	r5, #2
 8008092:	2200      	movs	r2, #0
 8008094:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8008098:	f10c 3cff 	add.w	ip, ip, #4294967295
 800809c:	fbbc f9f3 	udiv	r9, ip, r3
 80080a0:	4610      	mov	r0, r2
 80080a2:	fb03 ca19 	mls	sl, r3, r9, ip
 80080a6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80080aa:	2f09      	cmp	r7, #9
 80080ac:	d814      	bhi.n	80080d8 <_strtol_l.constprop.0+0x9c>
 80080ae:	463c      	mov	r4, r7
 80080b0:	42a3      	cmp	r3, r4
 80080b2:	dd20      	ble.n	80080f6 <_strtol_l.constprop.0+0xba>
 80080b4:	1c57      	adds	r7, r2, #1
 80080b6:	d007      	beq.n	80080c8 <_strtol_l.constprop.0+0x8c>
 80080b8:	4581      	cmp	r9, r0
 80080ba:	d319      	bcc.n	80080f0 <_strtol_l.constprop.0+0xb4>
 80080bc:	d101      	bne.n	80080c2 <_strtol_l.constprop.0+0x86>
 80080be:	45a2      	cmp	sl, r4
 80080c0:	db16      	blt.n	80080f0 <_strtol_l.constprop.0+0xb4>
 80080c2:	2201      	movs	r2, #1
 80080c4:	fb00 4003 	mla	r0, r0, r3, r4
 80080c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080cc:	e7eb      	b.n	80080a6 <_strtol_l.constprop.0+0x6a>
 80080ce:	2c2b      	cmp	r4, #43	; 0x2b
 80080d0:	bf04      	itt	eq
 80080d2:	782c      	ldrbeq	r4, [r5, #0]
 80080d4:	1c95      	addeq	r5, r2, #2
 80080d6:	e7ce      	b.n	8008076 <_strtol_l.constprop.0+0x3a>
 80080d8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80080dc:	2f19      	cmp	r7, #25
 80080de:	d801      	bhi.n	80080e4 <_strtol_l.constprop.0+0xa8>
 80080e0:	3c37      	subs	r4, #55	; 0x37
 80080e2:	e7e5      	b.n	80080b0 <_strtol_l.constprop.0+0x74>
 80080e4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80080e8:	2f19      	cmp	r7, #25
 80080ea:	d804      	bhi.n	80080f6 <_strtol_l.constprop.0+0xba>
 80080ec:	3c57      	subs	r4, #87	; 0x57
 80080ee:	e7df      	b.n	80080b0 <_strtol_l.constprop.0+0x74>
 80080f0:	f04f 32ff 	mov.w	r2, #4294967295
 80080f4:	e7e8      	b.n	80080c8 <_strtol_l.constprop.0+0x8c>
 80080f6:	1c53      	adds	r3, r2, #1
 80080f8:	d108      	bne.n	800810c <_strtol_l.constprop.0+0xd0>
 80080fa:	2322      	movs	r3, #34	; 0x22
 80080fc:	4660      	mov	r0, ip
 80080fe:	f8ce 3000 	str.w	r3, [lr]
 8008102:	f1b8 0f00 	cmp.w	r8, #0
 8008106:	d0a6      	beq.n	8008056 <_strtol_l.constprop.0+0x1a>
 8008108:	1e69      	subs	r1, r5, #1
 800810a:	e006      	b.n	800811a <_strtol_l.constprop.0+0xde>
 800810c:	b106      	cbz	r6, 8008110 <_strtol_l.constprop.0+0xd4>
 800810e:	4240      	negs	r0, r0
 8008110:	f1b8 0f00 	cmp.w	r8, #0
 8008114:	d09f      	beq.n	8008056 <_strtol_l.constprop.0+0x1a>
 8008116:	2a00      	cmp	r2, #0
 8008118:	d1f6      	bne.n	8008108 <_strtol_l.constprop.0+0xcc>
 800811a:	f8c8 1000 	str.w	r1, [r8]
 800811e:	e79a      	b.n	8008056 <_strtol_l.constprop.0+0x1a>
 8008120:	2430      	movs	r4, #48	; 0x30
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1b5      	bne.n	8008092 <_strtol_l.constprop.0+0x56>
 8008126:	2308      	movs	r3, #8
 8008128:	e7b3      	b.n	8008092 <_strtol_l.constprop.0+0x56>
 800812a:	2c30      	cmp	r4, #48	; 0x30
 800812c:	d0a9      	beq.n	8008082 <_strtol_l.constprop.0+0x46>
 800812e:	230a      	movs	r3, #10
 8008130:	e7af      	b.n	8008092 <_strtol_l.constprop.0+0x56>
 8008132:	bf00      	nop
 8008134:	080095e1 	.word	0x080095e1

08008138 <_strtol_r>:
 8008138:	f7ff bf80 	b.w	800803c <_strtol_l.constprop.0>

0800813c <__ssputs_r>:
 800813c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008140:	461f      	mov	r7, r3
 8008142:	688e      	ldr	r6, [r1, #8]
 8008144:	4682      	mov	sl, r0
 8008146:	42be      	cmp	r6, r7
 8008148:	460c      	mov	r4, r1
 800814a:	4690      	mov	r8, r2
 800814c:	680b      	ldr	r3, [r1, #0]
 800814e:	d82c      	bhi.n	80081aa <__ssputs_r+0x6e>
 8008150:	898a      	ldrh	r2, [r1, #12]
 8008152:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008156:	d026      	beq.n	80081a6 <__ssputs_r+0x6a>
 8008158:	6965      	ldr	r5, [r4, #20]
 800815a:	6909      	ldr	r1, [r1, #16]
 800815c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008160:	eba3 0901 	sub.w	r9, r3, r1
 8008164:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008168:	1c7b      	adds	r3, r7, #1
 800816a:	444b      	add	r3, r9
 800816c:	106d      	asrs	r5, r5, #1
 800816e:	429d      	cmp	r5, r3
 8008170:	bf38      	it	cc
 8008172:	461d      	movcc	r5, r3
 8008174:	0553      	lsls	r3, r2, #21
 8008176:	d527      	bpl.n	80081c8 <__ssputs_r+0x8c>
 8008178:	4629      	mov	r1, r5
 800817a:	f7fe fc19 	bl	80069b0 <_malloc_r>
 800817e:	4606      	mov	r6, r0
 8008180:	b360      	cbz	r0, 80081dc <__ssputs_r+0xa0>
 8008182:	464a      	mov	r2, r9
 8008184:	6921      	ldr	r1, [r4, #16]
 8008186:	f000 fa17 	bl	80085b8 <memcpy>
 800818a:	89a3      	ldrh	r3, [r4, #12]
 800818c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008194:	81a3      	strh	r3, [r4, #12]
 8008196:	6126      	str	r6, [r4, #16]
 8008198:	444e      	add	r6, r9
 800819a:	6026      	str	r6, [r4, #0]
 800819c:	463e      	mov	r6, r7
 800819e:	6165      	str	r5, [r4, #20]
 80081a0:	eba5 0509 	sub.w	r5, r5, r9
 80081a4:	60a5      	str	r5, [r4, #8]
 80081a6:	42be      	cmp	r6, r7
 80081a8:	d900      	bls.n	80081ac <__ssputs_r+0x70>
 80081aa:	463e      	mov	r6, r7
 80081ac:	4632      	mov	r2, r6
 80081ae:	4641      	mov	r1, r8
 80081b0:	6820      	ldr	r0, [r4, #0]
 80081b2:	f000 f9c5 	bl	8008540 <memmove>
 80081b6:	2000      	movs	r0, #0
 80081b8:	68a3      	ldr	r3, [r4, #8]
 80081ba:	1b9b      	subs	r3, r3, r6
 80081bc:	60a3      	str	r3, [r4, #8]
 80081be:	6823      	ldr	r3, [r4, #0]
 80081c0:	4433      	add	r3, r6
 80081c2:	6023      	str	r3, [r4, #0]
 80081c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081c8:	462a      	mov	r2, r5
 80081ca:	f000 fda6 	bl	8008d1a <_realloc_r>
 80081ce:	4606      	mov	r6, r0
 80081d0:	2800      	cmp	r0, #0
 80081d2:	d1e0      	bne.n	8008196 <__ssputs_r+0x5a>
 80081d4:	4650      	mov	r0, sl
 80081d6:	6921      	ldr	r1, [r4, #16]
 80081d8:	f7fe fb7a 	bl	80068d0 <_free_r>
 80081dc:	230c      	movs	r3, #12
 80081de:	f8ca 3000 	str.w	r3, [sl]
 80081e2:	89a3      	ldrh	r3, [r4, #12]
 80081e4:	f04f 30ff 	mov.w	r0, #4294967295
 80081e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081ec:	81a3      	strh	r3, [r4, #12]
 80081ee:	e7e9      	b.n	80081c4 <__ssputs_r+0x88>

080081f0 <_svfiprintf_r>:
 80081f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f4:	4698      	mov	r8, r3
 80081f6:	898b      	ldrh	r3, [r1, #12]
 80081f8:	4607      	mov	r7, r0
 80081fa:	061b      	lsls	r3, r3, #24
 80081fc:	460d      	mov	r5, r1
 80081fe:	4614      	mov	r4, r2
 8008200:	b09d      	sub	sp, #116	; 0x74
 8008202:	d50e      	bpl.n	8008222 <_svfiprintf_r+0x32>
 8008204:	690b      	ldr	r3, [r1, #16]
 8008206:	b963      	cbnz	r3, 8008222 <_svfiprintf_r+0x32>
 8008208:	2140      	movs	r1, #64	; 0x40
 800820a:	f7fe fbd1 	bl	80069b0 <_malloc_r>
 800820e:	6028      	str	r0, [r5, #0]
 8008210:	6128      	str	r0, [r5, #16]
 8008212:	b920      	cbnz	r0, 800821e <_svfiprintf_r+0x2e>
 8008214:	230c      	movs	r3, #12
 8008216:	603b      	str	r3, [r7, #0]
 8008218:	f04f 30ff 	mov.w	r0, #4294967295
 800821c:	e0d0      	b.n	80083c0 <_svfiprintf_r+0x1d0>
 800821e:	2340      	movs	r3, #64	; 0x40
 8008220:	616b      	str	r3, [r5, #20]
 8008222:	2300      	movs	r3, #0
 8008224:	9309      	str	r3, [sp, #36]	; 0x24
 8008226:	2320      	movs	r3, #32
 8008228:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800822c:	2330      	movs	r3, #48	; 0x30
 800822e:	f04f 0901 	mov.w	r9, #1
 8008232:	f8cd 800c 	str.w	r8, [sp, #12]
 8008236:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80083d8 <_svfiprintf_r+0x1e8>
 800823a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800823e:	4623      	mov	r3, r4
 8008240:	469a      	mov	sl, r3
 8008242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008246:	b10a      	cbz	r2, 800824c <_svfiprintf_r+0x5c>
 8008248:	2a25      	cmp	r2, #37	; 0x25
 800824a:	d1f9      	bne.n	8008240 <_svfiprintf_r+0x50>
 800824c:	ebba 0b04 	subs.w	fp, sl, r4
 8008250:	d00b      	beq.n	800826a <_svfiprintf_r+0x7a>
 8008252:	465b      	mov	r3, fp
 8008254:	4622      	mov	r2, r4
 8008256:	4629      	mov	r1, r5
 8008258:	4638      	mov	r0, r7
 800825a:	f7ff ff6f 	bl	800813c <__ssputs_r>
 800825e:	3001      	adds	r0, #1
 8008260:	f000 80a9 	beq.w	80083b6 <_svfiprintf_r+0x1c6>
 8008264:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008266:	445a      	add	r2, fp
 8008268:	9209      	str	r2, [sp, #36]	; 0x24
 800826a:	f89a 3000 	ldrb.w	r3, [sl]
 800826e:	2b00      	cmp	r3, #0
 8008270:	f000 80a1 	beq.w	80083b6 <_svfiprintf_r+0x1c6>
 8008274:	2300      	movs	r3, #0
 8008276:	f04f 32ff 	mov.w	r2, #4294967295
 800827a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800827e:	f10a 0a01 	add.w	sl, sl, #1
 8008282:	9304      	str	r3, [sp, #16]
 8008284:	9307      	str	r3, [sp, #28]
 8008286:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800828a:	931a      	str	r3, [sp, #104]	; 0x68
 800828c:	4654      	mov	r4, sl
 800828e:	2205      	movs	r2, #5
 8008290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008294:	4850      	ldr	r0, [pc, #320]	; (80083d8 <_svfiprintf_r+0x1e8>)
 8008296:	f7fd fc98 	bl	8005bca <memchr>
 800829a:	9a04      	ldr	r2, [sp, #16]
 800829c:	b9d8      	cbnz	r0, 80082d6 <_svfiprintf_r+0xe6>
 800829e:	06d0      	lsls	r0, r2, #27
 80082a0:	bf44      	itt	mi
 80082a2:	2320      	movmi	r3, #32
 80082a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082a8:	0711      	lsls	r1, r2, #28
 80082aa:	bf44      	itt	mi
 80082ac:	232b      	movmi	r3, #43	; 0x2b
 80082ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082b2:	f89a 3000 	ldrb.w	r3, [sl]
 80082b6:	2b2a      	cmp	r3, #42	; 0x2a
 80082b8:	d015      	beq.n	80082e6 <_svfiprintf_r+0xf6>
 80082ba:	4654      	mov	r4, sl
 80082bc:	2000      	movs	r0, #0
 80082be:	f04f 0c0a 	mov.w	ip, #10
 80082c2:	9a07      	ldr	r2, [sp, #28]
 80082c4:	4621      	mov	r1, r4
 80082c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082ca:	3b30      	subs	r3, #48	; 0x30
 80082cc:	2b09      	cmp	r3, #9
 80082ce:	d94d      	bls.n	800836c <_svfiprintf_r+0x17c>
 80082d0:	b1b0      	cbz	r0, 8008300 <_svfiprintf_r+0x110>
 80082d2:	9207      	str	r2, [sp, #28]
 80082d4:	e014      	b.n	8008300 <_svfiprintf_r+0x110>
 80082d6:	eba0 0308 	sub.w	r3, r0, r8
 80082da:	fa09 f303 	lsl.w	r3, r9, r3
 80082de:	4313      	orrs	r3, r2
 80082e0:	46a2      	mov	sl, r4
 80082e2:	9304      	str	r3, [sp, #16]
 80082e4:	e7d2      	b.n	800828c <_svfiprintf_r+0x9c>
 80082e6:	9b03      	ldr	r3, [sp, #12]
 80082e8:	1d19      	adds	r1, r3, #4
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	9103      	str	r1, [sp, #12]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	bfbb      	ittet	lt
 80082f2:	425b      	neglt	r3, r3
 80082f4:	f042 0202 	orrlt.w	r2, r2, #2
 80082f8:	9307      	strge	r3, [sp, #28]
 80082fa:	9307      	strlt	r3, [sp, #28]
 80082fc:	bfb8      	it	lt
 80082fe:	9204      	strlt	r2, [sp, #16]
 8008300:	7823      	ldrb	r3, [r4, #0]
 8008302:	2b2e      	cmp	r3, #46	; 0x2e
 8008304:	d10c      	bne.n	8008320 <_svfiprintf_r+0x130>
 8008306:	7863      	ldrb	r3, [r4, #1]
 8008308:	2b2a      	cmp	r3, #42	; 0x2a
 800830a:	d134      	bne.n	8008376 <_svfiprintf_r+0x186>
 800830c:	9b03      	ldr	r3, [sp, #12]
 800830e:	3402      	adds	r4, #2
 8008310:	1d1a      	adds	r2, r3, #4
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	9203      	str	r2, [sp, #12]
 8008316:	2b00      	cmp	r3, #0
 8008318:	bfb8      	it	lt
 800831a:	f04f 33ff 	movlt.w	r3, #4294967295
 800831e:	9305      	str	r3, [sp, #20]
 8008320:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80083dc <_svfiprintf_r+0x1ec>
 8008324:	2203      	movs	r2, #3
 8008326:	4650      	mov	r0, sl
 8008328:	7821      	ldrb	r1, [r4, #0]
 800832a:	f7fd fc4e 	bl	8005bca <memchr>
 800832e:	b138      	cbz	r0, 8008340 <_svfiprintf_r+0x150>
 8008330:	2240      	movs	r2, #64	; 0x40
 8008332:	9b04      	ldr	r3, [sp, #16]
 8008334:	eba0 000a 	sub.w	r0, r0, sl
 8008338:	4082      	lsls	r2, r0
 800833a:	4313      	orrs	r3, r2
 800833c:	3401      	adds	r4, #1
 800833e:	9304      	str	r3, [sp, #16]
 8008340:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008344:	2206      	movs	r2, #6
 8008346:	4826      	ldr	r0, [pc, #152]	; (80083e0 <_svfiprintf_r+0x1f0>)
 8008348:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800834c:	f7fd fc3d 	bl	8005bca <memchr>
 8008350:	2800      	cmp	r0, #0
 8008352:	d038      	beq.n	80083c6 <_svfiprintf_r+0x1d6>
 8008354:	4b23      	ldr	r3, [pc, #140]	; (80083e4 <_svfiprintf_r+0x1f4>)
 8008356:	bb1b      	cbnz	r3, 80083a0 <_svfiprintf_r+0x1b0>
 8008358:	9b03      	ldr	r3, [sp, #12]
 800835a:	3307      	adds	r3, #7
 800835c:	f023 0307 	bic.w	r3, r3, #7
 8008360:	3308      	adds	r3, #8
 8008362:	9303      	str	r3, [sp, #12]
 8008364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008366:	4433      	add	r3, r6
 8008368:	9309      	str	r3, [sp, #36]	; 0x24
 800836a:	e768      	b.n	800823e <_svfiprintf_r+0x4e>
 800836c:	460c      	mov	r4, r1
 800836e:	2001      	movs	r0, #1
 8008370:	fb0c 3202 	mla	r2, ip, r2, r3
 8008374:	e7a6      	b.n	80082c4 <_svfiprintf_r+0xd4>
 8008376:	2300      	movs	r3, #0
 8008378:	f04f 0c0a 	mov.w	ip, #10
 800837c:	4619      	mov	r1, r3
 800837e:	3401      	adds	r4, #1
 8008380:	9305      	str	r3, [sp, #20]
 8008382:	4620      	mov	r0, r4
 8008384:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008388:	3a30      	subs	r2, #48	; 0x30
 800838a:	2a09      	cmp	r2, #9
 800838c:	d903      	bls.n	8008396 <_svfiprintf_r+0x1a6>
 800838e:	2b00      	cmp	r3, #0
 8008390:	d0c6      	beq.n	8008320 <_svfiprintf_r+0x130>
 8008392:	9105      	str	r1, [sp, #20]
 8008394:	e7c4      	b.n	8008320 <_svfiprintf_r+0x130>
 8008396:	4604      	mov	r4, r0
 8008398:	2301      	movs	r3, #1
 800839a:	fb0c 2101 	mla	r1, ip, r1, r2
 800839e:	e7f0      	b.n	8008382 <_svfiprintf_r+0x192>
 80083a0:	ab03      	add	r3, sp, #12
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	462a      	mov	r2, r5
 80083a6:	4638      	mov	r0, r7
 80083a8:	4b0f      	ldr	r3, [pc, #60]	; (80083e8 <_svfiprintf_r+0x1f8>)
 80083aa:	a904      	add	r1, sp, #16
 80083ac:	f7fc fc98 	bl	8004ce0 <_printf_float>
 80083b0:	1c42      	adds	r2, r0, #1
 80083b2:	4606      	mov	r6, r0
 80083b4:	d1d6      	bne.n	8008364 <_svfiprintf_r+0x174>
 80083b6:	89ab      	ldrh	r3, [r5, #12]
 80083b8:	065b      	lsls	r3, r3, #25
 80083ba:	f53f af2d 	bmi.w	8008218 <_svfiprintf_r+0x28>
 80083be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083c0:	b01d      	add	sp, #116	; 0x74
 80083c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c6:	ab03      	add	r3, sp, #12
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	462a      	mov	r2, r5
 80083cc:	4638      	mov	r0, r7
 80083ce:	4b06      	ldr	r3, [pc, #24]	; (80083e8 <_svfiprintf_r+0x1f8>)
 80083d0:	a904      	add	r1, sp, #16
 80083d2:	f7fc ff25 	bl	8005220 <_printf_i>
 80083d6:	e7eb      	b.n	80083b0 <_svfiprintf_r+0x1c0>
 80083d8:	080096e1 	.word	0x080096e1
 80083dc:	080096e7 	.word	0x080096e7
 80083e0:	080096eb 	.word	0x080096eb
 80083e4:	08004ce1 	.word	0x08004ce1
 80083e8:	0800813d 	.word	0x0800813d

080083ec <__sflush_r>:
 80083ec:	898a      	ldrh	r2, [r1, #12]
 80083ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f0:	4605      	mov	r5, r0
 80083f2:	0710      	lsls	r0, r2, #28
 80083f4:	460c      	mov	r4, r1
 80083f6:	d457      	bmi.n	80084a8 <__sflush_r+0xbc>
 80083f8:	684b      	ldr	r3, [r1, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	dc04      	bgt.n	8008408 <__sflush_r+0x1c>
 80083fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008400:	2b00      	cmp	r3, #0
 8008402:	dc01      	bgt.n	8008408 <__sflush_r+0x1c>
 8008404:	2000      	movs	r0, #0
 8008406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008408:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800840a:	2e00      	cmp	r6, #0
 800840c:	d0fa      	beq.n	8008404 <__sflush_r+0x18>
 800840e:	2300      	movs	r3, #0
 8008410:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008414:	682f      	ldr	r7, [r5, #0]
 8008416:	6a21      	ldr	r1, [r4, #32]
 8008418:	602b      	str	r3, [r5, #0]
 800841a:	d032      	beq.n	8008482 <__sflush_r+0x96>
 800841c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800841e:	89a3      	ldrh	r3, [r4, #12]
 8008420:	075a      	lsls	r2, r3, #29
 8008422:	d505      	bpl.n	8008430 <__sflush_r+0x44>
 8008424:	6863      	ldr	r3, [r4, #4]
 8008426:	1ac0      	subs	r0, r0, r3
 8008428:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800842a:	b10b      	cbz	r3, 8008430 <__sflush_r+0x44>
 800842c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800842e:	1ac0      	subs	r0, r0, r3
 8008430:	2300      	movs	r3, #0
 8008432:	4602      	mov	r2, r0
 8008434:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008436:	4628      	mov	r0, r5
 8008438:	6a21      	ldr	r1, [r4, #32]
 800843a:	47b0      	blx	r6
 800843c:	1c43      	adds	r3, r0, #1
 800843e:	89a3      	ldrh	r3, [r4, #12]
 8008440:	d106      	bne.n	8008450 <__sflush_r+0x64>
 8008442:	6829      	ldr	r1, [r5, #0]
 8008444:	291d      	cmp	r1, #29
 8008446:	d82b      	bhi.n	80084a0 <__sflush_r+0xb4>
 8008448:	4a28      	ldr	r2, [pc, #160]	; (80084ec <__sflush_r+0x100>)
 800844a:	410a      	asrs	r2, r1
 800844c:	07d6      	lsls	r6, r2, #31
 800844e:	d427      	bmi.n	80084a0 <__sflush_r+0xb4>
 8008450:	2200      	movs	r2, #0
 8008452:	6062      	str	r2, [r4, #4]
 8008454:	6922      	ldr	r2, [r4, #16]
 8008456:	04d9      	lsls	r1, r3, #19
 8008458:	6022      	str	r2, [r4, #0]
 800845a:	d504      	bpl.n	8008466 <__sflush_r+0x7a>
 800845c:	1c42      	adds	r2, r0, #1
 800845e:	d101      	bne.n	8008464 <__sflush_r+0x78>
 8008460:	682b      	ldr	r3, [r5, #0]
 8008462:	b903      	cbnz	r3, 8008466 <__sflush_r+0x7a>
 8008464:	6560      	str	r0, [r4, #84]	; 0x54
 8008466:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008468:	602f      	str	r7, [r5, #0]
 800846a:	2900      	cmp	r1, #0
 800846c:	d0ca      	beq.n	8008404 <__sflush_r+0x18>
 800846e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008472:	4299      	cmp	r1, r3
 8008474:	d002      	beq.n	800847c <__sflush_r+0x90>
 8008476:	4628      	mov	r0, r5
 8008478:	f7fe fa2a 	bl	80068d0 <_free_r>
 800847c:	2000      	movs	r0, #0
 800847e:	6360      	str	r0, [r4, #52]	; 0x34
 8008480:	e7c1      	b.n	8008406 <__sflush_r+0x1a>
 8008482:	2301      	movs	r3, #1
 8008484:	4628      	mov	r0, r5
 8008486:	47b0      	blx	r6
 8008488:	1c41      	adds	r1, r0, #1
 800848a:	d1c8      	bne.n	800841e <__sflush_r+0x32>
 800848c:	682b      	ldr	r3, [r5, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d0c5      	beq.n	800841e <__sflush_r+0x32>
 8008492:	2b1d      	cmp	r3, #29
 8008494:	d001      	beq.n	800849a <__sflush_r+0xae>
 8008496:	2b16      	cmp	r3, #22
 8008498:	d101      	bne.n	800849e <__sflush_r+0xb2>
 800849a:	602f      	str	r7, [r5, #0]
 800849c:	e7b2      	b.n	8008404 <__sflush_r+0x18>
 800849e:	89a3      	ldrh	r3, [r4, #12]
 80084a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084a4:	81a3      	strh	r3, [r4, #12]
 80084a6:	e7ae      	b.n	8008406 <__sflush_r+0x1a>
 80084a8:	690f      	ldr	r7, [r1, #16]
 80084aa:	2f00      	cmp	r7, #0
 80084ac:	d0aa      	beq.n	8008404 <__sflush_r+0x18>
 80084ae:	0793      	lsls	r3, r2, #30
 80084b0:	bf18      	it	ne
 80084b2:	2300      	movne	r3, #0
 80084b4:	680e      	ldr	r6, [r1, #0]
 80084b6:	bf08      	it	eq
 80084b8:	694b      	ldreq	r3, [r1, #20]
 80084ba:	1bf6      	subs	r6, r6, r7
 80084bc:	600f      	str	r7, [r1, #0]
 80084be:	608b      	str	r3, [r1, #8]
 80084c0:	2e00      	cmp	r6, #0
 80084c2:	dd9f      	ble.n	8008404 <__sflush_r+0x18>
 80084c4:	4633      	mov	r3, r6
 80084c6:	463a      	mov	r2, r7
 80084c8:	4628      	mov	r0, r5
 80084ca:	6a21      	ldr	r1, [r4, #32]
 80084cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80084d0:	47e0      	blx	ip
 80084d2:	2800      	cmp	r0, #0
 80084d4:	dc06      	bgt.n	80084e4 <__sflush_r+0xf8>
 80084d6:	89a3      	ldrh	r3, [r4, #12]
 80084d8:	f04f 30ff 	mov.w	r0, #4294967295
 80084dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084e0:	81a3      	strh	r3, [r4, #12]
 80084e2:	e790      	b.n	8008406 <__sflush_r+0x1a>
 80084e4:	4407      	add	r7, r0
 80084e6:	1a36      	subs	r6, r6, r0
 80084e8:	e7ea      	b.n	80084c0 <__sflush_r+0xd4>
 80084ea:	bf00      	nop
 80084ec:	dfbffffe 	.word	0xdfbffffe

080084f0 <_fflush_r>:
 80084f0:	b538      	push	{r3, r4, r5, lr}
 80084f2:	690b      	ldr	r3, [r1, #16]
 80084f4:	4605      	mov	r5, r0
 80084f6:	460c      	mov	r4, r1
 80084f8:	b913      	cbnz	r3, 8008500 <_fflush_r+0x10>
 80084fa:	2500      	movs	r5, #0
 80084fc:	4628      	mov	r0, r5
 80084fe:	bd38      	pop	{r3, r4, r5, pc}
 8008500:	b118      	cbz	r0, 800850a <_fflush_r+0x1a>
 8008502:	6a03      	ldr	r3, [r0, #32]
 8008504:	b90b      	cbnz	r3, 800850a <_fflush_r+0x1a>
 8008506:	f7fd fa47 	bl	8005998 <__sinit>
 800850a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d0f3      	beq.n	80084fa <_fflush_r+0xa>
 8008512:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008514:	07d0      	lsls	r0, r2, #31
 8008516:	d404      	bmi.n	8008522 <_fflush_r+0x32>
 8008518:	0599      	lsls	r1, r3, #22
 800851a:	d402      	bmi.n	8008522 <_fflush_r+0x32>
 800851c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800851e:	f7fd fb52 	bl	8005bc6 <__retarget_lock_acquire_recursive>
 8008522:	4628      	mov	r0, r5
 8008524:	4621      	mov	r1, r4
 8008526:	f7ff ff61 	bl	80083ec <__sflush_r>
 800852a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800852c:	4605      	mov	r5, r0
 800852e:	07da      	lsls	r2, r3, #31
 8008530:	d4e4      	bmi.n	80084fc <_fflush_r+0xc>
 8008532:	89a3      	ldrh	r3, [r4, #12]
 8008534:	059b      	lsls	r3, r3, #22
 8008536:	d4e1      	bmi.n	80084fc <_fflush_r+0xc>
 8008538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800853a:	f7fd fb45 	bl	8005bc8 <__retarget_lock_release_recursive>
 800853e:	e7dd      	b.n	80084fc <_fflush_r+0xc>

08008540 <memmove>:
 8008540:	4288      	cmp	r0, r1
 8008542:	b510      	push	{r4, lr}
 8008544:	eb01 0402 	add.w	r4, r1, r2
 8008548:	d902      	bls.n	8008550 <memmove+0x10>
 800854a:	4284      	cmp	r4, r0
 800854c:	4623      	mov	r3, r4
 800854e:	d807      	bhi.n	8008560 <memmove+0x20>
 8008550:	1e43      	subs	r3, r0, #1
 8008552:	42a1      	cmp	r1, r4
 8008554:	d008      	beq.n	8008568 <memmove+0x28>
 8008556:	f811 2b01 	ldrb.w	r2, [r1], #1
 800855a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800855e:	e7f8      	b.n	8008552 <memmove+0x12>
 8008560:	4601      	mov	r1, r0
 8008562:	4402      	add	r2, r0
 8008564:	428a      	cmp	r2, r1
 8008566:	d100      	bne.n	800856a <memmove+0x2a>
 8008568:	bd10      	pop	{r4, pc}
 800856a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800856e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008572:	e7f7      	b.n	8008564 <memmove+0x24>

08008574 <strncmp>:
 8008574:	b510      	push	{r4, lr}
 8008576:	b16a      	cbz	r2, 8008594 <strncmp+0x20>
 8008578:	3901      	subs	r1, #1
 800857a:	1884      	adds	r4, r0, r2
 800857c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008580:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008584:	429a      	cmp	r2, r3
 8008586:	d103      	bne.n	8008590 <strncmp+0x1c>
 8008588:	42a0      	cmp	r0, r4
 800858a:	d001      	beq.n	8008590 <strncmp+0x1c>
 800858c:	2a00      	cmp	r2, #0
 800858e:	d1f5      	bne.n	800857c <strncmp+0x8>
 8008590:	1ad0      	subs	r0, r2, r3
 8008592:	bd10      	pop	{r4, pc}
 8008594:	4610      	mov	r0, r2
 8008596:	e7fc      	b.n	8008592 <strncmp+0x1e>

08008598 <_sbrk_r>:
 8008598:	b538      	push	{r3, r4, r5, lr}
 800859a:	2300      	movs	r3, #0
 800859c:	4d05      	ldr	r5, [pc, #20]	; (80085b4 <_sbrk_r+0x1c>)
 800859e:	4604      	mov	r4, r0
 80085a0:	4608      	mov	r0, r1
 80085a2:	602b      	str	r3, [r5, #0]
 80085a4:	f7f9 fd00 	bl	8001fa8 <_sbrk>
 80085a8:	1c43      	adds	r3, r0, #1
 80085aa:	d102      	bne.n	80085b2 <_sbrk_r+0x1a>
 80085ac:	682b      	ldr	r3, [r5, #0]
 80085ae:	b103      	cbz	r3, 80085b2 <_sbrk_r+0x1a>
 80085b0:	6023      	str	r3, [r4, #0]
 80085b2:	bd38      	pop	{r3, r4, r5, pc}
 80085b4:	200004a0 	.word	0x200004a0

080085b8 <memcpy>:
 80085b8:	440a      	add	r2, r1
 80085ba:	4291      	cmp	r1, r2
 80085bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80085c0:	d100      	bne.n	80085c4 <memcpy+0xc>
 80085c2:	4770      	bx	lr
 80085c4:	b510      	push	{r4, lr}
 80085c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085ca:	4291      	cmp	r1, r2
 80085cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085d0:	d1f9      	bne.n	80085c6 <memcpy+0xe>
 80085d2:	bd10      	pop	{r4, pc}

080085d4 <nan>:
 80085d4:	2000      	movs	r0, #0
 80085d6:	4901      	ldr	r1, [pc, #4]	; (80085dc <nan+0x8>)
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	7ff80000 	.word	0x7ff80000

080085e0 <__assert_func>:
 80085e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085e2:	4614      	mov	r4, r2
 80085e4:	461a      	mov	r2, r3
 80085e6:	4b09      	ldr	r3, [pc, #36]	; (800860c <__assert_func+0x2c>)
 80085e8:	4605      	mov	r5, r0
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	68d8      	ldr	r0, [r3, #12]
 80085ee:	b14c      	cbz	r4, 8008604 <__assert_func+0x24>
 80085f0:	4b07      	ldr	r3, [pc, #28]	; (8008610 <__assert_func+0x30>)
 80085f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80085f6:	9100      	str	r1, [sp, #0]
 80085f8:	462b      	mov	r3, r5
 80085fa:	4906      	ldr	r1, [pc, #24]	; (8008614 <__assert_func+0x34>)
 80085fc:	f000 fbca 	bl	8008d94 <fiprintf>
 8008600:	f000 fbda 	bl	8008db8 <abort>
 8008604:	4b04      	ldr	r3, [pc, #16]	; (8008618 <__assert_func+0x38>)
 8008606:	461c      	mov	r4, r3
 8008608:	e7f3      	b.n	80085f2 <__assert_func+0x12>
 800860a:	bf00      	nop
 800860c:	2000006c 	.word	0x2000006c
 8008610:	080096fa 	.word	0x080096fa
 8008614:	08009707 	.word	0x08009707
 8008618:	08009735 	.word	0x08009735

0800861c <_calloc_r>:
 800861c:	b570      	push	{r4, r5, r6, lr}
 800861e:	fba1 5402 	umull	r5, r4, r1, r2
 8008622:	b934      	cbnz	r4, 8008632 <_calloc_r+0x16>
 8008624:	4629      	mov	r1, r5
 8008626:	f7fe f9c3 	bl	80069b0 <_malloc_r>
 800862a:	4606      	mov	r6, r0
 800862c:	b928      	cbnz	r0, 800863a <_calloc_r+0x1e>
 800862e:	4630      	mov	r0, r6
 8008630:	bd70      	pop	{r4, r5, r6, pc}
 8008632:	220c      	movs	r2, #12
 8008634:	2600      	movs	r6, #0
 8008636:	6002      	str	r2, [r0, #0]
 8008638:	e7f9      	b.n	800862e <_calloc_r+0x12>
 800863a:	462a      	mov	r2, r5
 800863c:	4621      	mov	r1, r4
 800863e:	f7fd fa44 	bl	8005aca <memset>
 8008642:	e7f4      	b.n	800862e <_calloc_r+0x12>

08008644 <rshift>:
 8008644:	6903      	ldr	r3, [r0, #16]
 8008646:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800864a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800864e:	f100 0414 	add.w	r4, r0, #20
 8008652:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008656:	dd46      	ble.n	80086e6 <rshift+0xa2>
 8008658:	f011 011f 	ands.w	r1, r1, #31
 800865c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008660:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008664:	d10c      	bne.n	8008680 <rshift+0x3c>
 8008666:	4629      	mov	r1, r5
 8008668:	f100 0710 	add.w	r7, r0, #16
 800866c:	42b1      	cmp	r1, r6
 800866e:	d335      	bcc.n	80086dc <rshift+0x98>
 8008670:	1a9b      	subs	r3, r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	1eea      	subs	r2, r5, #3
 8008676:	4296      	cmp	r6, r2
 8008678:	bf38      	it	cc
 800867a:	2300      	movcc	r3, #0
 800867c:	4423      	add	r3, r4
 800867e:	e015      	b.n	80086ac <rshift+0x68>
 8008680:	46a1      	mov	r9, r4
 8008682:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008686:	f1c1 0820 	rsb	r8, r1, #32
 800868a:	40cf      	lsrs	r7, r1
 800868c:	f105 0e04 	add.w	lr, r5, #4
 8008690:	4576      	cmp	r6, lr
 8008692:	46f4      	mov	ip, lr
 8008694:	d816      	bhi.n	80086c4 <rshift+0x80>
 8008696:	1a9a      	subs	r2, r3, r2
 8008698:	0092      	lsls	r2, r2, #2
 800869a:	3a04      	subs	r2, #4
 800869c:	3501      	adds	r5, #1
 800869e:	42ae      	cmp	r6, r5
 80086a0:	bf38      	it	cc
 80086a2:	2200      	movcc	r2, #0
 80086a4:	18a3      	adds	r3, r4, r2
 80086a6:	50a7      	str	r7, [r4, r2]
 80086a8:	b107      	cbz	r7, 80086ac <rshift+0x68>
 80086aa:	3304      	adds	r3, #4
 80086ac:	42a3      	cmp	r3, r4
 80086ae:	eba3 0204 	sub.w	r2, r3, r4
 80086b2:	bf08      	it	eq
 80086b4:	2300      	moveq	r3, #0
 80086b6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80086ba:	6102      	str	r2, [r0, #16]
 80086bc:	bf08      	it	eq
 80086be:	6143      	streq	r3, [r0, #20]
 80086c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086c4:	f8dc c000 	ldr.w	ip, [ip]
 80086c8:	fa0c fc08 	lsl.w	ip, ip, r8
 80086cc:	ea4c 0707 	orr.w	r7, ip, r7
 80086d0:	f849 7b04 	str.w	r7, [r9], #4
 80086d4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80086d8:	40cf      	lsrs	r7, r1
 80086da:	e7d9      	b.n	8008690 <rshift+0x4c>
 80086dc:	f851 cb04 	ldr.w	ip, [r1], #4
 80086e0:	f847 cf04 	str.w	ip, [r7, #4]!
 80086e4:	e7c2      	b.n	800866c <rshift+0x28>
 80086e6:	4623      	mov	r3, r4
 80086e8:	e7e0      	b.n	80086ac <rshift+0x68>

080086ea <__hexdig_fun>:
 80086ea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80086ee:	2b09      	cmp	r3, #9
 80086f0:	d802      	bhi.n	80086f8 <__hexdig_fun+0xe>
 80086f2:	3820      	subs	r0, #32
 80086f4:	b2c0      	uxtb	r0, r0
 80086f6:	4770      	bx	lr
 80086f8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80086fc:	2b05      	cmp	r3, #5
 80086fe:	d801      	bhi.n	8008704 <__hexdig_fun+0x1a>
 8008700:	3847      	subs	r0, #71	; 0x47
 8008702:	e7f7      	b.n	80086f4 <__hexdig_fun+0xa>
 8008704:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008708:	2b05      	cmp	r3, #5
 800870a:	d801      	bhi.n	8008710 <__hexdig_fun+0x26>
 800870c:	3827      	subs	r0, #39	; 0x27
 800870e:	e7f1      	b.n	80086f4 <__hexdig_fun+0xa>
 8008710:	2000      	movs	r0, #0
 8008712:	4770      	bx	lr

08008714 <__gethex>:
 8008714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008718:	4681      	mov	r9, r0
 800871a:	468a      	mov	sl, r1
 800871c:	4617      	mov	r7, r2
 800871e:	680a      	ldr	r2, [r1, #0]
 8008720:	b085      	sub	sp, #20
 8008722:	f102 0b02 	add.w	fp, r2, #2
 8008726:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800872a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800872e:	9302      	str	r3, [sp, #8]
 8008730:	32fe      	adds	r2, #254	; 0xfe
 8008732:	eb02 030b 	add.w	r3, r2, fp
 8008736:	46d8      	mov	r8, fp
 8008738:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800873c:	9301      	str	r3, [sp, #4]
 800873e:	2830      	cmp	r0, #48	; 0x30
 8008740:	d0f7      	beq.n	8008732 <__gethex+0x1e>
 8008742:	f7ff ffd2 	bl	80086ea <__hexdig_fun>
 8008746:	4604      	mov	r4, r0
 8008748:	2800      	cmp	r0, #0
 800874a:	d138      	bne.n	80087be <__gethex+0xaa>
 800874c:	2201      	movs	r2, #1
 800874e:	4640      	mov	r0, r8
 8008750:	49a7      	ldr	r1, [pc, #668]	; (80089f0 <__gethex+0x2dc>)
 8008752:	f7ff ff0f 	bl	8008574 <strncmp>
 8008756:	4606      	mov	r6, r0
 8008758:	2800      	cmp	r0, #0
 800875a:	d169      	bne.n	8008830 <__gethex+0x11c>
 800875c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008760:	465d      	mov	r5, fp
 8008762:	f7ff ffc2 	bl	80086ea <__hexdig_fun>
 8008766:	2800      	cmp	r0, #0
 8008768:	d064      	beq.n	8008834 <__gethex+0x120>
 800876a:	465a      	mov	r2, fp
 800876c:	7810      	ldrb	r0, [r2, #0]
 800876e:	4690      	mov	r8, r2
 8008770:	2830      	cmp	r0, #48	; 0x30
 8008772:	f102 0201 	add.w	r2, r2, #1
 8008776:	d0f9      	beq.n	800876c <__gethex+0x58>
 8008778:	f7ff ffb7 	bl	80086ea <__hexdig_fun>
 800877c:	2301      	movs	r3, #1
 800877e:	fab0 f480 	clz	r4, r0
 8008782:	465e      	mov	r6, fp
 8008784:	0964      	lsrs	r4, r4, #5
 8008786:	9301      	str	r3, [sp, #4]
 8008788:	4642      	mov	r2, r8
 800878a:	4615      	mov	r5, r2
 800878c:	7828      	ldrb	r0, [r5, #0]
 800878e:	3201      	adds	r2, #1
 8008790:	f7ff ffab 	bl	80086ea <__hexdig_fun>
 8008794:	2800      	cmp	r0, #0
 8008796:	d1f8      	bne.n	800878a <__gethex+0x76>
 8008798:	2201      	movs	r2, #1
 800879a:	4628      	mov	r0, r5
 800879c:	4994      	ldr	r1, [pc, #592]	; (80089f0 <__gethex+0x2dc>)
 800879e:	f7ff fee9 	bl	8008574 <strncmp>
 80087a2:	b978      	cbnz	r0, 80087c4 <__gethex+0xb0>
 80087a4:	b946      	cbnz	r6, 80087b8 <__gethex+0xa4>
 80087a6:	1c6e      	adds	r6, r5, #1
 80087a8:	4632      	mov	r2, r6
 80087aa:	4615      	mov	r5, r2
 80087ac:	7828      	ldrb	r0, [r5, #0]
 80087ae:	3201      	adds	r2, #1
 80087b0:	f7ff ff9b 	bl	80086ea <__hexdig_fun>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	d1f8      	bne.n	80087aa <__gethex+0x96>
 80087b8:	1b73      	subs	r3, r6, r5
 80087ba:	009e      	lsls	r6, r3, #2
 80087bc:	e004      	b.n	80087c8 <__gethex+0xb4>
 80087be:	2400      	movs	r4, #0
 80087c0:	4626      	mov	r6, r4
 80087c2:	e7e1      	b.n	8008788 <__gethex+0x74>
 80087c4:	2e00      	cmp	r6, #0
 80087c6:	d1f7      	bne.n	80087b8 <__gethex+0xa4>
 80087c8:	782b      	ldrb	r3, [r5, #0]
 80087ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80087ce:	2b50      	cmp	r3, #80	; 0x50
 80087d0:	d13d      	bne.n	800884e <__gethex+0x13a>
 80087d2:	786b      	ldrb	r3, [r5, #1]
 80087d4:	2b2b      	cmp	r3, #43	; 0x2b
 80087d6:	d02f      	beq.n	8008838 <__gethex+0x124>
 80087d8:	2b2d      	cmp	r3, #45	; 0x2d
 80087da:	d031      	beq.n	8008840 <__gethex+0x12c>
 80087dc:	f04f 0b00 	mov.w	fp, #0
 80087e0:	1c69      	adds	r1, r5, #1
 80087e2:	7808      	ldrb	r0, [r1, #0]
 80087e4:	f7ff ff81 	bl	80086ea <__hexdig_fun>
 80087e8:	1e42      	subs	r2, r0, #1
 80087ea:	b2d2      	uxtb	r2, r2
 80087ec:	2a18      	cmp	r2, #24
 80087ee:	d82e      	bhi.n	800884e <__gethex+0x13a>
 80087f0:	f1a0 0210 	sub.w	r2, r0, #16
 80087f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80087f8:	f7ff ff77 	bl	80086ea <__hexdig_fun>
 80087fc:	f100 3cff 	add.w	ip, r0, #4294967295
 8008800:	fa5f fc8c 	uxtb.w	ip, ip
 8008804:	f1bc 0f18 	cmp.w	ip, #24
 8008808:	d91d      	bls.n	8008846 <__gethex+0x132>
 800880a:	f1bb 0f00 	cmp.w	fp, #0
 800880e:	d000      	beq.n	8008812 <__gethex+0xfe>
 8008810:	4252      	negs	r2, r2
 8008812:	4416      	add	r6, r2
 8008814:	f8ca 1000 	str.w	r1, [sl]
 8008818:	b1dc      	cbz	r4, 8008852 <__gethex+0x13e>
 800881a:	9b01      	ldr	r3, [sp, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	bf14      	ite	ne
 8008820:	f04f 0800 	movne.w	r8, #0
 8008824:	f04f 0806 	moveq.w	r8, #6
 8008828:	4640      	mov	r0, r8
 800882a:	b005      	add	sp, #20
 800882c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008830:	4645      	mov	r5, r8
 8008832:	4626      	mov	r6, r4
 8008834:	2401      	movs	r4, #1
 8008836:	e7c7      	b.n	80087c8 <__gethex+0xb4>
 8008838:	f04f 0b00 	mov.w	fp, #0
 800883c:	1ca9      	adds	r1, r5, #2
 800883e:	e7d0      	b.n	80087e2 <__gethex+0xce>
 8008840:	f04f 0b01 	mov.w	fp, #1
 8008844:	e7fa      	b.n	800883c <__gethex+0x128>
 8008846:	230a      	movs	r3, #10
 8008848:	fb03 0002 	mla	r0, r3, r2, r0
 800884c:	e7d0      	b.n	80087f0 <__gethex+0xdc>
 800884e:	4629      	mov	r1, r5
 8008850:	e7e0      	b.n	8008814 <__gethex+0x100>
 8008852:	4621      	mov	r1, r4
 8008854:	eba5 0308 	sub.w	r3, r5, r8
 8008858:	3b01      	subs	r3, #1
 800885a:	2b07      	cmp	r3, #7
 800885c:	dc0a      	bgt.n	8008874 <__gethex+0x160>
 800885e:	4648      	mov	r0, r9
 8008860:	f7fe f932 	bl	8006ac8 <_Balloc>
 8008864:	4604      	mov	r4, r0
 8008866:	b940      	cbnz	r0, 800887a <__gethex+0x166>
 8008868:	4602      	mov	r2, r0
 800886a:	21e4      	movs	r1, #228	; 0xe4
 800886c:	4b61      	ldr	r3, [pc, #388]	; (80089f4 <__gethex+0x2e0>)
 800886e:	4862      	ldr	r0, [pc, #392]	; (80089f8 <__gethex+0x2e4>)
 8008870:	f7ff feb6 	bl	80085e0 <__assert_func>
 8008874:	3101      	adds	r1, #1
 8008876:	105b      	asrs	r3, r3, #1
 8008878:	e7ef      	b.n	800885a <__gethex+0x146>
 800887a:	2300      	movs	r3, #0
 800887c:	469b      	mov	fp, r3
 800887e:	f100 0a14 	add.w	sl, r0, #20
 8008882:	f8cd a004 	str.w	sl, [sp, #4]
 8008886:	45a8      	cmp	r8, r5
 8008888:	d344      	bcc.n	8008914 <__gethex+0x200>
 800888a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800888e:	4658      	mov	r0, fp
 8008890:	f848 bb04 	str.w	fp, [r8], #4
 8008894:	eba8 080a 	sub.w	r8, r8, sl
 8008898:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800889c:	6122      	str	r2, [r4, #16]
 800889e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80088a2:	f7fe fa03 	bl	8006cac <__hi0bits>
 80088a6:	683d      	ldr	r5, [r7, #0]
 80088a8:	eba8 0800 	sub.w	r8, r8, r0
 80088ac:	45a8      	cmp	r8, r5
 80088ae:	dd59      	ble.n	8008964 <__gethex+0x250>
 80088b0:	eba8 0805 	sub.w	r8, r8, r5
 80088b4:	4641      	mov	r1, r8
 80088b6:	4620      	mov	r0, r4
 80088b8:	f7fe fd81 	bl	80073be <__any_on>
 80088bc:	4683      	mov	fp, r0
 80088be:	b1b8      	cbz	r0, 80088f0 <__gethex+0x1dc>
 80088c0:	f04f 0b01 	mov.w	fp, #1
 80088c4:	f108 33ff 	add.w	r3, r8, #4294967295
 80088c8:	1159      	asrs	r1, r3, #5
 80088ca:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80088ce:	f003 021f 	and.w	r2, r3, #31
 80088d2:	fa0b f202 	lsl.w	r2, fp, r2
 80088d6:	420a      	tst	r2, r1
 80088d8:	d00a      	beq.n	80088f0 <__gethex+0x1dc>
 80088da:	455b      	cmp	r3, fp
 80088dc:	dd06      	ble.n	80088ec <__gethex+0x1d8>
 80088de:	4620      	mov	r0, r4
 80088e0:	f1a8 0102 	sub.w	r1, r8, #2
 80088e4:	f7fe fd6b 	bl	80073be <__any_on>
 80088e8:	2800      	cmp	r0, #0
 80088ea:	d138      	bne.n	800895e <__gethex+0x24a>
 80088ec:	f04f 0b02 	mov.w	fp, #2
 80088f0:	4641      	mov	r1, r8
 80088f2:	4620      	mov	r0, r4
 80088f4:	f7ff fea6 	bl	8008644 <rshift>
 80088f8:	4446      	add	r6, r8
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	42b3      	cmp	r3, r6
 80088fe:	da41      	bge.n	8008984 <__gethex+0x270>
 8008900:	4621      	mov	r1, r4
 8008902:	4648      	mov	r0, r9
 8008904:	f7fe f920 	bl	8006b48 <_Bfree>
 8008908:	2300      	movs	r3, #0
 800890a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800890c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008910:	6013      	str	r3, [r2, #0]
 8008912:	e789      	b.n	8008828 <__gethex+0x114>
 8008914:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008918:	2a2e      	cmp	r2, #46	; 0x2e
 800891a:	d014      	beq.n	8008946 <__gethex+0x232>
 800891c:	2b20      	cmp	r3, #32
 800891e:	d106      	bne.n	800892e <__gethex+0x21a>
 8008920:	9b01      	ldr	r3, [sp, #4]
 8008922:	f843 bb04 	str.w	fp, [r3], #4
 8008926:	f04f 0b00 	mov.w	fp, #0
 800892a:	9301      	str	r3, [sp, #4]
 800892c:	465b      	mov	r3, fp
 800892e:	7828      	ldrb	r0, [r5, #0]
 8008930:	9303      	str	r3, [sp, #12]
 8008932:	f7ff feda 	bl	80086ea <__hexdig_fun>
 8008936:	9b03      	ldr	r3, [sp, #12]
 8008938:	f000 000f 	and.w	r0, r0, #15
 800893c:	4098      	lsls	r0, r3
 800893e:	ea4b 0b00 	orr.w	fp, fp, r0
 8008942:	3304      	adds	r3, #4
 8008944:	e79f      	b.n	8008886 <__gethex+0x172>
 8008946:	45a8      	cmp	r8, r5
 8008948:	d8e8      	bhi.n	800891c <__gethex+0x208>
 800894a:	2201      	movs	r2, #1
 800894c:	4628      	mov	r0, r5
 800894e:	4928      	ldr	r1, [pc, #160]	; (80089f0 <__gethex+0x2dc>)
 8008950:	9303      	str	r3, [sp, #12]
 8008952:	f7ff fe0f 	bl	8008574 <strncmp>
 8008956:	9b03      	ldr	r3, [sp, #12]
 8008958:	2800      	cmp	r0, #0
 800895a:	d1df      	bne.n	800891c <__gethex+0x208>
 800895c:	e793      	b.n	8008886 <__gethex+0x172>
 800895e:	f04f 0b03 	mov.w	fp, #3
 8008962:	e7c5      	b.n	80088f0 <__gethex+0x1dc>
 8008964:	da0b      	bge.n	800897e <__gethex+0x26a>
 8008966:	eba5 0808 	sub.w	r8, r5, r8
 800896a:	4621      	mov	r1, r4
 800896c:	4642      	mov	r2, r8
 800896e:	4648      	mov	r0, r9
 8008970:	f7fe fb02 	bl	8006f78 <__lshift>
 8008974:	4604      	mov	r4, r0
 8008976:	eba6 0608 	sub.w	r6, r6, r8
 800897a:	f100 0a14 	add.w	sl, r0, #20
 800897e:	f04f 0b00 	mov.w	fp, #0
 8008982:	e7ba      	b.n	80088fa <__gethex+0x1e6>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	42b3      	cmp	r3, r6
 8008988:	dd74      	ble.n	8008a74 <__gethex+0x360>
 800898a:	1b9e      	subs	r6, r3, r6
 800898c:	42b5      	cmp	r5, r6
 800898e:	dc35      	bgt.n	80089fc <__gethex+0x2e8>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2b02      	cmp	r3, #2
 8008994:	d023      	beq.n	80089de <__gethex+0x2ca>
 8008996:	2b03      	cmp	r3, #3
 8008998:	d025      	beq.n	80089e6 <__gethex+0x2d2>
 800899a:	2b01      	cmp	r3, #1
 800899c:	d115      	bne.n	80089ca <__gethex+0x2b6>
 800899e:	42b5      	cmp	r5, r6
 80089a0:	d113      	bne.n	80089ca <__gethex+0x2b6>
 80089a2:	2d01      	cmp	r5, #1
 80089a4:	d10b      	bne.n	80089be <__gethex+0x2aa>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	9a02      	ldr	r2, [sp, #8]
 80089aa:	f04f 0862 	mov.w	r8, #98	; 0x62
 80089ae:	6013      	str	r3, [r2, #0]
 80089b0:	2301      	movs	r3, #1
 80089b2:	6123      	str	r3, [r4, #16]
 80089b4:	f8ca 3000 	str.w	r3, [sl]
 80089b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089ba:	601c      	str	r4, [r3, #0]
 80089bc:	e734      	b.n	8008828 <__gethex+0x114>
 80089be:	4620      	mov	r0, r4
 80089c0:	1e69      	subs	r1, r5, #1
 80089c2:	f7fe fcfc 	bl	80073be <__any_on>
 80089c6:	2800      	cmp	r0, #0
 80089c8:	d1ed      	bne.n	80089a6 <__gethex+0x292>
 80089ca:	4621      	mov	r1, r4
 80089cc:	4648      	mov	r0, r9
 80089ce:	f7fe f8bb 	bl	8006b48 <_Bfree>
 80089d2:	2300      	movs	r3, #0
 80089d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089d6:	f04f 0850 	mov.w	r8, #80	; 0x50
 80089da:	6013      	str	r3, [r2, #0]
 80089dc:	e724      	b.n	8008828 <__gethex+0x114>
 80089de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1f2      	bne.n	80089ca <__gethex+0x2b6>
 80089e4:	e7df      	b.n	80089a6 <__gethex+0x292>
 80089e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1dc      	bne.n	80089a6 <__gethex+0x292>
 80089ec:	e7ed      	b.n	80089ca <__gethex+0x2b6>
 80089ee:	bf00      	nop
 80089f0:	0800958c 	.word	0x0800958c
 80089f4:	0800941f 	.word	0x0800941f
 80089f8:	08009736 	.word	0x08009736
 80089fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8008a00:	f1bb 0f00 	cmp.w	fp, #0
 8008a04:	d133      	bne.n	8008a6e <__gethex+0x35a>
 8008a06:	f1b8 0f00 	cmp.w	r8, #0
 8008a0a:	d004      	beq.n	8008a16 <__gethex+0x302>
 8008a0c:	4641      	mov	r1, r8
 8008a0e:	4620      	mov	r0, r4
 8008a10:	f7fe fcd5 	bl	80073be <__any_on>
 8008a14:	4683      	mov	fp, r0
 8008a16:	2301      	movs	r3, #1
 8008a18:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008a1c:	f008 081f 	and.w	r8, r8, #31
 8008a20:	fa03 f308 	lsl.w	r3, r3, r8
 8008a24:	f04f 0802 	mov.w	r8, #2
 8008a28:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008a2c:	4631      	mov	r1, r6
 8008a2e:	4213      	tst	r3, r2
 8008a30:	4620      	mov	r0, r4
 8008a32:	bf18      	it	ne
 8008a34:	f04b 0b02 	orrne.w	fp, fp, #2
 8008a38:	1bad      	subs	r5, r5, r6
 8008a3a:	f7ff fe03 	bl	8008644 <rshift>
 8008a3e:	687e      	ldr	r6, [r7, #4]
 8008a40:	f1bb 0f00 	cmp.w	fp, #0
 8008a44:	d04a      	beq.n	8008adc <__gethex+0x3c8>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	d016      	beq.n	8008a7a <__gethex+0x366>
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d018      	beq.n	8008a82 <__gethex+0x36e>
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d109      	bne.n	8008a68 <__gethex+0x354>
 8008a54:	f01b 0f02 	tst.w	fp, #2
 8008a58:	d006      	beq.n	8008a68 <__gethex+0x354>
 8008a5a:	f8da 3000 	ldr.w	r3, [sl]
 8008a5e:	ea4b 0b03 	orr.w	fp, fp, r3
 8008a62:	f01b 0f01 	tst.w	fp, #1
 8008a66:	d10f      	bne.n	8008a88 <__gethex+0x374>
 8008a68:	f048 0810 	orr.w	r8, r8, #16
 8008a6c:	e036      	b.n	8008adc <__gethex+0x3c8>
 8008a6e:	f04f 0b01 	mov.w	fp, #1
 8008a72:	e7d0      	b.n	8008a16 <__gethex+0x302>
 8008a74:	f04f 0801 	mov.w	r8, #1
 8008a78:	e7e2      	b.n	8008a40 <__gethex+0x32c>
 8008a7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a7c:	f1c3 0301 	rsb	r3, r3, #1
 8008a80:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d0ef      	beq.n	8008a68 <__gethex+0x354>
 8008a88:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008a8c:	f104 0214 	add.w	r2, r4, #20
 8008a90:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008a94:	9301      	str	r3, [sp, #4]
 8008a96:	2300      	movs	r3, #0
 8008a98:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008a9c:	4694      	mov	ip, r2
 8008a9e:	f852 1b04 	ldr.w	r1, [r2], #4
 8008aa2:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008aa6:	d01e      	beq.n	8008ae6 <__gethex+0x3d2>
 8008aa8:	3101      	adds	r1, #1
 8008aaa:	f8cc 1000 	str.w	r1, [ip]
 8008aae:	f1b8 0f02 	cmp.w	r8, #2
 8008ab2:	f104 0214 	add.w	r2, r4, #20
 8008ab6:	d13d      	bne.n	8008b34 <__gethex+0x420>
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	3b01      	subs	r3, #1
 8008abc:	42ab      	cmp	r3, r5
 8008abe:	d10b      	bne.n	8008ad8 <__gethex+0x3c4>
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	1169      	asrs	r1, r5, #5
 8008ac4:	f005 051f 	and.w	r5, r5, #31
 8008ac8:	fa03 f505 	lsl.w	r5, r3, r5
 8008acc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ad0:	421d      	tst	r5, r3
 8008ad2:	bf18      	it	ne
 8008ad4:	f04f 0801 	movne.w	r8, #1
 8008ad8:	f048 0820 	orr.w	r8, r8, #32
 8008adc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ade:	601c      	str	r4, [r3, #0]
 8008ae0:	9b02      	ldr	r3, [sp, #8]
 8008ae2:	601e      	str	r6, [r3, #0]
 8008ae4:	e6a0      	b.n	8008828 <__gethex+0x114>
 8008ae6:	4290      	cmp	r0, r2
 8008ae8:	f842 3c04 	str.w	r3, [r2, #-4]
 8008aec:	d8d6      	bhi.n	8008a9c <__gethex+0x388>
 8008aee:	68a2      	ldr	r2, [r4, #8]
 8008af0:	4593      	cmp	fp, r2
 8008af2:	db17      	blt.n	8008b24 <__gethex+0x410>
 8008af4:	6861      	ldr	r1, [r4, #4]
 8008af6:	4648      	mov	r0, r9
 8008af8:	3101      	adds	r1, #1
 8008afa:	f7fd ffe5 	bl	8006ac8 <_Balloc>
 8008afe:	4682      	mov	sl, r0
 8008b00:	b918      	cbnz	r0, 8008b0a <__gethex+0x3f6>
 8008b02:	4602      	mov	r2, r0
 8008b04:	2184      	movs	r1, #132	; 0x84
 8008b06:	4b1a      	ldr	r3, [pc, #104]	; (8008b70 <__gethex+0x45c>)
 8008b08:	e6b1      	b.n	800886e <__gethex+0x15a>
 8008b0a:	6922      	ldr	r2, [r4, #16]
 8008b0c:	f104 010c 	add.w	r1, r4, #12
 8008b10:	3202      	adds	r2, #2
 8008b12:	0092      	lsls	r2, r2, #2
 8008b14:	300c      	adds	r0, #12
 8008b16:	f7ff fd4f 	bl	80085b8 <memcpy>
 8008b1a:	4621      	mov	r1, r4
 8008b1c:	4648      	mov	r0, r9
 8008b1e:	f7fe f813 	bl	8006b48 <_Bfree>
 8008b22:	4654      	mov	r4, sl
 8008b24:	6922      	ldr	r2, [r4, #16]
 8008b26:	1c51      	adds	r1, r2, #1
 8008b28:	6121      	str	r1, [r4, #16]
 8008b2a:	2101      	movs	r1, #1
 8008b2c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008b30:	6151      	str	r1, [r2, #20]
 8008b32:	e7bc      	b.n	8008aae <__gethex+0x39a>
 8008b34:	6921      	ldr	r1, [r4, #16]
 8008b36:	4559      	cmp	r1, fp
 8008b38:	dd0b      	ble.n	8008b52 <__gethex+0x43e>
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	f7ff fd81 	bl	8008644 <rshift>
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	3601      	adds	r6, #1
 8008b46:	42b3      	cmp	r3, r6
 8008b48:	f6ff aeda 	blt.w	8008900 <__gethex+0x1ec>
 8008b4c:	f04f 0801 	mov.w	r8, #1
 8008b50:	e7c2      	b.n	8008ad8 <__gethex+0x3c4>
 8008b52:	f015 051f 	ands.w	r5, r5, #31
 8008b56:	d0f9      	beq.n	8008b4c <__gethex+0x438>
 8008b58:	9b01      	ldr	r3, [sp, #4]
 8008b5a:	f1c5 0520 	rsb	r5, r5, #32
 8008b5e:	441a      	add	r2, r3
 8008b60:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008b64:	f7fe f8a2 	bl	8006cac <__hi0bits>
 8008b68:	42a8      	cmp	r0, r5
 8008b6a:	dbe6      	blt.n	8008b3a <__gethex+0x426>
 8008b6c:	e7ee      	b.n	8008b4c <__gethex+0x438>
 8008b6e:	bf00      	nop
 8008b70:	0800941f 	.word	0x0800941f

08008b74 <L_shift>:
 8008b74:	f1c2 0208 	rsb	r2, r2, #8
 8008b78:	0092      	lsls	r2, r2, #2
 8008b7a:	b570      	push	{r4, r5, r6, lr}
 8008b7c:	f1c2 0620 	rsb	r6, r2, #32
 8008b80:	6843      	ldr	r3, [r0, #4]
 8008b82:	6804      	ldr	r4, [r0, #0]
 8008b84:	fa03 f506 	lsl.w	r5, r3, r6
 8008b88:	432c      	orrs	r4, r5
 8008b8a:	40d3      	lsrs	r3, r2
 8008b8c:	6004      	str	r4, [r0, #0]
 8008b8e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008b92:	4288      	cmp	r0, r1
 8008b94:	d3f4      	bcc.n	8008b80 <L_shift+0xc>
 8008b96:	bd70      	pop	{r4, r5, r6, pc}

08008b98 <__match>:
 8008b98:	b530      	push	{r4, r5, lr}
 8008b9a:	6803      	ldr	r3, [r0, #0]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ba2:	b914      	cbnz	r4, 8008baa <__match+0x12>
 8008ba4:	6003      	str	r3, [r0, #0]
 8008ba6:	2001      	movs	r0, #1
 8008ba8:	bd30      	pop	{r4, r5, pc}
 8008baa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008bb2:	2d19      	cmp	r5, #25
 8008bb4:	bf98      	it	ls
 8008bb6:	3220      	addls	r2, #32
 8008bb8:	42a2      	cmp	r2, r4
 8008bba:	d0f0      	beq.n	8008b9e <__match+0x6>
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	e7f3      	b.n	8008ba8 <__match+0x10>

08008bc0 <__hexnan>:
 8008bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc4:	2500      	movs	r5, #0
 8008bc6:	680b      	ldr	r3, [r1, #0]
 8008bc8:	4682      	mov	sl, r0
 8008bca:	115e      	asrs	r6, r3, #5
 8008bcc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008bd0:	f013 031f 	ands.w	r3, r3, #31
 8008bd4:	bf18      	it	ne
 8008bd6:	3604      	addne	r6, #4
 8008bd8:	1f37      	subs	r7, r6, #4
 8008bda:	4690      	mov	r8, r2
 8008bdc:	46b9      	mov	r9, r7
 8008bde:	463c      	mov	r4, r7
 8008be0:	46ab      	mov	fp, r5
 8008be2:	b087      	sub	sp, #28
 8008be4:	6801      	ldr	r1, [r0, #0]
 8008be6:	9301      	str	r3, [sp, #4]
 8008be8:	f846 5c04 	str.w	r5, [r6, #-4]
 8008bec:	9502      	str	r5, [sp, #8]
 8008bee:	784a      	ldrb	r2, [r1, #1]
 8008bf0:	1c4b      	adds	r3, r1, #1
 8008bf2:	9303      	str	r3, [sp, #12]
 8008bf4:	b342      	cbz	r2, 8008c48 <__hexnan+0x88>
 8008bf6:	4610      	mov	r0, r2
 8008bf8:	9105      	str	r1, [sp, #20]
 8008bfa:	9204      	str	r2, [sp, #16]
 8008bfc:	f7ff fd75 	bl	80086ea <__hexdig_fun>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	d14f      	bne.n	8008ca4 <__hexnan+0xe4>
 8008c04:	9a04      	ldr	r2, [sp, #16]
 8008c06:	9905      	ldr	r1, [sp, #20]
 8008c08:	2a20      	cmp	r2, #32
 8008c0a:	d818      	bhi.n	8008c3e <__hexnan+0x7e>
 8008c0c:	9b02      	ldr	r3, [sp, #8]
 8008c0e:	459b      	cmp	fp, r3
 8008c10:	dd13      	ble.n	8008c3a <__hexnan+0x7a>
 8008c12:	454c      	cmp	r4, r9
 8008c14:	d206      	bcs.n	8008c24 <__hexnan+0x64>
 8008c16:	2d07      	cmp	r5, #7
 8008c18:	dc04      	bgt.n	8008c24 <__hexnan+0x64>
 8008c1a:	462a      	mov	r2, r5
 8008c1c:	4649      	mov	r1, r9
 8008c1e:	4620      	mov	r0, r4
 8008c20:	f7ff ffa8 	bl	8008b74 <L_shift>
 8008c24:	4544      	cmp	r4, r8
 8008c26:	d950      	bls.n	8008cca <__hexnan+0x10a>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	f1a4 0904 	sub.w	r9, r4, #4
 8008c2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c32:	461d      	mov	r5, r3
 8008c34:	464c      	mov	r4, r9
 8008c36:	f8cd b008 	str.w	fp, [sp, #8]
 8008c3a:	9903      	ldr	r1, [sp, #12]
 8008c3c:	e7d7      	b.n	8008bee <__hexnan+0x2e>
 8008c3e:	2a29      	cmp	r2, #41	; 0x29
 8008c40:	d155      	bne.n	8008cee <__hexnan+0x12e>
 8008c42:	3102      	adds	r1, #2
 8008c44:	f8ca 1000 	str.w	r1, [sl]
 8008c48:	f1bb 0f00 	cmp.w	fp, #0
 8008c4c:	d04f      	beq.n	8008cee <__hexnan+0x12e>
 8008c4e:	454c      	cmp	r4, r9
 8008c50:	d206      	bcs.n	8008c60 <__hexnan+0xa0>
 8008c52:	2d07      	cmp	r5, #7
 8008c54:	dc04      	bgt.n	8008c60 <__hexnan+0xa0>
 8008c56:	462a      	mov	r2, r5
 8008c58:	4649      	mov	r1, r9
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f7ff ff8a 	bl	8008b74 <L_shift>
 8008c60:	4544      	cmp	r4, r8
 8008c62:	d934      	bls.n	8008cce <__hexnan+0x10e>
 8008c64:	4623      	mov	r3, r4
 8008c66:	f1a8 0204 	sub.w	r2, r8, #4
 8008c6a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008c6e:	429f      	cmp	r7, r3
 8008c70:	f842 1f04 	str.w	r1, [r2, #4]!
 8008c74:	d2f9      	bcs.n	8008c6a <__hexnan+0xaa>
 8008c76:	1b3b      	subs	r3, r7, r4
 8008c78:	f023 0303 	bic.w	r3, r3, #3
 8008c7c:	3304      	adds	r3, #4
 8008c7e:	3e03      	subs	r6, #3
 8008c80:	3401      	adds	r4, #1
 8008c82:	42a6      	cmp	r6, r4
 8008c84:	bf38      	it	cc
 8008c86:	2304      	movcc	r3, #4
 8008c88:	2200      	movs	r2, #0
 8008c8a:	4443      	add	r3, r8
 8008c8c:	f843 2b04 	str.w	r2, [r3], #4
 8008c90:	429f      	cmp	r7, r3
 8008c92:	d2fb      	bcs.n	8008c8c <__hexnan+0xcc>
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	b91b      	cbnz	r3, 8008ca0 <__hexnan+0xe0>
 8008c98:	4547      	cmp	r7, r8
 8008c9a:	d126      	bne.n	8008cea <__hexnan+0x12a>
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	603b      	str	r3, [r7, #0]
 8008ca0:	2005      	movs	r0, #5
 8008ca2:	e025      	b.n	8008cf0 <__hexnan+0x130>
 8008ca4:	3501      	adds	r5, #1
 8008ca6:	2d08      	cmp	r5, #8
 8008ca8:	f10b 0b01 	add.w	fp, fp, #1
 8008cac:	dd06      	ble.n	8008cbc <__hexnan+0xfc>
 8008cae:	4544      	cmp	r4, r8
 8008cb0:	d9c3      	bls.n	8008c3a <__hexnan+0x7a>
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	2501      	movs	r5, #1
 8008cb6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008cba:	3c04      	subs	r4, #4
 8008cbc:	6822      	ldr	r2, [r4, #0]
 8008cbe:	f000 000f 	and.w	r0, r0, #15
 8008cc2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008cc6:	6020      	str	r0, [r4, #0]
 8008cc8:	e7b7      	b.n	8008c3a <__hexnan+0x7a>
 8008cca:	2508      	movs	r5, #8
 8008ccc:	e7b5      	b.n	8008c3a <__hexnan+0x7a>
 8008cce:	9b01      	ldr	r3, [sp, #4]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d0df      	beq.n	8008c94 <__hexnan+0xd4>
 8008cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8008cd8:	f1c3 0320 	rsb	r3, r3, #32
 8008cdc:	40da      	lsrs	r2, r3
 8008cde:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	f846 3c04 	str.w	r3, [r6, #-4]
 8008ce8:	e7d4      	b.n	8008c94 <__hexnan+0xd4>
 8008cea:	3f04      	subs	r7, #4
 8008cec:	e7d2      	b.n	8008c94 <__hexnan+0xd4>
 8008cee:	2004      	movs	r0, #4
 8008cf0:	b007      	add	sp, #28
 8008cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008cf6 <__ascii_mbtowc>:
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	b901      	cbnz	r1, 8008cfc <__ascii_mbtowc+0x6>
 8008cfa:	a901      	add	r1, sp, #4
 8008cfc:	b142      	cbz	r2, 8008d10 <__ascii_mbtowc+0x1a>
 8008cfe:	b14b      	cbz	r3, 8008d14 <__ascii_mbtowc+0x1e>
 8008d00:	7813      	ldrb	r3, [r2, #0]
 8008d02:	600b      	str	r3, [r1, #0]
 8008d04:	7812      	ldrb	r2, [r2, #0]
 8008d06:	1e10      	subs	r0, r2, #0
 8008d08:	bf18      	it	ne
 8008d0a:	2001      	movne	r0, #1
 8008d0c:	b002      	add	sp, #8
 8008d0e:	4770      	bx	lr
 8008d10:	4610      	mov	r0, r2
 8008d12:	e7fb      	b.n	8008d0c <__ascii_mbtowc+0x16>
 8008d14:	f06f 0001 	mvn.w	r0, #1
 8008d18:	e7f8      	b.n	8008d0c <__ascii_mbtowc+0x16>

08008d1a <_realloc_r>:
 8008d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d1e:	4680      	mov	r8, r0
 8008d20:	4614      	mov	r4, r2
 8008d22:	460e      	mov	r6, r1
 8008d24:	b921      	cbnz	r1, 8008d30 <_realloc_r+0x16>
 8008d26:	4611      	mov	r1, r2
 8008d28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d2c:	f7fd be40 	b.w	80069b0 <_malloc_r>
 8008d30:	b92a      	cbnz	r2, 8008d3e <_realloc_r+0x24>
 8008d32:	f7fd fdcd 	bl	80068d0 <_free_r>
 8008d36:	4625      	mov	r5, r4
 8008d38:	4628      	mov	r0, r5
 8008d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d3e:	f000 f842 	bl	8008dc6 <_malloc_usable_size_r>
 8008d42:	4284      	cmp	r4, r0
 8008d44:	4607      	mov	r7, r0
 8008d46:	d802      	bhi.n	8008d4e <_realloc_r+0x34>
 8008d48:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d4c:	d812      	bhi.n	8008d74 <_realloc_r+0x5a>
 8008d4e:	4621      	mov	r1, r4
 8008d50:	4640      	mov	r0, r8
 8008d52:	f7fd fe2d 	bl	80069b0 <_malloc_r>
 8008d56:	4605      	mov	r5, r0
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	d0ed      	beq.n	8008d38 <_realloc_r+0x1e>
 8008d5c:	42bc      	cmp	r4, r7
 8008d5e:	4622      	mov	r2, r4
 8008d60:	4631      	mov	r1, r6
 8008d62:	bf28      	it	cs
 8008d64:	463a      	movcs	r2, r7
 8008d66:	f7ff fc27 	bl	80085b8 <memcpy>
 8008d6a:	4631      	mov	r1, r6
 8008d6c:	4640      	mov	r0, r8
 8008d6e:	f7fd fdaf 	bl	80068d0 <_free_r>
 8008d72:	e7e1      	b.n	8008d38 <_realloc_r+0x1e>
 8008d74:	4635      	mov	r5, r6
 8008d76:	e7df      	b.n	8008d38 <_realloc_r+0x1e>

08008d78 <__ascii_wctomb>:
 8008d78:	4603      	mov	r3, r0
 8008d7a:	4608      	mov	r0, r1
 8008d7c:	b141      	cbz	r1, 8008d90 <__ascii_wctomb+0x18>
 8008d7e:	2aff      	cmp	r2, #255	; 0xff
 8008d80:	d904      	bls.n	8008d8c <__ascii_wctomb+0x14>
 8008d82:	228a      	movs	r2, #138	; 0x8a
 8008d84:	f04f 30ff 	mov.w	r0, #4294967295
 8008d88:	601a      	str	r2, [r3, #0]
 8008d8a:	4770      	bx	lr
 8008d8c:	2001      	movs	r0, #1
 8008d8e:	700a      	strb	r2, [r1, #0]
 8008d90:	4770      	bx	lr
	...

08008d94 <fiprintf>:
 8008d94:	b40e      	push	{r1, r2, r3}
 8008d96:	b503      	push	{r0, r1, lr}
 8008d98:	4601      	mov	r1, r0
 8008d9a:	ab03      	add	r3, sp, #12
 8008d9c:	4805      	ldr	r0, [pc, #20]	; (8008db4 <fiprintf+0x20>)
 8008d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008da2:	6800      	ldr	r0, [r0, #0]
 8008da4:	9301      	str	r3, [sp, #4]
 8008da6:	f000 f83d 	bl	8008e24 <_vfiprintf_r>
 8008daa:	b002      	add	sp, #8
 8008dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8008db0:	b003      	add	sp, #12
 8008db2:	4770      	bx	lr
 8008db4:	2000006c 	.word	0x2000006c

08008db8 <abort>:
 8008db8:	2006      	movs	r0, #6
 8008dba:	b508      	push	{r3, lr}
 8008dbc:	f000 fa0a 	bl	80091d4 <raise>
 8008dc0:	2001      	movs	r0, #1
 8008dc2:	f7f9 f87d 	bl	8001ec0 <_exit>

08008dc6 <_malloc_usable_size_r>:
 8008dc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dca:	1f18      	subs	r0, r3, #4
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	bfbc      	itt	lt
 8008dd0:	580b      	ldrlt	r3, [r1, r0]
 8008dd2:	18c0      	addlt	r0, r0, r3
 8008dd4:	4770      	bx	lr

08008dd6 <__sfputc_r>:
 8008dd6:	6893      	ldr	r3, [r2, #8]
 8008dd8:	b410      	push	{r4}
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	6093      	str	r3, [r2, #8]
 8008de0:	da07      	bge.n	8008df2 <__sfputc_r+0x1c>
 8008de2:	6994      	ldr	r4, [r2, #24]
 8008de4:	42a3      	cmp	r3, r4
 8008de6:	db01      	blt.n	8008dec <__sfputc_r+0x16>
 8008de8:	290a      	cmp	r1, #10
 8008dea:	d102      	bne.n	8008df2 <__sfputc_r+0x1c>
 8008dec:	bc10      	pop	{r4}
 8008dee:	f000 b933 	b.w	8009058 <__swbuf_r>
 8008df2:	6813      	ldr	r3, [r2, #0]
 8008df4:	1c58      	adds	r0, r3, #1
 8008df6:	6010      	str	r0, [r2, #0]
 8008df8:	7019      	strb	r1, [r3, #0]
 8008dfa:	4608      	mov	r0, r1
 8008dfc:	bc10      	pop	{r4}
 8008dfe:	4770      	bx	lr

08008e00 <__sfputs_r>:
 8008e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e02:	4606      	mov	r6, r0
 8008e04:	460f      	mov	r7, r1
 8008e06:	4614      	mov	r4, r2
 8008e08:	18d5      	adds	r5, r2, r3
 8008e0a:	42ac      	cmp	r4, r5
 8008e0c:	d101      	bne.n	8008e12 <__sfputs_r+0x12>
 8008e0e:	2000      	movs	r0, #0
 8008e10:	e007      	b.n	8008e22 <__sfputs_r+0x22>
 8008e12:	463a      	mov	r2, r7
 8008e14:	4630      	mov	r0, r6
 8008e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e1a:	f7ff ffdc 	bl	8008dd6 <__sfputc_r>
 8008e1e:	1c43      	adds	r3, r0, #1
 8008e20:	d1f3      	bne.n	8008e0a <__sfputs_r+0xa>
 8008e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e24 <_vfiprintf_r>:
 8008e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e28:	460d      	mov	r5, r1
 8008e2a:	4614      	mov	r4, r2
 8008e2c:	4698      	mov	r8, r3
 8008e2e:	4606      	mov	r6, r0
 8008e30:	b09d      	sub	sp, #116	; 0x74
 8008e32:	b118      	cbz	r0, 8008e3c <_vfiprintf_r+0x18>
 8008e34:	6a03      	ldr	r3, [r0, #32]
 8008e36:	b90b      	cbnz	r3, 8008e3c <_vfiprintf_r+0x18>
 8008e38:	f7fc fdae 	bl	8005998 <__sinit>
 8008e3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e3e:	07d9      	lsls	r1, r3, #31
 8008e40:	d405      	bmi.n	8008e4e <_vfiprintf_r+0x2a>
 8008e42:	89ab      	ldrh	r3, [r5, #12]
 8008e44:	059a      	lsls	r2, r3, #22
 8008e46:	d402      	bmi.n	8008e4e <_vfiprintf_r+0x2a>
 8008e48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e4a:	f7fc febc 	bl	8005bc6 <__retarget_lock_acquire_recursive>
 8008e4e:	89ab      	ldrh	r3, [r5, #12]
 8008e50:	071b      	lsls	r3, r3, #28
 8008e52:	d501      	bpl.n	8008e58 <_vfiprintf_r+0x34>
 8008e54:	692b      	ldr	r3, [r5, #16]
 8008e56:	b99b      	cbnz	r3, 8008e80 <_vfiprintf_r+0x5c>
 8008e58:	4629      	mov	r1, r5
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	f000 f93a 	bl	80090d4 <__swsetup_r>
 8008e60:	b170      	cbz	r0, 8008e80 <_vfiprintf_r+0x5c>
 8008e62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e64:	07dc      	lsls	r4, r3, #31
 8008e66:	d504      	bpl.n	8008e72 <_vfiprintf_r+0x4e>
 8008e68:	f04f 30ff 	mov.w	r0, #4294967295
 8008e6c:	b01d      	add	sp, #116	; 0x74
 8008e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e72:	89ab      	ldrh	r3, [r5, #12]
 8008e74:	0598      	lsls	r0, r3, #22
 8008e76:	d4f7      	bmi.n	8008e68 <_vfiprintf_r+0x44>
 8008e78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e7a:	f7fc fea5 	bl	8005bc8 <__retarget_lock_release_recursive>
 8008e7e:	e7f3      	b.n	8008e68 <_vfiprintf_r+0x44>
 8008e80:	2300      	movs	r3, #0
 8008e82:	9309      	str	r3, [sp, #36]	; 0x24
 8008e84:	2320      	movs	r3, #32
 8008e86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e8a:	2330      	movs	r3, #48	; 0x30
 8008e8c:	f04f 0901 	mov.w	r9, #1
 8008e90:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e94:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009044 <_vfiprintf_r+0x220>
 8008e98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e9c:	4623      	mov	r3, r4
 8008e9e:	469a      	mov	sl, r3
 8008ea0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ea4:	b10a      	cbz	r2, 8008eaa <_vfiprintf_r+0x86>
 8008ea6:	2a25      	cmp	r2, #37	; 0x25
 8008ea8:	d1f9      	bne.n	8008e9e <_vfiprintf_r+0x7a>
 8008eaa:	ebba 0b04 	subs.w	fp, sl, r4
 8008eae:	d00b      	beq.n	8008ec8 <_vfiprintf_r+0xa4>
 8008eb0:	465b      	mov	r3, fp
 8008eb2:	4622      	mov	r2, r4
 8008eb4:	4629      	mov	r1, r5
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	f7ff ffa2 	bl	8008e00 <__sfputs_r>
 8008ebc:	3001      	adds	r0, #1
 8008ebe:	f000 80a9 	beq.w	8009014 <_vfiprintf_r+0x1f0>
 8008ec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ec4:	445a      	add	r2, fp
 8008ec6:	9209      	str	r2, [sp, #36]	; 0x24
 8008ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f000 80a1 	beq.w	8009014 <_vfiprintf_r+0x1f0>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ed8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008edc:	f10a 0a01 	add.w	sl, sl, #1
 8008ee0:	9304      	str	r3, [sp, #16]
 8008ee2:	9307      	str	r3, [sp, #28]
 8008ee4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ee8:	931a      	str	r3, [sp, #104]	; 0x68
 8008eea:	4654      	mov	r4, sl
 8008eec:	2205      	movs	r2, #5
 8008eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef2:	4854      	ldr	r0, [pc, #336]	; (8009044 <_vfiprintf_r+0x220>)
 8008ef4:	f7fc fe69 	bl	8005bca <memchr>
 8008ef8:	9a04      	ldr	r2, [sp, #16]
 8008efa:	b9d8      	cbnz	r0, 8008f34 <_vfiprintf_r+0x110>
 8008efc:	06d1      	lsls	r1, r2, #27
 8008efe:	bf44      	itt	mi
 8008f00:	2320      	movmi	r3, #32
 8008f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f06:	0713      	lsls	r3, r2, #28
 8008f08:	bf44      	itt	mi
 8008f0a:	232b      	movmi	r3, #43	; 0x2b
 8008f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f10:	f89a 3000 	ldrb.w	r3, [sl]
 8008f14:	2b2a      	cmp	r3, #42	; 0x2a
 8008f16:	d015      	beq.n	8008f44 <_vfiprintf_r+0x120>
 8008f18:	4654      	mov	r4, sl
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	f04f 0c0a 	mov.w	ip, #10
 8008f20:	9a07      	ldr	r2, [sp, #28]
 8008f22:	4621      	mov	r1, r4
 8008f24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f28:	3b30      	subs	r3, #48	; 0x30
 8008f2a:	2b09      	cmp	r3, #9
 8008f2c:	d94d      	bls.n	8008fca <_vfiprintf_r+0x1a6>
 8008f2e:	b1b0      	cbz	r0, 8008f5e <_vfiprintf_r+0x13a>
 8008f30:	9207      	str	r2, [sp, #28]
 8008f32:	e014      	b.n	8008f5e <_vfiprintf_r+0x13a>
 8008f34:	eba0 0308 	sub.w	r3, r0, r8
 8008f38:	fa09 f303 	lsl.w	r3, r9, r3
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	46a2      	mov	sl, r4
 8008f40:	9304      	str	r3, [sp, #16]
 8008f42:	e7d2      	b.n	8008eea <_vfiprintf_r+0xc6>
 8008f44:	9b03      	ldr	r3, [sp, #12]
 8008f46:	1d19      	adds	r1, r3, #4
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	9103      	str	r1, [sp, #12]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	bfbb      	ittet	lt
 8008f50:	425b      	neglt	r3, r3
 8008f52:	f042 0202 	orrlt.w	r2, r2, #2
 8008f56:	9307      	strge	r3, [sp, #28]
 8008f58:	9307      	strlt	r3, [sp, #28]
 8008f5a:	bfb8      	it	lt
 8008f5c:	9204      	strlt	r2, [sp, #16]
 8008f5e:	7823      	ldrb	r3, [r4, #0]
 8008f60:	2b2e      	cmp	r3, #46	; 0x2e
 8008f62:	d10c      	bne.n	8008f7e <_vfiprintf_r+0x15a>
 8008f64:	7863      	ldrb	r3, [r4, #1]
 8008f66:	2b2a      	cmp	r3, #42	; 0x2a
 8008f68:	d134      	bne.n	8008fd4 <_vfiprintf_r+0x1b0>
 8008f6a:	9b03      	ldr	r3, [sp, #12]
 8008f6c:	3402      	adds	r4, #2
 8008f6e:	1d1a      	adds	r2, r3, #4
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	9203      	str	r2, [sp, #12]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	bfb8      	it	lt
 8008f78:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f7c:	9305      	str	r3, [sp, #20]
 8008f7e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009048 <_vfiprintf_r+0x224>
 8008f82:	2203      	movs	r2, #3
 8008f84:	4650      	mov	r0, sl
 8008f86:	7821      	ldrb	r1, [r4, #0]
 8008f88:	f7fc fe1f 	bl	8005bca <memchr>
 8008f8c:	b138      	cbz	r0, 8008f9e <_vfiprintf_r+0x17a>
 8008f8e:	2240      	movs	r2, #64	; 0x40
 8008f90:	9b04      	ldr	r3, [sp, #16]
 8008f92:	eba0 000a 	sub.w	r0, r0, sl
 8008f96:	4082      	lsls	r2, r0
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	3401      	adds	r4, #1
 8008f9c:	9304      	str	r3, [sp, #16]
 8008f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fa2:	2206      	movs	r2, #6
 8008fa4:	4829      	ldr	r0, [pc, #164]	; (800904c <_vfiprintf_r+0x228>)
 8008fa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008faa:	f7fc fe0e 	bl	8005bca <memchr>
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	d03f      	beq.n	8009032 <_vfiprintf_r+0x20e>
 8008fb2:	4b27      	ldr	r3, [pc, #156]	; (8009050 <_vfiprintf_r+0x22c>)
 8008fb4:	bb1b      	cbnz	r3, 8008ffe <_vfiprintf_r+0x1da>
 8008fb6:	9b03      	ldr	r3, [sp, #12]
 8008fb8:	3307      	adds	r3, #7
 8008fba:	f023 0307 	bic.w	r3, r3, #7
 8008fbe:	3308      	adds	r3, #8
 8008fc0:	9303      	str	r3, [sp, #12]
 8008fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fc4:	443b      	add	r3, r7
 8008fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fc8:	e768      	b.n	8008e9c <_vfiprintf_r+0x78>
 8008fca:	460c      	mov	r4, r1
 8008fcc:	2001      	movs	r0, #1
 8008fce:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fd2:	e7a6      	b.n	8008f22 <_vfiprintf_r+0xfe>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	f04f 0c0a 	mov.w	ip, #10
 8008fda:	4619      	mov	r1, r3
 8008fdc:	3401      	adds	r4, #1
 8008fde:	9305      	str	r3, [sp, #20]
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fe6:	3a30      	subs	r2, #48	; 0x30
 8008fe8:	2a09      	cmp	r2, #9
 8008fea:	d903      	bls.n	8008ff4 <_vfiprintf_r+0x1d0>
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d0c6      	beq.n	8008f7e <_vfiprintf_r+0x15a>
 8008ff0:	9105      	str	r1, [sp, #20]
 8008ff2:	e7c4      	b.n	8008f7e <_vfiprintf_r+0x15a>
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ffc:	e7f0      	b.n	8008fe0 <_vfiprintf_r+0x1bc>
 8008ffe:	ab03      	add	r3, sp, #12
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	462a      	mov	r2, r5
 8009004:	4630      	mov	r0, r6
 8009006:	4b13      	ldr	r3, [pc, #76]	; (8009054 <_vfiprintf_r+0x230>)
 8009008:	a904      	add	r1, sp, #16
 800900a:	f7fb fe69 	bl	8004ce0 <_printf_float>
 800900e:	4607      	mov	r7, r0
 8009010:	1c78      	adds	r0, r7, #1
 8009012:	d1d6      	bne.n	8008fc2 <_vfiprintf_r+0x19e>
 8009014:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009016:	07d9      	lsls	r1, r3, #31
 8009018:	d405      	bmi.n	8009026 <_vfiprintf_r+0x202>
 800901a:	89ab      	ldrh	r3, [r5, #12]
 800901c:	059a      	lsls	r2, r3, #22
 800901e:	d402      	bmi.n	8009026 <_vfiprintf_r+0x202>
 8009020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009022:	f7fc fdd1 	bl	8005bc8 <__retarget_lock_release_recursive>
 8009026:	89ab      	ldrh	r3, [r5, #12]
 8009028:	065b      	lsls	r3, r3, #25
 800902a:	f53f af1d 	bmi.w	8008e68 <_vfiprintf_r+0x44>
 800902e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009030:	e71c      	b.n	8008e6c <_vfiprintf_r+0x48>
 8009032:	ab03      	add	r3, sp, #12
 8009034:	9300      	str	r3, [sp, #0]
 8009036:	462a      	mov	r2, r5
 8009038:	4630      	mov	r0, r6
 800903a:	4b06      	ldr	r3, [pc, #24]	; (8009054 <_vfiprintf_r+0x230>)
 800903c:	a904      	add	r1, sp, #16
 800903e:	f7fc f8ef 	bl	8005220 <_printf_i>
 8009042:	e7e4      	b.n	800900e <_vfiprintf_r+0x1ea>
 8009044:	080096e1 	.word	0x080096e1
 8009048:	080096e7 	.word	0x080096e7
 800904c:	080096eb 	.word	0x080096eb
 8009050:	08004ce1 	.word	0x08004ce1
 8009054:	08008e01 	.word	0x08008e01

08009058 <__swbuf_r>:
 8009058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905a:	460e      	mov	r6, r1
 800905c:	4614      	mov	r4, r2
 800905e:	4605      	mov	r5, r0
 8009060:	b118      	cbz	r0, 800906a <__swbuf_r+0x12>
 8009062:	6a03      	ldr	r3, [r0, #32]
 8009064:	b90b      	cbnz	r3, 800906a <__swbuf_r+0x12>
 8009066:	f7fc fc97 	bl	8005998 <__sinit>
 800906a:	69a3      	ldr	r3, [r4, #24]
 800906c:	60a3      	str	r3, [r4, #8]
 800906e:	89a3      	ldrh	r3, [r4, #12]
 8009070:	071a      	lsls	r2, r3, #28
 8009072:	d525      	bpl.n	80090c0 <__swbuf_r+0x68>
 8009074:	6923      	ldr	r3, [r4, #16]
 8009076:	b31b      	cbz	r3, 80090c0 <__swbuf_r+0x68>
 8009078:	6823      	ldr	r3, [r4, #0]
 800907a:	6922      	ldr	r2, [r4, #16]
 800907c:	b2f6      	uxtb	r6, r6
 800907e:	1a98      	subs	r0, r3, r2
 8009080:	6963      	ldr	r3, [r4, #20]
 8009082:	4637      	mov	r7, r6
 8009084:	4283      	cmp	r3, r0
 8009086:	dc04      	bgt.n	8009092 <__swbuf_r+0x3a>
 8009088:	4621      	mov	r1, r4
 800908a:	4628      	mov	r0, r5
 800908c:	f7ff fa30 	bl	80084f0 <_fflush_r>
 8009090:	b9e0      	cbnz	r0, 80090cc <__swbuf_r+0x74>
 8009092:	68a3      	ldr	r3, [r4, #8]
 8009094:	3b01      	subs	r3, #1
 8009096:	60a3      	str	r3, [r4, #8]
 8009098:	6823      	ldr	r3, [r4, #0]
 800909a:	1c5a      	adds	r2, r3, #1
 800909c:	6022      	str	r2, [r4, #0]
 800909e:	701e      	strb	r6, [r3, #0]
 80090a0:	6962      	ldr	r2, [r4, #20]
 80090a2:	1c43      	adds	r3, r0, #1
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d004      	beq.n	80090b2 <__swbuf_r+0x5a>
 80090a8:	89a3      	ldrh	r3, [r4, #12]
 80090aa:	07db      	lsls	r3, r3, #31
 80090ac:	d506      	bpl.n	80090bc <__swbuf_r+0x64>
 80090ae:	2e0a      	cmp	r6, #10
 80090b0:	d104      	bne.n	80090bc <__swbuf_r+0x64>
 80090b2:	4621      	mov	r1, r4
 80090b4:	4628      	mov	r0, r5
 80090b6:	f7ff fa1b 	bl	80084f0 <_fflush_r>
 80090ba:	b938      	cbnz	r0, 80090cc <__swbuf_r+0x74>
 80090bc:	4638      	mov	r0, r7
 80090be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c0:	4621      	mov	r1, r4
 80090c2:	4628      	mov	r0, r5
 80090c4:	f000 f806 	bl	80090d4 <__swsetup_r>
 80090c8:	2800      	cmp	r0, #0
 80090ca:	d0d5      	beq.n	8009078 <__swbuf_r+0x20>
 80090cc:	f04f 37ff 	mov.w	r7, #4294967295
 80090d0:	e7f4      	b.n	80090bc <__swbuf_r+0x64>
	...

080090d4 <__swsetup_r>:
 80090d4:	b538      	push	{r3, r4, r5, lr}
 80090d6:	4b2a      	ldr	r3, [pc, #168]	; (8009180 <__swsetup_r+0xac>)
 80090d8:	4605      	mov	r5, r0
 80090da:	6818      	ldr	r0, [r3, #0]
 80090dc:	460c      	mov	r4, r1
 80090de:	b118      	cbz	r0, 80090e8 <__swsetup_r+0x14>
 80090e0:	6a03      	ldr	r3, [r0, #32]
 80090e2:	b90b      	cbnz	r3, 80090e8 <__swsetup_r+0x14>
 80090e4:	f7fc fc58 	bl	8005998 <__sinit>
 80090e8:	89a3      	ldrh	r3, [r4, #12]
 80090ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090ee:	0718      	lsls	r0, r3, #28
 80090f0:	d422      	bmi.n	8009138 <__swsetup_r+0x64>
 80090f2:	06d9      	lsls	r1, r3, #27
 80090f4:	d407      	bmi.n	8009106 <__swsetup_r+0x32>
 80090f6:	2309      	movs	r3, #9
 80090f8:	602b      	str	r3, [r5, #0]
 80090fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80090fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009102:	81a3      	strh	r3, [r4, #12]
 8009104:	e034      	b.n	8009170 <__swsetup_r+0x9c>
 8009106:	0758      	lsls	r0, r3, #29
 8009108:	d512      	bpl.n	8009130 <__swsetup_r+0x5c>
 800910a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800910c:	b141      	cbz	r1, 8009120 <__swsetup_r+0x4c>
 800910e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009112:	4299      	cmp	r1, r3
 8009114:	d002      	beq.n	800911c <__swsetup_r+0x48>
 8009116:	4628      	mov	r0, r5
 8009118:	f7fd fbda 	bl	80068d0 <_free_r>
 800911c:	2300      	movs	r3, #0
 800911e:	6363      	str	r3, [r4, #52]	; 0x34
 8009120:	89a3      	ldrh	r3, [r4, #12]
 8009122:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009126:	81a3      	strh	r3, [r4, #12]
 8009128:	2300      	movs	r3, #0
 800912a:	6063      	str	r3, [r4, #4]
 800912c:	6923      	ldr	r3, [r4, #16]
 800912e:	6023      	str	r3, [r4, #0]
 8009130:	89a3      	ldrh	r3, [r4, #12]
 8009132:	f043 0308 	orr.w	r3, r3, #8
 8009136:	81a3      	strh	r3, [r4, #12]
 8009138:	6923      	ldr	r3, [r4, #16]
 800913a:	b94b      	cbnz	r3, 8009150 <__swsetup_r+0x7c>
 800913c:	89a3      	ldrh	r3, [r4, #12]
 800913e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009146:	d003      	beq.n	8009150 <__swsetup_r+0x7c>
 8009148:	4621      	mov	r1, r4
 800914a:	4628      	mov	r0, r5
 800914c:	f000 f883 	bl	8009256 <__smakebuf_r>
 8009150:	89a0      	ldrh	r0, [r4, #12]
 8009152:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009156:	f010 0301 	ands.w	r3, r0, #1
 800915a:	d00a      	beq.n	8009172 <__swsetup_r+0x9e>
 800915c:	2300      	movs	r3, #0
 800915e:	60a3      	str	r3, [r4, #8]
 8009160:	6963      	ldr	r3, [r4, #20]
 8009162:	425b      	negs	r3, r3
 8009164:	61a3      	str	r3, [r4, #24]
 8009166:	6923      	ldr	r3, [r4, #16]
 8009168:	b943      	cbnz	r3, 800917c <__swsetup_r+0xa8>
 800916a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800916e:	d1c4      	bne.n	80090fa <__swsetup_r+0x26>
 8009170:	bd38      	pop	{r3, r4, r5, pc}
 8009172:	0781      	lsls	r1, r0, #30
 8009174:	bf58      	it	pl
 8009176:	6963      	ldrpl	r3, [r4, #20]
 8009178:	60a3      	str	r3, [r4, #8]
 800917a:	e7f4      	b.n	8009166 <__swsetup_r+0x92>
 800917c:	2000      	movs	r0, #0
 800917e:	e7f7      	b.n	8009170 <__swsetup_r+0x9c>
 8009180:	2000006c 	.word	0x2000006c

08009184 <_raise_r>:
 8009184:	291f      	cmp	r1, #31
 8009186:	b538      	push	{r3, r4, r5, lr}
 8009188:	4604      	mov	r4, r0
 800918a:	460d      	mov	r5, r1
 800918c:	d904      	bls.n	8009198 <_raise_r+0x14>
 800918e:	2316      	movs	r3, #22
 8009190:	6003      	str	r3, [r0, #0]
 8009192:	f04f 30ff 	mov.w	r0, #4294967295
 8009196:	bd38      	pop	{r3, r4, r5, pc}
 8009198:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800919a:	b112      	cbz	r2, 80091a2 <_raise_r+0x1e>
 800919c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091a0:	b94b      	cbnz	r3, 80091b6 <_raise_r+0x32>
 80091a2:	4620      	mov	r0, r4
 80091a4:	f000 f830 	bl	8009208 <_getpid_r>
 80091a8:	462a      	mov	r2, r5
 80091aa:	4601      	mov	r1, r0
 80091ac:	4620      	mov	r0, r4
 80091ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091b2:	f000 b817 	b.w	80091e4 <_kill_r>
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d00a      	beq.n	80091d0 <_raise_r+0x4c>
 80091ba:	1c59      	adds	r1, r3, #1
 80091bc:	d103      	bne.n	80091c6 <_raise_r+0x42>
 80091be:	2316      	movs	r3, #22
 80091c0:	6003      	str	r3, [r0, #0]
 80091c2:	2001      	movs	r0, #1
 80091c4:	e7e7      	b.n	8009196 <_raise_r+0x12>
 80091c6:	2400      	movs	r4, #0
 80091c8:	4628      	mov	r0, r5
 80091ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80091ce:	4798      	blx	r3
 80091d0:	2000      	movs	r0, #0
 80091d2:	e7e0      	b.n	8009196 <_raise_r+0x12>

080091d4 <raise>:
 80091d4:	4b02      	ldr	r3, [pc, #8]	; (80091e0 <raise+0xc>)
 80091d6:	4601      	mov	r1, r0
 80091d8:	6818      	ldr	r0, [r3, #0]
 80091da:	f7ff bfd3 	b.w	8009184 <_raise_r>
 80091de:	bf00      	nop
 80091e0:	2000006c 	.word	0x2000006c

080091e4 <_kill_r>:
 80091e4:	b538      	push	{r3, r4, r5, lr}
 80091e6:	2300      	movs	r3, #0
 80091e8:	4d06      	ldr	r5, [pc, #24]	; (8009204 <_kill_r+0x20>)
 80091ea:	4604      	mov	r4, r0
 80091ec:	4608      	mov	r0, r1
 80091ee:	4611      	mov	r1, r2
 80091f0:	602b      	str	r3, [r5, #0]
 80091f2:	f7f8 fe55 	bl	8001ea0 <_kill>
 80091f6:	1c43      	adds	r3, r0, #1
 80091f8:	d102      	bne.n	8009200 <_kill_r+0x1c>
 80091fa:	682b      	ldr	r3, [r5, #0]
 80091fc:	b103      	cbz	r3, 8009200 <_kill_r+0x1c>
 80091fe:	6023      	str	r3, [r4, #0]
 8009200:	bd38      	pop	{r3, r4, r5, pc}
 8009202:	bf00      	nop
 8009204:	200004a0 	.word	0x200004a0

08009208 <_getpid_r>:
 8009208:	f7f8 be43 	b.w	8001e92 <_getpid>

0800920c <__swhatbuf_r>:
 800920c:	b570      	push	{r4, r5, r6, lr}
 800920e:	460c      	mov	r4, r1
 8009210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009214:	4615      	mov	r5, r2
 8009216:	2900      	cmp	r1, #0
 8009218:	461e      	mov	r6, r3
 800921a:	b096      	sub	sp, #88	; 0x58
 800921c:	da0c      	bge.n	8009238 <__swhatbuf_r+0x2c>
 800921e:	89a3      	ldrh	r3, [r4, #12]
 8009220:	2100      	movs	r1, #0
 8009222:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009226:	bf0c      	ite	eq
 8009228:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800922c:	2340      	movne	r3, #64	; 0x40
 800922e:	2000      	movs	r0, #0
 8009230:	6031      	str	r1, [r6, #0]
 8009232:	602b      	str	r3, [r5, #0]
 8009234:	b016      	add	sp, #88	; 0x58
 8009236:	bd70      	pop	{r4, r5, r6, pc}
 8009238:	466a      	mov	r2, sp
 800923a:	f000 f849 	bl	80092d0 <_fstat_r>
 800923e:	2800      	cmp	r0, #0
 8009240:	dbed      	blt.n	800921e <__swhatbuf_r+0x12>
 8009242:	9901      	ldr	r1, [sp, #4]
 8009244:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009248:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800924c:	4259      	negs	r1, r3
 800924e:	4159      	adcs	r1, r3
 8009250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009254:	e7eb      	b.n	800922e <__swhatbuf_r+0x22>

08009256 <__smakebuf_r>:
 8009256:	898b      	ldrh	r3, [r1, #12]
 8009258:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800925a:	079d      	lsls	r5, r3, #30
 800925c:	4606      	mov	r6, r0
 800925e:	460c      	mov	r4, r1
 8009260:	d507      	bpl.n	8009272 <__smakebuf_r+0x1c>
 8009262:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009266:	6023      	str	r3, [r4, #0]
 8009268:	6123      	str	r3, [r4, #16]
 800926a:	2301      	movs	r3, #1
 800926c:	6163      	str	r3, [r4, #20]
 800926e:	b002      	add	sp, #8
 8009270:	bd70      	pop	{r4, r5, r6, pc}
 8009272:	466a      	mov	r2, sp
 8009274:	ab01      	add	r3, sp, #4
 8009276:	f7ff ffc9 	bl	800920c <__swhatbuf_r>
 800927a:	9900      	ldr	r1, [sp, #0]
 800927c:	4605      	mov	r5, r0
 800927e:	4630      	mov	r0, r6
 8009280:	f7fd fb96 	bl	80069b0 <_malloc_r>
 8009284:	b948      	cbnz	r0, 800929a <__smakebuf_r+0x44>
 8009286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800928a:	059a      	lsls	r2, r3, #22
 800928c:	d4ef      	bmi.n	800926e <__smakebuf_r+0x18>
 800928e:	f023 0303 	bic.w	r3, r3, #3
 8009292:	f043 0302 	orr.w	r3, r3, #2
 8009296:	81a3      	strh	r3, [r4, #12]
 8009298:	e7e3      	b.n	8009262 <__smakebuf_r+0xc>
 800929a:	89a3      	ldrh	r3, [r4, #12]
 800929c:	6020      	str	r0, [r4, #0]
 800929e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a2:	81a3      	strh	r3, [r4, #12]
 80092a4:	9b00      	ldr	r3, [sp, #0]
 80092a6:	6120      	str	r0, [r4, #16]
 80092a8:	6163      	str	r3, [r4, #20]
 80092aa:	9b01      	ldr	r3, [sp, #4]
 80092ac:	b15b      	cbz	r3, 80092c6 <__smakebuf_r+0x70>
 80092ae:	4630      	mov	r0, r6
 80092b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092b4:	f000 f81e 	bl	80092f4 <_isatty_r>
 80092b8:	b128      	cbz	r0, 80092c6 <__smakebuf_r+0x70>
 80092ba:	89a3      	ldrh	r3, [r4, #12]
 80092bc:	f023 0303 	bic.w	r3, r3, #3
 80092c0:	f043 0301 	orr.w	r3, r3, #1
 80092c4:	81a3      	strh	r3, [r4, #12]
 80092c6:	89a3      	ldrh	r3, [r4, #12]
 80092c8:	431d      	orrs	r5, r3
 80092ca:	81a5      	strh	r5, [r4, #12]
 80092cc:	e7cf      	b.n	800926e <__smakebuf_r+0x18>
	...

080092d0 <_fstat_r>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	2300      	movs	r3, #0
 80092d4:	4d06      	ldr	r5, [pc, #24]	; (80092f0 <_fstat_r+0x20>)
 80092d6:	4604      	mov	r4, r0
 80092d8:	4608      	mov	r0, r1
 80092da:	4611      	mov	r1, r2
 80092dc:	602b      	str	r3, [r5, #0]
 80092de:	f7f8 fe3d 	bl	8001f5c <_fstat>
 80092e2:	1c43      	adds	r3, r0, #1
 80092e4:	d102      	bne.n	80092ec <_fstat_r+0x1c>
 80092e6:	682b      	ldr	r3, [r5, #0]
 80092e8:	b103      	cbz	r3, 80092ec <_fstat_r+0x1c>
 80092ea:	6023      	str	r3, [r4, #0]
 80092ec:	bd38      	pop	{r3, r4, r5, pc}
 80092ee:	bf00      	nop
 80092f0:	200004a0 	.word	0x200004a0

080092f4 <_isatty_r>:
 80092f4:	b538      	push	{r3, r4, r5, lr}
 80092f6:	2300      	movs	r3, #0
 80092f8:	4d05      	ldr	r5, [pc, #20]	; (8009310 <_isatty_r+0x1c>)
 80092fa:	4604      	mov	r4, r0
 80092fc:	4608      	mov	r0, r1
 80092fe:	602b      	str	r3, [r5, #0]
 8009300:	f7f8 fe3b 	bl	8001f7a <_isatty>
 8009304:	1c43      	adds	r3, r0, #1
 8009306:	d102      	bne.n	800930e <_isatty_r+0x1a>
 8009308:	682b      	ldr	r3, [r5, #0]
 800930a:	b103      	cbz	r3, 800930e <_isatty_r+0x1a>
 800930c:	6023      	str	r3, [r4, #0]
 800930e:	bd38      	pop	{r3, r4, r5, pc}
 8009310:	200004a0 	.word	0x200004a0

08009314 <_init>:
 8009314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009316:	bf00      	nop
 8009318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800931a:	bc08      	pop	{r3}
 800931c:	469e      	mov	lr, r3
 800931e:	4770      	bx	lr

08009320 <_fini>:
 8009320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009322:	bf00      	nop
 8009324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009326:	bc08      	pop	{r3}
 8009328:	469e      	mov	lr, r3
 800932a:	4770      	bx	lr
