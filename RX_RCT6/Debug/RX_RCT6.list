
RX_RCT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5ec  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  0800a7d8  0800a7d8  0001a7d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac50  0800ac50  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800ac50  0800ac50  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ac50  0800ac50  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac50  0800ac50  0001ac50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac54  0800ac54  0001ac54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ac58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  200001e4  0800ae3c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  0800ae3c  000204b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001121b  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002443  00000000  00000000  0003146b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  000338b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dfe  00000000  00000000  00034a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b39d  00000000  00000000  00035866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001453d  00000000  00000000  00050c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ea70  00000000  00000000  00065140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000061ec  00000000  00000000  00103bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00109d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e4 	.word	0x200001e4
 8000204:	00000000 	.word	0x00000000
 8000208:	0800a7bc 	.word	0x0800a7bc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e8 	.word	0x200001e8
 8000224:	0800a7bc 	.word	0x0800a7bc

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_f2uiz>:
 80011e8:	0042      	lsls	r2, r0, #1
 80011ea:	d20e      	bcs.n	800120a <__aeabi_f2uiz+0x22>
 80011ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011f0:	d30b      	bcc.n	800120a <__aeabi_f2uiz+0x22>
 80011f2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011fa:	d409      	bmi.n	8001210 <__aeabi_f2uiz+0x28>
 80011fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001204:	fa23 f002 	lsr.w	r0, r3, r2
 8001208:	4770      	bx	lr
 800120a:	f04f 0000 	mov.w	r0, #0
 800120e:	4770      	bx	lr
 8001210:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001214:	d101      	bne.n	800121a <__aeabi_f2uiz+0x32>
 8001216:	0242      	lsls	r2, r0, #9
 8001218:	d102      	bne.n	8001220 <__aeabi_f2uiz+0x38>
 800121a:	f04f 30ff 	mov.w	r0, #4294967295
 800121e:	4770      	bx	lr
 8001220:	f04f 0000 	mov.w	r0, #0
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop

08001228 <__aeabi_d2lz>:
 8001228:	b538      	push	{r3, r4, r5, lr}
 800122a:	4605      	mov	r5, r0
 800122c:	460c      	mov	r4, r1
 800122e:	2200      	movs	r2, #0
 8001230:	2300      	movs	r3, #0
 8001232:	4628      	mov	r0, r5
 8001234:	4621      	mov	r1, r4
 8001236:	f7ff fc2d 	bl	8000a94 <__aeabi_dcmplt>
 800123a:	b928      	cbnz	r0, 8001248 <__aeabi_d2lz+0x20>
 800123c:	4628      	mov	r0, r5
 800123e:	4621      	mov	r1, r4
 8001240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001244:	f000 b80a 	b.w	800125c <__aeabi_d2ulz>
 8001248:	4628      	mov	r0, r5
 800124a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800124e:	f000 f805 	bl	800125c <__aeabi_d2ulz>
 8001252:	4240      	negs	r0, r0
 8001254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001258:	bd38      	pop	{r3, r4, r5, pc}
 800125a:	bf00      	nop

0800125c <__aeabi_d2ulz>:
 800125c:	b5d0      	push	{r4, r6, r7, lr}
 800125e:	2200      	movs	r2, #0
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <__aeabi_d2ulz+0x34>)
 8001262:	4606      	mov	r6, r0
 8001264:	460f      	mov	r7, r1
 8001266:	f7ff f9a3 	bl	80005b0 <__aeabi_dmul>
 800126a:	f7ff fc79 	bl	8000b60 <__aeabi_d2uiz>
 800126e:	4604      	mov	r4, r0
 8001270:	f7ff f924 	bl	80004bc <__aeabi_ui2d>
 8001274:	2200      	movs	r2, #0
 8001276:	4b07      	ldr	r3, [pc, #28]	; (8001294 <__aeabi_d2ulz+0x38>)
 8001278:	f7ff f99a 	bl	80005b0 <__aeabi_dmul>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4630      	mov	r0, r6
 8001282:	4639      	mov	r1, r7
 8001284:	f7fe ffdc 	bl	8000240 <__aeabi_dsub>
 8001288:	f7ff fc6a 	bl	8000b60 <__aeabi_d2uiz>
 800128c:	4621      	mov	r1, r4
 800128e:	bdd0      	pop	{r4, r6, r7, pc}
 8001290:	3df00000 	.word	0x3df00000
 8001294:	41f00000 	.word	0x41f00000

08001298 <findBias>:

extern I2C_HandleTypeDef hi2c2;

static unsigned long seed = 1;

float findBias() {
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	seed = (1103515245 * seed + 12345) & 0x7fffffff;
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <findBias+0x38>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0c      	ldr	r2, [pc, #48]	; (80012d4 <findBias+0x3c>)
 80012a2:	fb02 f303 	mul.w	r3, r2, r3
 80012a6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80012aa:	3339      	adds	r3, #57	; 0x39
 80012ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012b0:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <findBias+0x38>)
 80012b2:	6013      	str	r3, [r2, #0]
	return (float) seed / 0x7fffffff;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <findBias+0x38>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fd77 	bl	8000dac <__aeabi_ui2f>
 80012be:	4603      	mov	r3, r0
 80012c0:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fe7d 	bl	8000fc4 <__aeabi_fdiv>
 80012ca:	4603      	mov	r3, r0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000000 	.word	0x20000000
 80012d4:	41c64e6d 	.word	0x41c64e6d

080012d8 <temp_correction>:

float temp_correction(float temp_min, float temp_max) {
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
	return temp_min + findBias() * (temp_max - temp_min);
 80012e2:	f7ff ffd9 	bl	8001298 <findBias>
 80012e6:	4604      	mov	r4, r0
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	6838      	ldr	r0, [r7, #0]
 80012ec:	f7ff fcac 	bl	8000c48 <__aeabi_fsub>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4619      	mov	r1, r3
 80012f4:	4620      	mov	r0, r4
 80012f6:	f7ff fdb1 	bl	8000e5c <__aeabi_fmul>
 80012fa:	4603      	mov	r3, r0
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fca4 	bl	8000c4c <__addsf3>
 8001304:	4603      	mov	r3, r0
}
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	bd90      	pop	{r4, r7, pc}
	...

08001310 <LM75A_GetTemperature>:

uint8_t Sign = ' ';

float LM75A_GetTemperature(void) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af04      	add	r7, sp, #16
	uint8_t TempHL[2];
	float Temp = 0.0;
 8001316:	f04f 0300 	mov.w	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
	float temp_corr = temp_correction(28, 31);
 800131c:	492a      	ldr	r1, [pc, #168]	; (80013c8 <LM75A_GetTemperature+0xb8>)
 800131e:	482b      	ldr	r0, [pc, #172]	; (80013cc <LM75A_GetTemperature+0xbc>)
 8001320:	f7ff ffda 	bl	80012d8 <temp_correction>
 8001324:	60b8      	str	r0, [r7, #8]
	float sizeof_temp = 0.1;
 8001326:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <LM75A_GetTemperature+0xc0>)
 8001328:	607b      	str	r3, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c2, LM75AD_devAddr, LM75AD_TempReg, I2C_MEMADD_SIZE_8BIT, TempHL, 2, 100);
 800132a:	2364      	movs	r3, #100	; 0x64
 800132c:	9302      	str	r3, [sp, #8]
 800132e:	2302      	movs	r3, #2
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	463b      	mov	r3, r7
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2301      	movs	r3, #1
 8001338:	2200      	movs	r2, #0
 800133a:	2148      	movs	r1, #72	; 0x48
 800133c:	4825      	ldr	r0, [pc, #148]	; (80013d4 <LM75A_GetTemperature+0xc4>)
 800133e:	f001 ff2d 	bl	800319c <HAL_I2C_Mem_Read>
	Temp = ((TempHL[0] << 8) | TempHL[1]);
 8001342:	783b      	ldrb	r3, [r7, #0]
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	787a      	ldrb	r2, [r7, #1]
 8001348:	4313      	orrs	r3, r2
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fd32 	bl	8000db4 <__aeabi_i2f>
 8001350:	4603      	mov	r3, r0
 8001352:	60fb      	str	r3, [r7, #12]
	if ((TempHL[0] & 0x80) != 0) {
 8001354:	783b      	ldrb	r3, [r7, #0]
 8001356:	b25b      	sxtb	r3, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	da0d      	bge.n	8001378 <LM75A_GetTemperature+0x68>
		Temp = ~(uint16_t) Temp + 1;
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f7ff ff43 	bl	80011e8 <__aeabi_f2uiz>
 8001362:	4603      	mov	r3, r0
 8001364:	b29b      	uxth	r3, r3
 8001366:	425b      	negs	r3, r3
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fd23 	bl	8000db4 <__aeabi_i2f>
 800136e:	4603      	mov	r3, r0
 8001370:	60fb      	str	r3, [r7, #12]
		Sign = '-';
 8001372:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <LM75A_GetTemperature+0xc8>)
 8001374:	222d      	movs	r2, #45	; 0x2d
 8001376:	701a      	strb	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(Sensor_GPIO_Port, Sensor_Pin) == GPIO_PIN_RESET)
 8001378:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800137c:	4817      	ldr	r0, [pc, #92]	; (80013dc <LM75A_GetTemperature+0xcc>)
 800137e:	f001 fd81 	bl	8002e84 <HAL_GPIO_ReadPin>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d104      	bne.n	8001392 <LM75A_GetTemperature+0x82>
		temp_corr = temp_correction(81, 112);
 8001388:	4915      	ldr	r1, [pc, #84]	; (80013e0 <LM75A_GetTemperature+0xd0>)
 800138a:	4816      	ldr	r0, [pc, #88]	; (80013e4 <LM75A_GetTemperature+0xd4>)
 800138c:	f7ff ffa4 	bl	80012d8 <temp_correction>
 8001390:	60b8      	str	r0, [r7, #8]
	Temp = Temp * sizeof_temp / 32 * 10 + temp_corr;
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	68f8      	ldr	r0, [r7, #12]
 8001396:	f7ff fd61 	bl	8000e5c <__aeabi_fmul>
 800139a:	4603      	mov	r3, r0
 800139c:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fe0f 	bl	8000fc4 <__aeabi_fdiv>
 80013a6:	4603      	mov	r3, r0
 80013a8:	490f      	ldr	r1, [pc, #60]	; (80013e8 <LM75A_GetTemperature+0xd8>)
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fd56 	bl	8000e5c <__aeabi_fmul>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4619      	mov	r1, r3
 80013b4:	68b8      	ldr	r0, [r7, #8]
 80013b6:	f7ff fc49 	bl	8000c4c <__addsf3>
 80013ba:	4603      	mov	r3, r0
 80013bc:	60fb      	str	r3, [r7, #12]
	return Temp;
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	41f80000 	.word	0x41f80000
 80013cc:	41e00000 	.word	0x41e00000
 80013d0:	3dcccccd 	.word	0x3dcccccd
 80013d4:	20000224 	.word	0x20000224
 80013d8:	20000004 	.word	0x20000004
 80013dc:	40010800 	.word	0x40010800
 80013e0:	42e00000 	.word	0x42e00000
 80013e4:	42a20000 	.word	0x42a20000
 80013e8:	41200000 	.word	0x41200000

080013ec <NRF24_Init>:
static void NRF24_Read_Buffer(nrf24 *node, uint8_t reg, uint8_t *data, uint16_t len);
static void NRF24_Send_Cmd(nrf24 *node, uint8_t cmd);
static void NRF24_Reset(nrf24 *node, uint8_t reg);

void NRF24_Init(nrf24 *node)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	NRF24_CE_Disable(node);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 fa55 	bl	80018a4 <NRF24_CE_Disable>
	NRF24_Write_Reg(node, CONFIG, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 fa80 	bl	8001904 <NRF24_Write_Reg>
	node->crc = NO_CRC;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	77da      	strb	r2, [r3, #31]
	NRF24_Write_Reg(node, EN_AA, 0x00);
 800140a:	2200      	movs	r2, #0
 800140c:	2101      	movs	r1, #1
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 fa78 	bl	8001904 <NRF24_Write_Reg>
	NRF24_Write_Reg(node, EN_RXADDR, 0x00);
 8001414:	2200      	movs	r2, #0
 8001416:	2102      	movs	r1, #2
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 fa73 	bl	8001904 <NRF24_Write_Reg>
	NRF24_Write_Reg(node, SETUP_AW, 0x03);
 800141e:	2203      	movs	r2, #3
 8001420:	2103      	movs	r1, #3
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 fa6e 	bl	8001904 <NRF24_Write_Reg>
	NRF24_Write_Reg(node, SETUP_RETR, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	2104      	movs	r1, #4
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 fa69 	bl	8001904 <NRF24_Write_Reg>
	NRF24_Set_DataRate(node, _250KBS);
 8001432:	2100      	movs	r1, #0
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 f813 	bl	8001460 <NRF24_Set_DataRate>
	NRF24_Set_PALevel(node, HIGH);
 800143a:	2103      	movs	r1, #3
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 f85b 	bl	80014f8 <NRF24_Set_PALevel>
	NRF24_Set_Channel(node, DEFAULT_CHANNEL);
 8001442:	2164      	movs	r1, #100	; 0x64
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 f8af 	bl	80015a8 <NRF24_Set_Channel>
	NRF24_Set_Mode(node, STANDBY);
 800144a:	2101      	movs	r1, #1
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 f8c1 	bl	80015d4 <NRF24_Set_Mode>
	NRF24_CE_Enable(node);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 fa16 	bl	8001884 <NRF24_CE_Enable>
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <NRF24_Set_DataRate>:

void NRF24_Set_DataRate(nrf24 *node, dat_rate _bitRate)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	70fb      	strb	r3, [r7, #3]
	NRF24_CE_Disable(node);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 fa19 	bl	80018a4 <NRF24_CE_Disable>
	uint8_t config = NRF24_Read_Reg(node, RF_SETUP);
 8001472:	2106      	movs	r1, #6
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 faac 	bl	80019d2 <NRF24_Read_Reg>
 800147a:	4603      	mov	r3, r0
 800147c:	73fb      	strb	r3, [r7, #15]

	switch (_bitRate)
 800147e:	78fb      	ldrb	r3, [r7, #3]
 8001480:	2b02      	cmp	r3, #2
 8001482:	d01e      	beq.n	80014c2 <NRF24_Set_DataRate+0x62>
 8001484:	2b02      	cmp	r3, #2
 8001486:	dc28      	bgt.n	80014da <NRF24_Set_DataRate+0x7a>
 8001488:	2b00      	cmp	r3, #0
 800148a:	d002      	beq.n	8001492 <NRF24_Set_DataRate+0x32>
 800148c:	2b01      	cmp	r3, #1
 800148e:	d00c      	beq.n	80014aa <NRF24_Set_DataRate+0x4a>
			config |= (1 << 3);
			node->bitRate = _2MBS;
			break;

		default:
			break;
 8001490:	e023      	b.n	80014da <NRF24_Set_DataRate+0x7a>
			config |= (1 << 5);
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	f043 0320 	orr.w	r3, r3, #32
 8001498:	73fb      	strb	r3, [r7, #15]
			config &=~(1 << 3);
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	f023 0308 	bic.w	r3, r3, #8
 80014a0:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _250KBS;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	775a      	strb	r2, [r3, #29]
			break;
 80014a8:	e018      	b.n	80014dc <NRF24_Set_DataRate+0x7c>
			config &=~(1 << 5);
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	f023 0320 	bic.w	r3, r3, #32
 80014b0:	73fb      	strb	r3, [r7, #15]
			config &=~(1 << 3);
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	f023 0308 	bic.w	r3, r3, #8
 80014b8:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _1MBS;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	775a      	strb	r2, [r3, #29]
			break;
 80014c0:	e00c      	b.n	80014dc <NRF24_Set_DataRate+0x7c>
			config &=~(1 << 5);
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	f023 0320 	bic.w	r3, r3, #32
 80014c8:	73fb      	strb	r3, [r7, #15]
			config |= (1 << 3);
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	f043 0308 	orr.w	r3, r3, #8
 80014d0:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _2MBS;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2202      	movs	r2, #2
 80014d6:	775a      	strb	r2, [r3, #29]
			break;
 80014d8:	e000      	b.n	80014dc <NRF24_Set_DataRate+0x7c>
			break;
 80014da:	bf00      	nop
	}
	NRF24_Write_Reg(node, RF_SETUP, config);
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	461a      	mov	r2, r3
 80014e0:	2106      	movs	r1, #6
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 fa0e 	bl	8001904 <NRF24_Write_Reg>
	NRF24_CE_Enable(node);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 f9cb 	bl	8001884 <NRF24_CE_Enable>
}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <NRF24_Set_PALevel>:

void NRF24_Set_PALevel(nrf24 *node, p_level pwr)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	70fb      	strb	r3, [r7, #3]
	NRF24_CE_Disable(node);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 f9cd 	bl	80018a4 <NRF24_CE_Disable>
	uint8_t config = NRF24_Read_Reg(node, RF_SETUP);
 800150a:	2106      	movs	r1, #6
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 fa60 	bl	80019d2 <NRF24_Read_Reg>
 8001512:	4603      	mov	r3, r0
 8001514:	73fb      	strb	r3, [r7, #15]

	switch (pwr) {
 8001516:	78fb      	ldrb	r3, [r7, #3]
 8001518:	2b03      	cmp	r3, #3
 800151a:	d837      	bhi.n	800158c <NRF24_Set_PALevel+0x94>
 800151c:	a201      	add	r2, pc, #4	; (adr r2, 8001524 <NRF24_Set_PALevel+0x2c>)
 800151e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001522:	bf00      	nop
 8001524:	08001535 	.word	0x08001535
 8001528:	0800154d 	.word	0x0800154d
 800152c:	08001565 	.word	0x08001565
 8001530:	0800157d 	.word	0x0800157d
		case VERY_LOW:
			config &=~(1 << 2);
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	f023 0304 	bic.w	r3, r3, #4
 800153a:	73fb      	strb	r3, [r7, #15]
			config &=~(1 << 1);
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	f023 0302 	bic.w	r3, r3, #2
 8001542:	73fb      	strb	r3, [r7, #15]
			node->pa = VERY_LOW;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	771a      	strb	r2, [r3, #28]
			break;
 800154a:	e020      	b.n	800158e <NRF24_Set_PALevel+0x96>

		case LOW:
			config &=~(1 << 2);
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	f023 0304 	bic.w	r3, r3, #4
 8001552:	73fb      	strb	r3, [r7, #15]
			config |= (1 << 1);
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	f043 0302 	orr.w	r3, r3, #2
 800155a:	73fb      	strb	r3, [r7, #15]
			node->pa = LOW;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	771a      	strb	r2, [r3, #28]
			break;
 8001562:	e014      	b.n	800158e <NRF24_Set_PALevel+0x96>

		case MID:
			config |= (1 << 2);
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	f043 0304 	orr.w	r3, r3, #4
 800156a:	73fb      	strb	r3, [r7, #15]
			config &=~(1 << 1);
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	f023 0302 	bic.w	r3, r3, #2
 8001572:	73fb      	strb	r3, [r7, #15]
			node->pa = MID;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2202      	movs	r2, #2
 8001578:	771a      	strb	r2, [r3, #28]
			break;
 800157a:	e008      	b.n	800158e <NRF24_Set_PALevel+0x96>

		case HIGH:
			config |= (1 << 2) | (1 << 1);
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	f043 0306 	orr.w	r3, r3, #6
 8001582:	73fb      	strb	r3, [r7, #15]
			node->pa = HIGH;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2203      	movs	r2, #3
 8001588:	771a      	strb	r2, [r3, #28]
			break;
 800158a:	e000      	b.n	800158e <NRF24_Set_PALevel+0x96>

		default:
			break;
 800158c:	bf00      	nop
	}
	NRF24_Write_Reg(node, RF_SETUP, config);
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	461a      	mov	r2, r3
 8001592:	2106      	movs	r1, #6
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f9b5 	bl	8001904 <NRF24_Write_Reg>
	NRF24_CE_Enable(node);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f972 	bl	8001884 <NRF24_CE_Enable>
}
 80015a0:	bf00      	nop
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <NRF24_Set_Channel>:

void NRF24_Set_Channel(nrf24 *node, uint8_t channel)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	70fb      	strb	r3, [r7, #3]
	NRF24_CE_Disable(node);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 f975 	bl	80018a4 <NRF24_CE_Disable>
	NRF24_Write_Reg(node, RF_CH, channel);
 80015ba:	78fb      	ldrb	r3, [r7, #3]
 80015bc:	461a      	mov	r2, r3
 80015be:	2105      	movs	r1, #5
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f99f 	bl	8001904 <NRF24_Write_Reg>
	NRF24_CE_Enable(node);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f95c 	bl	8001884 <NRF24_CE_Enable>
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <NRF24_Set_Mode>:

void NRF24_Set_Mode(nrf24 *node, mode_nrf _mode)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	70fb      	strb	r3, [r7, #3]
	uint8_t config = NRF24_Read_Reg(node, CONFIG);
 80015e0:	2100      	movs	r1, #0
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f9f5 	bl	80019d2 <NRF24_Read_Reg>
 80015e8:	4603      	mov	r3, r0
 80015ea:	73fb      	strb	r3, [r7, #15]

	switch (_mode)
 80015ec:	78fb      	ldrb	r3, [r7, #3]
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d837      	bhi.n	8001662 <NRF24_Set_Mode+0x8e>
 80015f2:	a201      	add	r2, pc, #4	; (adr r2, 80015f8 <NRF24_Set_Mode+0x24>)
 80015f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f8:	08001609 	.word	0x08001609
 80015fc:	08001619 	.word	0x08001619
 8001600:	0800162f 	.word	0x0800162f
 8001604:	0800164d 	.word	0x0800164d
	{
		case PWR_DOWN:
			config &=~(1 << 1);
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	f023 0302 	bic.w	r3, r3, #2
 800160e:	73fb      	strb	r3, [r7, #15]
			node->mode = PWR_DOWN;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	779a      	strb	r2, [r3, #30]
			break;
 8001616:	e025      	b.n	8001664 <NRF24_Set_Mode+0x90>

		case STANDBY:
			NRF24_CE_Disable(node);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 f943 	bl	80018a4 <NRF24_CE_Disable>
			config |= (1 << 1);
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	73fb      	strb	r3, [r7, #15]
			node->mode = STANDBY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	779a      	strb	r2, [r3, #30]
			break;
 800162c:	e01a      	b.n	8001664 <NRF24_Set_Mode+0x90>

		case TX_MODE:
			NRF24_CE_Enable(node);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f928 	bl	8001884 <NRF24_CE_Enable>
			config |= (1 << 1);
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	f043 0302 	orr.w	r3, r3, #2
 800163a:	73fb      	strb	r3, [r7, #15]
			config &=~(1 << 0);
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	f023 0301 	bic.w	r3, r3, #1
 8001642:	73fb      	strb	r3, [r7, #15]
			node->mode = TX_MODE;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2202      	movs	r2, #2
 8001648:	779a      	strb	r2, [r3, #30]
			break;
 800164a:	e00b      	b.n	8001664 <NRF24_Set_Mode+0x90>

		case RX_MODE:
			NRF24_CE_Enable(node);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 f919 	bl	8001884 <NRF24_CE_Enable>
			config |= (1 << 1) | (1 << 0);
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	f043 0303 	orr.w	r3, r3, #3
 8001658:	73fb      	strb	r3, [r7, #15]
			node->mode = RX_MODE;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2203      	movs	r2, #3
 800165e:	779a      	strb	r2, [r3, #30]
			break;
 8001660:	e000      	b.n	8001664 <NRF24_Set_Mode+0x90>

		default:
			break;
 8001662:	bf00      	nop
	}
	NRF24_Write_Reg(node, CONFIG, config);
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	461a      	mov	r2, r3
 8001668:	2100      	movs	r1, #0
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f94a 	bl	8001904 <NRF24_Write_Reg>
}
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <NRF24_Set_RxPipe>:
	}
	return (0);
}

void NRF24_Set_RxPipe(nrf24 *node, uint8_t *addr, uint8_t pipe, uint8_t payload)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	4611      	mov	r1, r2
 8001684:	461a      	mov	r2, r3
 8001686:	460b      	mov	r3, r1
 8001688:	71fb      	strb	r3, [r7, #7]
 800168a:	4613      	mov	r3, r2
 800168c:	71bb      	strb	r3, [r7, #6]
	NRF24_CE_Disable(node);
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f000 f908 	bl	80018a4 <NRF24_CE_Disable>
	NRF24_Reset(node, STATUS);
 8001694:	2107      	movs	r1, #7
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f000 f9ea 	bl	8001a70 <NRF24_Reset>
	uint8_t en_rxaddr = NRF24_Read_Reg(node, EN_RXADDR);
 800169c:	2102      	movs	r1, #2
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f000 f997 	bl	80019d2 <NRF24_Read_Reg>
 80016a4:	4603      	mov	r3, r0
 80016a6:	75fb      	strb	r3, [r7, #23]
	en_rxaddr |= (1 << pipe);
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	2201      	movs	r2, #1
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	b25a      	sxtb	r2, r3
 80016b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	75fb      	strb	r3, [r7, #23]
	NRF24_Write_Reg(node, EN_RXADDR, en_rxaddr);
 80016bc:	7dfb      	ldrb	r3, [r7, #23]
 80016be:	461a      	mov	r2, r3
 80016c0:	2102      	movs	r1, #2
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f000 f91e 	bl	8001904 <NRF24_Write_Reg>

	switch(pipe)
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	2b05      	cmp	r3, #5
 80016cc:	d860      	bhi.n	8001790 <NRF24_Set_RxPipe+0x118>
 80016ce:	a201      	add	r2, pc, #4	; (adr r2, 80016d4 <NRF24_Set_RxPipe+0x5c>)
 80016d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d4:	080016ed 	.word	0x080016ed
 80016d8:	08001707 	.word	0x08001707
 80016dc:	08001721 	.word	0x08001721
 80016e0:	0800173d 	.word	0x0800173d
 80016e4:	08001759 	.word	0x08001759
 80016e8:	08001775 	.word	0x08001775
	{
		case 0:
			NRF24_Write_Buffer(node, RX_ADDR_P0, addr, 5);
 80016ec:	2305      	movs	r3, #5
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	210a      	movs	r1, #10
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f000 f931 	bl	800195a <NRF24_Write_Buffer>
			NRF24_Write_Reg(node, RX_PW_P0, payload);
 80016f8:	79bb      	ldrb	r3, [r7, #6]
 80016fa:	461a      	mov	r2, r3
 80016fc:	2111      	movs	r1, #17
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f000 f900 	bl	8001904 <NRF24_Write_Reg>
			break;
 8001704:	e045      	b.n	8001792 <NRF24_Set_RxPipe+0x11a>

		case 1:
			NRF24_Write_Buffer(node, RX_ADDR_P1, addr, 5);
 8001706:	2305      	movs	r3, #5
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	210b      	movs	r1, #11
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f000 f924 	bl	800195a <NRF24_Write_Buffer>
			NRF24_Write_Reg(node, RX_PW_P1, payload);
 8001712:	79bb      	ldrb	r3, [r7, #6]
 8001714:	461a      	mov	r2, r3
 8001716:	2112      	movs	r1, #18
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 f8f3 	bl	8001904 <NRF24_Write_Reg>
			break;
 800171e:	e038      	b.n	8001792 <NRF24_Set_RxPipe+0x11a>

		case 2:
			NRF24_Write_Reg(node, RX_ADDR_P2, addr[0]);
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	210c      	movs	r1, #12
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f000 f8eb 	bl	8001904 <NRF24_Write_Reg>
			NRF24_Write_Reg(node, RX_PW_P2, payload);
 800172e:	79bb      	ldrb	r3, [r7, #6]
 8001730:	461a      	mov	r2, r3
 8001732:	2113      	movs	r1, #19
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f000 f8e5 	bl	8001904 <NRF24_Write_Reg>
			break;
 800173a:	e02a      	b.n	8001792 <NRF24_Set_RxPipe+0x11a>

		case 3:
			NRF24_Write_Reg(node, RX_ADDR_P3, addr[0]);
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	210d      	movs	r1, #13
 8001744:	68f8      	ldr	r0, [r7, #12]
 8001746:	f000 f8dd 	bl	8001904 <NRF24_Write_Reg>
			NRF24_Write_Reg(node, RX_PW_P3, payload);
 800174a:	79bb      	ldrb	r3, [r7, #6]
 800174c:	461a      	mov	r2, r3
 800174e:	2114      	movs	r1, #20
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f000 f8d7 	bl	8001904 <NRF24_Write_Reg>
			break;
 8001756:	e01c      	b.n	8001792 <NRF24_Set_RxPipe+0x11a>

		case 4:
			NRF24_Write_Reg(node, RX_ADDR_P4, addr[0]);
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	210e      	movs	r1, #14
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f000 f8cf 	bl	8001904 <NRF24_Write_Reg>
			NRF24_Write_Reg(node, RX_PW_P4, payload);
 8001766:	79bb      	ldrb	r3, [r7, #6]
 8001768:	461a      	mov	r2, r3
 800176a:	2115      	movs	r1, #21
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f000 f8c9 	bl	8001904 <NRF24_Write_Reg>
			break;
 8001772:	e00e      	b.n	8001792 <NRF24_Set_RxPipe+0x11a>

		case 5:
			NRF24_Write_Reg(node, RX_ADDR_P5, addr[0]);
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	210f      	movs	r1, #15
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f000 f8c1 	bl	8001904 <NRF24_Write_Reg>
			NRF24_Write_Reg(node, RX_PW_P5, payload);
 8001782:	79bb      	ldrb	r3, [r7, #6]
 8001784:	461a      	mov	r2, r3
 8001786:	2116      	movs	r1, #22
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f000 f8bb 	bl	8001904 <NRF24_Write_Reg>
			break;
 800178e:	e000      	b.n	8001792 <NRF24_Set_RxPipe+0x11a>

		default:
			break;
 8001790:	bf00      	nop
	}
	NRF24_CE_Enable(node);
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 f876 	bl	8001884 <NRF24_CE_Enable>
}
 8001798:	bf00      	nop
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <NRF24_Available>:

uint8_t NRF24_Available(nrf24 *node, uint8_t pipenum)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	70fb      	strb	r3, [r7, #3]
	uint8_t status = NRF24_Read_Reg(node, STATUS);
 80017ac:	2107      	movs	r1, #7
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 f90f 	bl	80019d2 <NRF24_Read_Reg>
 80017b4:	4603      	mov	r3, r0
 80017b6:	73fb      	strb	r3, [r7, #15]
	if((status - 64 == 0) && pipenum == 0)
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	2b40      	cmp	r3, #64	; 0x40
 80017bc:	d109      	bne.n	80017d2 <NRF24_Available+0x32>
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d106      	bne.n	80017d2 <NRF24_Available+0x32>
	{
		NRF24_Write_Reg(node, STATUS, (1 << 6));
 80017c4:	2240      	movs	r2, #64	; 0x40
 80017c6:	2107      	movs	r1, #7
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f89b 	bl	8001904 <NRF24_Write_Reg>
		return 1;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e012      	b.n	80017f8 <NRF24_Available+0x58>
	}
	else if((status & (1 << 6)) && (status & (pipenum << 1)))
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00c      	beq.n	80017f6 <NRF24_Available+0x56>
 80017dc:	7bfa      	ldrb	r2, [r7, #15]
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d006      	beq.n	80017f6 <NRF24_Available+0x56>
	{
		NRF24_Write_Reg(node, STATUS, (1 << 6));
 80017e8:	2240      	movs	r2, #64	; 0x40
 80017ea:	2107      	movs	r1, #7
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f889 	bl	8001904 <NRF24_Write_Reg>
		return 1;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <NRF24_Available+0x58>
	}
	return 0;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <NRF24_Receive>:

void NRF24_Receive(nrf24 *node, uint8_t *data, uint8_t len)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	4613      	mov	r3, r2
 800180c:	71fb      	strb	r3, [r7, #7]
	uint8_t cmdtosend = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	75fb      	strb	r3, [r7, #23]

	NRF24_CSN_Enable(node);
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f000 f856 	bl	80018c4 <NRF24_CSN_Enable>
	cmdtosend = R_RX_PAYLOAD;
 8001818:	2361      	movs	r3, #97	; 0x61
 800181a:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(node->hSPIx, &cmdtosend, 1, 100);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6998      	ldr	r0, [r3, #24]
 8001820:	f107 0117 	add.w	r1, r7, #23
 8001824:	2364      	movs	r3, #100	; 0x64
 8001826:	2201      	movs	r2, #1
 8001828:	f002 fe8a 	bl	8004540 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 800182c:	bf00      	nop
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	4618      	mov	r0, r3
 8001834:	f003 fa8f 	bl	8004d56 <HAL_SPI_GetState>
 8001838:	4603      	mov	r3, r0
 800183a:	2b01      	cmp	r3, #1
 800183c:	d1f7      	bne.n	800182e <NRF24_Receive+0x2e>
	HAL_SPI_Receive(node->hSPIx, data, len, NRF_RX_TIMEOUT);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6998      	ldr	r0, [r3, #24]
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	b29a      	uxth	r2, r3
 8001846:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800184a:	68b9      	ldr	r1, [r7, #8]
 800184c:	f002 ffbb 	bl	80047c6 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8001850:	bf00      	nop
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	4618      	mov	r0, r3
 8001858:	f003 fa7d 	bl	8004d56 <HAL_SPI_GetState>
 800185c:	4603      	mov	r3, r0
 800185e:	2b01      	cmp	r3, #1
 8001860:	d1f7      	bne.n	8001852 <NRF24_Receive+0x52>
	NRF24_CSN_Disable(node);
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 f83e 	bl	80018e4 <NRF24_CSN_Disable>
	HAL_Delay(1);
 8001868:	2001      	movs	r0, #1
 800186a:	f001 f86f 	bl	800294c <HAL_Delay>
	cmdtosend = FLUSH_RX;
 800186e:	23e2      	movs	r3, #226	; 0xe2
 8001870:	75fb      	strb	r3, [r7, #23]
	NRF24_Send_Cmd(node, cmdtosend);
 8001872:	7dfb      	ldrb	r3, [r7, #23]
 8001874:	4619      	mov	r1, r3
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f000 f8d8 	bl	8001a2c <NRF24_Send_Cmd>
}
 800187c:	bf00      	nop
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <NRF24_CE_Enable>:
	for (int i = 29; i < 38; i++)
		*(data + i) = NRF24_Read_Reg(node, i - 12);
}

static void NRF24_CE_Enable(nrf24 *node)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_SET);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6898      	ldr	r0, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	899b      	ldrh	r3, [r3, #12]
 8001894:	2201      	movs	r2, #1
 8001896:	4619      	mov	r1, r3
 8001898:	f001 fb0b 	bl	8002eb2 <HAL_GPIO_WritePin>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <NRF24_CE_Disable>:

static void NRF24_CE_Disable(nrf24 *node)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_RESET);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6898      	ldr	r0, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	899b      	ldrh	r3, [r3, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	4619      	mov	r1, r3
 80018b8:	f001 fafb 	bl	8002eb2 <HAL_GPIO_WritePin>
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <NRF24_CSN_Enable>:

static void NRF24_CSN_Enable(nrf24 *node)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_RESET);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	889b      	ldrh	r3, [r3, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	4619      	mov	r1, r3
 80018d8:	f001 faeb 	bl	8002eb2 <HAL_GPIO_WritePin>
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <NRF24_CSN_Disable>:

static void NRF24_CSN_Disable(nrf24 *node)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_SET);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	889b      	ldrh	r3, [r3, #4]
 80018f4:	2201      	movs	r2, #1
 80018f6:	4619      	mov	r1, r3
 80018f8:	f001 fadb 	bl	8002eb2 <HAL_GPIO_WritePin>
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <NRF24_Write_Reg>:

static void NRF24_Write_Reg(nrf24 *node, uint8_t reg, uint8_t data)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	70fb      	strb	r3, [r7, #3]
 8001910:	4613      	mov	r3, r2
 8001912:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	f043 0320 	orr.w	r3, r3, #32
 800191a:	b2db      	uxtb	r3, r3
 800191c:	733b      	strb	r3, [r7, #12]
	buf[1] = data;
 800191e:	78bb      	ldrb	r3, [r7, #2]
 8001920:	737b      	strb	r3, [r7, #13]
	NRF24_CSN_Enable(node);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ffce 	bl	80018c4 <NRF24_CSN_Enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 2, NRF_TX_TIMEOUT);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6998      	ldr	r0, [r3, #24]
 800192c:	f107 010c 	add.w	r1, r7, #12
 8001930:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001934:	2202      	movs	r2, #2
 8001936:	f002 fe03 	bl	8004540 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 800193a:	bf00      	nop
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	4618      	mov	r0, r3
 8001942:	f003 fa08 	bl	8004d56 <HAL_SPI_GetState>
 8001946:	4603      	mov	r3, r0
 8001948:	2b01      	cmp	r3, #1
 800194a:	d1f7      	bne.n	800193c <NRF24_Write_Reg+0x38>
	NRF24_CSN_Disable(node);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ffc9 	bl	80018e4 <NRF24_CSN_Disable>
}
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <NRF24_Write_Buffer>:

static void NRF24_Write_Buffer(nrf24 *node, uint8_t reg, uint8_t *data, uint16_t len)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	60f8      	str	r0, [r7, #12]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	461a      	mov	r2, r3
 8001966:	460b      	mov	r3, r1
 8001968:	72fb      	strb	r3, [r7, #11]
 800196a:	4613      	mov	r3, r2
 800196c:	813b      	strh	r3, [r7, #8]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 800196e:	7afb      	ldrb	r3, [r7, #11]
 8001970:	f043 0320 	orr.w	r3, r3, #32
 8001974:	b2db      	uxtb	r3, r3
 8001976:	753b      	strb	r3, [r7, #20]
	NRF24_CSN_Enable(node);
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	f7ff ffa3 	bl	80018c4 <NRF24_CSN_Enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 1, NRF_TX_TIMEOUT);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6998      	ldr	r0, [r3, #24]
 8001982:	f107 0114 	add.w	r1, r7, #20
 8001986:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800198a:	2201      	movs	r2, #1
 800198c:	f002 fdd8 	bl	8004540 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8001990:	bf00      	nop
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	4618      	mov	r0, r3
 8001998:	f003 f9dd 	bl	8004d56 <HAL_SPI_GetState>
 800199c:	4603      	mov	r3, r0
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d1f7      	bne.n	8001992 <NRF24_Write_Buffer+0x38>
	HAL_SPI_Transmit(node->hSPIx, data, len, NRF_TX_TIMEOUT);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6998      	ldr	r0, [r3, #24]
 80019a6:	893a      	ldrh	r2, [r7, #8]
 80019a8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	f002 fdc7 	bl	8004540 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 80019b2:	bf00      	nop
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f003 f9cc 	bl	8004d56 <HAL_SPI_GetState>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d1f7      	bne.n	80019b4 <NRF24_Write_Buffer+0x5a>
	NRF24_CSN_Disable(node);
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f7ff ff8d 	bl	80018e4 <NRF24_CSN_Disable>
}
 80019ca:	bf00      	nop
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <NRF24_Read_Reg>:

static uint8_t NRF24_Read_Reg(nrf24 *node, uint8_t reg)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b084      	sub	sp, #16
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	460b      	mov	r3, r1
 80019dc:	70fb      	strb	r3, [r7, #3]
	uint8_t data = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	73fb      	strb	r3, [r7, #15]
	NRF24_CSN_Enable(node);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff ff6e 	bl	80018c4 <NRF24_CSN_Enable>
	HAL_SPI_Transmit(node->hSPIx, &reg, 1, NRF_TX_TIMEOUT);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6998      	ldr	r0, [r3, #24]
 80019ec:	1cf9      	adds	r1, r7, #3
 80019ee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80019f2:	2201      	movs	r2, #1
 80019f4:	f002 fda4 	bl	8004540 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 80019f8:	bf00      	nop
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f003 f9a9 	bl	8004d56 <HAL_SPI_GetState>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d1f7      	bne.n	80019fa <NRF24_Read_Reg+0x28>
	HAL_SPI_Receive(node->hSPIx, &data, 1, NRF_RX_TIMEOUT);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6998      	ldr	r0, [r3, #24]
 8001a0e:	f107 010f 	add.w	r1, r7, #15
 8001a12:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a16:	2201      	movs	r2, #1
 8001a18:	f002 fed5 	bl	80047c6 <HAL_SPI_Receive>
	NRF24_CSN_Disable(node);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff61 	bl	80018e4 <NRF24_CSN_Disable>
	return data;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <NRF24_Send_Cmd>:
	HAL_SPI_Receive(node->hSPIx, data, len, NRF_RX_TIMEOUT);
	NRF24_CSN_Disable(node);
}

static void NRF24_Send_Cmd(nrf24 *node, uint8_t cmd)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	70fb      	strb	r3, [r7, #3]
	NRF24_CSN_Enable(node);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ff43 	bl	80018c4 <NRF24_CSN_Enable>
	HAL_SPI_Transmit(node->hSPIx, &cmd, 1, NRF_TX_TIMEOUT);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6998      	ldr	r0, [r3, #24]
 8001a42:	1cf9      	adds	r1, r7, #3
 8001a44:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f002 fd79 	bl	8004540 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8001a4e:	bf00      	nop
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f003 f97e 	bl	8004d56 <HAL_SPI_GetState>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d1f7      	bne.n	8001a50 <NRF24_Send_Cmd+0x24>
	NRF24_CSN_Disable(node);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ff3f 	bl	80018e4 <NRF24_CSN_Disable>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <NRF24_Reset>:

static void NRF24_Reset(nrf24 *node, uint8_t reg)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	70fb      	strb	r3, [r7, #3]
	if(reg == STATUS)
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	2b07      	cmp	r3, #7
 8001a80:	d105      	bne.n	8001a8e <NRF24_Reset+0x1e>
	{
		NRF24_Write_Reg(node, STATUS, 0x00);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2107      	movs	r1, #7
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ff3c 	bl	8001904 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P5, 0);
		NRF24_Write_Reg(node, FIFO_STATUS, 0x11);
		NRF24_Write_Reg(node, DYNPD, 0);
		NRF24_Write_Reg(node, FEATURE, 0);
	}
}
 8001a8c:	e0a8      	b.n	8001be0 <NRF24_Reset+0x170>
	else if(reg == FIFO_STATUS)
 8001a8e:	78fb      	ldrb	r3, [r7, #3]
 8001a90:	2b17      	cmp	r3, #23
 8001a92:	d105      	bne.n	8001aa0 <NRF24_Reset+0x30>
		NRF24_Write_Reg(node, FIFO_STATUS, 0x11);
 8001a94:	2211      	movs	r2, #17
 8001a96:	2117      	movs	r1, #23
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ff33 	bl	8001904 <NRF24_Write_Reg>
}
 8001a9e:	e09f      	b.n	8001be0 <NRF24_Reset+0x170>
		NRF24_Write_Reg(node, CONFIG, 0x08);
 8001aa0:	2208      	movs	r2, #8
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ff2d 	bl	8001904 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, EN_AA, 0x3F);
 8001aaa:	223f      	movs	r2, #63	; 0x3f
 8001aac:	2101      	movs	r1, #1
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ff28 	bl	8001904 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, EN_RXADDR, 0x03);
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	2102      	movs	r1, #2
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ff23 	bl	8001904 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, SETUP_AW, 0x03);
 8001abe:	2203      	movs	r2, #3
 8001ac0:	2103      	movs	r1, #3
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ff1e 	bl	8001904 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, SETUP_RETR, 0x03);
 8001ac8:	2203      	movs	r2, #3
 8001aca:	2104      	movs	r1, #4
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff ff19 	bl	8001904 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RF_CH, 0x02);
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	2105      	movs	r1, #5
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ff14 	bl	8001904 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RF_SETUP, 0x0E);
 8001adc:	220e      	movs	r2, #14
 8001ade:	2106      	movs	r1, #6
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ff0f 	bl	8001904 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, STATUS, 0x00);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2107      	movs	r1, #7
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ff0a 	bl	8001904 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, OBSERVE_TX, 0x00);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2108      	movs	r1, #8
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ff05 	bl	8001904 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RPD, 0x00);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2109      	movs	r1, #9
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff ff00 	bl	8001904 <NRF24_Write_Reg>
		uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001b04:	4a38      	ldr	r2, [pc, #224]	; (8001be8 <NRF24_Reset+0x178>)
 8001b06:	f107 0318 	add.w	r3, r7, #24
 8001b0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b0e:	6018      	str	r0, [r3, #0]
 8001b10:	3304      	adds	r3, #4
 8001b12:	7019      	strb	r1, [r3, #0]
		NRF24_Write_Buffer(node, RX_ADDR_P0, rx_addr_p0_def, 5);
 8001b14:	f107 0218 	add.w	r2, r7, #24
 8001b18:	2305      	movs	r3, #5
 8001b1a:	210a      	movs	r1, #10
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ff1c 	bl	800195a <NRF24_Write_Buffer>
		uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8001b22:	4a32      	ldr	r2, [pc, #200]	; (8001bec <NRF24_Reset+0x17c>)
 8001b24:	f107 0310 	add.w	r3, r7, #16
 8001b28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b2c:	6018      	str	r0, [r3, #0]
 8001b2e:	3304      	adds	r3, #4
 8001b30:	7019      	strb	r1, [r3, #0]
		NRF24_Write_Buffer(node, RX_ADDR_P1, rx_addr_p1_def, 5);
 8001b32:	f107 0210 	add.w	r2, r7, #16
 8001b36:	2305      	movs	r3, #5
 8001b38:	210b      	movs	r1, #11
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ff0d 	bl	800195a <NRF24_Write_Buffer>
		NRF24_Write_Reg(node, RX_ADDR_P2, 0xC3);
 8001b40:	22c3      	movs	r2, #195	; 0xc3
 8001b42:	210c      	movs	r1, #12
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff fedd 	bl	8001904 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_ADDR_P3, 0xC4);
 8001b4a:	22c4      	movs	r2, #196	; 0xc4
 8001b4c:	210d      	movs	r1, #13
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff fed8 	bl	8001904 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_ADDR_P4, 0xC5);
 8001b54:	22c5      	movs	r2, #197	; 0xc5
 8001b56:	210e      	movs	r1, #14
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff fed3 	bl	8001904 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_ADDR_P5, 0xC6);
 8001b5e:	22c6      	movs	r2, #198	; 0xc6
 8001b60:	210f      	movs	r1, #15
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff fece 	bl	8001904 <NRF24_Write_Reg>
		uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001b68:	4a1f      	ldr	r2, [pc, #124]	; (8001be8 <NRF24_Reset+0x178>)
 8001b6a:	f107 0308 	add.w	r3, r7, #8
 8001b6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b72:	6018      	str	r0, [r3, #0]
 8001b74:	3304      	adds	r3, #4
 8001b76:	7019      	strb	r1, [r3, #0]
		NRF24_Write_Buffer(node, TX_ADDR, tx_addr_def, 5);
 8001b78:	f107 0208 	add.w	r2, r7, #8
 8001b7c:	2305      	movs	r3, #5
 8001b7e:	2110      	movs	r1, #16
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff feea 	bl	800195a <NRF24_Write_Buffer>
		NRF24_Write_Reg(node, RX_PW_P0, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2111      	movs	r1, #17
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff feba 	bl	8001904 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P1, 0);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2112      	movs	r1, #18
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff feb5 	bl	8001904 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P2, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2113      	movs	r1, #19
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff feb0 	bl	8001904 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P3, 0);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2114      	movs	r1, #20
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff feab 	bl	8001904 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P4, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2115      	movs	r1, #21
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff fea6 	bl	8001904 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P5, 0);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2116      	movs	r1, #22
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff fea1 	bl	8001904 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, FIFO_STATUS, 0x11);
 8001bc2:	2211      	movs	r2, #17
 8001bc4:	2117      	movs	r1, #23
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff fe9c 	bl	8001904 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, DYNPD, 0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	211c      	movs	r1, #28
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff fe97 	bl	8001904 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, FEATURE, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	211d      	movs	r1, #29
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff fe92 	bl	8001904 <NRF24_Write_Reg>
}
 8001be0:	bf00      	nop
 8001be2:	3720      	adds	r7, #32
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	0800a7d8 	.word	0x0800a7d8
 8001bec:	0800a7e0 	.word	0x0800a7e0

08001bf0 <Water_Bump_Func>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Water_Bump_Func(void) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN_Relay_GPIO_Port, IN_Relay_Pin, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bfc:	4821      	ldr	r0, [pc, #132]	; (8001c84 <Water_Bump_Func+0x94>)
 8001bfe:	f001 f958 	bl	8002eb2 <HAL_GPIO_WritePin>
	char buffer[13];
	float Temp = LM75A_GetTemperature();
 8001c02:	f7ff fb85 	bl	8001310 <LM75A_GetTemperature>
 8001c06:	6178      	str	r0, [r7, #20]
	if (Temp > 10 && Temp < 100) {
 8001c08:	491f      	ldr	r1, [pc, #124]	; (8001c88 <Water_Bump_Func+0x98>)
 8001c0a:	6978      	ldr	r0, [r7, #20]
 8001c0c:	f7ff fae2 	bl	80011d4 <__aeabi_fcmpgt>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d019      	beq.n	8001c4a <Water_Bump_Func+0x5a>
 8001c16:	491d      	ldr	r1, [pc, #116]	; (8001c8c <Water_Bump_Func+0x9c>)
 8001c18:	6978      	ldr	r0, [r7, #20]
 8001c1a:	f7ff fabd 	bl	8001198 <__aeabi_fcmplt>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d012      	beq.n	8001c4a <Water_Bump_Func+0x5a>
		sprintf(buffer, "Temp: %.2f\n\t", Temp);
 8001c24:	6978      	ldr	r0, [r7, #20]
 8001c26:	f7fe fc6b 	bl	8000500 <__aeabi_f2d>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	1d38      	adds	r0, r7, #4
 8001c30:	4917      	ldr	r1, [pc, #92]	; (8001c90 <Water_Bump_Func+0xa0>)
 8001c32:	f005 f93b 	bl	8006eac <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t*) buffer, sizeof(buffer), 10);
 8001c36:	1d39      	adds	r1, r7, #4
 8001c38:	230a      	movs	r3, #10
 8001c3a:	220d      	movs	r2, #13
 8001c3c:	4815      	ldr	r0, [pc, #84]	; (8001c94 <Water_Bump_Func+0xa4>)
 8001c3e:	f004 f887 	bl	8005d50 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8001c42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c46:	f000 fe81 	bl	800294c <HAL_Delay>
	}
	HAL_GPIO_WritePin(IN_Relay_GPIO_Port, IN_Relay_Pin, (Temp > 75 && Temp < 111) ? GPIO_PIN_SET:GPIO_PIN_RESET);
 8001c4a:	4913      	ldr	r1, [pc, #76]	; (8001c98 <Water_Bump_Func+0xa8>)
 8001c4c:	6978      	ldr	r0, [r7, #20]
 8001c4e:	f7ff fac1 	bl	80011d4 <__aeabi_fcmpgt>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <Water_Bump_Func+0x7a>
 8001c58:	4910      	ldr	r1, [pc, #64]	; (8001c9c <Water_Bump_Func+0xac>)
 8001c5a:	6978      	ldr	r0, [r7, #20]
 8001c5c:	f7ff fa9c 	bl	8001198 <__aeabi_fcmplt>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <Water_Bump_Func+0x7a>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <Water_Bump_Func+0x7c>
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	461a      	mov	r2, r3
 8001c70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c74:	4803      	ldr	r0, [pc, #12]	; (8001c84 <Water_Bump_Func+0x94>)
 8001c76:	f001 f91c 	bl	8002eb2 <HAL_GPIO_WritePin>
}
 8001c7a:	bf00      	nop
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40010800 	.word	0x40010800
 8001c88:	41200000 	.word	0x41200000
 8001c8c:	42c80000 	.word	0x42c80000
 8001c90:	0800a7e8 	.word	0x0800a7e8
 8001c94:	20000318 	.word	0x20000318
 8001c98:	42960000 	.word	0x42960000
 8001c9c:	42de0000 	.word	0x42de0000

08001ca0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001ca4:	f000 fdf0 	bl	8002888 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001ca8:	f000 f988 	bl	8001fbc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001cac:	f000 fada 	bl	8002264 <MX_GPIO_Init>
	MX_SPI1_Init();
 8001cb0:	f000 f9f8 	bl	80020a4 <MX_SPI1_Init>
	MX_TIM2_Init();
 8001cb4:	f000 fa2c 	bl	8002110 <MX_TIM2_Init>
	MX_UART4_Init();
 8001cb8:	f000 faaa 	bl	8002210 <MX_UART4_Init>
	MX_I2C2_Init();
 8001cbc:	f000 f9c4 	bl	8002048 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
	nrfRx.CE_port = NRF_CE_GPIO_Port;
 8001cc0:	4bb6      	ldr	r3, [pc, #728]	; (8001f9c <main+0x2fc>)
 8001cc2:	4ab7      	ldr	r2, [pc, #732]	; (8001fa0 <main+0x300>)
 8001cc4:	609a      	str	r2, [r3, #8]
	nrfRx.CE_pin = NRF_CE_Pin;
 8001cc6:	4bb5      	ldr	r3, [pc, #724]	; (8001f9c <main+0x2fc>)
 8001cc8:	2208      	movs	r2, #8
 8001cca:	819a      	strh	r2, [r3, #12]
	nrfRx.CSN_port = NRF_CSN_GPIO_Port;
 8001ccc:	4bb3      	ldr	r3, [pc, #716]	; (8001f9c <main+0x2fc>)
 8001cce:	4ab4      	ldr	r2, [pc, #720]	; (8001fa0 <main+0x300>)
 8001cd0:	601a      	str	r2, [r3, #0]
	nrfRx.CSN_pin = NRF_CSN_Pin;
 8001cd2:	4bb2      	ldr	r3, [pc, #712]	; (8001f9c <main+0x2fc>)
 8001cd4:	2210      	movs	r2, #16
 8001cd6:	809a      	strh	r2, [r3, #4]
	nrfRx.IRQ_port = NRF_IRQ_GPIO_Port;
 8001cd8:	4bb0      	ldr	r3, [pc, #704]	; (8001f9c <main+0x2fc>)
 8001cda:	4ab1      	ldr	r2, [pc, #708]	; (8001fa0 <main+0x300>)
 8001cdc:	611a      	str	r2, [r3, #16]
	nrfRx.IRQ_pin = NRF_IRQ_Pin;
 8001cde:	4baf      	ldr	r3, [pc, #700]	; (8001f9c <main+0x2fc>)
 8001ce0:	2204      	movs	r2, #4
 8001ce2:	829a      	strh	r2, [r3, #20]
	nrfRx.hSPIx = &hspi1;
 8001ce4:	4bad      	ldr	r3, [pc, #692]	; (8001f9c <main+0x2fc>)
 8001ce6:	4aaf      	ldr	r2, [pc, #700]	; (8001fa4 <main+0x304>)
 8001ce8:	619a      	str	r2, [r3, #24]
	NRF24_Init(&nrfRx);
 8001cea:	48ac      	ldr	r0, [pc, #688]	; (8001f9c <main+0x2fc>)
 8001cec:	f7ff fb7e 	bl	80013ec <NRF24_Init>
	NRF24_Set_DataRate(&nrfRx, _250KBS);
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	48aa      	ldr	r0, [pc, #680]	; (8001f9c <main+0x2fc>)
 8001cf4:	f7ff fbb4 	bl	8001460 <NRF24_Set_DataRate>
	NRF24_Set_PALevel(&nrfRx, HIGH);
 8001cf8:	2103      	movs	r1, #3
 8001cfa:	48a8      	ldr	r0, [pc, #672]	; (8001f9c <main+0x2fc>)
 8001cfc:	f7ff fbfc 	bl	80014f8 <NRF24_Set_PALevel>
	NRF24_Set_RxPipe(&nrfRx, rxAddr, 0, SIZE_RX_BUF);
 8001d00:	2304      	movs	r3, #4
 8001d02:	2200      	movs	r2, #0
 8001d04:	49a8      	ldr	r1, [pc, #672]	; (8001fa8 <main+0x308>)
 8001d06:	48a5      	ldr	r0, [pc, #660]	; (8001f9c <main+0x2fc>)
 8001d08:	f7ff fcb6 	bl	8001678 <NRF24_Set_RxPipe>
	NRF24_Set_Mode(&nrfRx, RX_MODE);
 8001d0c:	2103      	movs	r1, #3
 8001d0e:	48a3      	ldr	r0, [pc, #652]	; (8001f9c <main+0x2fc>)
 8001d10:	f7ff fc60 	bl	80015d4 <NRF24_Set_Mode>

	rx_data[0] = 0;
 8001d14:	4ba5      	ldr	r3, [pc, #660]	; (8001fac <main+0x30c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	701a      	strb	r2, [r3, #0]
	rx_data[1] = 0;
 8001d1a:	4ba4      	ldr	r3, [pc, #656]	; (8001fac <main+0x30c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	705a      	strb	r2, [r3, #1]
	rx_data[2] = 0;
 8001d20:	4ba2      	ldr	r3, [pc, #648]	; (8001fac <main+0x30c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	709a      	strb	r2, [r3, #2]
	rx_data[3] = 0;
 8001d26:	4ba1      	ldr	r3, [pc, #644]	; (8001fac <main+0x30c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	70da      	strb	r2, [r3, #3]

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	48a0      	ldr	r0, [pc, #640]	; (8001fb0 <main+0x310>)
 8001d30:	f003 f9be 	bl	80050b0 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001d34:	4b9e      	ldr	r3, [pc, #632]	; (8001fb0 <main+0x310>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001d3c:	2104      	movs	r1, #4
 8001d3e:	489c      	ldr	r0, [pc, #624]	; (8001fb0 <main+0x310>)
 8001d40:	f003 f9b6 	bl	80050b0 <HAL_TIM_PWM_Start>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (NRF24_Available(&nrfRx, 0) == 1) {
 8001d44:	2100      	movs	r1, #0
 8001d46:	4895      	ldr	r0, [pc, #596]	; (8001f9c <main+0x2fc>)
 8001d48:	f7ff fd2a 	bl	80017a0 <NRF24_Available>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	f040 8113 	bne.w	8001f7a <main+0x2da>
			NRF24_Receive(&nrfRx, rx_data, SIZE_RX_BUF);
 8001d54:	2204      	movs	r2, #4
 8001d56:	4995      	ldr	r1, [pc, #596]	; (8001fac <main+0x30c>)
 8001d58:	4890      	ldr	r0, [pc, #576]	; (8001f9c <main+0x2fc>)
 8001d5a:	f7ff fd51 	bl	8001800 <NRF24_Receive>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001d5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d62:	488f      	ldr	r0, [pc, #572]	; (8001fa0 <main+0x300>)
 8001d64:	f001 f8bd 	bl	8002ee2 <HAL_GPIO_TogglePin>

			if (rx_data[0] == 1) {
 8001d68:	4b90      	ldr	r3, [pc, #576]	; (8001fac <main+0x30c>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d132      	bne.n	8001dd6 <main+0x136>
//				đi thẳng
				HAL_GPIO_WritePin(IN_1_GPIO_Port, IN_1_Pin, GPIO_PIN_SET);
 8001d70:	2201      	movs	r2, #1
 8001d72:	2110      	movs	r1, #16
 8001d74:	488f      	ldr	r0, [pc, #572]	; (8001fb4 <main+0x314>)
 8001d76:	f001 f89c 	bl	8002eb2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_2_GPIO_Port, IN_2_Pin, GPIO_PIN_RESET);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2120      	movs	r1, #32
 8001d7e:	488d      	ldr	r0, [pc, #564]	; (8001fb4 <main+0x314>)
 8001d80:	f001 f897 	bl	8002eb2 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8001d84:	4b8a      	ldr	r3, [pc, #552]	; (8001fb0 <main+0x310>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d8c:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);
 8001d8e:	200a      	movs	r0, #10
 8001d90:	f000 fddc 	bl	800294c <HAL_Delay>
				HAL_GPIO_WritePin(IN_3_GPIO_Port, IN_3_Pin, GPIO_PIN_SET);
 8001d94:	2201      	movs	r2, #1
 8001d96:	2101      	movs	r1, #1
 8001d98:	4887      	ldr	r0, [pc, #540]	; (8001fb8 <main+0x318>)
 8001d9a:	f001 f88a 	bl	8002eb2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_4_GPIO_Port, IN_4_Pin, GPIO_PIN_RESET);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2102      	movs	r1, #2
 8001da2:	4885      	ldr	r0, [pc, #532]	; (8001fb8 <main+0x318>)
 8001da4:	f001 f885 	bl	8002eb2 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8001da8:	4b81      	ldr	r3, [pc, #516]	; (8001fb0 <main+0x310>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001db0:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);
 8001db2:	200a      	movs	r0, #10
 8001db4:	f000 fdca 	bl	800294c <HAL_Delay>
				rx_data[0] = 0;
 8001db8:	4b7c      	ldr	r3, [pc, #496]	; (8001fac <main+0x30c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
				rx_data[1] = 0;
 8001dbe:	4b7b      	ldr	r3, [pc, #492]	; (8001fac <main+0x30c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	705a      	strb	r2, [r3, #1]
				rx_data[2] = 0;
 8001dc4:	4b79      	ldr	r3, [pc, #484]	; (8001fac <main+0x30c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	709a      	strb	r2, [r3, #2]
				rx_data[3] = 0;
 8001dca:	4b78      	ldr	r3, [pc, #480]	; (8001fac <main+0x30c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	70da      	strb	r2, [r3, #3]
				Water_Bump_Func();
 8001dd0:	f7ff ff0e 	bl	8001bf0 <Water_Bump_Func>
 8001dd4:	e0d1      	b.n	8001f7a <main+0x2da>
			} else if (rx_data[1] == 1) {
 8001dd6:	4b75      	ldr	r3, [pc, #468]	; (8001fac <main+0x30c>)
 8001dd8:	785b      	ldrb	r3, [r3, #1]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d132      	bne.n	8001e44 <main+0x1a4>
//				đi lùi
				HAL_GPIO_WritePin(IN_1_GPIO_Port, IN_1_Pin, GPIO_PIN_RESET);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2110      	movs	r1, #16
 8001de2:	4874      	ldr	r0, [pc, #464]	; (8001fb4 <main+0x314>)
 8001de4:	f001 f865 	bl	8002eb2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_2_GPIO_Port, IN_2_Pin, GPIO_PIN_SET);
 8001de8:	2201      	movs	r2, #1
 8001dea:	2120      	movs	r1, #32
 8001dec:	4871      	ldr	r0, [pc, #452]	; (8001fb4 <main+0x314>)
 8001dee:	f001 f860 	bl	8002eb2 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8001df2:	4b6f      	ldr	r3, [pc, #444]	; (8001fb0 <main+0x310>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dfa:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);
 8001dfc:	200a      	movs	r0, #10
 8001dfe:	f000 fda5 	bl	800294c <HAL_Delay>
				HAL_GPIO_WritePin(IN_3_GPIO_Port, IN_3_Pin, GPIO_PIN_RESET);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2101      	movs	r1, #1
 8001e06:	486c      	ldr	r0, [pc, #432]	; (8001fb8 <main+0x318>)
 8001e08:	f001 f853 	bl	8002eb2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_4_GPIO_Port, IN_4_Pin, GPIO_PIN_SET);
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	2102      	movs	r1, #2
 8001e10:	4869      	ldr	r0, [pc, #420]	; (8001fb8 <main+0x318>)
 8001e12:	f001 f84e 	bl	8002eb2 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8001e16:	4b66      	ldr	r3, [pc, #408]	; (8001fb0 <main+0x310>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e1e:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);
 8001e20:	200a      	movs	r0, #10
 8001e22:	f000 fd93 	bl	800294c <HAL_Delay>
				rx_data[0] = 0;
 8001e26:	4b61      	ldr	r3, [pc, #388]	; (8001fac <main+0x30c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
				rx_data[1] = 0;
 8001e2c:	4b5f      	ldr	r3, [pc, #380]	; (8001fac <main+0x30c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	705a      	strb	r2, [r3, #1]
				rx_data[2] = 0;
 8001e32:	4b5e      	ldr	r3, [pc, #376]	; (8001fac <main+0x30c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	709a      	strb	r2, [r3, #2]
				rx_data[3] = 0;
 8001e38:	4b5c      	ldr	r3, [pc, #368]	; (8001fac <main+0x30c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	70da      	strb	r2, [r3, #3]
				Water_Bump_Func();
 8001e3e:	f7ff fed7 	bl	8001bf0 <Water_Bump_Func>
 8001e42:	e09a      	b.n	8001f7a <main+0x2da>
			} else if (rx_data[2] == 1) {
 8001e44:	4b59      	ldr	r3, [pc, #356]	; (8001fac <main+0x30c>)
 8001e46:	789b      	ldrb	r3, [r3, #2]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d132      	bne.n	8001eb2 <main+0x212>
				//				đi phải
				HAL_GPIO_WritePin(IN_1_GPIO_Port, IN_1_Pin, GPIO_PIN_RESET);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2110      	movs	r1, #16
 8001e50:	4858      	ldr	r0, [pc, #352]	; (8001fb4 <main+0x314>)
 8001e52:	f001 f82e 	bl	8002eb2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_2_GPIO_Port, IN_2_Pin, GPIO_PIN_SET);
 8001e56:	2201      	movs	r2, #1
 8001e58:	2120      	movs	r1, #32
 8001e5a:	4856      	ldr	r0, [pc, #344]	; (8001fb4 <main+0x314>)
 8001e5c:	f001 f829 	bl	8002eb2 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8001e60:	4b53      	ldr	r3, [pc, #332]	; (8001fb0 <main+0x310>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e68:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);
 8001e6a:	200a      	movs	r0, #10
 8001e6c:	f000 fd6e 	bl	800294c <HAL_Delay>
				HAL_GPIO_WritePin(IN_3_GPIO_Port, IN_3_Pin, GPIO_PIN_SET);
 8001e70:	2201      	movs	r2, #1
 8001e72:	2101      	movs	r1, #1
 8001e74:	4850      	ldr	r0, [pc, #320]	; (8001fb8 <main+0x318>)
 8001e76:	f001 f81c 	bl	8002eb2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_4_GPIO_Port, IN_4_Pin, GPIO_PIN_RESET);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2102      	movs	r1, #2
 8001e7e:	484e      	ldr	r0, [pc, #312]	; (8001fb8 <main+0x318>)
 8001e80:	f001 f817 	bl	8002eb2 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8001e84:	4b4a      	ldr	r3, [pc, #296]	; (8001fb0 <main+0x310>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e8c:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);
 8001e8e:	200a      	movs	r0, #10
 8001e90:	f000 fd5c 	bl	800294c <HAL_Delay>
				rx_data[0] = 0;
 8001e94:	4b45      	ldr	r3, [pc, #276]	; (8001fac <main+0x30c>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
				rx_data[1] = 0;
 8001e9a:	4b44      	ldr	r3, [pc, #272]	; (8001fac <main+0x30c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	705a      	strb	r2, [r3, #1]
				rx_data[2] = 0;
 8001ea0:	4b42      	ldr	r3, [pc, #264]	; (8001fac <main+0x30c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	709a      	strb	r2, [r3, #2]
				rx_data[3] = 0;
 8001ea6:	4b41      	ldr	r3, [pc, #260]	; (8001fac <main+0x30c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	70da      	strb	r2, [r3, #3]
				Water_Bump_Func();
 8001eac:	f7ff fea0 	bl	8001bf0 <Water_Bump_Func>
 8001eb0:	e063      	b.n	8001f7a <main+0x2da>
			} else if (rx_data[3] == 1) {
 8001eb2:	4b3e      	ldr	r3, [pc, #248]	; (8001fac <main+0x30c>)
 8001eb4:	78db      	ldrb	r3, [r3, #3]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d132      	bne.n	8001f20 <main+0x280>
				//				đi trái
				HAL_GPIO_WritePin(IN_1_GPIO_Port, IN_1_Pin, GPIO_PIN_SET);
 8001eba:	2201      	movs	r2, #1
 8001ebc:	2110      	movs	r1, #16
 8001ebe:	483d      	ldr	r0, [pc, #244]	; (8001fb4 <main+0x314>)
 8001ec0:	f000 fff7 	bl	8002eb2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_2_GPIO_Port, IN_2_Pin, GPIO_PIN_RESET);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2120      	movs	r1, #32
 8001ec8:	483a      	ldr	r0, [pc, #232]	; (8001fb4 <main+0x314>)
 8001eca:	f000 fff2 	bl	8002eb2 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8001ece:	4b38      	ldr	r3, [pc, #224]	; (8001fb0 <main+0x310>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ed6:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);
 8001ed8:	200a      	movs	r0, #10
 8001eda:	f000 fd37 	bl	800294c <HAL_Delay>
				HAL_GPIO_WritePin(IN_3_GPIO_Port, IN_3_Pin, GPIO_PIN_RESET);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	4835      	ldr	r0, [pc, #212]	; (8001fb8 <main+0x318>)
 8001ee4:	f000 ffe5 	bl	8002eb2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_4_GPIO_Port, IN_4_Pin, GPIO_PIN_SET);
 8001ee8:	2201      	movs	r2, #1
 8001eea:	2102      	movs	r1, #2
 8001eec:	4832      	ldr	r0, [pc, #200]	; (8001fb8 <main+0x318>)
 8001eee:	f000 ffe0 	bl	8002eb2 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8001ef2:	4b2f      	ldr	r3, [pc, #188]	; (8001fb0 <main+0x310>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001efa:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);
 8001efc:	200a      	movs	r0, #10
 8001efe:	f000 fd25 	bl	800294c <HAL_Delay>
				rx_data[0] = 0;
 8001f02:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <main+0x30c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
				rx_data[1] = 0;
 8001f08:	4b28      	ldr	r3, [pc, #160]	; (8001fac <main+0x30c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	705a      	strb	r2, [r3, #1]
				rx_data[2] = 0;
 8001f0e:	4b27      	ldr	r3, [pc, #156]	; (8001fac <main+0x30c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	709a      	strb	r2, [r3, #2]
				rx_data[3] = 0;
 8001f14:	4b25      	ldr	r3, [pc, #148]	; (8001fac <main+0x30c>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	70da      	strb	r2, [r3, #3]
				Water_Bump_Func();
 8001f1a:	f7ff fe69 	bl	8001bf0 <Water_Bump_Func>
 8001f1e:	e02c      	b.n	8001f7a <main+0x2da>
			} else {
				HAL_GPIO_WritePin(IN_1_GPIO_Port, IN_1_Pin, GPIO_PIN_RESET);
 8001f20:	2200      	movs	r2, #0
 8001f22:	2110      	movs	r1, #16
 8001f24:	4823      	ldr	r0, [pc, #140]	; (8001fb4 <main+0x314>)
 8001f26:	f000 ffc4 	bl	8002eb2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_2_GPIO_Port, IN_2_Pin, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2120      	movs	r1, #32
 8001f2e:	4821      	ldr	r0, [pc, #132]	; (8001fb4 <main+0x314>)
 8001f30:	f000 ffbf 	bl	8002eb2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_3_GPIO_Port, IN_3_Pin, GPIO_PIN_RESET);
 8001f34:	2200      	movs	r2, #0
 8001f36:	2101      	movs	r1, #1
 8001f38:	481f      	ldr	r0, [pc, #124]	; (8001fb8 <main+0x318>)
 8001f3a:	f000 ffba 	bl	8002eb2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_4_GPIO_Port, IN_4_Pin, GPIO_PIN_RESET);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2102      	movs	r1, #2
 8001f42:	481d      	ldr	r0, [pc, #116]	; (8001fb8 <main+0x318>)
 8001f44:	f000 ffb5 	bl	8002eb2 <HAL_GPIO_WritePin>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4819      	ldr	r0, [pc, #100]	; (8001fb0 <main+0x310>)
 8001f4c:	f003 f96a 	bl	8005224 <HAL_TIM_PWM_Stop>
				HAL_GPIO_WritePin(IN_Relay_GPIO_Port, IN_Relay_Pin, 0);
 8001f50:	2200      	movs	r2, #0
 8001f52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f56:	4812      	ldr	r0, [pc, #72]	; (8001fa0 <main+0x300>)
 8001f58:	f000 ffab 	bl	8002eb2 <HAL_GPIO_WritePin>
				rx_data[0] = 0;
 8001f5c:	4b13      	ldr	r3, [pc, #76]	; (8001fac <main+0x30c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
				rx_data[1] = 0;
 8001f62:	4b12      	ldr	r3, [pc, #72]	; (8001fac <main+0x30c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	705a      	strb	r2, [r3, #1]
				rx_data[2] = 0;
 8001f68:	4b10      	ldr	r3, [pc, #64]	; (8001fac <main+0x30c>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	709a      	strb	r2, [r3, #2]
				rx_data[3] = 0;
 8001f6e:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <main+0x30c>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	70da      	strb	r2, [r3, #3]
				rx_data[4] = 0;
 8001f74:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <main+0x30c>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	711a      	strb	r2, [r3, #4]
			}
		}
		rx_data[0] = 0;
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <main+0x30c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
		rx_data[1] = 0;
 8001f80:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <main+0x30c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	705a      	strb	r2, [r3, #1]
		rx_data[2] = 0;
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <main+0x30c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	709a      	strb	r2, [r3, #2]
		rx_data[3] = 0;
 8001f8c:	4b07      	ldr	r3, [pc, #28]	; (8001fac <main+0x30c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	70da      	strb	r2, [r3, #3]
		rx_data[4] = 0;
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <main+0x30c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	711a      	strb	r2, [r3, #4]
		if (NRF24_Available(&nrfRx, 0) == 1) {
 8001f98:	e6d4      	b.n	8001d44 <main+0xa4>
 8001f9a:	bf00      	nop
 8001f9c:	20000200 	.word	0x20000200
 8001fa0:	40010800 	.word	0x40010800
 8001fa4:	20000278 	.word	0x20000278
 8001fa8:	20000008 	.word	0x20000008
 8001fac:	20000220 	.word	0x20000220
 8001fb0:	200002d0 	.word	0x200002d0
 8001fb4:	40011000 	.word	0x40011000
 8001fb8:	40010c00 	.word	0x40010c00

08001fbc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b090      	sub	sp, #64	; 0x40
 8001fc0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001fc2:	f107 0318 	add.w	r3, r7, #24
 8001fc6:	2228      	movs	r2, #40	; 0x28
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f004 ffd1 	bl	8006f72 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001fd0:	1d3b      	adds	r3, r7, #4
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
 8001fda:	60da      	str	r2, [r3, #12]
 8001fdc:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fe2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fe6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fec:	2301      	movs	r3, #1
 8001fee:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ff4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ff8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ffa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002000:	f107 0318 	add.w	r3, r7, #24
 8002004:	4618      	mov	r0, r3
 8002006:	f001 fe07 	bl	8003c18 <HAL_RCC_OscConfig>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <SystemClock_Config+0x58>
		Error_Handler();
 8002010:	f000 f9cc 	bl	80023ac <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002014:	230f      	movs	r3, #15
 8002016:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002018:	2302      	movs	r3, #2
 800201a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002024:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800202a:	1d3b      	adds	r3, r7, #4
 800202c:	2102      	movs	r1, #2
 800202e:	4618      	mov	r0, r3
 8002030:	f002 f874 	bl	800411c <HAL_RCC_ClockConfig>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <SystemClock_Config+0x82>
		Error_Handler();
 800203a:	f000 f9b7 	bl	80023ac <Error_Handler>
	}
}
 800203e:	bf00      	nop
 8002040:	3740      	adds	r7, #64	; 0x40
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <MX_I2C2_Init+0x50>)
 800204e:	4a13      	ldr	r2, [pc, #76]	; (800209c <MX_I2C2_Init+0x54>)
 8002050:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8002052:	4b11      	ldr	r3, [pc, #68]	; (8002098 <MX_I2C2_Init+0x50>)
 8002054:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <MX_I2C2_Init+0x58>)
 8002056:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002058:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <MX_I2C2_Init+0x50>)
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <MX_I2C2_Init+0x50>)
 8002060:	2200      	movs	r2, #0
 8002062:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <MX_I2C2_Init+0x50>)
 8002066:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800206a:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800206c:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <MX_I2C2_Init+0x50>)
 800206e:	2200      	movs	r2, #0
 8002070:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <MX_I2C2_Init+0x50>)
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002078:	4b07      	ldr	r3, [pc, #28]	; (8002098 <MX_I2C2_Init+0x50>)
 800207a:	2200      	movs	r2, #0
 800207c:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <MX_I2C2_Init+0x50>)
 8002080:	2200      	movs	r2, #0
 8002082:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8002084:	4804      	ldr	r0, [pc, #16]	; (8002098 <MX_I2C2_Init+0x50>)
 8002086:	f000 ff45 	bl	8002f14 <HAL_I2C_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_I2C2_Init+0x4c>
		Error_Handler();
 8002090:	f000 f98c 	bl	80023ac <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000224 	.word	0x20000224
 800209c:	40005800 	.word	0x40005800
 80020a0:	000186a0 	.word	0x000186a0

080020a4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80020a8:	4b17      	ldr	r3, [pc, #92]	; (8002108 <MX_SPI1_Init+0x64>)
 80020aa:	4a18      	ldr	r2, [pc, #96]	; (800210c <MX_SPI1_Init+0x68>)
 80020ac:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80020ae:	4b16      	ldr	r3, [pc, #88]	; (8002108 <MX_SPI1_Init+0x64>)
 80020b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020b4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020b6:	4b14      	ldr	r3, [pc, #80]	; (8002108 <MX_SPI1_Init+0x64>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <MX_SPI1_Init+0x64>)
 80020be:	2200      	movs	r2, #0
 80020c0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <MX_SPI1_Init+0x64>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020c8:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <MX_SPI1_Init+0x64>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <MX_SPI1_Init+0x64>)
 80020d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020d4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80020d6:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <MX_SPI1_Init+0x64>)
 80020d8:	2218      	movs	r2, #24
 80020da:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020dc:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <MX_SPI1_Init+0x64>)
 80020de:	2200      	movs	r2, #0
 80020e0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <MX_SPI1_Init+0x64>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020e8:	4b07      	ldr	r3, [pc, #28]	; (8002108 <MX_SPI1_Init+0x64>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <MX_SPI1_Init+0x64>)
 80020f0:	220a      	movs	r2, #10
 80020f2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80020f4:	4804      	ldr	r0, [pc, #16]	; (8002108 <MX_SPI1_Init+0x64>)
 80020f6:	f002 f99f 	bl	8004438 <HAL_SPI_Init>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_SPI1_Init+0x60>
		Error_Handler();
 8002100:	f000 f954 	bl	80023ac <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000278 	.word	0x20000278
 800210c:	40013000 	.word	0x40013000

08002110 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b08e      	sub	sp, #56	; 0x38
 8002114:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002116:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	609a      	str	r2, [r3, #8]
 8002122:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002124:	f107 0320 	add.w	r3, r7, #32
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
 800213c:	615a      	str	r2, [r3, #20]
 800213e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002140:	4b32      	ldr	r3, [pc, #200]	; (800220c <MX_TIM2_Init+0xfc>)
 8002142:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002146:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72;
 8002148:	4b30      	ldr	r3, [pc, #192]	; (800220c <MX_TIM2_Init+0xfc>)
 800214a:	2248      	movs	r2, #72	; 0x48
 800214c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800214e:	4b2f      	ldr	r3, [pc, #188]	; (800220c <MX_TIM2_Init+0xfc>)
 8002150:	2200      	movs	r2, #0
 8002152:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 8002154:	4b2d      	ldr	r3, [pc, #180]	; (800220c <MX_TIM2_Init+0xfc>)
 8002156:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800215a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800215c:	4b2b      	ldr	r3, [pc, #172]	; (800220c <MX_TIM2_Init+0xfc>)
 800215e:	2200      	movs	r2, #0
 8002160:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002162:	4b2a      	ldr	r3, [pc, #168]	; (800220c <MX_TIM2_Init+0xfc>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8002168:	4828      	ldr	r0, [pc, #160]	; (800220c <MX_TIM2_Init+0xfc>)
 800216a:	f002 fef9 	bl	8004f60 <HAL_TIM_Base_Init>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM2_Init+0x68>
		Error_Handler();
 8002174:	f000 f91a 	bl	80023ac <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800217c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800217e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002182:	4619      	mov	r1, r3
 8002184:	4821      	ldr	r0, [pc, #132]	; (800220c <MX_TIM2_Init+0xfc>)
 8002186:	f003 f97f 	bl	8005488 <HAL_TIM_ConfigClockSource>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_TIM2_Init+0x84>
		Error_Handler();
 8002190:	f000 f90c 	bl	80023ac <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8002194:	481d      	ldr	r0, [pc, #116]	; (800220c <MX_TIM2_Init+0xfc>)
 8002196:	f002 ff32 	bl	8004ffe <HAL_TIM_PWM_Init>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_TIM2_Init+0x94>
		Error_Handler();
 80021a0:	f000 f904 	bl	80023ac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021a4:	2300      	movs	r3, #0
 80021a6:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a8:	2300      	movs	r3, #0
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80021ac:	f107 0320 	add.w	r3, r7, #32
 80021b0:	4619      	mov	r1, r3
 80021b2:	4816      	ldr	r0, [pc, #88]	; (800220c <MX_TIM2_Init+0xfc>)
 80021b4:	f003 fd10 	bl	8005bd8 <HAL_TIMEx_MasterConfigSynchronization>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 80021be:	f000 f8f5 	bl	80023ac <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021c2:	2360      	movs	r3, #96	; 0x60
 80021c4:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	2200      	movs	r2, #0
 80021d6:	4619      	mov	r1, r3
 80021d8:	480c      	ldr	r0, [pc, #48]	; (800220c <MX_TIM2_Init+0xfc>)
 80021da:	f003 f893 	bl	8005304 <HAL_TIM_PWM_ConfigChannel>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 80021e4:	f000 f8e2 	bl	80023ac <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 80021e8:	1d3b      	adds	r3, r7, #4
 80021ea:	2204      	movs	r2, #4
 80021ec:	4619      	mov	r1, r3
 80021ee:	4807      	ldr	r0, [pc, #28]	; (800220c <MX_TIM2_Init+0xfc>)
 80021f0:	f003 f888 	bl	8005304 <HAL_TIM_PWM_ConfigChannel>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_TIM2_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 80021fa:	f000 f8d7 	bl	80023ac <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80021fe:	4803      	ldr	r0, [pc, #12]	; (800220c <MX_TIM2_Init+0xfc>)
 8002200:	f000 f9b2 	bl	8002568 <HAL_TIM_MspPostInit>

}
 8002204:	bf00      	nop
 8002206:	3738      	adds	r7, #56	; 0x38
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	200002d0 	.word	0x200002d0

08002210 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <MX_UART4_Init+0x4c>)
 8002216:	4a12      	ldr	r2, [pc, #72]	; (8002260 <MX_UART4_Init+0x50>)
 8002218:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 800221a:	4b10      	ldr	r3, [pc, #64]	; (800225c <MX_UART4_Init+0x4c>)
 800221c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002220:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <MX_UART4_Init+0x4c>)
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8002228:	4b0c      	ldr	r3, [pc, #48]	; (800225c <MX_UART4_Init+0x4c>)
 800222a:	2200      	movs	r2, #0
 800222c:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <MX_UART4_Init+0x4c>)
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8002234:	4b09      	ldr	r3, [pc, #36]	; (800225c <MX_UART4_Init+0x4c>)
 8002236:	220c      	movs	r2, #12
 8002238:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800223a:	4b08      	ldr	r3, [pc, #32]	; (800225c <MX_UART4_Init+0x4c>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <MX_UART4_Init+0x4c>)
 8002242:	2200      	movs	r2, #0
 8002244:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8002246:	4805      	ldr	r0, [pc, #20]	; (800225c <MX_UART4_Init+0x4c>)
 8002248:	f003 fd32 	bl	8005cb0 <HAL_UART_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_UART4_Init+0x46>
		Error_Handler();
 8002252:	f000 f8ab 	bl	80023ac <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000318 	.word	0x20000318
 8002260:	40004c00 	.word	0x40004c00

08002264 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800226a:	f107 0310 	add.w	r3, r7, #16
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	609a      	str	r2, [r3, #8]
 8002276:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002278:	4b47      	ldr	r3, [pc, #284]	; (8002398 <MX_GPIO_Init+0x134>)
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	4a46      	ldr	r2, [pc, #280]	; (8002398 <MX_GPIO_Init+0x134>)
 800227e:	f043 0320 	orr.w	r3, r3, #32
 8002282:	6193      	str	r3, [r2, #24]
 8002284:	4b44      	ldr	r3, [pc, #272]	; (8002398 <MX_GPIO_Init+0x134>)
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	f003 0320 	and.w	r3, r3, #32
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002290:	4b41      	ldr	r3, [pc, #260]	; (8002398 <MX_GPIO_Init+0x134>)
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	4a40      	ldr	r2, [pc, #256]	; (8002398 <MX_GPIO_Init+0x134>)
 8002296:	f043 0304 	orr.w	r3, r3, #4
 800229a:	6193      	str	r3, [r2, #24]
 800229c:	4b3e      	ldr	r3, [pc, #248]	; (8002398 <MX_GPIO_Init+0x134>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80022a8:	4b3b      	ldr	r3, [pc, #236]	; (8002398 <MX_GPIO_Init+0x134>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	4a3a      	ldr	r2, [pc, #232]	; (8002398 <MX_GPIO_Init+0x134>)
 80022ae:	f043 0310 	orr.w	r3, r3, #16
 80022b2:	6193      	str	r3, [r2, #24]
 80022b4:	4b38      	ldr	r3, [pc, #224]	; (8002398 <MX_GPIO_Init+0x134>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	f003 0310 	and.w	r3, r3, #16
 80022bc:	607b      	str	r3, [r7, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80022c0:	4b35      	ldr	r3, [pc, #212]	; (8002398 <MX_GPIO_Init+0x134>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	4a34      	ldr	r2, [pc, #208]	; (8002398 <MX_GPIO_Init+0x134>)
 80022c6:	f043 0308 	orr.w	r3, r3, #8
 80022ca:	6193      	str	r3, [r2, #24]
 80022cc:	4b32      	ldr	r3, [pc, #200]	; (8002398 <MX_GPIO_Init+0x134>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	603b      	str	r3, [r7, #0]
 80022d6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, NRF_CE_Pin | NRF_CSN_Pin | LED_Pin | IN_Relay_Pin,
 80022d8:	2200      	movs	r2, #0
 80022da:	f241 1118 	movw	r1, #4376	; 0x1118
 80022de:	482f      	ldr	r0, [pc, #188]	; (800239c <MX_GPIO_Init+0x138>)
 80022e0:	f000 fde7 	bl	8002eb2 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, IN_1_Pin | IN_2_Pin, GPIO_PIN_SET);
 80022e4:	2201      	movs	r2, #1
 80022e6:	2130      	movs	r1, #48	; 0x30
 80022e8:	482d      	ldr	r0, [pc, #180]	; (80023a0 <MX_GPIO_Init+0x13c>)
 80022ea:	f000 fde2 	bl	8002eb2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, IN_3_Pin | IN_4_Pin, GPIO_PIN_SET);
 80022ee:	2201      	movs	r2, #1
 80022f0:	2103      	movs	r1, #3
 80022f2:	482c      	ldr	r0, [pc, #176]	; (80023a4 <MX_GPIO_Init+0x140>)
 80022f4:	f000 fddd 	bl	8002eb2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80022f8:	2201      	movs	r2, #1
 80022fa:	2104      	movs	r1, #4
 80022fc:	482a      	ldr	r0, [pc, #168]	; (80023a8 <MX_GPIO_Init+0x144>)
 80022fe:	f000 fdd8 	bl	8002eb2 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : NRF_IRQ_Pin Sensor_Pin */
	GPIO_InitStruct.Pin = NRF_IRQ_Pin | Sensor_Pin;
 8002302:	f640 0304 	movw	r3, #2052	; 0x804
 8002306:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002310:	f107 0310 	add.w	r3, r7, #16
 8002314:	4619      	mov	r1, r3
 8002316:	4821      	ldr	r0, [pc, #132]	; (800239c <MX_GPIO_Init+0x138>)
 8002318:	f000 fc20 	bl	8002b5c <HAL_GPIO_Init>

	/*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin LED_Pin IN_Relay_Pin */
	GPIO_InitStruct.Pin = NRF_CE_Pin | NRF_CSN_Pin | LED_Pin | IN_Relay_Pin;
 800231c:	f241 1318 	movw	r3, #4376	; 0x1118
 8002320:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002322:	2301      	movs	r3, #1
 8002324:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232a:	2302      	movs	r3, #2
 800232c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232e:	f107 0310 	add.w	r3, r7, #16
 8002332:	4619      	mov	r1, r3
 8002334:	4819      	ldr	r0, [pc, #100]	; (800239c <MX_GPIO_Init+0x138>)
 8002336:	f000 fc11 	bl	8002b5c <HAL_GPIO_Init>

	/*Configure GPIO pins : IN_1_Pin IN_2_Pin */
	GPIO_InitStruct.Pin = IN_1_Pin | IN_2_Pin;
 800233a:	2330      	movs	r3, #48	; 0x30
 800233c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800233e:	2301      	movs	r3, #1
 8002340:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002346:	2302      	movs	r3, #2
 8002348:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800234a:	f107 0310 	add.w	r3, r7, #16
 800234e:	4619      	mov	r1, r3
 8002350:	4813      	ldr	r0, [pc, #76]	; (80023a0 <MX_GPIO_Init+0x13c>)
 8002352:	f000 fc03 	bl	8002b5c <HAL_GPIO_Init>

	/*Configure GPIO pins : IN_3_Pin IN_4_Pin */
	GPIO_InitStruct.Pin = IN_3_Pin | IN_4_Pin;
 8002356:	2303      	movs	r3, #3
 8002358:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235a:	2301      	movs	r3, #1
 800235c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002362:	2302      	movs	r3, #2
 8002364:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002366:	f107 0310 	add.w	r3, r7, #16
 800236a:	4619      	mov	r1, r3
 800236c:	480d      	ldr	r0, [pc, #52]	; (80023a4 <MX_GPIO_Init+0x140>)
 800236e:	f000 fbf5 	bl	8002b5c <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_1_Pin */
	GPIO_InitStruct.Pin = LED_1_Pin;
 8002372:	2304      	movs	r3, #4
 8002374:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002376:	2301      	movs	r3, #1
 8002378:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237e:	2302      	movs	r3, #2
 8002380:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8002382:	f107 0310 	add.w	r3, r7, #16
 8002386:	4619      	mov	r1, r3
 8002388:	4807      	ldr	r0, [pc, #28]	; (80023a8 <MX_GPIO_Init+0x144>)
 800238a:	f000 fbe7 	bl	8002b5c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800238e:	bf00      	nop
 8002390:	3720      	adds	r7, #32
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000
 800239c:	40010800 	.word	0x40010800
 80023a0:	40011000 	.word	0x40011000
 80023a4:	40010c00 	.word	0x40010c00
 80023a8:	40011400 	.word	0x40011400

080023ac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023b0:	b672      	cpsid	i
}
 80023b2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80023b4:	e7fe      	b.n	80023b4 <Error_Handler+0x8>
	...

080023b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023be:	4b15      	ldr	r3, [pc, #84]	; (8002414 <HAL_MspInit+0x5c>)
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	4a14      	ldr	r2, [pc, #80]	; (8002414 <HAL_MspInit+0x5c>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6193      	str	r3, [r2, #24]
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_MspInit+0x5c>)
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <HAL_MspInit+0x5c>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	4a0e      	ldr	r2, [pc, #56]	; (8002414 <HAL_MspInit+0x5c>)
 80023dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e0:	61d3      	str	r3, [r2, #28]
 80023e2:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <HAL_MspInit+0x5c>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ea:	607b      	str	r3, [r7, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023ee:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <HAL_MspInit+0x60>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	4a04      	ldr	r2, [pc, #16]	; (8002418 <HAL_MspInit+0x60>)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	40021000 	.word	0x40021000
 8002418:	40010000 	.word	0x40010000

0800241c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 0310 	add.w	r3, r7, #16
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a16      	ldr	r2, [pc, #88]	; (8002490 <HAL_I2C_MspInit+0x74>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d124      	bne.n	8002486 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800243c:	4b15      	ldr	r3, [pc, #84]	; (8002494 <HAL_I2C_MspInit+0x78>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	4a14      	ldr	r2, [pc, #80]	; (8002494 <HAL_I2C_MspInit+0x78>)
 8002442:	f043 0308 	orr.w	r3, r3, #8
 8002446:	6193      	str	r3, [r2, #24]
 8002448:	4b12      	ldr	r3, [pc, #72]	; (8002494 <HAL_I2C_MspInit+0x78>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002454:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002458:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800245a:	2312      	movs	r3, #18
 800245c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800245e:	2303      	movs	r3, #3
 8002460:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002462:	f107 0310 	add.w	r3, r7, #16
 8002466:	4619      	mov	r1, r3
 8002468:	480b      	ldr	r0, [pc, #44]	; (8002498 <HAL_I2C_MspInit+0x7c>)
 800246a:	f000 fb77 	bl	8002b5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800246e:	4b09      	ldr	r3, [pc, #36]	; (8002494 <HAL_I2C_MspInit+0x78>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	4a08      	ldr	r2, [pc, #32]	; (8002494 <HAL_I2C_MspInit+0x78>)
 8002474:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002478:	61d3      	str	r3, [r2, #28]
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_I2C_MspInit+0x78>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002486:	bf00      	nop
 8002488:	3720      	adds	r7, #32
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40005800 	.word	0x40005800
 8002494:	40021000 	.word	0x40021000
 8002498:	40010c00 	.word	0x40010c00

0800249c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 0310 	add.w	r3, r7, #16
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a1b      	ldr	r2, [pc, #108]	; (8002524 <HAL_SPI_MspInit+0x88>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d12f      	bne.n	800251c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024bc:	4b1a      	ldr	r3, [pc, #104]	; (8002528 <HAL_SPI_MspInit+0x8c>)
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	4a19      	ldr	r2, [pc, #100]	; (8002528 <HAL_SPI_MspInit+0x8c>)
 80024c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024c6:	6193      	str	r3, [r2, #24]
 80024c8:	4b17      	ldr	r3, [pc, #92]	; (8002528 <HAL_SPI_MspInit+0x8c>)
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d4:	4b14      	ldr	r3, [pc, #80]	; (8002528 <HAL_SPI_MspInit+0x8c>)
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	4a13      	ldr	r2, [pc, #76]	; (8002528 <HAL_SPI_MspInit+0x8c>)
 80024da:	f043 0304 	orr.w	r3, r3, #4
 80024de:	6193      	str	r3, [r2, #24]
 80024e0:	4b11      	ldr	r3, [pc, #68]	; (8002528 <HAL_SPI_MspInit+0x8c>)
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80024ec:	23a0      	movs	r3, #160	; 0xa0
 80024ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f0:	2302      	movs	r3, #2
 80024f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024f4:	2303      	movs	r3, #3
 80024f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f8:	f107 0310 	add.w	r3, r7, #16
 80024fc:	4619      	mov	r1, r3
 80024fe:	480b      	ldr	r0, [pc, #44]	; (800252c <HAL_SPI_MspInit+0x90>)
 8002500:	f000 fb2c 	bl	8002b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002504:	2340      	movs	r3, #64	; 0x40
 8002506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002510:	f107 0310 	add.w	r3, r7, #16
 8002514:	4619      	mov	r1, r3
 8002516:	4805      	ldr	r0, [pc, #20]	; (800252c <HAL_SPI_MspInit+0x90>)
 8002518:	f000 fb20 	bl	8002b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800251c:	bf00      	nop
 800251e:	3720      	adds	r7, #32
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40013000 	.word	0x40013000
 8002528:	40021000 	.word	0x40021000
 800252c:	40010800 	.word	0x40010800

08002530 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002540:	d10b      	bne.n	800255a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002542:	4b08      	ldr	r3, [pc, #32]	; (8002564 <HAL_TIM_Base_MspInit+0x34>)
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	4a07      	ldr	r2, [pc, #28]	; (8002564 <HAL_TIM_Base_MspInit+0x34>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	61d3      	str	r3, [r2, #28]
 800254e:	4b05      	ldr	r3, [pc, #20]	; (8002564 <HAL_TIM_Base_MspInit+0x34>)
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800255a:	bf00      	nop
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	40021000 	.word	0x40021000

08002568 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b088      	sub	sp, #32
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002570:	f107 0310 	add.w	r3, r7, #16
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002586:	d117      	bne.n	80025b8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002588:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <HAL_TIM_MspPostInit+0x58>)
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	4a0c      	ldr	r2, [pc, #48]	; (80025c0 <HAL_TIM_MspPostInit+0x58>)
 800258e:	f043 0304 	orr.w	r3, r3, #4
 8002592:	6193      	str	r3, [r2, #24]
 8002594:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <HAL_TIM_MspPostInit+0x58>)
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025a0:	2303      	movs	r3, #3
 80025a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a4:	2302      	movs	r3, #2
 80025a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a8:	2302      	movs	r3, #2
 80025aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ac:	f107 0310 	add.w	r3, r7, #16
 80025b0:	4619      	mov	r1, r3
 80025b2:	4804      	ldr	r0, [pc, #16]	; (80025c4 <HAL_TIM_MspPostInit+0x5c>)
 80025b4:	f000 fad2 	bl	8002b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80025b8:	bf00      	nop
 80025ba:	3720      	adds	r7, #32
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40010800 	.word	0x40010800

080025c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d0:	f107 0310 	add.w	r3, r7, #16
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a1c      	ldr	r2, [pc, #112]	; (8002654 <HAL_UART_MspInit+0x8c>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d131      	bne.n	800264c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80025e8:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <HAL_UART_MspInit+0x90>)
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	4a1a      	ldr	r2, [pc, #104]	; (8002658 <HAL_UART_MspInit+0x90>)
 80025ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80025f2:	61d3      	str	r3, [r2, #28]
 80025f4:	4b18      	ldr	r3, [pc, #96]	; (8002658 <HAL_UART_MspInit+0x90>)
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002600:	4b15      	ldr	r3, [pc, #84]	; (8002658 <HAL_UART_MspInit+0x90>)
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	4a14      	ldr	r2, [pc, #80]	; (8002658 <HAL_UART_MspInit+0x90>)
 8002606:	f043 0310 	orr.w	r3, r3, #16
 800260a:	6193      	str	r3, [r2, #24]
 800260c:	4b12      	ldr	r3, [pc, #72]	; (8002658 <HAL_UART_MspInit+0x90>)
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800261c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261e:	2302      	movs	r3, #2
 8002620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002622:	2303      	movs	r3, #3
 8002624:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002626:	f107 0310 	add.w	r3, r7, #16
 800262a:	4619      	mov	r1, r3
 800262c:	480b      	ldr	r0, [pc, #44]	; (800265c <HAL_UART_MspInit+0x94>)
 800262e:	f000 fa95 	bl	8002b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002632:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002636:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002640:	f107 0310 	add.w	r3, r7, #16
 8002644:	4619      	mov	r1, r3
 8002646:	4805      	ldr	r0, [pc, #20]	; (800265c <HAL_UART_MspInit+0x94>)
 8002648:	f000 fa88 	bl	8002b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800264c:	bf00      	nop
 800264e:	3720      	adds	r7, #32
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40004c00 	.word	0x40004c00
 8002658:	40021000 	.word	0x40021000
 800265c:	40011000 	.word	0x40011000

08002660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002664:	e7fe      	b.n	8002664 <NMI_Handler+0x4>

08002666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800266a:	e7fe      	b.n	800266a <HardFault_Handler+0x4>

0800266c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002670:	e7fe      	b.n	8002670 <MemManage_Handler+0x4>

08002672 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002676:	e7fe      	b.n	8002676 <BusFault_Handler+0x4>

08002678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800267c:	e7fe      	b.n	800267c <UsageFault_Handler+0x4>

0800267e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr

0800268a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr

08002696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002696:	b480      	push	{r7}
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr

080026a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026a6:	f000 f935 	bl	8002914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}

080026ae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0
  return 1;
 80026b2:	2301      	movs	r3, #1
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr

080026bc <_kill>:

int _kill(int pid, int sig)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026c6:	f004 fca7 	bl	8007018 <__errno>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2216      	movs	r2, #22
 80026ce:	601a      	str	r2, [r3, #0]
  return -1;
 80026d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <_exit>:

void _exit (int status)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026e4:	f04f 31ff 	mov.w	r1, #4294967295
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff ffe7 	bl	80026bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80026ee:	e7fe      	b.n	80026ee <_exit+0x12>

080026f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	e00a      	b.n	8002718 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002702:	f3af 8000 	nop.w
 8002706:	4601      	mov	r1, r0
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	60ba      	str	r2, [r7, #8]
 800270e:	b2ca      	uxtb	r2, r1
 8002710:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	3301      	adds	r3, #1
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	429a      	cmp	r2, r3
 800271e:	dbf0      	blt.n	8002702 <_read+0x12>
  }

  return len;
 8002720:	687b      	ldr	r3, [r7, #4]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b086      	sub	sp, #24
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	e009      	b.n	8002750 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	60ba      	str	r2, [r7, #8]
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	3301      	adds	r3, #1
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	429a      	cmp	r2, r3
 8002756:	dbf1      	blt.n	800273c <_write+0x12>
  }
  return len;
 8002758:	687b      	ldr	r3, [r7, #4]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <_close>:

int _close(int file)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800276a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002788:	605a      	str	r2, [r3, #4]
  return 0;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr

08002796 <_isatty>:

int _isatty(int file)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800279e:	2301      	movs	r3, #1
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr

080027aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b085      	sub	sp, #20
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	60f8      	str	r0, [r7, #12]
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr
	...

080027c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027cc:	4a14      	ldr	r2, [pc, #80]	; (8002820 <_sbrk+0x5c>)
 80027ce:	4b15      	ldr	r3, [pc, #84]	; (8002824 <_sbrk+0x60>)
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027d8:	4b13      	ldr	r3, [pc, #76]	; (8002828 <_sbrk+0x64>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d102      	bne.n	80027e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027e0:	4b11      	ldr	r3, [pc, #68]	; (8002828 <_sbrk+0x64>)
 80027e2:	4a12      	ldr	r2, [pc, #72]	; (800282c <_sbrk+0x68>)
 80027e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027e6:	4b10      	ldr	r3, [pc, #64]	; (8002828 <_sbrk+0x64>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4413      	add	r3, r2
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d207      	bcs.n	8002804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027f4:	f004 fc10 	bl	8007018 <__errno>
 80027f8:	4603      	mov	r3, r0
 80027fa:	220c      	movs	r2, #12
 80027fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002802:	e009      	b.n	8002818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <_sbrk+0x64>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800280a:	4b07      	ldr	r3, [pc, #28]	; (8002828 <_sbrk+0x64>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4413      	add	r3, r2
 8002812:	4a05      	ldr	r2, [pc, #20]	; (8002828 <_sbrk+0x64>)
 8002814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002816:	68fb      	ldr	r3, [r7, #12]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	2000c000 	.word	0x2000c000
 8002824:	00000400 	.word	0x00000400
 8002828:	20000360 	.word	0x20000360
 800282c:	200004b8 	.word	0x200004b8

08002830 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800283c:	f7ff fff8 	bl	8002830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002840:	480b      	ldr	r0, [pc, #44]	; (8002870 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002842:	490c      	ldr	r1, [pc, #48]	; (8002874 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002844:	4a0c      	ldr	r2, [pc, #48]	; (8002878 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002848:	e002      	b.n	8002850 <LoopCopyDataInit>

0800284a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800284a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800284c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800284e:	3304      	adds	r3, #4

08002850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002854:	d3f9      	bcc.n	800284a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002856:	4a09      	ldr	r2, [pc, #36]	; (800287c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002858:	4c09      	ldr	r4, [pc, #36]	; (8002880 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800285a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800285c:	e001      	b.n	8002862 <LoopFillZerobss>

0800285e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800285e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002860:	3204      	adds	r2, #4

08002862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002864:	d3fb      	bcc.n	800285e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002866:	f004 fbdd 	bl	8007024 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800286a:	f7ff fa19 	bl	8001ca0 <main>
  bx lr
 800286e:	4770      	bx	lr
  ldr r0, =_sdata
 8002870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002874:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002878:	0800ac58 	.word	0x0800ac58
  ldr r2, =_sbss
 800287c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002880:	200004b4 	.word	0x200004b4

08002884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002884:	e7fe      	b.n	8002884 <ADC1_2_IRQHandler>
	...

08002888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800288c:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <HAL_Init+0x28>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a07      	ldr	r2, [pc, #28]	; (80028b0 <HAL_Init+0x28>)
 8002892:	f043 0310 	orr.w	r3, r3, #16
 8002896:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002898:	2003      	movs	r0, #3
 800289a:	f000 f92b 	bl	8002af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800289e:	200f      	movs	r0, #15
 80028a0:	f000 f808 	bl	80028b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028a4:	f7ff fd88 	bl	80023b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40022000 	.word	0x40022000

080028b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028bc:	4b12      	ldr	r3, [pc, #72]	; (8002908 <HAL_InitTick+0x54>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4b12      	ldr	r3, [pc, #72]	; (800290c <HAL_InitTick+0x58>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	4619      	mov	r1, r3
 80028c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80028ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 f935 	bl	8002b42 <HAL_SYSTICK_Config>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e00e      	b.n	8002900 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b0f      	cmp	r3, #15
 80028e6:	d80a      	bhi.n	80028fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028e8:	2200      	movs	r2, #0
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	f04f 30ff 	mov.w	r0, #4294967295
 80028f0:	f000 f90b 	bl	8002b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028f4:	4a06      	ldr	r2, [pc, #24]	; (8002910 <HAL_InitTick+0x5c>)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	e000      	b.n	8002900 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
}
 8002900:	4618      	mov	r0, r3
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20000010 	.word	0x20000010
 800290c:	20000018 	.word	0x20000018
 8002910:	20000014 	.word	0x20000014

08002914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_IncTick+0x1c>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_IncTick+0x20>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4413      	add	r3, r2
 8002924:	4a03      	ldr	r2, [pc, #12]	; (8002934 <HAL_IncTick+0x20>)
 8002926:	6013      	str	r3, [r2, #0]
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr
 8002930:	20000018 	.word	0x20000018
 8002934:	20000364 	.word	0x20000364

08002938 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return uwTick;
 800293c:	4b02      	ldr	r3, [pc, #8]	; (8002948 <HAL_GetTick+0x10>)
 800293e:	681b      	ldr	r3, [r3, #0]
}
 8002940:	4618      	mov	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr
 8002948:	20000364 	.word	0x20000364

0800294c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002954:	f7ff fff0 	bl	8002938 <HAL_GetTick>
 8002958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002964:	d005      	beq.n	8002972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <HAL_Delay+0x44>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4413      	add	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002972:	bf00      	nop
 8002974:	f7ff ffe0 	bl	8002938 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	429a      	cmp	r2, r3
 8002982:	d8f7      	bhi.n	8002974 <HAL_Delay+0x28>
  {
  }
}
 8002984:	bf00      	nop
 8002986:	bf00      	nop
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000018 	.word	0x20000018

08002994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029a4:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <__NVIC_SetPriorityGrouping+0x44>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029b0:	4013      	ands	r3, r2
 80029b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029c6:	4a04      	ldr	r2, [pc, #16]	; (80029d8 <__NVIC_SetPriorityGrouping+0x44>)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	60d3      	str	r3, [r2, #12]
}
 80029cc:	bf00      	nop
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e0:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <__NVIC_GetPriorityGrouping+0x18>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	0a1b      	lsrs	r3, r3, #8
 80029e6:	f003 0307 	and.w	r3, r3, #7
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	6039      	str	r1, [r7, #0]
 8002a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	db0a      	blt.n	8002a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	490c      	ldr	r1, [pc, #48]	; (8002a44 <__NVIC_SetPriority+0x4c>)
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	0112      	lsls	r2, r2, #4
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a20:	e00a      	b.n	8002a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	4908      	ldr	r1, [pc, #32]	; (8002a48 <__NVIC_SetPriority+0x50>)
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	3b04      	subs	r3, #4
 8002a30:	0112      	lsls	r2, r2, #4
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	440b      	add	r3, r1
 8002a36:	761a      	strb	r2, [r3, #24]
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	e000e100 	.word	0xe000e100
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b089      	sub	sp, #36	; 0x24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f1c3 0307 	rsb	r3, r3, #7
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	bf28      	it	cs
 8002a6a:	2304      	movcs	r3, #4
 8002a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3304      	adds	r3, #4
 8002a72:	2b06      	cmp	r3, #6
 8002a74:	d902      	bls.n	8002a7c <NVIC_EncodePriority+0x30>
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	3b03      	subs	r3, #3
 8002a7a:	e000      	b.n	8002a7e <NVIC_EncodePriority+0x32>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a80:	f04f 32ff 	mov.w	r2, #4294967295
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43da      	mvns	r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	401a      	ands	r2, r3
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a94:	f04f 31ff 	mov.w	r1, #4294967295
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9e:	43d9      	mvns	r1, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa4:	4313      	orrs	r3, r2
         );
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3724      	adds	r7, #36	; 0x24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ac0:	d301      	bcc.n	8002ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00f      	b.n	8002ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <SysTick_Config+0x40>)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ace:	210f      	movs	r1, #15
 8002ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad4:	f7ff ff90 	bl	80029f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <SysTick_Config+0x40>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ade:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <SysTick_Config+0x40>)
 8002ae0:	2207      	movs	r2, #7
 8002ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	e000e010 	.word	0xe000e010

08002af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7ff ff49 	bl	8002994 <__NVIC_SetPriorityGrouping>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b086      	sub	sp, #24
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	4603      	mov	r3, r0
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
 8002b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b1c:	f7ff ff5e 	bl	80029dc <__NVIC_GetPriorityGrouping>
 8002b20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68b9      	ldr	r1, [r7, #8]
 8002b26:	6978      	ldr	r0, [r7, #20]
 8002b28:	f7ff ff90 	bl	8002a4c <NVIC_EncodePriority>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b32:	4611      	mov	r1, r2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff ff5f 	bl	80029f8 <__NVIC_SetPriority>
}
 8002b3a:	bf00      	nop
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff ffb0 	bl	8002ab0 <SysTick_Config>
 8002b50:	4603      	mov	r3, r0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b08b      	sub	sp, #44	; 0x2c
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b66:	2300      	movs	r3, #0
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b6e:	e179      	b.n	8002e64 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b70:	2201      	movs	r2, #1
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	69fa      	ldr	r2, [r7, #28]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	f040 8168 	bne.w	8002e5e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	4a96      	ldr	r2, [pc, #600]	; (8002dec <HAL_GPIO_Init+0x290>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d05e      	beq.n	8002c56 <HAL_GPIO_Init+0xfa>
 8002b98:	4a94      	ldr	r2, [pc, #592]	; (8002dec <HAL_GPIO_Init+0x290>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d875      	bhi.n	8002c8a <HAL_GPIO_Init+0x12e>
 8002b9e:	4a94      	ldr	r2, [pc, #592]	; (8002df0 <HAL_GPIO_Init+0x294>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d058      	beq.n	8002c56 <HAL_GPIO_Init+0xfa>
 8002ba4:	4a92      	ldr	r2, [pc, #584]	; (8002df0 <HAL_GPIO_Init+0x294>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d86f      	bhi.n	8002c8a <HAL_GPIO_Init+0x12e>
 8002baa:	4a92      	ldr	r2, [pc, #584]	; (8002df4 <HAL_GPIO_Init+0x298>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d052      	beq.n	8002c56 <HAL_GPIO_Init+0xfa>
 8002bb0:	4a90      	ldr	r2, [pc, #576]	; (8002df4 <HAL_GPIO_Init+0x298>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d869      	bhi.n	8002c8a <HAL_GPIO_Init+0x12e>
 8002bb6:	4a90      	ldr	r2, [pc, #576]	; (8002df8 <HAL_GPIO_Init+0x29c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d04c      	beq.n	8002c56 <HAL_GPIO_Init+0xfa>
 8002bbc:	4a8e      	ldr	r2, [pc, #568]	; (8002df8 <HAL_GPIO_Init+0x29c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d863      	bhi.n	8002c8a <HAL_GPIO_Init+0x12e>
 8002bc2:	4a8e      	ldr	r2, [pc, #568]	; (8002dfc <HAL_GPIO_Init+0x2a0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d046      	beq.n	8002c56 <HAL_GPIO_Init+0xfa>
 8002bc8:	4a8c      	ldr	r2, [pc, #560]	; (8002dfc <HAL_GPIO_Init+0x2a0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d85d      	bhi.n	8002c8a <HAL_GPIO_Init+0x12e>
 8002bce:	2b12      	cmp	r3, #18
 8002bd0:	d82a      	bhi.n	8002c28 <HAL_GPIO_Init+0xcc>
 8002bd2:	2b12      	cmp	r3, #18
 8002bd4:	d859      	bhi.n	8002c8a <HAL_GPIO_Init+0x12e>
 8002bd6:	a201      	add	r2, pc, #4	; (adr r2, 8002bdc <HAL_GPIO_Init+0x80>)
 8002bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bdc:	08002c57 	.word	0x08002c57
 8002be0:	08002c31 	.word	0x08002c31
 8002be4:	08002c43 	.word	0x08002c43
 8002be8:	08002c85 	.word	0x08002c85
 8002bec:	08002c8b 	.word	0x08002c8b
 8002bf0:	08002c8b 	.word	0x08002c8b
 8002bf4:	08002c8b 	.word	0x08002c8b
 8002bf8:	08002c8b 	.word	0x08002c8b
 8002bfc:	08002c8b 	.word	0x08002c8b
 8002c00:	08002c8b 	.word	0x08002c8b
 8002c04:	08002c8b 	.word	0x08002c8b
 8002c08:	08002c8b 	.word	0x08002c8b
 8002c0c:	08002c8b 	.word	0x08002c8b
 8002c10:	08002c8b 	.word	0x08002c8b
 8002c14:	08002c8b 	.word	0x08002c8b
 8002c18:	08002c8b 	.word	0x08002c8b
 8002c1c:	08002c8b 	.word	0x08002c8b
 8002c20:	08002c39 	.word	0x08002c39
 8002c24:	08002c4d 	.word	0x08002c4d
 8002c28:	4a75      	ldr	r2, [pc, #468]	; (8002e00 <HAL_GPIO_Init+0x2a4>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d013      	beq.n	8002c56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c2e:	e02c      	b.n	8002c8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	623b      	str	r3, [r7, #32]
          break;
 8002c36:	e029      	b.n	8002c8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	623b      	str	r3, [r7, #32]
          break;
 8002c40:	e024      	b.n	8002c8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	3308      	adds	r3, #8
 8002c48:	623b      	str	r3, [r7, #32]
          break;
 8002c4a:	e01f      	b.n	8002c8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	330c      	adds	r3, #12
 8002c52:	623b      	str	r3, [r7, #32]
          break;
 8002c54:	e01a      	b.n	8002c8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d102      	bne.n	8002c64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c5e:	2304      	movs	r3, #4
 8002c60:	623b      	str	r3, [r7, #32]
          break;
 8002c62:	e013      	b.n	8002c8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d105      	bne.n	8002c78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c6c:	2308      	movs	r3, #8
 8002c6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	611a      	str	r2, [r3, #16]
          break;
 8002c76:	e009      	b.n	8002c8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c78:	2308      	movs	r3, #8
 8002c7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69fa      	ldr	r2, [r7, #28]
 8002c80:	615a      	str	r2, [r3, #20]
          break;
 8002c82:	e003      	b.n	8002c8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c84:	2300      	movs	r3, #0
 8002c86:	623b      	str	r3, [r7, #32]
          break;
 8002c88:	e000      	b.n	8002c8c <HAL_GPIO_Init+0x130>
          break;
 8002c8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	2bff      	cmp	r3, #255	; 0xff
 8002c90:	d801      	bhi.n	8002c96 <HAL_GPIO_Init+0x13a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	e001      	b.n	8002c9a <HAL_GPIO_Init+0x13e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	2bff      	cmp	r3, #255	; 0xff
 8002ca0:	d802      	bhi.n	8002ca8 <HAL_GPIO_Init+0x14c>
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	e002      	b.n	8002cae <HAL_GPIO_Init+0x152>
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	3b08      	subs	r3, #8
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	210f      	movs	r1, #15
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	6a39      	ldr	r1, [r7, #32]
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 80c1 	beq.w	8002e5e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002cdc:	4b49      	ldr	r3, [pc, #292]	; (8002e04 <HAL_GPIO_Init+0x2a8>)
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	4a48      	ldr	r2, [pc, #288]	; (8002e04 <HAL_GPIO_Init+0x2a8>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6193      	str	r3, [r2, #24]
 8002ce8:	4b46      	ldr	r3, [pc, #280]	; (8002e04 <HAL_GPIO_Init+0x2a8>)
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002cf4:	4a44      	ldr	r2, [pc, #272]	; (8002e08 <HAL_GPIO_Init+0x2ac>)
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	089b      	lsrs	r3, r3, #2
 8002cfa:	3302      	adds	r3, #2
 8002cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	220f      	movs	r2, #15
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4013      	ands	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a3c      	ldr	r2, [pc, #240]	; (8002e0c <HAL_GPIO_Init+0x2b0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d01f      	beq.n	8002d60 <HAL_GPIO_Init+0x204>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a3b      	ldr	r2, [pc, #236]	; (8002e10 <HAL_GPIO_Init+0x2b4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d019      	beq.n	8002d5c <HAL_GPIO_Init+0x200>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a3a      	ldr	r2, [pc, #232]	; (8002e14 <HAL_GPIO_Init+0x2b8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d013      	beq.n	8002d58 <HAL_GPIO_Init+0x1fc>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a39      	ldr	r2, [pc, #228]	; (8002e18 <HAL_GPIO_Init+0x2bc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d00d      	beq.n	8002d54 <HAL_GPIO_Init+0x1f8>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a38      	ldr	r2, [pc, #224]	; (8002e1c <HAL_GPIO_Init+0x2c0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d007      	beq.n	8002d50 <HAL_GPIO_Init+0x1f4>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a37      	ldr	r2, [pc, #220]	; (8002e20 <HAL_GPIO_Init+0x2c4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d101      	bne.n	8002d4c <HAL_GPIO_Init+0x1f0>
 8002d48:	2305      	movs	r3, #5
 8002d4a:	e00a      	b.n	8002d62 <HAL_GPIO_Init+0x206>
 8002d4c:	2306      	movs	r3, #6
 8002d4e:	e008      	b.n	8002d62 <HAL_GPIO_Init+0x206>
 8002d50:	2304      	movs	r3, #4
 8002d52:	e006      	b.n	8002d62 <HAL_GPIO_Init+0x206>
 8002d54:	2303      	movs	r3, #3
 8002d56:	e004      	b.n	8002d62 <HAL_GPIO_Init+0x206>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e002      	b.n	8002d62 <HAL_GPIO_Init+0x206>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e000      	b.n	8002d62 <HAL_GPIO_Init+0x206>
 8002d60:	2300      	movs	r3, #0
 8002d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d64:	f002 0203 	and.w	r2, r2, #3
 8002d68:	0092      	lsls	r2, r2, #2
 8002d6a:	4093      	lsls	r3, r2
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d72:	4925      	ldr	r1, [pc, #148]	; (8002e08 <HAL_GPIO_Init+0x2ac>)
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	089b      	lsrs	r3, r3, #2
 8002d78:	3302      	adds	r3, #2
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d006      	beq.n	8002d9a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d8c:	4b25      	ldr	r3, [pc, #148]	; (8002e24 <HAL_GPIO_Init+0x2c8>)
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	4924      	ldr	r1, [pc, #144]	; (8002e24 <HAL_GPIO_Init+0x2c8>)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	608b      	str	r3, [r1, #8]
 8002d98:	e006      	b.n	8002da8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d9a:	4b22      	ldr	r3, [pc, #136]	; (8002e24 <HAL_GPIO_Init+0x2c8>)
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	43db      	mvns	r3, r3
 8002da2:	4920      	ldr	r1, [pc, #128]	; (8002e24 <HAL_GPIO_Init+0x2c8>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d006      	beq.n	8002dc2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002db4:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <HAL_GPIO_Init+0x2c8>)
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	491a      	ldr	r1, [pc, #104]	; (8002e24 <HAL_GPIO_Init+0x2c8>)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60cb      	str	r3, [r1, #12]
 8002dc0:	e006      	b.n	8002dd0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002dc2:	4b18      	ldr	r3, [pc, #96]	; (8002e24 <HAL_GPIO_Init+0x2c8>)
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	4916      	ldr	r1, [pc, #88]	; (8002e24 <HAL_GPIO_Init+0x2c8>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d025      	beq.n	8002e28 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ddc:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <HAL_GPIO_Init+0x2c8>)
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	4910      	ldr	r1, [pc, #64]	; (8002e24 <HAL_GPIO_Init+0x2c8>)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	604b      	str	r3, [r1, #4]
 8002de8:	e025      	b.n	8002e36 <HAL_GPIO_Init+0x2da>
 8002dea:	bf00      	nop
 8002dec:	10320000 	.word	0x10320000
 8002df0:	10310000 	.word	0x10310000
 8002df4:	10220000 	.word	0x10220000
 8002df8:	10210000 	.word	0x10210000
 8002dfc:	10120000 	.word	0x10120000
 8002e00:	10110000 	.word	0x10110000
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40010000 	.word	0x40010000
 8002e0c:	40010800 	.word	0x40010800
 8002e10:	40010c00 	.word	0x40010c00
 8002e14:	40011000 	.word	0x40011000
 8002e18:	40011400 	.word	0x40011400
 8002e1c:	40011800 	.word	0x40011800
 8002e20:	40011c00 	.word	0x40011c00
 8002e24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e28:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <HAL_GPIO_Init+0x324>)
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	4913      	ldr	r1, [pc, #76]	; (8002e80 <HAL_GPIO_Init+0x324>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d006      	beq.n	8002e50 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e42:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <HAL_GPIO_Init+0x324>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	490e      	ldr	r1, [pc, #56]	; (8002e80 <HAL_GPIO_Init+0x324>)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]
 8002e4e:	e006      	b.n	8002e5e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_GPIO_Init+0x324>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	43db      	mvns	r3, r3
 8002e58:	4909      	ldr	r1, [pc, #36]	; (8002e80 <HAL_GPIO_Init+0x324>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	3301      	adds	r3, #1
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f47f ae7e 	bne.w	8002b70 <HAL_GPIO_Init+0x14>
  }
}
 8002e74:	bf00      	nop
 8002e76:	bf00      	nop
 8002e78:	372c      	adds	r7, #44	; 0x2c
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr
 8002e80:	40010400 	.word	0x40010400

08002e84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	887b      	ldrh	r3, [r7, #2]
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
 8002ea0:	e001      	b.n	8002ea6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	807b      	strh	r3, [r7, #2]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ec2:	787b      	ldrb	r3, [r7, #1]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ec8:	887a      	ldrh	r2, [r7, #2]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ece:	e003      	b.n	8002ed8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ed0:	887b      	ldrh	r3, [r7, #2]
 8002ed2:	041a      	lsls	r2, r3, #16
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	611a      	str	r2, [r3, #16]
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr

08002ee2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b085      	sub	sp, #20
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
 8002eea:	460b      	mov	r3, r1
 8002eec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ef4:	887a      	ldrh	r2, [r7, #2]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	041a      	lsls	r2, r3, #16
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	43d9      	mvns	r1, r3
 8002f00:	887b      	ldrh	r3, [r7, #2]
 8002f02:	400b      	ands	r3, r1
 8002f04:	431a      	orrs	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	611a      	str	r2, [r3, #16]
}
 8002f0a:	bf00      	nop
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e12b      	b.n	800317e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d106      	bne.n	8002f40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff fa6e 	bl	800241c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2224      	movs	r2, #36	; 0x24
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0201 	bic.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f78:	f001 fa18 	bl	80043ac <HAL_RCC_GetPCLK1Freq>
 8002f7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4a81      	ldr	r2, [pc, #516]	; (8003188 <HAL_I2C_Init+0x274>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d807      	bhi.n	8002f98 <HAL_I2C_Init+0x84>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4a80      	ldr	r2, [pc, #512]	; (800318c <HAL_I2C_Init+0x278>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	bf94      	ite	ls
 8002f90:	2301      	movls	r3, #1
 8002f92:	2300      	movhi	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	e006      	b.n	8002fa6 <HAL_I2C_Init+0x92>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4a7d      	ldr	r2, [pc, #500]	; (8003190 <HAL_I2C_Init+0x27c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	bf94      	ite	ls
 8002fa0:	2301      	movls	r3, #1
 8002fa2:	2300      	movhi	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e0e7      	b.n	800317e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4a78      	ldr	r2, [pc, #480]	; (8003194 <HAL_I2C_Init+0x280>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	0c9b      	lsrs	r3, r3, #18
 8002fb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	4a6a      	ldr	r2, [pc, #424]	; (8003188 <HAL_I2C_Init+0x274>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d802      	bhi.n	8002fe8 <HAL_I2C_Init+0xd4>
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	e009      	b.n	8002ffc <HAL_I2C_Init+0xe8>
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fee:	fb02 f303 	mul.w	r3, r2, r3
 8002ff2:	4a69      	ldr	r2, [pc, #420]	; (8003198 <HAL_I2C_Init+0x284>)
 8002ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff8:	099b      	lsrs	r3, r3, #6
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	430b      	orrs	r3, r1
 8003002:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800300e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	495c      	ldr	r1, [pc, #368]	; (8003188 <HAL_I2C_Init+0x274>)
 8003018:	428b      	cmp	r3, r1
 800301a:	d819      	bhi.n	8003050 <HAL_I2C_Init+0x13c>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1e59      	subs	r1, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	fbb1 f3f3 	udiv	r3, r1, r3
 800302a:	1c59      	adds	r1, r3, #1
 800302c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003030:	400b      	ands	r3, r1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <HAL_I2C_Init+0x138>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1e59      	subs	r1, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	fbb1 f3f3 	udiv	r3, r1, r3
 8003044:	3301      	adds	r3, #1
 8003046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800304a:	e051      	b.n	80030f0 <HAL_I2C_Init+0x1dc>
 800304c:	2304      	movs	r3, #4
 800304e:	e04f      	b.n	80030f0 <HAL_I2C_Init+0x1dc>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d111      	bne.n	800307c <HAL_I2C_Init+0x168>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	1e58      	subs	r0, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6859      	ldr	r1, [r3, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	440b      	add	r3, r1
 8003066:	fbb0 f3f3 	udiv	r3, r0, r3
 800306a:	3301      	adds	r3, #1
 800306c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003070:	2b00      	cmp	r3, #0
 8003072:	bf0c      	ite	eq
 8003074:	2301      	moveq	r3, #1
 8003076:	2300      	movne	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	e012      	b.n	80030a2 <HAL_I2C_Init+0x18e>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	1e58      	subs	r0, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6859      	ldr	r1, [r3, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	0099      	lsls	r1, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003092:	3301      	adds	r3, #1
 8003094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003098:	2b00      	cmp	r3, #0
 800309a:	bf0c      	ite	eq
 800309c:	2301      	moveq	r3, #1
 800309e:	2300      	movne	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_I2C_Init+0x196>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e022      	b.n	80030f0 <HAL_I2C_Init+0x1dc>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10e      	bne.n	80030d0 <HAL_I2C_Init+0x1bc>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1e58      	subs	r0, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6859      	ldr	r1, [r3, #4]
 80030ba:	460b      	mov	r3, r1
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	440b      	add	r3, r1
 80030c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c4:	3301      	adds	r3, #1
 80030c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ce:	e00f      	b.n	80030f0 <HAL_I2C_Init+0x1dc>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1e58      	subs	r0, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6859      	ldr	r1, [r3, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	0099      	lsls	r1, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e6:	3301      	adds	r3, #1
 80030e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	6809      	ldr	r1, [r1, #0]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69da      	ldr	r2, [r3, #28]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800311e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6911      	ldr	r1, [r2, #16]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	68d2      	ldr	r2, [r2, #12]
 800312a:	4311      	orrs	r1, r2
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	430b      	orrs	r3, r1
 8003132:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695a      	ldr	r2, [r3, #20]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	000186a0 	.word	0x000186a0
 800318c:	001e847f 	.word	0x001e847f
 8003190:	003d08ff 	.word	0x003d08ff
 8003194:	431bde83 	.word	0x431bde83
 8003198:	10624dd3 	.word	0x10624dd3

0800319c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08c      	sub	sp, #48	; 0x30
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	4608      	mov	r0, r1
 80031a6:	4611      	mov	r1, r2
 80031a8:	461a      	mov	r2, r3
 80031aa:	4603      	mov	r3, r0
 80031ac:	817b      	strh	r3, [r7, #10]
 80031ae:	460b      	mov	r3, r1
 80031b0:	813b      	strh	r3, [r7, #8]
 80031b2:	4613      	mov	r3, r2
 80031b4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031ba:	f7ff fbbd 	bl	8002938 <HAL_GetTick>
 80031be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b20      	cmp	r3, #32
 80031ca:	f040 8244 	bne.w	8003656 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	2319      	movs	r3, #25
 80031d4:	2201      	movs	r2, #1
 80031d6:	4982      	ldr	r1, [pc, #520]	; (80033e0 <HAL_I2C_Mem_Read+0x244>)
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 fb2f 	bl	800383c <I2C_WaitOnFlagUntilTimeout>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80031e4:	2302      	movs	r3, #2
 80031e6:	e237      	b.n	8003658 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <HAL_I2C_Mem_Read+0x5a>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e230      	b.n	8003658 <HAL_I2C_Mem_Read+0x4bc>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b01      	cmp	r3, #1
 800320a:	d007      	beq.n	800321c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800322a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2222      	movs	r2, #34	; 0x22
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2240      	movs	r2, #64	; 0x40
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003246:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800324c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003252:	b29a      	uxth	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4a62      	ldr	r2, [pc, #392]	; (80033e4 <HAL_I2C_Mem_Read+0x248>)
 800325c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800325e:	88f8      	ldrh	r0, [r7, #6]
 8003260:	893a      	ldrh	r2, [r7, #8]
 8003262:	8979      	ldrh	r1, [r7, #10]
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	9301      	str	r3, [sp, #4]
 8003268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	4603      	mov	r3, r0
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 f9fc 	bl	800366c <I2C_RequestMemoryRead>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e1ec      	b.n	8003658 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003282:	2b00      	cmp	r3, #0
 8003284:	d113      	bne.n	80032ae <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	61fb      	str	r3, [r7, #28]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	e1c0      	b.n	8003630 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d11e      	bne.n	80032f4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80032c6:	b672      	cpsid	i
}
 80032c8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ca:	2300      	movs	r3, #0
 80032cc:	61bb      	str	r3, [r7, #24]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	61bb      	str	r3, [r7, #24]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	61bb      	str	r3, [r7, #24]
 80032de:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80032f0:	b662      	cpsie	i
}
 80032f2:	e035      	b.n	8003360 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d11e      	bne.n	800333a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800330a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800330c:	b672      	cpsid	i
}
 800330e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003334:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003336:	b662      	cpsie	i
}
 8003338:	e012      	b.n	8003360 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003348:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800334a:	2300      	movs	r3, #0
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003360:	e166      	b.n	8003630 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003366:	2b03      	cmp	r3, #3
 8003368:	f200 811f 	bhi.w	80035aa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003370:	2b01      	cmp	r3, #1
 8003372:	d123      	bne.n	80033bc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003376:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 fbc1 	bl	8003b00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e167      	b.n	8003658 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033ba:	e139      	b.n	8003630 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d152      	bne.n	800346a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ca:	2200      	movs	r2, #0
 80033cc:	4906      	ldr	r1, [pc, #24]	; (80033e8 <HAL_I2C_Mem_Read+0x24c>)
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 fa34 	bl	800383c <I2C_WaitOnFlagUntilTimeout>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d008      	beq.n	80033ec <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e13c      	b.n	8003658 <HAL_I2C_Mem_Read+0x4bc>
 80033de:	bf00      	nop
 80033e0:	00100002 	.word	0x00100002
 80033e4:	ffff0000 	.word	0xffff0000
 80033e8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80033ec:	b672      	cpsid	i
}
 80033ee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691a      	ldr	r2, [r3, #16]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003432:	b662      	cpsie	i
}
 8003434:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345e:	b29b      	uxth	r3, r3
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003468:	e0e2      	b.n	8003630 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003470:	2200      	movs	r2, #0
 8003472:	497b      	ldr	r1, [pc, #492]	; (8003660 <HAL_I2C_Mem_Read+0x4c4>)
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f9e1 	bl	800383c <I2C_WaitOnFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e0e9      	b.n	8003658 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003492:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003494:	b672      	cpsid	i
}
 8003496:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691a      	ldr	r2, [r3, #16]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80034ca:	4b66      	ldr	r3, [pc, #408]	; (8003664 <HAL_I2C_Mem_Read+0x4c8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	08db      	lsrs	r3, r3, #3
 80034d0:	4a65      	ldr	r2, [pc, #404]	; (8003668 <HAL_I2C_Mem_Read+0x4cc>)
 80034d2:	fba2 2303 	umull	r2, r3, r2, r3
 80034d6:	0a1a      	lsrs	r2, r3, #8
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	00da      	lsls	r2, r3, #3
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d118      	bne.n	8003522 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f043 0220 	orr.w	r2, r3, #32
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003512:	b662      	cpsie	i
}
 8003514:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e09a      	b.n	8003658 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b04      	cmp	r3, #4
 800352e:	d1d9      	bne.n	80034e4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800353e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691a      	ldr	r2, [r3, #16]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003568:	b29b      	uxth	r3, r3
 800356a:	3b01      	subs	r3, #1
 800356c:	b29a      	uxth	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003572:	b662      	cpsie	i
}
 8003574:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	691a      	ldr	r2, [r3, #16]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035a8:	e042      	b.n	8003630 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 faa6 	bl	8003b00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e04c      	b.n	8003658 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d118      	bne.n	8003630 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003634:	2b00      	cmp	r3, #0
 8003636:	f47f ae94 	bne.w	8003362 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2220      	movs	r2, #32
 800363e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	e000      	b.n	8003658 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003656:	2302      	movs	r3, #2
  }
}
 8003658:	4618      	mov	r0, r3
 800365a:	3728      	adds	r7, #40	; 0x28
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	00010004 	.word	0x00010004
 8003664:	20000010 	.word	0x20000010
 8003668:	14f8b589 	.word	0x14f8b589

0800366c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af02      	add	r7, sp, #8
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	4608      	mov	r0, r1
 8003676:	4611      	mov	r1, r2
 8003678:	461a      	mov	r2, r3
 800367a:	4603      	mov	r3, r0
 800367c:	817b      	strh	r3, [r7, #10]
 800367e:	460b      	mov	r3, r1
 8003680:	813b      	strh	r3, [r7, #8]
 8003682:	4613      	mov	r3, r2
 8003684:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003694:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f8c2 	bl	800383c <I2C_WaitOnFlagUntilTimeout>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00d      	beq.n	80036da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036cc:	d103      	bne.n	80036d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e0aa      	b.n	8003830 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036da:	897b      	ldrh	r3, [r7, #10]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	461a      	mov	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	6a3a      	ldr	r2, [r7, #32]
 80036ee:	4952      	ldr	r1, [pc, #328]	; (8003838 <I2C_RequestMemoryRead+0x1cc>)
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f91d 	bl	8003930 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e097      	b.n	8003830 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003718:	6a39      	ldr	r1, [r7, #32]
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 f9a8 	bl	8003a70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00d      	beq.n	8003742 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	2b04      	cmp	r3, #4
 800372c:	d107      	bne.n	800373e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800373c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e076      	b.n	8003830 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003742:	88fb      	ldrh	r3, [r7, #6]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d105      	bne.n	8003754 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003748:	893b      	ldrh	r3, [r7, #8]
 800374a:	b2da      	uxtb	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	611a      	str	r2, [r3, #16]
 8003752:	e021      	b.n	8003798 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003754:	893b      	ldrh	r3, [r7, #8]
 8003756:	0a1b      	lsrs	r3, r3, #8
 8003758:	b29b      	uxth	r3, r3
 800375a:	b2da      	uxtb	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003764:	6a39      	ldr	r1, [r7, #32]
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f982 	bl	8003a70 <I2C_WaitOnTXEFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00d      	beq.n	800378e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	2b04      	cmp	r3, #4
 8003778:	d107      	bne.n	800378a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003788:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e050      	b.n	8003830 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800378e:	893b      	ldrh	r3, [r7, #8]
 8003790:	b2da      	uxtb	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800379a:	6a39      	ldr	r1, [r7, #32]
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 f967 	bl	8003a70 <I2C_WaitOnTXEFlagUntilTimeout>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00d      	beq.n	80037c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	2b04      	cmp	r3, #4
 80037ae:	d107      	bne.n	80037c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e035      	b.n	8003830 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	2200      	movs	r2, #0
 80037dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f82b 	bl	800383c <I2C_WaitOnFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00d      	beq.n	8003808 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037fa:	d103      	bne.n	8003804 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003802:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e013      	b.n	8003830 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003808:	897b      	ldrh	r3, [r7, #10]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	b2da      	uxtb	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	6a3a      	ldr	r2, [r7, #32]
 800381c:	4906      	ldr	r1, [pc, #24]	; (8003838 <I2C_RequestMemoryRead+0x1cc>)
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f886 	bl	8003930 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	00010002 	.word	0x00010002

0800383c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	603b      	str	r3, [r7, #0]
 8003848:	4613      	mov	r3, r2
 800384a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800384c:	e048      	b.n	80038e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003854:	d044      	beq.n	80038e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003856:	f7ff f86f 	bl	8002938 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d302      	bcc.n	800386c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d139      	bne.n	80038e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	0c1b      	lsrs	r3, r3, #16
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b01      	cmp	r3, #1
 8003874:	d10d      	bne.n	8003892 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	43da      	mvns	r2, r3
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	4013      	ands	r3, r2
 8003882:	b29b      	uxth	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	bf0c      	ite	eq
 8003888:	2301      	moveq	r3, #1
 800388a:	2300      	movne	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	461a      	mov	r2, r3
 8003890:	e00c      	b.n	80038ac <I2C_WaitOnFlagUntilTimeout+0x70>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	43da      	mvns	r2, r3
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	4013      	ands	r3, r2
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	bf0c      	ite	eq
 80038a4:	2301      	moveq	r3, #1
 80038a6:	2300      	movne	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	461a      	mov	r2, r3
 80038ac:	79fb      	ldrb	r3, [r7, #7]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d116      	bne.n	80038e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	f043 0220 	orr.w	r2, r3, #32
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e023      	b.n	8003928 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	0c1b      	lsrs	r3, r3, #16
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d10d      	bne.n	8003906 <I2C_WaitOnFlagUntilTimeout+0xca>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	43da      	mvns	r2, r3
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	4013      	ands	r3, r2
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bf0c      	ite	eq
 80038fc:	2301      	moveq	r3, #1
 80038fe:	2300      	movne	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	461a      	mov	r2, r3
 8003904:	e00c      	b.n	8003920 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	43da      	mvns	r2, r3
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	4013      	ands	r3, r2
 8003912:	b29b      	uxth	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	bf0c      	ite	eq
 8003918:	2301      	moveq	r3, #1
 800391a:	2300      	movne	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	461a      	mov	r2, r3
 8003920:	79fb      	ldrb	r3, [r7, #7]
 8003922:	429a      	cmp	r2, r3
 8003924:	d093      	beq.n	800384e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
 800393c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800393e:	e071      	b.n	8003a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800394e:	d123      	bne.n	8003998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800395e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003968:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	f043 0204 	orr.w	r2, r3, #4
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e067      	b.n	8003a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399e:	d041      	beq.n	8003a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a0:	f7fe ffca 	bl	8002938 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d302      	bcc.n	80039b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d136      	bne.n	8003a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	0c1b      	lsrs	r3, r3, #16
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d10c      	bne.n	80039da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	43da      	mvns	r2, r3
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	4013      	ands	r3, r2
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	bf14      	ite	ne
 80039d2:	2301      	movne	r3, #1
 80039d4:	2300      	moveq	r3, #0
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	e00b      	b.n	80039f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	43da      	mvns	r2, r3
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	4013      	ands	r3, r2
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	bf14      	ite	ne
 80039ec:	2301      	movne	r3, #1
 80039ee:	2300      	moveq	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d016      	beq.n	8003a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	f043 0220 	orr.w	r2, r3, #32
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e021      	b.n	8003a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	0c1b      	lsrs	r3, r3, #16
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d10c      	bne.n	8003a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	43da      	mvns	r2, r3
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	bf14      	ite	ne
 8003a40:	2301      	movne	r3, #1
 8003a42:	2300      	moveq	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	e00b      	b.n	8003a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	43da      	mvns	r2, r3
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	4013      	ands	r3, r2
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	bf14      	ite	ne
 8003a5a:	2301      	movne	r3, #1
 8003a5c:	2300      	moveq	r3, #0
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f47f af6d 	bne.w	8003940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a7c:	e034      	b.n	8003ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f89b 	bl	8003bba <I2C_IsAcknowledgeFailed>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e034      	b.n	8003af8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a94:	d028      	beq.n	8003ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a96:	f7fe ff4f 	bl	8002938 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d302      	bcc.n	8003aac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d11d      	bne.n	8003ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab6:	2b80      	cmp	r3, #128	; 0x80
 8003ab8:	d016      	beq.n	8003ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	f043 0220 	orr.w	r2, r3, #32
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e007      	b.n	8003af8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af2:	2b80      	cmp	r3, #128	; 0x80
 8003af4:	d1c3      	bne.n	8003a7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b0c:	e049      	b.n	8003ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	f003 0310 	and.w	r3, r3, #16
 8003b18:	2b10      	cmp	r3, #16
 8003b1a:	d119      	bne.n	8003b50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f06f 0210 	mvn.w	r2, #16
 8003b24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e030      	b.n	8003bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b50:	f7fe fef2 	bl	8002938 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d302      	bcc.n	8003b66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d11d      	bne.n	8003ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b70:	2b40      	cmp	r3, #64	; 0x40
 8003b72:	d016      	beq.n	8003ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	f043 0220 	orr.w	r2, r3, #32
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e007      	b.n	8003bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bac:	2b40      	cmp	r3, #64	; 0x40
 8003bae:	d1ae      	bne.n	8003b0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd0:	d11b      	bne.n	8003c0a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bda:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f043 0204 	orr.w	r2, r3, #4
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bc80      	pop	{r7}
 8003c14:	4770      	bx	lr
	...

08003c18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e272      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 8087 	beq.w	8003d46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c38:	4b92      	ldr	r3, [pc, #584]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 030c 	and.w	r3, r3, #12
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d00c      	beq.n	8003c5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c44:	4b8f      	ldr	r3, [pc, #572]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 030c 	and.w	r3, r3, #12
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d112      	bne.n	8003c76 <HAL_RCC_OscConfig+0x5e>
 8003c50:	4b8c      	ldr	r3, [pc, #560]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c5c:	d10b      	bne.n	8003c76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c5e:	4b89      	ldr	r3, [pc, #548]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d06c      	beq.n	8003d44 <HAL_RCC_OscConfig+0x12c>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d168      	bne.n	8003d44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e24c      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c7e:	d106      	bne.n	8003c8e <HAL_RCC_OscConfig+0x76>
 8003c80:	4b80      	ldr	r3, [pc, #512]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a7f      	ldr	r2, [pc, #508]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	e02e      	b.n	8003cec <HAL_RCC_OscConfig+0xd4>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10c      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x98>
 8003c96:	4b7b      	ldr	r3, [pc, #492]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a7a      	ldr	r2, [pc, #488]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	4b78      	ldr	r3, [pc, #480]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a77      	ldr	r2, [pc, #476]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	e01d      	b.n	8003cec <HAL_RCC_OscConfig+0xd4>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cb8:	d10c      	bne.n	8003cd4 <HAL_RCC_OscConfig+0xbc>
 8003cba:	4b72      	ldr	r3, [pc, #456]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a71      	ldr	r2, [pc, #452]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	4b6f      	ldr	r3, [pc, #444]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a6e      	ldr	r2, [pc, #440]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	e00b      	b.n	8003cec <HAL_RCC_OscConfig+0xd4>
 8003cd4:	4b6b      	ldr	r3, [pc, #428]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a6a      	ldr	r2, [pc, #424]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	4b68      	ldr	r3, [pc, #416]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a67      	ldr	r2, [pc, #412]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d013      	beq.n	8003d1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf4:	f7fe fe20 	bl	8002938 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cfc:	f7fe fe1c 	bl	8002938 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b64      	cmp	r3, #100	; 0x64
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e200      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0e:	4b5d      	ldr	r3, [pc, #372]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0f0      	beq.n	8003cfc <HAL_RCC_OscConfig+0xe4>
 8003d1a:	e014      	b.n	8003d46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1c:	f7fe fe0c 	bl	8002938 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d24:	f7fe fe08 	bl	8002938 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b64      	cmp	r3, #100	; 0x64
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e1ec      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d36:	4b53      	ldr	r3, [pc, #332]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1f0      	bne.n	8003d24 <HAL_RCC_OscConfig+0x10c>
 8003d42:	e000      	b.n	8003d46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d063      	beq.n	8003e1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d52:	4b4c      	ldr	r3, [pc, #304]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f003 030c 	and.w	r3, r3, #12
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00b      	beq.n	8003d76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d5e:	4b49      	ldr	r3, [pc, #292]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f003 030c 	and.w	r3, r3, #12
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d11c      	bne.n	8003da4 <HAL_RCC_OscConfig+0x18c>
 8003d6a:	4b46      	ldr	r3, [pc, #280]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d116      	bne.n	8003da4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d76:	4b43      	ldr	r3, [pc, #268]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d005      	beq.n	8003d8e <HAL_RCC_OscConfig+0x176>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d001      	beq.n	8003d8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e1c0      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d8e:	4b3d      	ldr	r3, [pc, #244]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	4939      	ldr	r1, [pc, #228]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003da2:	e03a      	b.n	8003e1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d020      	beq.n	8003dee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dac:	4b36      	ldr	r3, [pc, #216]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db2:	f7fe fdc1 	bl	8002938 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dba:	f7fe fdbd 	bl	8002938 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e1a1      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dcc:	4b2d      	ldr	r3, [pc, #180]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0f0      	beq.n	8003dba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd8:	4b2a      	ldr	r3, [pc, #168]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	4927      	ldr	r1, [pc, #156]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	600b      	str	r3, [r1, #0]
 8003dec:	e015      	b.n	8003e1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dee:	4b26      	ldr	r3, [pc, #152]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df4:	f7fe fda0 	bl	8002938 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dfc:	f7fe fd9c 	bl	8002938 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e180      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0e:	4b1d      	ldr	r3, [pc, #116]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d03a      	beq.n	8003e9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d019      	beq.n	8003e62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e2e:	4b17      	ldr	r3, [pc, #92]	; (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e34:	f7fe fd80 	bl	8002938 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e3c:	f7fe fd7c 	bl	8002938 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e160      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e4e:	4b0d      	ldr	r3, [pc, #52]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0f0      	beq.n	8003e3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e5a:	2001      	movs	r0, #1
 8003e5c:	f000 face 	bl	80043fc <RCC_Delay>
 8003e60:	e01c      	b.n	8003e9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e62:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e68:	f7fe fd66 	bl	8002938 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e6e:	e00f      	b.n	8003e90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e70:	f7fe fd62 	bl	8002938 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d908      	bls.n	8003e90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e146      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
 8003e82:	bf00      	nop
 8003e84:	40021000 	.word	0x40021000
 8003e88:	42420000 	.word	0x42420000
 8003e8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e90:	4b92      	ldr	r3, [pc, #584]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1e9      	bne.n	8003e70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 80a6 	beq.w	8003ff6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eae:	4b8b      	ldr	r3, [pc, #556]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10d      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eba:	4b88      	ldr	r3, [pc, #544]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	4a87      	ldr	r2, [pc, #540]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	61d3      	str	r3, [r2, #28]
 8003ec6:	4b85      	ldr	r3, [pc, #532]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ece:	60bb      	str	r3, [r7, #8]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed6:	4b82      	ldr	r3, [pc, #520]	; (80040e0 <HAL_RCC_OscConfig+0x4c8>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d118      	bne.n	8003f14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ee2:	4b7f      	ldr	r3, [pc, #508]	; (80040e0 <HAL_RCC_OscConfig+0x4c8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a7e      	ldr	r2, [pc, #504]	; (80040e0 <HAL_RCC_OscConfig+0x4c8>)
 8003ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eee:	f7fe fd23 	bl	8002938 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef6:	f7fe fd1f 	bl	8002938 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b64      	cmp	r3, #100	; 0x64
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e103      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f08:	4b75      	ldr	r3, [pc, #468]	; (80040e0 <HAL_RCC_OscConfig+0x4c8>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0f0      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d106      	bne.n	8003f2a <HAL_RCC_OscConfig+0x312>
 8003f1c:	4b6f      	ldr	r3, [pc, #444]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	4a6e      	ldr	r2, [pc, #440]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	6213      	str	r3, [r2, #32]
 8003f28:	e02d      	b.n	8003f86 <HAL_RCC_OscConfig+0x36e>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10c      	bne.n	8003f4c <HAL_RCC_OscConfig+0x334>
 8003f32:	4b6a      	ldr	r3, [pc, #424]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	4a69      	ldr	r2, [pc, #420]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f38:	f023 0301 	bic.w	r3, r3, #1
 8003f3c:	6213      	str	r3, [r2, #32]
 8003f3e:	4b67      	ldr	r3, [pc, #412]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	4a66      	ldr	r2, [pc, #408]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f44:	f023 0304 	bic.w	r3, r3, #4
 8003f48:	6213      	str	r3, [r2, #32]
 8003f4a:	e01c      	b.n	8003f86 <HAL_RCC_OscConfig+0x36e>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	2b05      	cmp	r3, #5
 8003f52:	d10c      	bne.n	8003f6e <HAL_RCC_OscConfig+0x356>
 8003f54:	4b61      	ldr	r3, [pc, #388]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	4a60      	ldr	r2, [pc, #384]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f5a:	f043 0304 	orr.w	r3, r3, #4
 8003f5e:	6213      	str	r3, [r2, #32]
 8003f60:	4b5e      	ldr	r3, [pc, #376]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	4a5d      	ldr	r2, [pc, #372]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f66:	f043 0301 	orr.w	r3, r3, #1
 8003f6a:	6213      	str	r3, [r2, #32]
 8003f6c:	e00b      	b.n	8003f86 <HAL_RCC_OscConfig+0x36e>
 8003f6e:	4b5b      	ldr	r3, [pc, #364]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	4a5a      	ldr	r2, [pc, #360]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f74:	f023 0301 	bic.w	r3, r3, #1
 8003f78:	6213      	str	r3, [r2, #32]
 8003f7a:	4b58      	ldr	r3, [pc, #352]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	4a57      	ldr	r2, [pc, #348]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f80:	f023 0304 	bic.w	r3, r3, #4
 8003f84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d015      	beq.n	8003fba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f8e:	f7fe fcd3 	bl	8002938 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f94:	e00a      	b.n	8003fac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f96:	f7fe fccf 	bl	8002938 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e0b1      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fac:	4b4b      	ldr	r3, [pc, #300]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0ee      	beq.n	8003f96 <HAL_RCC_OscConfig+0x37e>
 8003fb8:	e014      	b.n	8003fe4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fba:	f7fe fcbd 	bl	8002938 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc0:	e00a      	b.n	8003fd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc2:	f7fe fcb9 	bl	8002938 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e09b      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd8:	4b40      	ldr	r3, [pc, #256]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1ee      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fe4:	7dfb      	ldrb	r3, [r7, #23]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d105      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fea:	4b3c      	ldr	r3, [pc, #240]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	4a3b      	ldr	r2, [pc, #236]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 8087 	beq.w	800410e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004000:	4b36      	ldr	r3, [pc, #216]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f003 030c 	and.w	r3, r3, #12
 8004008:	2b08      	cmp	r3, #8
 800400a:	d061      	beq.n	80040d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	2b02      	cmp	r3, #2
 8004012:	d146      	bne.n	80040a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004014:	4b33      	ldr	r3, [pc, #204]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401a:	f7fe fc8d 	bl	8002938 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004022:	f7fe fc89 	bl	8002938 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e06d      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004034:	4b29      	ldr	r3, [pc, #164]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1f0      	bne.n	8004022 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004048:	d108      	bne.n	800405c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800404a:	4b24      	ldr	r3, [pc, #144]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	4921      	ldr	r1, [pc, #132]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8004058:	4313      	orrs	r3, r2
 800405a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800405c:	4b1f      	ldr	r3, [pc, #124]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a19      	ldr	r1, [r3, #32]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	430b      	orrs	r3, r1
 800406e:	491b      	ldr	r1, [pc, #108]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8004070:	4313      	orrs	r3, r2
 8004072:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004074:	4b1b      	ldr	r3, [pc, #108]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8004076:	2201      	movs	r2, #1
 8004078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407a:	f7fe fc5d 	bl	8002938 <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004082:	f7fe fc59 	bl	8002938 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e03d      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004094:	4b11      	ldr	r3, [pc, #68]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0f0      	beq.n	8004082 <HAL_RCC_OscConfig+0x46a>
 80040a0:	e035      	b.n	800410e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a2:	4b10      	ldr	r3, [pc, #64]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a8:	f7fe fc46 	bl	8002938 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b0:	f7fe fc42 	bl	8002938 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e026      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040c2:	4b06      	ldr	r3, [pc, #24]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1f0      	bne.n	80040b0 <HAL_RCC_OscConfig+0x498>
 80040ce:	e01e      	b.n	800410e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d107      	bne.n	80040e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e019      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
 80040dc:	40021000 	.word	0x40021000
 80040e0:	40007000 	.word	0x40007000
 80040e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040e8:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <HAL_RCC_OscConfig+0x500>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d106      	bne.n	800410a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004106:	429a      	cmp	r2, r3
 8004108:	d001      	beq.n	800410e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e000      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40021000 	.word	0x40021000

0800411c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e0d0      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004130:	4b6a      	ldr	r3, [pc, #424]	; (80042dc <HAL_RCC_ClockConfig+0x1c0>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d910      	bls.n	8004160 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413e:	4b67      	ldr	r3, [pc, #412]	; (80042dc <HAL_RCC_ClockConfig+0x1c0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f023 0207 	bic.w	r2, r3, #7
 8004146:	4965      	ldr	r1, [pc, #404]	; (80042dc <HAL_RCC_ClockConfig+0x1c0>)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	4313      	orrs	r3, r2
 800414c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800414e:	4b63      	ldr	r3, [pc, #396]	; (80042dc <HAL_RCC_ClockConfig+0x1c0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d001      	beq.n	8004160 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e0b8      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d020      	beq.n	80041ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004178:	4b59      	ldr	r3, [pc, #356]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	4a58      	ldr	r2, [pc, #352]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 800417e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004182:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b00      	cmp	r3, #0
 800418e:	d005      	beq.n	800419c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004190:	4b53      	ldr	r3, [pc, #332]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	4a52      	ldr	r2, [pc, #328]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004196:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800419a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800419c:	4b50      	ldr	r3, [pc, #320]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	494d      	ldr	r1, [pc, #308]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d040      	beq.n	800423c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d107      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c2:	4b47      	ldr	r3, [pc, #284]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d115      	bne.n	80041fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e07f      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d107      	bne.n	80041ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041da:	4b41      	ldr	r3, [pc, #260]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d109      	bne.n	80041fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e073      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ea:	4b3d      	ldr	r3, [pc, #244]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e06b      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041fa:	4b39      	ldr	r3, [pc, #228]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f023 0203 	bic.w	r2, r3, #3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	4936      	ldr	r1, [pc, #216]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004208:	4313      	orrs	r3, r2
 800420a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800420c:	f7fe fb94 	bl	8002938 <HAL_GetTick>
 8004210:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004212:	e00a      	b.n	800422a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004214:	f7fe fb90 	bl	8002938 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004222:	4293      	cmp	r3, r2
 8004224:	d901      	bls.n	800422a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e053      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422a:	4b2d      	ldr	r3, [pc, #180]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f003 020c 	and.w	r2, r3, #12
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	429a      	cmp	r2, r3
 800423a:	d1eb      	bne.n	8004214 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800423c:	4b27      	ldr	r3, [pc, #156]	; (80042dc <HAL_RCC_ClockConfig+0x1c0>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d210      	bcs.n	800426c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424a:	4b24      	ldr	r3, [pc, #144]	; (80042dc <HAL_RCC_ClockConfig+0x1c0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f023 0207 	bic.w	r2, r3, #7
 8004252:	4922      	ldr	r1, [pc, #136]	; (80042dc <HAL_RCC_ClockConfig+0x1c0>)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	4313      	orrs	r3, r2
 8004258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800425a:	4b20      	ldr	r3, [pc, #128]	; (80042dc <HAL_RCC_ClockConfig+0x1c0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	429a      	cmp	r2, r3
 8004266:	d001      	beq.n	800426c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e032      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d008      	beq.n	800428a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004278:	4b19      	ldr	r3, [pc, #100]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	4916      	ldr	r1, [pc, #88]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004286:	4313      	orrs	r3, r2
 8004288:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d009      	beq.n	80042aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004296:	4b12      	ldr	r3, [pc, #72]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	490e      	ldr	r1, [pc, #56]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042aa:	f000 f821 	bl	80042f0 <HAL_RCC_GetSysClockFreq>
 80042ae:	4602      	mov	r2, r0
 80042b0:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	091b      	lsrs	r3, r3, #4
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	490a      	ldr	r1, [pc, #40]	; (80042e4 <HAL_RCC_ClockConfig+0x1c8>)
 80042bc:	5ccb      	ldrb	r3, [r1, r3]
 80042be:	fa22 f303 	lsr.w	r3, r2, r3
 80042c2:	4a09      	ldr	r2, [pc, #36]	; (80042e8 <HAL_RCC_ClockConfig+0x1cc>)
 80042c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042c6:	4b09      	ldr	r3, [pc, #36]	; (80042ec <HAL_RCC_ClockConfig+0x1d0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fe faf2 	bl	80028b4 <HAL_InitTick>

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40022000 	.word	0x40022000
 80042e0:	40021000 	.word	0x40021000
 80042e4:	0800a7f8 	.word	0x0800a7f8
 80042e8:	20000010 	.word	0x20000010
 80042ec:	20000014 	.word	0x20000014

080042f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	2300      	movs	r3, #0
 80042fc:	60bb      	str	r3, [r7, #8]
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]
 8004302:	2300      	movs	r3, #0
 8004304:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004306:	2300      	movs	r3, #0
 8004308:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800430a:	4b1e      	ldr	r3, [pc, #120]	; (8004384 <HAL_RCC_GetSysClockFreq+0x94>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f003 030c 	and.w	r3, r3, #12
 8004316:	2b04      	cmp	r3, #4
 8004318:	d002      	beq.n	8004320 <HAL_RCC_GetSysClockFreq+0x30>
 800431a:	2b08      	cmp	r3, #8
 800431c:	d003      	beq.n	8004326 <HAL_RCC_GetSysClockFreq+0x36>
 800431e:	e027      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004320:	4b19      	ldr	r3, [pc, #100]	; (8004388 <HAL_RCC_GetSysClockFreq+0x98>)
 8004322:	613b      	str	r3, [r7, #16]
      break;
 8004324:	e027      	b.n	8004376 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	0c9b      	lsrs	r3, r3, #18
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	4a17      	ldr	r2, [pc, #92]	; (800438c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004330:	5cd3      	ldrb	r3, [r2, r3]
 8004332:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d010      	beq.n	8004360 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800433e:	4b11      	ldr	r3, [pc, #68]	; (8004384 <HAL_RCC_GetSysClockFreq+0x94>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	0c5b      	lsrs	r3, r3, #17
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	4a11      	ldr	r2, [pc, #68]	; (8004390 <HAL_RCC_GetSysClockFreq+0xa0>)
 800434a:	5cd3      	ldrb	r3, [r2, r3]
 800434c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a0d      	ldr	r2, [pc, #52]	; (8004388 <HAL_RCC_GetSysClockFreq+0x98>)
 8004352:	fb03 f202 	mul.w	r2, r3, r2
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	fbb2 f3f3 	udiv	r3, r2, r3
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	e004      	b.n	800436a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a0c      	ldr	r2, [pc, #48]	; (8004394 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004364:	fb02 f303 	mul.w	r3, r2, r3
 8004368:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	613b      	str	r3, [r7, #16]
      break;
 800436e:	e002      	b.n	8004376 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004370:	4b05      	ldr	r3, [pc, #20]	; (8004388 <HAL_RCC_GetSysClockFreq+0x98>)
 8004372:	613b      	str	r3, [r7, #16]
      break;
 8004374:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004376:	693b      	ldr	r3, [r7, #16]
}
 8004378:	4618      	mov	r0, r3
 800437a:	371c      	adds	r7, #28
 800437c:	46bd      	mov	sp, r7
 800437e:	bc80      	pop	{r7}
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40021000 	.word	0x40021000
 8004388:	007a1200 	.word	0x007a1200
 800438c:	0800a810 	.word	0x0800a810
 8004390:	0800a820 	.word	0x0800a820
 8004394:	003d0900 	.word	0x003d0900

08004398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800439c:	4b02      	ldr	r3, [pc, #8]	; (80043a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800439e:	681b      	ldr	r3, [r3, #0]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr
 80043a8:	20000010 	.word	0x20000010

080043ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043b0:	f7ff fff2 	bl	8004398 <HAL_RCC_GetHCLKFreq>
 80043b4:	4602      	mov	r2, r0
 80043b6:	4b05      	ldr	r3, [pc, #20]	; (80043cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	0a1b      	lsrs	r3, r3, #8
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	4903      	ldr	r1, [pc, #12]	; (80043d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043c2:	5ccb      	ldrb	r3, [r1, r3]
 80043c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40021000 	.word	0x40021000
 80043d0:	0800a808 	.word	0x0800a808

080043d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043d8:	f7ff ffde 	bl	8004398 <HAL_RCC_GetHCLKFreq>
 80043dc:	4602      	mov	r2, r0
 80043de:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	0adb      	lsrs	r3, r3, #11
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	4903      	ldr	r1, [pc, #12]	; (80043f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043ea:	5ccb      	ldrb	r3, [r1, r3]
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40021000 	.word	0x40021000
 80043f8:	0800a808 	.word	0x0800a808

080043fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004404:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <RCC_Delay+0x34>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a0a      	ldr	r2, [pc, #40]	; (8004434 <RCC_Delay+0x38>)
 800440a:	fba2 2303 	umull	r2, r3, r2, r3
 800440e:	0a5b      	lsrs	r3, r3, #9
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	fb02 f303 	mul.w	r3, r2, r3
 8004416:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004418:	bf00      	nop
  }
  while (Delay --);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	1e5a      	subs	r2, r3, #1
 800441e:	60fa      	str	r2, [r7, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1f9      	bne.n	8004418 <RCC_Delay+0x1c>
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr
 8004430:	20000010 	.word	0x20000010
 8004434:	10624dd3 	.word	0x10624dd3

08004438 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e076      	b.n	8004538 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	2b00      	cmp	r3, #0
 8004450:	d108      	bne.n	8004464 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800445a:	d009      	beq.n	8004470 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	61da      	str	r2, [r3, #28]
 8004462:	e005      	b.n	8004470 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fe f806 	bl	800249c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044e0:	431a      	orrs	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f4:	ea42 0103 	orr.w	r1, r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	0c1a      	lsrs	r2, r3, #16
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f002 0204 	and.w	r2, r2, #4
 8004516:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	69da      	ldr	r2, [r3, #28]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004526:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	4613      	mov	r3, r2
 800454e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004550:	2300      	movs	r3, #0
 8004552:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800455a:	2b01      	cmp	r3, #1
 800455c:	d101      	bne.n	8004562 <HAL_SPI_Transmit+0x22>
 800455e:	2302      	movs	r3, #2
 8004560:	e12d      	b.n	80047be <HAL_SPI_Transmit+0x27e>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800456a:	f7fe f9e5 	bl	8002938 <HAL_GetTick>
 800456e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004570:	88fb      	ldrh	r3, [r7, #6]
 8004572:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b01      	cmp	r3, #1
 800457e:	d002      	beq.n	8004586 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004580:	2302      	movs	r3, #2
 8004582:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004584:	e116      	b.n	80047b4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <HAL_SPI_Transmit+0x52>
 800458c:	88fb      	ldrh	r3, [r7, #6]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d102      	bne.n	8004598 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004596:	e10d      	b.n	80047b4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2203      	movs	r2, #3
 800459c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	88fa      	ldrh	r2, [r7, #6]
 80045b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	88fa      	ldrh	r2, [r7, #6]
 80045b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045de:	d10f      	bne.n	8004600 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460a:	2b40      	cmp	r3, #64	; 0x40
 800460c:	d007      	beq.n	800461e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800461c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004626:	d14f      	bne.n	80046c8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <HAL_SPI_Transmit+0xf6>
 8004630:	8afb      	ldrh	r3, [r7, #22]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d142      	bne.n	80046bc <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463a:	881a      	ldrh	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004646:	1c9a      	adds	r2, r3, #2
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004650:	b29b      	uxth	r3, r3
 8004652:	3b01      	subs	r3, #1
 8004654:	b29a      	uxth	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800465a:	e02f      	b.n	80046bc <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b02      	cmp	r3, #2
 8004668:	d112      	bne.n	8004690 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	881a      	ldrh	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467a:	1c9a      	adds	r2, r3, #2
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004684:	b29b      	uxth	r3, r3
 8004686:	3b01      	subs	r3, #1
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	86da      	strh	r2, [r3, #54]	; 0x36
 800468e:	e015      	b.n	80046bc <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004690:	f7fe f952 	bl	8002938 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d803      	bhi.n	80046a8 <HAL_SPI_Transmit+0x168>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a6:	d102      	bne.n	80046ae <HAL_SPI_Transmit+0x16e>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d106      	bne.n	80046bc <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80046ba:	e07b      	b.n	80047b4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1ca      	bne.n	800465c <HAL_SPI_Transmit+0x11c>
 80046c6:	e050      	b.n	800476a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <HAL_SPI_Transmit+0x196>
 80046d0:	8afb      	ldrh	r3, [r7, #22]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d144      	bne.n	8004760 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	330c      	adds	r3, #12
 80046e0:	7812      	ldrb	r2, [r2, #0]
 80046e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80046fc:	e030      	b.n	8004760 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b02      	cmp	r3, #2
 800470a:	d113      	bne.n	8004734 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	330c      	adds	r3, #12
 8004716:	7812      	ldrb	r2, [r2, #0]
 8004718:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	86da      	strh	r2, [r3, #54]	; 0x36
 8004732:	e015      	b.n	8004760 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004734:	f7fe f900 	bl	8002938 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	429a      	cmp	r2, r3
 8004742:	d803      	bhi.n	800474c <HAL_SPI_Transmit+0x20c>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474a:	d102      	bne.n	8004752 <HAL_SPI_Transmit+0x212>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d106      	bne.n	8004760 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800475e:	e029      	b.n	80047b4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004764:	b29b      	uxth	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1c9      	bne.n	80046fe <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	6839      	ldr	r1, [r7, #0]
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 fbd8 	bl	8004f24 <SPI_EndRxTxTransaction>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2220      	movs	r2, #32
 800477e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10a      	bne.n	800479e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004788:	2300      	movs	r3, #0
 800478a:	613b      	str	r3, [r7, #16]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	613b      	str	r3, [r7, #16]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	77fb      	strb	r3, [r7, #31]
 80047aa:	e003      	b.n	80047b4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3720      	adds	r7, #32
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b088      	sub	sp, #32
 80047ca:	af02      	add	r7, sp, #8
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	603b      	str	r3, [r7, #0]
 80047d2:	4613      	mov	r3, r2
 80047d4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d002      	beq.n	80047ec <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80047e6:	2302      	movs	r3, #2
 80047e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047ea:	e0fb      	b.n	80049e4 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047f4:	d112      	bne.n	800481c <HAL_SPI_Receive+0x56>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10e      	bne.n	800481c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2204      	movs	r2, #4
 8004802:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004806:	88fa      	ldrh	r2, [r7, #6]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	4613      	mov	r3, r2
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	68b9      	ldr	r1, [r7, #8]
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f8ef 	bl	80049f6 <HAL_SPI_TransmitReceive>
 8004818:	4603      	mov	r3, r0
 800481a:	e0e8      	b.n	80049ee <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004822:	2b01      	cmp	r3, #1
 8004824:	d101      	bne.n	800482a <HAL_SPI_Receive+0x64>
 8004826:	2302      	movs	r3, #2
 8004828:	e0e1      	b.n	80049ee <HAL_SPI_Receive+0x228>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004832:	f7fe f881 	bl	8002938 <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d002      	beq.n	8004844 <HAL_SPI_Receive+0x7e>
 800483e:	88fb      	ldrh	r3, [r7, #6]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d102      	bne.n	800484a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004848:	e0cc      	b.n	80049e4 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2204      	movs	r2, #4
 800484e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	88fa      	ldrh	r2, [r7, #6]
 8004862:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	88fa      	ldrh	r2, [r7, #6]
 8004868:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004890:	d10f      	bne.n	80048b2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048bc:	2b40      	cmp	r3, #64	; 0x40
 80048be:	d007      	beq.n	80048d0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d16a      	bne.n	80049ae <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80048d8:	e032      	b.n	8004940 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d115      	bne.n	8004914 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f103 020c 	add.w	r2, r3, #12
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	7812      	ldrb	r2, [r2, #0]
 80048f6:	b2d2      	uxtb	r2, r2
 80048f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004908:	b29b      	uxth	r3, r3
 800490a:	3b01      	subs	r3, #1
 800490c:	b29a      	uxth	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004912:	e015      	b.n	8004940 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004914:	f7fe f810 	bl	8002938 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	429a      	cmp	r2, r3
 8004922:	d803      	bhi.n	800492c <HAL_SPI_Receive+0x166>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492a:	d102      	bne.n	8004932 <HAL_SPI_Receive+0x16c>
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d106      	bne.n	8004940 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800493e:	e051      	b.n	80049e4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1c7      	bne.n	80048da <HAL_SPI_Receive+0x114>
 800494a:	e035      	b.n	80049b8 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b01      	cmp	r3, #1
 8004958:	d113      	bne.n	8004982 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004964:	b292      	uxth	r2, r2
 8004966:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496c:	1c9a      	adds	r2, r3, #2
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004976:	b29b      	uxth	r3, r3
 8004978:	3b01      	subs	r3, #1
 800497a:	b29a      	uxth	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004980:	e015      	b.n	80049ae <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004982:	f7fd ffd9 	bl	8002938 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d803      	bhi.n	800499a <HAL_SPI_Receive+0x1d4>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004998:	d102      	bne.n	80049a0 <HAL_SPI_Receive+0x1da>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d106      	bne.n	80049ae <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80049ac:	e01a      	b.n	80049e4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1c9      	bne.n	800494c <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	6839      	ldr	r1, [r7, #0]
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 fa5f 	bl	8004e80 <SPI_EndRxTransaction>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d002      	beq.n	80049dc <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	75fb      	strb	r3, [r7, #23]
 80049da:	e003      	b.n	80049e4 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b08c      	sub	sp, #48	; 0x30
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	607a      	str	r2, [r7, #4]
 8004a02:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a04:	2301      	movs	r3, #1
 8004a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d101      	bne.n	8004a1c <HAL_SPI_TransmitReceive+0x26>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	e198      	b.n	8004d4e <HAL_SPI_TransmitReceive+0x358>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a24:	f7fd ff88 	bl	8002938 <HAL_GetTick>
 8004a28:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004a3a:	887b      	ldrh	r3, [r7, #2]
 8004a3c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d00f      	beq.n	8004a66 <HAL_SPI_TransmitReceive+0x70>
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a4c:	d107      	bne.n	8004a5e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d103      	bne.n	8004a5e <HAL_SPI_TransmitReceive+0x68>
 8004a56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d003      	beq.n	8004a66 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004a5e:	2302      	movs	r3, #2
 8004a60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a64:	e16d      	b.n	8004d42 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d005      	beq.n	8004a78 <HAL_SPI_TransmitReceive+0x82>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <HAL_SPI_TransmitReceive+0x82>
 8004a72:	887b      	ldrh	r3, [r7, #2]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d103      	bne.n	8004a80 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a7e:	e160      	b.n	8004d42 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d003      	beq.n	8004a94 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2205      	movs	r2, #5
 8004a90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	887a      	ldrh	r2, [r7, #2]
 8004aa4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	887a      	ldrh	r2, [r7, #2]
 8004aaa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	887a      	ldrh	r2, [r7, #2]
 8004ab6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	887a      	ldrh	r2, [r7, #2]
 8004abc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad4:	2b40      	cmp	r3, #64	; 0x40
 8004ad6:	d007      	beq.n	8004ae8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ae6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004af0:	d17c      	bne.n	8004bec <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <HAL_SPI_TransmitReceive+0x10a>
 8004afa:	8b7b      	ldrh	r3, [r7, #26]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d16a      	bne.n	8004bd6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b04:	881a      	ldrh	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b10:	1c9a      	adds	r2, r3, #2
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b24:	e057      	b.n	8004bd6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d11b      	bne.n	8004b6c <HAL_SPI_TransmitReceive+0x176>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d016      	beq.n	8004b6c <HAL_SPI_TransmitReceive+0x176>
 8004b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d113      	bne.n	8004b6c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b48:	881a      	ldrh	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b54:	1c9a      	adds	r2, r3, #2
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d119      	bne.n	8004bae <HAL_SPI_TransmitReceive+0x1b8>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d014      	beq.n	8004bae <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8e:	b292      	uxth	r2, r2
 8004b90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b96:	1c9a      	adds	r2, r3, #2
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004baa:	2301      	movs	r3, #1
 8004bac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004bae:	f7fd fec3 	bl	8002938 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d80b      	bhi.n	8004bd6 <HAL_SPI_TransmitReceive+0x1e0>
 8004bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc4:	d007      	beq.n	8004bd6 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004bd4:	e0b5      	b.n	8004d42 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1a2      	bne.n	8004b26 <HAL_SPI_TransmitReceive+0x130>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d19d      	bne.n	8004b26 <HAL_SPI_TransmitReceive+0x130>
 8004bea:	e080      	b.n	8004cee <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <HAL_SPI_TransmitReceive+0x204>
 8004bf4:	8b7b      	ldrh	r3, [r7, #26]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d16f      	bne.n	8004cda <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	330c      	adds	r3, #12
 8004c04:	7812      	ldrb	r2, [r2, #0]
 8004c06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0c:	1c5a      	adds	r2, r3, #1
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c20:	e05b      	b.n	8004cda <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d11c      	bne.n	8004c6a <HAL_SPI_TransmitReceive+0x274>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d017      	beq.n	8004c6a <HAL_SPI_TransmitReceive+0x274>
 8004c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d114      	bne.n	8004c6a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	330c      	adds	r3, #12
 8004c4a:	7812      	ldrb	r2, [r2, #0]
 8004c4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d119      	bne.n	8004cac <HAL_SPI_TransmitReceive+0x2b6>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d014      	beq.n	8004cac <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004cac:	f7fd fe44 	bl	8002938 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d803      	bhi.n	8004cc4 <HAL_SPI_TransmitReceive+0x2ce>
 8004cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc2:	d102      	bne.n	8004cca <HAL_SPI_TransmitReceive+0x2d4>
 8004cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d107      	bne.n	8004cda <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004cd8:	e033      	b.n	8004d42 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d19e      	bne.n	8004c22 <HAL_SPI_TransmitReceive+0x22c>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d199      	bne.n	8004c22 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 f916 	bl	8004f24 <SPI_EndRxTxTransaction>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d006      	beq.n	8004d0c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2220      	movs	r2, #32
 8004d08:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004d0a:	e01a      	b.n	8004d42 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10a      	bne.n	8004d2a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d14:	2300      	movs	r3, #0
 8004d16:	617b      	str	r3, [r7, #20]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d38:	e003      	b.n	8004d42 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3730      	adds	r7, #48	; 0x30
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b083      	sub	sp, #12
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d64:	b2db      	uxtb	r3, r3
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bc80      	pop	{r7}
 8004d6e:	4770      	bx	lr

08004d70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b088      	sub	sp, #32
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	603b      	str	r3, [r7, #0]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d80:	f7fd fdda 	bl	8002938 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d88:	1a9b      	subs	r3, r3, r2
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d90:	f7fd fdd2 	bl	8002938 <HAL_GetTick>
 8004d94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d96:	4b39      	ldr	r3, [pc, #228]	; (8004e7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	015b      	lsls	r3, r3, #5
 8004d9c:	0d1b      	lsrs	r3, r3, #20
 8004d9e:	69fa      	ldr	r2, [r7, #28]
 8004da0:	fb02 f303 	mul.w	r3, r2, r3
 8004da4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004da6:	e054      	b.n	8004e52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dae:	d050      	beq.n	8004e52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004db0:	f7fd fdc2 	bl	8002938 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	69fa      	ldr	r2, [r7, #28]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d902      	bls.n	8004dc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d13d      	bne.n	8004e42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004dd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dde:	d111      	bne.n	8004e04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004de8:	d004      	beq.n	8004df4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004df2:	d107      	bne.n	8004e04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e0c:	d10f      	bne.n	8004e2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e017      	b.n	8004e72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	bf0c      	ite	eq
 8004e62:	2301      	moveq	r3, #1
 8004e64:	2300      	movne	r3, #0
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	461a      	mov	r2, r3
 8004e6a:	79fb      	ldrb	r3, [r7, #7]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d19b      	bne.n	8004da8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3720      	adds	r7, #32
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000010 	.word	0x20000010

08004e80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af02      	add	r7, sp, #8
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e94:	d111      	bne.n	8004eba <SPI_EndRxTransaction+0x3a>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e9e:	d004      	beq.n	8004eaa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea8:	d107      	bne.n	8004eba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eb8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ec2:	d117      	bne.n	8004ef4 <SPI_EndRxTransaction+0x74>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ecc:	d112      	bne.n	8004ef4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f7ff ff49 	bl	8004d70 <SPI_WaitFlagStateUntilTimeout>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d01a      	beq.n	8004f1a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee8:	f043 0220 	orr.w	r2, r3, #32
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e013      	b.n	8004f1c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	2200      	movs	r2, #0
 8004efc:	2180      	movs	r1, #128	; 0x80
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f7ff ff36 	bl	8004d70 <SPI_WaitFlagStateUntilTimeout>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d007      	beq.n	8004f1a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0e:	f043 0220 	orr.w	r2, r3, #32
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e000      	b.n	8004f1c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2200      	movs	r2, #0
 8004f38:	2180      	movs	r1, #128	; 0x80
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f7ff ff18 	bl	8004d70 <SPI_WaitFlagStateUntilTimeout>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d007      	beq.n	8004f56 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4a:	f043 0220 	orr.w	r2, r3, #32
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e000      	b.n	8004f58 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e041      	b.n	8004ff6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d106      	bne.n	8004f8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7fd fad2 	bl	8002530 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4610      	mov	r0, r2
 8004fa0:	f000 fb3a 	bl	8005618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b082      	sub	sp, #8
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e041      	b.n	8005094 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d106      	bne.n	800502a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f839 	bl	800509c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2202      	movs	r2, #2
 800502e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3304      	adds	r3, #4
 800503a:	4619      	mov	r1, r3
 800503c:	4610      	mov	r0, r2
 800503e:	f000 faeb 	bl	8005618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bc80      	pop	{r7}
 80050ac:	4770      	bx	lr
	...

080050b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d109      	bne.n	80050d4 <HAL_TIM_PWM_Start+0x24>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	bf14      	ite	ne
 80050cc:	2301      	movne	r3, #1
 80050ce:	2300      	moveq	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	e022      	b.n	800511a <HAL_TIM_PWM_Start+0x6a>
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	d109      	bne.n	80050ee <HAL_TIM_PWM_Start+0x3e>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	bf14      	ite	ne
 80050e6:	2301      	movne	r3, #1
 80050e8:	2300      	moveq	r3, #0
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	e015      	b.n	800511a <HAL_TIM_PWM_Start+0x6a>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d109      	bne.n	8005108 <HAL_TIM_PWM_Start+0x58>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	bf14      	ite	ne
 8005100:	2301      	movne	r3, #1
 8005102:	2300      	moveq	r3, #0
 8005104:	b2db      	uxtb	r3, r3
 8005106:	e008      	b.n	800511a <HAL_TIM_PWM_Start+0x6a>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b01      	cmp	r3, #1
 8005112:	bf14      	ite	ne
 8005114:	2301      	movne	r3, #1
 8005116:	2300      	moveq	r3, #0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e072      	b.n	8005208 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d104      	bne.n	8005132 <HAL_TIM_PWM_Start+0x82>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005130:	e013      	b.n	800515a <HAL_TIM_PWM_Start+0xaa>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b04      	cmp	r3, #4
 8005136:	d104      	bne.n	8005142 <HAL_TIM_PWM_Start+0x92>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005140:	e00b      	b.n	800515a <HAL_TIM_PWM_Start+0xaa>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b08      	cmp	r3, #8
 8005146:	d104      	bne.n	8005152 <HAL_TIM_PWM_Start+0xa2>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005150:	e003      	b.n	800515a <HAL_TIM_PWM_Start+0xaa>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2202      	movs	r2, #2
 8005156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2201      	movs	r2, #1
 8005160:	6839      	ldr	r1, [r7, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fd14 	bl	8005b90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a28      	ldr	r2, [pc, #160]	; (8005210 <HAL_TIM_PWM_Start+0x160>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d004      	beq.n	800517c <HAL_TIM_PWM_Start+0xcc>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a27      	ldr	r2, [pc, #156]	; (8005214 <HAL_TIM_PWM_Start+0x164>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d101      	bne.n	8005180 <HAL_TIM_PWM_Start+0xd0>
 800517c:	2301      	movs	r3, #1
 800517e:	e000      	b.n	8005182 <HAL_TIM_PWM_Start+0xd2>
 8005180:	2300      	movs	r3, #0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d007      	beq.n	8005196 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005194:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a1d      	ldr	r2, [pc, #116]	; (8005210 <HAL_TIM_PWM_Start+0x160>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d018      	beq.n	80051d2 <HAL_TIM_PWM_Start+0x122>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a1b      	ldr	r2, [pc, #108]	; (8005214 <HAL_TIM_PWM_Start+0x164>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d013      	beq.n	80051d2 <HAL_TIM_PWM_Start+0x122>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b2:	d00e      	beq.n	80051d2 <HAL_TIM_PWM_Start+0x122>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a17      	ldr	r2, [pc, #92]	; (8005218 <HAL_TIM_PWM_Start+0x168>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d009      	beq.n	80051d2 <HAL_TIM_PWM_Start+0x122>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a16      	ldr	r2, [pc, #88]	; (800521c <HAL_TIM_PWM_Start+0x16c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d004      	beq.n	80051d2 <HAL_TIM_PWM_Start+0x122>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a14      	ldr	r2, [pc, #80]	; (8005220 <HAL_TIM_PWM_Start+0x170>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d111      	bne.n	80051f6 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2b06      	cmp	r3, #6
 80051e2:	d010      	beq.n	8005206 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0201 	orr.w	r2, r2, #1
 80051f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f4:	e007      	b.n	8005206 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f042 0201 	orr.w	r2, r2, #1
 8005204:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	40012c00 	.word	0x40012c00
 8005214:	40013400 	.word	0x40013400
 8005218:	40000400 	.word	0x40000400
 800521c:	40000800 	.word	0x40000800
 8005220:	40000c00 	.word	0x40000c00

08005224 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2200      	movs	r2, #0
 8005234:	6839      	ldr	r1, [r7, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fcaa 	bl	8005b90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a2e      	ldr	r2, [pc, #184]	; (80052fc <HAL_TIM_PWM_Stop+0xd8>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d004      	beq.n	8005250 <HAL_TIM_PWM_Stop+0x2c>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a2d      	ldr	r2, [pc, #180]	; (8005300 <HAL_TIM_PWM_Stop+0xdc>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d101      	bne.n	8005254 <HAL_TIM_PWM_Stop+0x30>
 8005250:	2301      	movs	r3, #1
 8005252:	e000      	b.n	8005256 <HAL_TIM_PWM_Stop+0x32>
 8005254:	2300      	movs	r3, #0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d017      	beq.n	800528a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6a1a      	ldr	r2, [r3, #32]
 8005260:	f241 1311 	movw	r3, #4369	; 0x1111
 8005264:	4013      	ands	r3, r2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10f      	bne.n	800528a <HAL_TIM_PWM_Stop+0x66>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6a1a      	ldr	r2, [r3, #32]
 8005270:	f240 4344 	movw	r3, #1092	; 0x444
 8005274:	4013      	ands	r3, r2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d107      	bne.n	800528a <HAL_TIM_PWM_Stop+0x66>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005288:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6a1a      	ldr	r2, [r3, #32]
 8005290:	f241 1311 	movw	r3, #4369	; 0x1111
 8005294:	4013      	ands	r3, r2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10f      	bne.n	80052ba <HAL_TIM_PWM_Stop+0x96>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6a1a      	ldr	r2, [r3, #32]
 80052a0:	f240 4344 	movw	r3, #1092	; 0x444
 80052a4:	4013      	ands	r3, r2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d107      	bne.n	80052ba <HAL_TIM_PWM_Stop+0x96>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 0201 	bic.w	r2, r2, #1
 80052b8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d104      	bne.n	80052ca <HAL_TIM_PWM_Stop+0xa6>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052c8:	e013      	b.n	80052f2 <HAL_TIM_PWM_Stop+0xce>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	d104      	bne.n	80052da <HAL_TIM_PWM_Stop+0xb6>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052d8:	e00b      	b.n	80052f2 <HAL_TIM_PWM_Stop+0xce>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b08      	cmp	r3, #8
 80052de:	d104      	bne.n	80052ea <HAL_TIM_PWM_Stop+0xc6>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052e8:	e003      	b.n	80052f2 <HAL_TIM_PWM_Stop+0xce>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	40012c00 	.word	0x40012c00
 8005300:	40013400 	.word	0x40013400

08005304 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005310:	2300      	movs	r3, #0
 8005312:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800531a:	2b01      	cmp	r3, #1
 800531c:	d101      	bne.n	8005322 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800531e:	2302      	movs	r3, #2
 8005320:	e0ae      	b.n	8005480 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b0c      	cmp	r3, #12
 800532e:	f200 809f 	bhi.w	8005470 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005332:	a201      	add	r2, pc, #4	; (adr r2, 8005338 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005338:	0800536d 	.word	0x0800536d
 800533c:	08005471 	.word	0x08005471
 8005340:	08005471 	.word	0x08005471
 8005344:	08005471 	.word	0x08005471
 8005348:	080053ad 	.word	0x080053ad
 800534c:	08005471 	.word	0x08005471
 8005350:	08005471 	.word	0x08005471
 8005354:	08005471 	.word	0x08005471
 8005358:	080053ef 	.word	0x080053ef
 800535c:	08005471 	.word	0x08005471
 8005360:	08005471 	.word	0x08005471
 8005364:	08005471 	.word	0x08005471
 8005368:	0800542f 	.word	0x0800542f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68b9      	ldr	r1, [r7, #8]
 8005372:	4618      	mov	r0, r3
 8005374:	f000 f9ca 	bl	800570c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	699a      	ldr	r2, [r3, #24]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 0208 	orr.w	r2, r2, #8
 8005386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699a      	ldr	r2, [r3, #24]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 0204 	bic.w	r2, r2, #4
 8005396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6999      	ldr	r1, [r3, #24]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	691a      	ldr	r2, [r3, #16]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	619a      	str	r2, [r3, #24]
      break;
 80053aa:	e064      	b.n	8005476 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68b9      	ldr	r1, [r7, #8]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 fa1a 	bl	80057ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699a      	ldr	r2, [r3, #24]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699a      	ldr	r2, [r3, #24]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6999      	ldr	r1, [r3, #24]
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	021a      	lsls	r2, r3, #8
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	619a      	str	r2, [r3, #24]
      break;
 80053ec:	e043      	b.n	8005476 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68b9      	ldr	r1, [r7, #8]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 fa6d 	bl	80058d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	69da      	ldr	r2, [r3, #28]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f042 0208 	orr.w	r2, r2, #8
 8005408:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	69da      	ldr	r2, [r3, #28]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 0204 	bic.w	r2, r2, #4
 8005418:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	69d9      	ldr	r1, [r3, #28]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	691a      	ldr	r2, [r3, #16]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	61da      	str	r2, [r3, #28]
      break;
 800542c:	e023      	b.n	8005476 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68b9      	ldr	r1, [r7, #8]
 8005434:	4618      	mov	r0, r3
 8005436:	f000 fac1 	bl	80059bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69da      	ldr	r2, [r3, #28]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69da      	ldr	r2, [r3, #28]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69d9      	ldr	r1, [r3, #28]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	021a      	lsls	r2, r3, #8
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	61da      	str	r2, [r3, #28]
      break;
 800546e:	e002      	b.n	8005476 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	75fb      	strb	r3, [r7, #23]
      break;
 8005474:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800547e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005492:	2300      	movs	r3, #0
 8005494:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800549c:	2b01      	cmp	r3, #1
 800549e:	d101      	bne.n	80054a4 <HAL_TIM_ConfigClockSource+0x1c>
 80054a0:	2302      	movs	r3, #2
 80054a2:	e0b4      	b.n	800560e <HAL_TIM_ConfigClockSource+0x186>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054dc:	d03e      	beq.n	800555c <HAL_TIM_ConfigClockSource+0xd4>
 80054de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e2:	f200 8087 	bhi.w	80055f4 <HAL_TIM_ConfigClockSource+0x16c>
 80054e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ea:	f000 8086 	beq.w	80055fa <HAL_TIM_ConfigClockSource+0x172>
 80054ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f2:	d87f      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x16c>
 80054f4:	2b70      	cmp	r3, #112	; 0x70
 80054f6:	d01a      	beq.n	800552e <HAL_TIM_ConfigClockSource+0xa6>
 80054f8:	2b70      	cmp	r3, #112	; 0x70
 80054fa:	d87b      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x16c>
 80054fc:	2b60      	cmp	r3, #96	; 0x60
 80054fe:	d050      	beq.n	80055a2 <HAL_TIM_ConfigClockSource+0x11a>
 8005500:	2b60      	cmp	r3, #96	; 0x60
 8005502:	d877      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005504:	2b50      	cmp	r3, #80	; 0x50
 8005506:	d03c      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0xfa>
 8005508:	2b50      	cmp	r3, #80	; 0x50
 800550a:	d873      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x16c>
 800550c:	2b40      	cmp	r3, #64	; 0x40
 800550e:	d058      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x13a>
 8005510:	2b40      	cmp	r3, #64	; 0x40
 8005512:	d86f      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005514:	2b30      	cmp	r3, #48	; 0x30
 8005516:	d064      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005518:	2b30      	cmp	r3, #48	; 0x30
 800551a:	d86b      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x16c>
 800551c:	2b20      	cmp	r3, #32
 800551e:	d060      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005520:	2b20      	cmp	r3, #32
 8005522:	d867      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005524:	2b00      	cmp	r3, #0
 8005526:	d05c      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005528:	2b10      	cmp	r3, #16
 800552a:	d05a      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x15a>
 800552c:	e062      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800553e:	f000 fb08 	bl	8005b52 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005550:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	609a      	str	r2, [r3, #8]
      break;
 800555a:	e04f      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800556c:	f000 faf1 	bl	8005b52 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800557e:	609a      	str	r2, [r3, #8]
      break;
 8005580:	e03c      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800558e:	461a      	mov	r2, r3
 8005590:	f000 fa68 	bl	8005a64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2150      	movs	r1, #80	; 0x50
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fabf 	bl	8005b1e <TIM_ITRx_SetConfig>
      break;
 80055a0:	e02c      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ae:	461a      	mov	r2, r3
 80055b0:	f000 fa86 	bl	8005ac0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2160      	movs	r1, #96	; 0x60
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 faaf 	bl	8005b1e <TIM_ITRx_SetConfig>
      break;
 80055c0:	e01c      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ce:	461a      	mov	r2, r3
 80055d0:	f000 fa48 	bl	8005a64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2140      	movs	r1, #64	; 0x40
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 fa9f 	bl	8005b1e <TIM_ITRx_SetConfig>
      break;
 80055e0:	e00c      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4619      	mov	r1, r3
 80055ec:	4610      	mov	r0, r2
 80055ee:	f000 fa96 	bl	8005b1e <TIM_ITRx_SetConfig>
      break;
 80055f2:	e003      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	73fb      	strb	r3, [r7, #15]
      break;
 80055f8:	e000      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800560c:	7bfb      	ldrb	r3, [r7, #15]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a33      	ldr	r2, [pc, #204]	; (80056f8 <TIM_Base_SetConfig+0xe0>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d013      	beq.n	8005658 <TIM_Base_SetConfig+0x40>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a32      	ldr	r2, [pc, #200]	; (80056fc <TIM_Base_SetConfig+0xe4>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00f      	beq.n	8005658 <TIM_Base_SetConfig+0x40>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800563e:	d00b      	beq.n	8005658 <TIM_Base_SetConfig+0x40>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a2f      	ldr	r2, [pc, #188]	; (8005700 <TIM_Base_SetConfig+0xe8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d007      	beq.n	8005658 <TIM_Base_SetConfig+0x40>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a2e      	ldr	r2, [pc, #184]	; (8005704 <TIM_Base_SetConfig+0xec>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d003      	beq.n	8005658 <TIM_Base_SetConfig+0x40>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a2d      	ldr	r2, [pc, #180]	; (8005708 <TIM_Base_SetConfig+0xf0>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d108      	bne.n	800566a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a22      	ldr	r2, [pc, #136]	; (80056f8 <TIM_Base_SetConfig+0xe0>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d013      	beq.n	800569a <TIM_Base_SetConfig+0x82>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a21      	ldr	r2, [pc, #132]	; (80056fc <TIM_Base_SetConfig+0xe4>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00f      	beq.n	800569a <TIM_Base_SetConfig+0x82>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005680:	d00b      	beq.n	800569a <TIM_Base_SetConfig+0x82>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a1e      	ldr	r2, [pc, #120]	; (8005700 <TIM_Base_SetConfig+0xe8>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d007      	beq.n	800569a <TIM_Base_SetConfig+0x82>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a1d      	ldr	r2, [pc, #116]	; (8005704 <TIM_Base_SetConfig+0xec>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d003      	beq.n	800569a <TIM_Base_SetConfig+0x82>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a1c      	ldr	r2, [pc, #112]	; (8005708 <TIM_Base_SetConfig+0xf0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d108      	bne.n	80056ac <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a09      	ldr	r2, [pc, #36]	; (80056f8 <TIM_Base_SetConfig+0xe0>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d003      	beq.n	80056e0 <TIM_Base_SetConfig+0xc8>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a08      	ldr	r2, [pc, #32]	; (80056fc <TIM_Base_SetConfig+0xe4>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d103      	bne.n	80056e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	615a      	str	r2, [r3, #20]
}
 80056ee:	bf00      	nop
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bc80      	pop	{r7}
 80056f6:	4770      	bx	lr
 80056f8:	40012c00 	.word	0x40012c00
 80056fc:	40013400 	.word	0x40013400
 8005700:	40000400 	.word	0x40000400
 8005704:	40000800 	.word	0x40000800
 8005708:	40000c00 	.word	0x40000c00

0800570c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	f023 0201 	bic.w	r2, r3, #1
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f023 0303 	bic.w	r3, r3, #3
 8005742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f023 0302 	bic.w	r3, r3, #2
 8005754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	4313      	orrs	r3, r2
 800575e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a20      	ldr	r2, [pc, #128]	; (80057e4 <TIM_OC1_SetConfig+0xd8>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d003      	beq.n	8005770 <TIM_OC1_SetConfig+0x64>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a1f      	ldr	r2, [pc, #124]	; (80057e8 <TIM_OC1_SetConfig+0xdc>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d10c      	bne.n	800578a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f023 0308 	bic.w	r3, r3, #8
 8005776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	4313      	orrs	r3, r2
 8005780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f023 0304 	bic.w	r3, r3, #4
 8005788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a15      	ldr	r2, [pc, #84]	; (80057e4 <TIM_OC1_SetConfig+0xd8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d003      	beq.n	800579a <TIM_OC1_SetConfig+0x8e>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a14      	ldr	r2, [pc, #80]	; (80057e8 <TIM_OC1_SetConfig+0xdc>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d111      	bne.n	80057be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	621a      	str	r2, [r3, #32]
}
 80057d8:	bf00      	nop
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	bc80      	pop	{r7}
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40012c00 	.word	0x40012c00
 80057e8:	40013400 	.word	0x40013400

080057ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	f023 0210 	bic.w	r2, r3, #16
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800581a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	021b      	lsls	r3, r3, #8
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	4313      	orrs	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f023 0320 	bic.w	r3, r3, #32
 8005836:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	4313      	orrs	r3, r2
 8005842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a21      	ldr	r2, [pc, #132]	; (80058cc <TIM_OC2_SetConfig+0xe0>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d003      	beq.n	8005854 <TIM_OC2_SetConfig+0x68>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a20      	ldr	r2, [pc, #128]	; (80058d0 <TIM_OC2_SetConfig+0xe4>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d10d      	bne.n	8005870 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800585a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	011b      	lsls	r3, r3, #4
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	4313      	orrs	r3, r2
 8005866:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800586e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a16      	ldr	r2, [pc, #88]	; (80058cc <TIM_OC2_SetConfig+0xe0>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d003      	beq.n	8005880 <TIM_OC2_SetConfig+0x94>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a15      	ldr	r2, [pc, #84]	; (80058d0 <TIM_OC2_SetConfig+0xe4>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d113      	bne.n	80058a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005886:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800588e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	4313      	orrs	r3, r2
 800589a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	621a      	str	r2, [r3, #32]
}
 80058c2:	bf00      	nop
 80058c4:	371c      	adds	r7, #28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc80      	pop	{r7}
 80058ca:	4770      	bx	lr
 80058cc:	40012c00 	.word	0x40012c00
 80058d0:	40013400 	.word	0x40013400

080058d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 0303 	bic.w	r3, r3, #3
 800590a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	4313      	orrs	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800591c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	021b      	lsls	r3, r3, #8
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	4313      	orrs	r3, r2
 8005928:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a21      	ldr	r2, [pc, #132]	; (80059b4 <TIM_OC3_SetConfig+0xe0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d003      	beq.n	800593a <TIM_OC3_SetConfig+0x66>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a20      	ldr	r2, [pc, #128]	; (80059b8 <TIM_OC3_SetConfig+0xe4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d10d      	bne.n	8005956 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005940:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	021b      	lsls	r3, r3, #8
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	4313      	orrs	r3, r2
 800594c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a16      	ldr	r2, [pc, #88]	; (80059b4 <TIM_OC3_SetConfig+0xe0>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d003      	beq.n	8005966 <TIM_OC3_SetConfig+0x92>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a15      	ldr	r2, [pc, #84]	; (80059b8 <TIM_OC3_SetConfig+0xe4>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d113      	bne.n	800598e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800596c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	011b      	lsls	r3, r3, #4
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	4313      	orrs	r3, r2
 8005980:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	011b      	lsls	r3, r3, #4
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	4313      	orrs	r3, r2
 800598c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	621a      	str	r2, [r3, #32]
}
 80059a8:	bf00      	nop
 80059aa:	371c      	adds	r7, #28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bc80      	pop	{r7}
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	40012c00 	.word	0x40012c00
 80059b8:	40013400 	.word	0x40013400

080059bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	021b      	lsls	r3, r3, #8
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	031b      	lsls	r3, r3, #12
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a11      	ldr	r2, [pc, #68]	; (8005a5c <TIM_OC4_SetConfig+0xa0>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d003      	beq.n	8005a24 <TIM_OC4_SetConfig+0x68>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a10      	ldr	r2, [pc, #64]	; (8005a60 <TIM_OC4_SetConfig+0xa4>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d109      	bne.n	8005a38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	019b      	lsls	r3, r3, #6
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	621a      	str	r2, [r3, #32]
}
 8005a52:	bf00      	nop
 8005a54:	371c      	adds	r7, #28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bc80      	pop	{r7}
 8005a5a:	4770      	bx	lr
 8005a5c:	40012c00 	.word	0x40012c00
 8005a60:	40013400 	.word	0x40013400

08005a64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	f023 0201 	bic.w	r2, r3, #1
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f023 030a 	bic.w	r3, r3, #10
 8005aa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	621a      	str	r2, [r3, #32]
}
 8005ab6:	bf00      	nop
 8005ab8:	371c      	adds	r7, #28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bc80      	pop	{r7}
 8005abe:	4770      	bx	lr

08005ac0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6a1b      	ldr	r3, [r3, #32]
 8005ad0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	f023 0210 	bic.w	r2, r3, #16
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	031b      	lsls	r3, r3, #12
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005afc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	621a      	str	r2, [r3, #32]
}
 8005b14:	bf00      	nop
 8005b16:	371c      	adds	r7, #28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bc80      	pop	{r7}
 8005b1c:	4770      	bx	lr

08005b1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b085      	sub	sp, #20
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	f043 0307 	orr.w	r3, r3, #7
 8005b40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	609a      	str	r2, [r3, #8]
}
 8005b48:	bf00      	nop
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bc80      	pop	{r7}
 8005b50:	4770      	bx	lr

08005b52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b087      	sub	sp, #28
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	60f8      	str	r0, [r7, #12]
 8005b5a:	60b9      	str	r1, [r7, #8]
 8005b5c:	607a      	str	r2, [r7, #4]
 8005b5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	021a      	lsls	r2, r3, #8
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	431a      	orrs	r2, r3
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	609a      	str	r2, [r3, #8]
}
 8005b86:	bf00      	nop
 8005b88:	371c      	adds	r7, #28
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bc80      	pop	{r7}
 8005b8e:	4770      	bx	lr

08005b90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	f003 031f 	and.w	r3, r3, #31
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6a1a      	ldr	r2, [r3, #32]
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	43db      	mvns	r3, r3
 8005bb2:	401a      	ands	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6a1a      	ldr	r2, [r3, #32]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f003 031f 	and.w	r3, r3, #31
 8005bc2:	6879      	ldr	r1, [r7, #4]
 8005bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	621a      	str	r2, [r3, #32]
}
 8005bce:	bf00      	nop
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bc80      	pop	{r7}
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d101      	bne.n	8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e050      	b.n	8005c92 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a1b      	ldr	r2, [pc, #108]	; (8005c9c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d018      	beq.n	8005c66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a19      	ldr	r2, [pc, #100]	; (8005ca0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d013      	beq.n	8005c66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c46:	d00e      	beq.n	8005c66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a15      	ldr	r2, [pc, #84]	; (8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d009      	beq.n	8005c66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a14      	ldr	r2, [pc, #80]	; (8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d004      	beq.n	8005c66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a12      	ldr	r2, [pc, #72]	; (8005cac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d10c      	bne.n	8005c80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bc80      	pop	{r7}
 8005c9a:	4770      	bx	lr
 8005c9c:	40012c00 	.word	0x40012c00
 8005ca0:	40013400 	.word	0x40013400
 8005ca4:	40000400 	.word	0x40000400
 8005ca8:	40000800 	.word	0x40000800
 8005cac:	40000c00 	.word	0x40000c00

08005cb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e042      	b.n	8005d48 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d106      	bne.n	8005cdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7fc fc76 	bl	80025c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2224      	movs	r2, #36	; 0x24
 8005ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68da      	ldr	r2, [r3, #12]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f91d 	bl	8005f34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	691a      	ldr	r2, [r3, #16]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	695a      	ldr	r2, [r3, #20]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68da      	ldr	r2, [r3, #12]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2220      	movs	r2, #32
 8005d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b08a      	sub	sp, #40	; 0x28
 8005d54:	af02      	add	r7, sp, #8
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	603b      	str	r3, [r7, #0]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b20      	cmp	r3, #32
 8005d6e:	d16d      	bne.n	8005e4c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <HAL_UART_Transmit+0x2c>
 8005d76:	88fb      	ldrh	r3, [r7, #6]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d101      	bne.n	8005d80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e066      	b.n	8005e4e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2221      	movs	r2, #33	; 0x21
 8005d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d8e:	f7fc fdd3 	bl	8002938 <HAL_GetTick>
 8005d92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	88fa      	ldrh	r2, [r7, #6]
 8005d98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	88fa      	ldrh	r2, [r7, #6]
 8005d9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da8:	d108      	bne.n	8005dbc <HAL_UART_Transmit+0x6c>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d104      	bne.n	8005dbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005db2:	2300      	movs	r3, #0
 8005db4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	61bb      	str	r3, [r7, #24]
 8005dba:	e003      	b.n	8005dc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005dc4:	e02a      	b.n	8005e1c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	2180      	movs	r1, #128	; 0x80
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 f840 	bl	8005e56 <UART_WaitOnFlagUntilTimeout>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d001      	beq.n	8005de0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e036      	b.n	8005e4e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10b      	bne.n	8005dfe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	461a      	mov	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005df4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	3302      	adds	r3, #2
 8005dfa:	61bb      	str	r3, [r7, #24]
 8005dfc:	e007      	b.n	8005e0e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	781a      	ldrb	r2, [r3, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	3b01      	subs	r3, #1
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1cf      	bne.n	8005dc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	9300      	str	r3, [sp, #0]
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	2140      	movs	r1, #64	; 0x40
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 f810 	bl	8005e56 <UART_WaitOnFlagUntilTimeout>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e006      	b.n	8005e4e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2220      	movs	r2, #32
 8005e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	e000      	b.n	8005e4e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005e4c:	2302      	movs	r3, #2
  }
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3720      	adds	r7, #32
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b090      	sub	sp, #64	; 0x40
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	60f8      	str	r0, [r7, #12]
 8005e5e:	60b9      	str	r1, [r7, #8]
 8005e60:	603b      	str	r3, [r7, #0]
 8005e62:	4613      	mov	r3, r2
 8005e64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e66:	e050      	b.n	8005f0a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6e:	d04c      	beq.n	8005f0a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d007      	beq.n	8005e86 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e76:	f7fc fd5f 	bl	8002938 <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d241      	bcs.n	8005f0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	330c      	adds	r3, #12
 8005e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e90:	e853 3f00 	ldrex	r3, [r3]
 8005e94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	330c      	adds	r3, #12
 8005ea4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ea6:	637a      	str	r2, [r7, #52]	; 0x34
 8005ea8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005eac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005eae:	e841 2300 	strex	r3, r2, [r1]
 8005eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1e5      	bne.n	8005e86 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3314      	adds	r3, #20
 8005ec0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	e853 3f00 	ldrex	r3, [r3]
 8005ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f023 0301 	bic.w	r3, r3, #1
 8005ed0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	3314      	adds	r3, #20
 8005ed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eda:	623a      	str	r2, [r7, #32]
 8005edc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ede:	69f9      	ldr	r1, [r7, #28]
 8005ee0:	6a3a      	ldr	r2, [r7, #32]
 8005ee2:	e841 2300 	strex	r3, r2, [r1]
 8005ee6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e5      	bne.n	8005eba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e00f      	b.n	8005f2a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	4013      	ands	r3, r2
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	bf0c      	ite	eq
 8005f1a:	2301      	moveq	r3, #1
 8005f1c:	2300      	movne	r3, #0
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	461a      	mov	r2, r3
 8005f22:	79fb      	ldrb	r3, [r7, #7]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d09f      	beq.n	8005e68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3740      	adds	r7, #64	; 0x40
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
	...

08005f34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005f6e:	f023 030c 	bic.w	r3, r3, #12
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	6812      	ldr	r2, [r2, #0]
 8005f76:	68b9      	ldr	r1, [r7, #8]
 8005f78:	430b      	orrs	r3, r1
 8005f7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	699a      	ldr	r2, [r3, #24]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a2c      	ldr	r2, [pc, #176]	; (8006048 <UART_SetConfig+0x114>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d103      	bne.n	8005fa4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f9c:	f7fe fa1a 	bl	80043d4 <HAL_RCC_GetPCLK2Freq>
 8005fa0:	60f8      	str	r0, [r7, #12]
 8005fa2:	e002      	b.n	8005faa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005fa4:	f7fe fa02 	bl	80043ac <HAL_RCC_GetPCLK1Freq>
 8005fa8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4613      	mov	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	009a      	lsls	r2, r3, #2
 8005fb4:	441a      	add	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc0:	4a22      	ldr	r2, [pc, #136]	; (800604c <UART_SetConfig+0x118>)
 8005fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc6:	095b      	lsrs	r3, r3, #5
 8005fc8:	0119      	lsls	r1, r3, #4
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	009a      	lsls	r2, r3, #2
 8005fd4:	441a      	add	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fe0:	4b1a      	ldr	r3, [pc, #104]	; (800604c <UART_SetConfig+0x118>)
 8005fe2:	fba3 0302 	umull	r0, r3, r3, r2
 8005fe6:	095b      	lsrs	r3, r3, #5
 8005fe8:	2064      	movs	r0, #100	; 0x64
 8005fea:	fb00 f303 	mul.w	r3, r0, r3
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	3332      	adds	r3, #50	; 0x32
 8005ff4:	4a15      	ldr	r2, [pc, #84]	; (800604c <UART_SetConfig+0x118>)
 8005ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffa:	095b      	lsrs	r3, r3, #5
 8005ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006000:	4419      	add	r1, r3
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	4613      	mov	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	009a      	lsls	r2, r3, #2
 800600c:	441a      	add	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	fbb2 f2f3 	udiv	r2, r2, r3
 8006018:	4b0c      	ldr	r3, [pc, #48]	; (800604c <UART_SetConfig+0x118>)
 800601a:	fba3 0302 	umull	r0, r3, r3, r2
 800601e:	095b      	lsrs	r3, r3, #5
 8006020:	2064      	movs	r0, #100	; 0x64
 8006022:	fb00 f303 	mul.w	r3, r0, r3
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	011b      	lsls	r3, r3, #4
 800602a:	3332      	adds	r3, #50	; 0x32
 800602c:	4a07      	ldr	r2, [pc, #28]	; (800604c <UART_SetConfig+0x118>)
 800602e:	fba2 2303 	umull	r2, r3, r2, r3
 8006032:	095b      	lsrs	r3, r3, #5
 8006034:	f003 020f 	and.w	r2, r3, #15
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	440a      	add	r2, r1
 800603e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006040:	bf00      	nop
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	40013800 	.word	0x40013800
 800604c:	51eb851f 	.word	0x51eb851f

08006050 <__cvt>:
 8006050:	2b00      	cmp	r3, #0
 8006052:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006056:	461f      	mov	r7, r3
 8006058:	bfbb      	ittet	lt
 800605a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800605e:	461f      	movlt	r7, r3
 8006060:	2300      	movge	r3, #0
 8006062:	232d      	movlt	r3, #45	; 0x2d
 8006064:	b088      	sub	sp, #32
 8006066:	4614      	mov	r4, r2
 8006068:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800606a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800606c:	7013      	strb	r3, [r2, #0]
 800606e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006070:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006074:	f023 0820 	bic.w	r8, r3, #32
 8006078:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800607c:	d005      	beq.n	800608a <__cvt+0x3a>
 800607e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006082:	d100      	bne.n	8006086 <__cvt+0x36>
 8006084:	3501      	adds	r5, #1
 8006086:	2302      	movs	r3, #2
 8006088:	e000      	b.n	800608c <__cvt+0x3c>
 800608a:	2303      	movs	r3, #3
 800608c:	aa07      	add	r2, sp, #28
 800608e:	9204      	str	r2, [sp, #16]
 8006090:	aa06      	add	r2, sp, #24
 8006092:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006096:	e9cd 3500 	strd	r3, r5, [sp]
 800609a:	4622      	mov	r2, r4
 800609c:	463b      	mov	r3, r7
 800609e:	f001 f887 	bl	80071b0 <_dtoa_r>
 80060a2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80060a6:	4606      	mov	r6, r0
 80060a8:	d102      	bne.n	80060b0 <__cvt+0x60>
 80060aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80060ac:	07db      	lsls	r3, r3, #31
 80060ae:	d522      	bpl.n	80060f6 <__cvt+0xa6>
 80060b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80060b4:	eb06 0905 	add.w	r9, r6, r5
 80060b8:	d110      	bne.n	80060dc <__cvt+0x8c>
 80060ba:	7833      	ldrb	r3, [r6, #0]
 80060bc:	2b30      	cmp	r3, #48	; 0x30
 80060be:	d10a      	bne.n	80060d6 <__cvt+0x86>
 80060c0:	2200      	movs	r2, #0
 80060c2:	2300      	movs	r3, #0
 80060c4:	4620      	mov	r0, r4
 80060c6:	4639      	mov	r1, r7
 80060c8:	f7fa fcda 	bl	8000a80 <__aeabi_dcmpeq>
 80060cc:	b918      	cbnz	r0, 80060d6 <__cvt+0x86>
 80060ce:	f1c5 0501 	rsb	r5, r5, #1
 80060d2:	f8ca 5000 	str.w	r5, [sl]
 80060d6:	f8da 3000 	ldr.w	r3, [sl]
 80060da:	4499      	add	r9, r3
 80060dc:	2200      	movs	r2, #0
 80060de:	2300      	movs	r3, #0
 80060e0:	4620      	mov	r0, r4
 80060e2:	4639      	mov	r1, r7
 80060e4:	f7fa fccc 	bl	8000a80 <__aeabi_dcmpeq>
 80060e8:	b108      	cbz	r0, 80060ee <__cvt+0x9e>
 80060ea:	f8cd 901c 	str.w	r9, [sp, #28]
 80060ee:	2230      	movs	r2, #48	; 0x30
 80060f0:	9b07      	ldr	r3, [sp, #28]
 80060f2:	454b      	cmp	r3, r9
 80060f4:	d307      	bcc.n	8006106 <__cvt+0xb6>
 80060f6:	4630      	mov	r0, r6
 80060f8:	9b07      	ldr	r3, [sp, #28]
 80060fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80060fc:	1b9b      	subs	r3, r3, r6
 80060fe:	6013      	str	r3, [r2, #0]
 8006100:	b008      	add	sp, #32
 8006102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006106:	1c59      	adds	r1, r3, #1
 8006108:	9107      	str	r1, [sp, #28]
 800610a:	701a      	strb	r2, [r3, #0]
 800610c:	e7f0      	b.n	80060f0 <__cvt+0xa0>

0800610e <__exponent>:
 800610e:	4603      	mov	r3, r0
 8006110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006112:	2900      	cmp	r1, #0
 8006114:	f803 2b02 	strb.w	r2, [r3], #2
 8006118:	bfb6      	itet	lt
 800611a:	222d      	movlt	r2, #45	; 0x2d
 800611c:	222b      	movge	r2, #43	; 0x2b
 800611e:	4249      	neglt	r1, r1
 8006120:	2909      	cmp	r1, #9
 8006122:	7042      	strb	r2, [r0, #1]
 8006124:	dd2a      	ble.n	800617c <__exponent+0x6e>
 8006126:	f10d 0207 	add.w	r2, sp, #7
 800612a:	4617      	mov	r7, r2
 800612c:	260a      	movs	r6, #10
 800612e:	fb91 f5f6 	sdiv	r5, r1, r6
 8006132:	4694      	mov	ip, r2
 8006134:	fb06 1415 	mls	r4, r6, r5, r1
 8006138:	3430      	adds	r4, #48	; 0x30
 800613a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800613e:	460c      	mov	r4, r1
 8006140:	2c63      	cmp	r4, #99	; 0x63
 8006142:	4629      	mov	r1, r5
 8006144:	f102 32ff 	add.w	r2, r2, #4294967295
 8006148:	dcf1      	bgt.n	800612e <__exponent+0x20>
 800614a:	3130      	adds	r1, #48	; 0x30
 800614c:	f1ac 0402 	sub.w	r4, ip, #2
 8006150:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006154:	4622      	mov	r2, r4
 8006156:	1c41      	adds	r1, r0, #1
 8006158:	42ba      	cmp	r2, r7
 800615a:	d30a      	bcc.n	8006172 <__exponent+0x64>
 800615c:	f10d 0209 	add.w	r2, sp, #9
 8006160:	eba2 020c 	sub.w	r2, r2, ip
 8006164:	42bc      	cmp	r4, r7
 8006166:	bf88      	it	hi
 8006168:	2200      	movhi	r2, #0
 800616a:	4413      	add	r3, r2
 800616c:	1a18      	subs	r0, r3, r0
 800616e:	b003      	add	sp, #12
 8006170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006172:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006176:	f801 5f01 	strb.w	r5, [r1, #1]!
 800617a:	e7ed      	b.n	8006158 <__exponent+0x4a>
 800617c:	2330      	movs	r3, #48	; 0x30
 800617e:	3130      	adds	r1, #48	; 0x30
 8006180:	7083      	strb	r3, [r0, #2]
 8006182:	70c1      	strb	r1, [r0, #3]
 8006184:	1d03      	adds	r3, r0, #4
 8006186:	e7f1      	b.n	800616c <__exponent+0x5e>

08006188 <_printf_float>:
 8006188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800618c:	b091      	sub	sp, #68	; 0x44
 800618e:	460c      	mov	r4, r1
 8006190:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006194:	4616      	mov	r6, r2
 8006196:	461f      	mov	r7, r3
 8006198:	4605      	mov	r5, r0
 800619a:	f000 fef3 	bl	8006f84 <_localeconv_r>
 800619e:	6803      	ldr	r3, [r0, #0]
 80061a0:	4618      	mov	r0, r3
 80061a2:	9309      	str	r3, [sp, #36]	; 0x24
 80061a4:	f7fa f840 	bl	8000228 <strlen>
 80061a8:	2300      	movs	r3, #0
 80061aa:	930e      	str	r3, [sp, #56]	; 0x38
 80061ac:	f8d8 3000 	ldr.w	r3, [r8]
 80061b0:	900a      	str	r0, [sp, #40]	; 0x28
 80061b2:	3307      	adds	r3, #7
 80061b4:	f023 0307 	bic.w	r3, r3, #7
 80061b8:	f103 0208 	add.w	r2, r3, #8
 80061bc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80061c0:	f8d4 b000 	ldr.w	fp, [r4]
 80061c4:	f8c8 2000 	str.w	r2, [r8]
 80061c8:	e9d3 a800 	ldrd	sl, r8, [r3]
 80061cc:	4652      	mov	r2, sl
 80061ce:	4643      	mov	r3, r8
 80061d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80061d4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80061d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80061da:	f04f 32ff 	mov.w	r2, #4294967295
 80061de:	4650      	mov	r0, sl
 80061e0:	4b9c      	ldr	r3, [pc, #624]	; (8006454 <_printf_float+0x2cc>)
 80061e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061e4:	f7fa fc7e 	bl	8000ae4 <__aeabi_dcmpun>
 80061e8:	bb70      	cbnz	r0, 8006248 <_printf_float+0xc0>
 80061ea:	f04f 32ff 	mov.w	r2, #4294967295
 80061ee:	4650      	mov	r0, sl
 80061f0:	4b98      	ldr	r3, [pc, #608]	; (8006454 <_printf_float+0x2cc>)
 80061f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061f4:	f7fa fc58 	bl	8000aa8 <__aeabi_dcmple>
 80061f8:	bb30      	cbnz	r0, 8006248 <_printf_float+0xc0>
 80061fa:	2200      	movs	r2, #0
 80061fc:	2300      	movs	r3, #0
 80061fe:	4650      	mov	r0, sl
 8006200:	4641      	mov	r1, r8
 8006202:	f7fa fc47 	bl	8000a94 <__aeabi_dcmplt>
 8006206:	b110      	cbz	r0, 800620e <_printf_float+0x86>
 8006208:	232d      	movs	r3, #45	; 0x2d
 800620a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800620e:	4a92      	ldr	r2, [pc, #584]	; (8006458 <_printf_float+0x2d0>)
 8006210:	4b92      	ldr	r3, [pc, #584]	; (800645c <_printf_float+0x2d4>)
 8006212:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006216:	bf94      	ite	ls
 8006218:	4690      	movls	r8, r2
 800621a:	4698      	movhi	r8, r3
 800621c:	2303      	movs	r3, #3
 800621e:	f04f 0a00 	mov.w	sl, #0
 8006222:	6123      	str	r3, [r4, #16]
 8006224:	f02b 0304 	bic.w	r3, fp, #4
 8006228:	6023      	str	r3, [r4, #0]
 800622a:	4633      	mov	r3, r6
 800622c:	4621      	mov	r1, r4
 800622e:	4628      	mov	r0, r5
 8006230:	9700      	str	r7, [sp, #0]
 8006232:	aa0f      	add	r2, sp, #60	; 0x3c
 8006234:	f000 f9d6 	bl	80065e4 <_printf_common>
 8006238:	3001      	adds	r0, #1
 800623a:	f040 8090 	bne.w	800635e <_printf_float+0x1d6>
 800623e:	f04f 30ff 	mov.w	r0, #4294967295
 8006242:	b011      	add	sp, #68	; 0x44
 8006244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006248:	4652      	mov	r2, sl
 800624a:	4643      	mov	r3, r8
 800624c:	4650      	mov	r0, sl
 800624e:	4641      	mov	r1, r8
 8006250:	f7fa fc48 	bl	8000ae4 <__aeabi_dcmpun>
 8006254:	b148      	cbz	r0, 800626a <_printf_float+0xe2>
 8006256:	f1b8 0f00 	cmp.w	r8, #0
 800625a:	bfb8      	it	lt
 800625c:	232d      	movlt	r3, #45	; 0x2d
 800625e:	4a80      	ldr	r2, [pc, #512]	; (8006460 <_printf_float+0x2d8>)
 8006260:	bfb8      	it	lt
 8006262:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006266:	4b7f      	ldr	r3, [pc, #508]	; (8006464 <_printf_float+0x2dc>)
 8006268:	e7d3      	b.n	8006212 <_printf_float+0x8a>
 800626a:	6863      	ldr	r3, [r4, #4]
 800626c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006270:	1c5a      	adds	r2, r3, #1
 8006272:	d142      	bne.n	80062fa <_printf_float+0x172>
 8006274:	2306      	movs	r3, #6
 8006276:	6063      	str	r3, [r4, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	9206      	str	r2, [sp, #24]
 800627c:	aa0e      	add	r2, sp, #56	; 0x38
 800627e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006282:	aa0d      	add	r2, sp, #52	; 0x34
 8006284:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006288:	9203      	str	r2, [sp, #12]
 800628a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800628e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006292:	6023      	str	r3, [r4, #0]
 8006294:	6863      	ldr	r3, [r4, #4]
 8006296:	4652      	mov	r2, sl
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	4628      	mov	r0, r5
 800629c:	4643      	mov	r3, r8
 800629e:	910b      	str	r1, [sp, #44]	; 0x2c
 80062a0:	f7ff fed6 	bl	8006050 <__cvt>
 80062a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062a6:	4680      	mov	r8, r0
 80062a8:	2947      	cmp	r1, #71	; 0x47
 80062aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80062ac:	d108      	bne.n	80062c0 <_printf_float+0x138>
 80062ae:	1cc8      	adds	r0, r1, #3
 80062b0:	db02      	blt.n	80062b8 <_printf_float+0x130>
 80062b2:	6863      	ldr	r3, [r4, #4]
 80062b4:	4299      	cmp	r1, r3
 80062b6:	dd40      	ble.n	800633a <_printf_float+0x1b2>
 80062b8:	f1a9 0902 	sub.w	r9, r9, #2
 80062bc:	fa5f f989 	uxtb.w	r9, r9
 80062c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80062c4:	d81f      	bhi.n	8006306 <_printf_float+0x17e>
 80062c6:	464a      	mov	r2, r9
 80062c8:	3901      	subs	r1, #1
 80062ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80062ce:	910d      	str	r1, [sp, #52]	; 0x34
 80062d0:	f7ff ff1d 	bl	800610e <__exponent>
 80062d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062d6:	4682      	mov	sl, r0
 80062d8:	1813      	adds	r3, r2, r0
 80062da:	2a01      	cmp	r2, #1
 80062dc:	6123      	str	r3, [r4, #16]
 80062de:	dc02      	bgt.n	80062e6 <_printf_float+0x15e>
 80062e0:	6822      	ldr	r2, [r4, #0]
 80062e2:	07d2      	lsls	r2, r2, #31
 80062e4:	d501      	bpl.n	80062ea <_printf_float+0x162>
 80062e6:	3301      	adds	r3, #1
 80062e8:	6123      	str	r3, [r4, #16]
 80062ea:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d09b      	beq.n	800622a <_printf_float+0xa2>
 80062f2:	232d      	movs	r3, #45	; 0x2d
 80062f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062f8:	e797      	b.n	800622a <_printf_float+0xa2>
 80062fa:	2947      	cmp	r1, #71	; 0x47
 80062fc:	d1bc      	bne.n	8006278 <_printf_float+0xf0>
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1ba      	bne.n	8006278 <_printf_float+0xf0>
 8006302:	2301      	movs	r3, #1
 8006304:	e7b7      	b.n	8006276 <_printf_float+0xee>
 8006306:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800630a:	d118      	bne.n	800633e <_printf_float+0x1b6>
 800630c:	2900      	cmp	r1, #0
 800630e:	6863      	ldr	r3, [r4, #4]
 8006310:	dd0b      	ble.n	800632a <_printf_float+0x1a2>
 8006312:	6121      	str	r1, [r4, #16]
 8006314:	b913      	cbnz	r3, 800631c <_printf_float+0x194>
 8006316:	6822      	ldr	r2, [r4, #0]
 8006318:	07d0      	lsls	r0, r2, #31
 800631a:	d502      	bpl.n	8006322 <_printf_float+0x19a>
 800631c:	3301      	adds	r3, #1
 800631e:	440b      	add	r3, r1
 8006320:	6123      	str	r3, [r4, #16]
 8006322:	f04f 0a00 	mov.w	sl, #0
 8006326:	65a1      	str	r1, [r4, #88]	; 0x58
 8006328:	e7df      	b.n	80062ea <_printf_float+0x162>
 800632a:	b913      	cbnz	r3, 8006332 <_printf_float+0x1aa>
 800632c:	6822      	ldr	r2, [r4, #0]
 800632e:	07d2      	lsls	r2, r2, #31
 8006330:	d501      	bpl.n	8006336 <_printf_float+0x1ae>
 8006332:	3302      	adds	r3, #2
 8006334:	e7f4      	b.n	8006320 <_printf_float+0x198>
 8006336:	2301      	movs	r3, #1
 8006338:	e7f2      	b.n	8006320 <_printf_float+0x198>
 800633a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800633e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006340:	4299      	cmp	r1, r3
 8006342:	db05      	blt.n	8006350 <_printf_float+0x1c8>
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	6121      	str	r1, [r4, #16]
 8006348:	07d8      	lsls	r0, r3, #31
 800634a:	d5ea      	bpl.n	8006322 <_printf_float+0x19a>
 800634c:	1c4b      	adds	r3, r1, #1
 800634e:	e7e7      	b.n	8006320 <_printf_float+0x198>
 8006350:	2900      	cmp	r1, #0
 8006352:	bfcc      	ite	gt
 8006354:	2201      	movgt	r2, #1
 8006356:	f1c1 0202 	rsble	r2, r1, #2
 800635a:	4413      	add	r3, r2
 800635c:	e7e0      	b.n	8006320 <_printf_float+0x198>
 800635e:	6823      	ldr	r3, [r4, #0]
 8006360:	055a      	lsls	r2, r3, #21
 8006362:	d407      	bmi.n	8006374 <_printf_float+0x1ec>
 8006364:	6923      	ldr	r3, [r4, #16]
 8006366:	4642      	mov	r2, r8
 8006368:	4631      	mov	r1, r6
 800636a:	4628      	mov	r0, r5
 800636c:	47b8      	blx	r7
 800636e:	3001      	adds	r0, #1
 8006370:	d12b      	bne.n	80063ca <_printf_float+0x242>
 8006372:	e764      	b.n	800623e <_printf_float+0xb6>
 8006374:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006378:	f240 80dd 	bls.w	8006536 <_printf_float+0x3ae>
 800637c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006380:	2200      	movs	r2, #0
 8006382:	2300      	movs	r3, #0
 8006384:	f7fa fb7c 	bl	8000a80 <__aeabi_dcmpeq>
 8006388:	2800      	cmp	r0, #0
 800638a:	d033      	beq.n	80063f4 <_printf_float+0x26c>
 800638c:	2301      	movs	r3, #1
 800638e:	4631      	mov	r1, r6
 8006390:	4628      	mov	r0, r5
 8006392:	4a35      	ldr	r2, [pc, #212]	; (8006468 <_printf_float+0x2e0>)
 8006394:	47b8      	blx	r7
 8006396:	3001      	adds	r0, #1
 8006398:	f43f af51 	beq.w	800623e <_printf_float+0xb6>
 800639c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80063a0:	429a      	cmp	r2, r3
 80063a2:	db02      	blt.n	80063aa <_printf_float+0x222>
 80063a4:	6823      	ldr	r3, [r4, #0]
 80063a6:	07d8      	lsls	r0, r3, #31
 80063a8:	d50f      	bpl.n	80063ca <_printf_float+0x242>
 80063aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063ae:	4631      	mov	r1, r6
 80063b0:	4628      	mov	r0, r5
 80063b2:	47b8      	blx	r7
 80063b4:	3001      	adds	r0, #1
 80063b6:	f43f af42 	beq.w	800623e <_printf_float+0xb6>
 80063ba:	f04f 0800 	mov.w	r8, #0
 80063be:	f104 091a 	add.w	r9, r4, #26
 80063c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063c4:	3b01      	subs	r3, #1
 80063c6:	4543      	cmp	r3, r8
 80063c8:	dc09      	bgt.n	80063de <_printf_float+0x256>
 80063ca:	6823      	ldr	r3, [r4, #0]
 80063cc:	079b      	lsls	r3, r3, #30
 80063ce:	f100 8104 	bmi.w	80065da <_printf_float+0x452>
 80063d2:	68e0      	ldr	r0, [r4, #12]
 80063d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063d6:	4298      	cmp	r0, r3
 80063d8:	bfb8      	it	lt
 80063da:	4618      	movlt	r0, r3
 80063dc:	e731      	b.n	8006242 <_printf_float+0xba>
 80063de:	2301      	movs	r3, #1
 80063e0:	464a      	mov	r2, r9
 80063e2:	4631      	mov	r1, r6
 80063e4:	4628      	mov	r0, r5
 80063e6:	47b8      	blx	r7
 80063e8:	3001      	adds	r0, #1
 80063ea:	f43f af28 	beq.w	800623e <_printf_float+0xb6>
 80063ee:	f108 0801 	add.w	r8, r8, #1
 80063f2:	e7e6      	b.n	80063c2 <_printf_float+0x23a>
 80063f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	dc38      	bgt.n	800646c <_printf_float+0x2e4>
 80063fa:	2301      	movs	r3, #1
 80063fc:	4631      	mov	r1, r6
 80063fe:	4628      	mov	r0, r5
 8006400:	4a19      	ldr	r2, [pc, #100]	; (8006468 <_printf_float+0x2e0>)
 8006402:	47b8      	blx	r7
 8006404:	3001      	adds	r0, #1
 8006406:	f43f af1a 	beq.w	800623e <_printf_float+0xb6>
 800640a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800640e:	4313      	orrs	r3, r2
 8006410:	d102      	bne.n	8006418 <_printf_float+0x290>
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	07d9      	lsls	r1, r3, #31
 8006416:	d5d8      	bpl.n	80063ca <_printf_float+0x242>
 8006418:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800641c:	4631      	mov	r1, r6
 800641e:	4628      	mov	r0, r5
 8006420:	47b8      	blx	r7
 8006422:	3001      	adds	r0, #1
 8006424:	f43f af0b 	beq.w	800623e <_printf_float+0xb6>
 8006428:	f04f 0900 	mov.w	r9, #0
 800642c:	f104 0a1a 	add.w	sl, r4, #26
 8006430:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006432:	425b      	negs	r3, r3
 8006434:	454b      	cmp	r3, r9
 8006436:	dc01      	bgt.n	800643c <_printf_float+0x2b4>
 8006438:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800643a:	e794      	b.n	8006366 <_printf_float+0x1de>
 800643c:	2301      	movs	r3, #1
 800643e:	4652      	mov	r2, sl
 8006440:	4631      	mov	r1, r6
 8006442:	4628      	mov	r0, r5
 8006444:	47b8      	blx	r7
 8006446:	3001      	adds	r0, #1
 8006448:	f43f aef9 	beq.w	800623e <_printf_float+0xb6>
 800644c:	f109 0901 	add.w	r9, r9, #1
 8006450:	e7ee      	b.n	8006430 <_printf_float+0x2a8>
 8006452:	bf00      	nop
 8006454:	7fefffff 	.word	0x7fefffff
 8006458:	0800a822 	.word	0x0800a822
 800645c:	0800a826 	.word	0x0800a826
 8006460:	0800a82a 	.word	0x0800a82a
 8006464:	0800a82e 	.word	0x0800a82e
 8006468:	0800a832 	.word	0x0800a832
 800646c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800646e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006470:	429a      	cmp	r2, r3
 8006472:	bfa8      	it	ge
 8006474:	461a      	movge	r2, r3
 8006476:	2a00      	cmp	r2, #0
 8006478:	4691      	mov	r9, r2
 800647a:	dc37      	bgt.n	80064ec <_printf_float+0x364>
 800647c:	f04f 0b00 	mov.w	fp, #0
 8006480:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006484:	f104 021a 	add.w	r2, r4, #26
 8006488:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800648c:	ebaa 0309 	sub.w	r3, sl, r9
 8006490:	455b      	cmp	r3, fp
 8006492:	dc33      	bgt.n	80064fc <_printf_float+0x374>
 8006494:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006498:	429a      	cmp	r2, r3
 800649a:	db3b      	blt.n	8006514 <_printf_float+0x38c>
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	07da      	lsls	r2, r3, #31
 80064a0:	d438      	bmi.n	8006514 <_printf_float+0x38c>
 80064a2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80064a6:	eba2 0903 	sub.w	r9, r2, r3
 80064aa:	eba2 020a 	sub.w	r2, r2, sl
 80064ae:	4591      	cmp	r9, r2
 80064b0:	bfa8      	it	ge
 80064b2:	4691      	movge	r9, r2
 80064b4:	f1b9 0f00 	cmp.w	r9, #0
 80064b8:	dc34      	bgt.n	8006524 <_printf_float+0x39c>
 80064ba:	f04f 0800 	mov.w	r8, #0
 80064be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064c2:	f104 0a1a 	add.w	sl, r4, #26
 80064c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80064ca:	1a9b      	subs	r3, r3, r2
 80064cc:	eba3 0309 	sub.w	r3, r3, r9
 80064d0:	4543      	cmp	r3, r8
 80064d2:	f77f af7a 	ble.w	80063ca <_printf_float+0x242>
 80064d6:	2301      	movs	r3, #1
 80064d8:	4652      	mov	r2, sl
 80064da:	4631      	mov	r1, r6
 80064dc:	4628      	mov	r0, r5
 80064de:	47b8      	blx	r7
 80064e0:	3001      	adds	r0, #1
 80064e2:	f43f aeac 	beq.w	800623e <_printf_float+0xb6>
 80064e6:	f108 0801 	add.w	r8, r8, #1
 80064ea:	e7ec      	b.n	80064c6 <_printf_float+0x33e>
 80064ec:	4613      	mov	r3, r2
 80064ee:	4631      	mov	r1, r6
 80064f0:	4642      	mov	r2, r8
 80064f2:	4628      	mov	r0, r5
 80064f4:	47b8      	blx	r7
 80064f6:	3001      	adds	r0, #1
 80064f8:	d1c0      	bne.n	800647c <_printf_float+0x2f4>
 80064fa:	e6a0      	b.n	800623e <_printf_float+0xb6>
 80064fc:	2301      	movs	r3, #1
 80064fe:	4631      	mov	r1, r6
 8006500:	4628      	mov	r0, r5
 8006502:	920b      	str	r2, [sp, #44]	; 0x2c
 8006504:	47b8      	blx	r7
 8006506:	3001      	adds	r0, #1
 8006508:	f43f ae99 	beq.w	800623e <_printf_float+0xb6>
 800650c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800650e:	f10b 0b01 	add.w	fp, fp, #1
 8006512:	e7b9      	b.n	8006488 <_printf_float+0x300>
 8006514:	4631      	mov	r1, r6
 8006516:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800651a:	4628      	mov	r0, r5
 800651c:	47b8      	blx	r7
 800651e:	3001      	adds	r0, #1
 8006520:	d1bf      	bne.n	80064a2 <_printf_float+0x31a>
 8006522:	e68c      	b.n	800623e <_printf_float+0xb6>
 8006524:	464b      	mov	r3, r9
 8006526:	4631      	mov	r1, r6
 8006528:	4628      	mov	r0, r5
 800652a:	eb08 020a 	add.w	r2, r8, sl
 800652e:	47b8      	blx	r7
 8006530:	3001      	adds	r0, #1
 8006532:	d1c2      	bne.n	80064ba <_printf_float+0x332>
 8006534:	e683      	b.n	800623e <_printf_float+0xb6>
 8006536:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006538:	2a01      	cmp	r2, #1
 800653a:	dc01      	bgt.n	8006540 <_printf_float+0x3b8>
 800653c:	07db      	lsls	r3, r3, #31
 800653e:	d539      	bpl.n	80065b4 <_printf_float+0x42c>
 8006540:	2301      	movs	r3, #1
 8006542:	4642      	mov	r2, r8
 8006544:	4631      	mov	r1, r6
 8006546:	4628      	mov	r0, r5
 8006548:	47b8      	blx	r7
 800654a:	3001      	adds	r0, #1
 800654c:	f43f ae77 	beq.w	800623e <_printf_float+0xb6>
 8006550:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006554:	4631      	mov	r1, r6
 8006556:	4628      	mov	r0, r5
 8006558:	47b8      	blx	r7
 800655a:	3001      	adds	r0, #1
 800655c:	f43f ae6f 	beq.w	800623e <_printf_float+0xb6>
 8006560:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006564:	2200      	movs	r2, #0
 8006566:	2300      	movs	r3, #0
 8006568:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800656c:	f7fa fa88 	bl	8000a80 <__aeabi_dcmpeq>
 8006570:	b9d8      	cbnz	r0, 80065aa <_printf_float+0x422>
 8006572:	f109 33ff 	add.w	r3, r9, #4294967295
 8006576:	f108 0201 	add.w	r2, r8, #1
 800657a:	4631      	mov	r1, r6
 800657c:	4628      	mov	r0, r5
 800657e:	47b8      	blx	r7
 8006580:	3001      	adds	r0, #1
 8006582:	d10e      	bne.n	80065a2 <_printf_float+0x41a>
 8006584:	e65b      	b.n	800623e <_printf_float+0xb6>
 8006586:	2301      	movs	r3, #1
 8006588:	464a      	mov	r2, r9
 800658a:	4631      	mov	r1, r6
 800658c:	4628      	mov	r0, r5
 800658e:	47b8      	blx	r7
 8006590:	3001      	adds	r0, #1
 8006592:	f43f ae54 	beq.w	800623e <_printf_float+0xb6>
 8006596:	f108 0801 	add.w	r8, r8, #1
 800659a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800659c:	3b01      	subs	r3, #1
 800659e:	4543      	cmp	r3, r8
 80065a0:	dcf1      	bgt.n	8006586 <_printf_float+0x3fe>
 80065a2:	4653      	mov	r3, sl
 80065a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80065a8:	e6de      	b.n	8006368 <_printf_float+0x1e0>
 80065aa:	f04f 0800 	mov.w	r8, #0
 80065ae:	f104 091a 	add.w	r9, r4, #26
 80065b2:	e7f2      	b.n	800659a <_printf_float+0x412>
 80065b4:	2301      	movs	r3, #1
 80065b6:	4642      	mov	r2, r8
 80065b8:	e7df      	b.n	800657a <_printf_float+0x3f2>
 80065ba:	2301      	movs	r3, #1
 80065bc:	464a      	mov	r2, r9
 80065be:	4631      	mov	r1, r6
 80065c0:	4628      	mov	r0, r5
 80065c2:	47b8      	blx	r7
 80065c4:	3001      	adds	r0, #1
 80065c6:	f43f ae3a 	beq.w	800623e <_printf_float+0xb6>
 80065ca:	f108 0801 	add.w	r8, r8, #1
 80065ce:	68e3      	ldr	r3, [r4, #12]
 80065d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80065d2:	1a5b      	subs	r3, r3, r1
 80065d4:	4543      	cmp	r3, r8
 80065d6:	dcf0      	bgt.n	80065ba <_printf_float+0x432>
 80065d8:	e6fb      	b.n	80063d2 <_printf_float+0x24a>
 80065da:	f04f 0800 	mov.w	r8, #0
 80065de:	f104 0919 	add.w	r9, r4, #25
 80065e2:	e7f4      	b.n	80065ce <_printf_float+0x446>

080065e4 <_printf_common>:
 80065e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065e8:	4616      	mov	r6, r2
 80065ea:	4699      	mov	r9, r3
 80065ec:	688a      	ldr	r2, [r1, #8]
 80065ee:	690b      	ldr	r3, [r1, #16]
 80065f0:	4607      	mov	r7, r0
 80065f2:	4293      	cmp	r3, r2
 80065f4:	bfb8      	it	lt
 80065f6:	4613      	movlt	r3, r2
 80065f8:	6033      	str	r3, [r6, #0]
 80065fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065fe:	460c      	mov	r4, r1
 8006600:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006604:	b10a      	cbz	r2, 800660a <_printf_common+0x26>
 8006606:	3301      	adds	r3, #1
 8006608:	6033      	str	r3, [r6, #0]
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	0699      	lsls	r1, r3, #26
 800660e:	bf42      	ittt	mi
 8006610:	6833      	ldrmi	r3, [r6, #0]
 8006612:	3302      	addmi	r3, #2
 8006614:	6033      	strmi	r3, [r6, #0]
 8006616:	6825      	ldr	r5, [r4, #0]
 8006618:	f015 0506 	ands.w	r5, r5, #6
 800661c:	d106      	bne.n	800662c <_printf_common+0x48>
 800661e:	f104 0a19 	add.w	sl, r4, #25
 8006622:	68e3      	ldr	r3, [r4, #12]
 8006624:	6832      	ldr	r2, [r6, #0]
 8006626:	1a9b      	subs	r3, r3, r2
 8006628:	42ab      	cmp	r3, r5
 800662a:	dc2b      	bgt.n	8006684 <_printf_common+0xa0>
 800662c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006630:	1e13      	subs	r3, r2, #0
 8006632:	6822      	ldr	r2, [r4, #0]
 8006634:	bf18      	it	ne
 8006636:	2301      	movne	r3, #1
 8006638:	0692      	lsls	r2, r2, #26
 800663a:	d430      	bmi.n	800669e <_printf_common+0xba>
 800663c:	4649      	mov	r1, r9
 800663e:	4638      	mov	r0, r7
 8006640:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006644:	47c0      	blx	r8
 8006646:	3001      	adds	r0, #1
 8006648:	d023      	beq.n	8006692 <_printf_common+0xae>
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	6922      	ldr	r2, [r4, #16]
 800664e:	f003 0306 	and.w	r3, r3, #6
 8006652:	2b04      	cmp	r3, #4
 8006654:	bf14      	ite	ne
 8006656:	2500      	movne	r5, #0
 8006658:	6833      	ldreq	r3, [r6, #0]
 800665a:	f04f 0600 	mov.w	r6, #0
 800665e:	bf08      	it	eq
 8006660:	68e5      	ldreq	r5, [r4, #12]
 8006662:	f104 041a 	add.w	r4, r4, #26
 8006666:	bf08      	it	eq
 8006668:	1aed      	subeq	r5, r5, r3
 800666a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800666e:	bf08      	it	eq
 8006670:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006674:	4293      	cmp	r3, r2
 8006676:	bfc4      	itt	gt
 8006678:	1a9b      	subgt	r3, r3, r2
 800667a:	18ed      	addgt	r5, r5, r3
 800667c:	42b5      	cmp	r5, r6
 800667e:	d11a      	bne.n	80066b6 <_printf_common+0xd2>
 8006680:	2000      	movs	r0, #0
 8006682:	e008      	b.n	8006696 <_printf_common+0xb2>
 8006684:	2301      	movs	r3, #1
 8006686:	4652      	mov	r2, sl
 8006688:	4649      	mov	r1, r9
 800668a:	4638      	mov	r0, r7
 800668c:	47c0      	blx	r8
 800668e:	3001      	adds	r0, #1
 8006690:	d103      	bne.n	800669a <_printf_common+0xb6>
 8006692:	f04f 30ff 	mov.w	r0, #4294967295
 8006696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800669a:	3501      	adds	r5, #1
 800669c:	e7c1      	b.n	8006622 <_printf_common+0x3e>
 800669e:	2030      	movs	r0, #48	; 0x30
 80066a0:	18e1      	adds	r1, r4, r3
 80066a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066a6:	1c5a      	adds	r2, r3, #1
 80066a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80066ac:	4422      	add	r2, r4
 80066ae:	3302      	adds	r3, #2
 80066b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066b4:	e7c2      	b.n	800663c <_printf_common+0x58>
 80066b6:	2301      	movs	r3, #1
 80066b8:	4622      	mov	r2, r4
 80066ba:	4649      	mov	r1, r9
 80066bc:	4638      	mov	r0, r7
 80066be:	47c0      	blx	r8
 80066c0:	3001      	adds	r0, #1
 80066c2:	d0e6      	beq.n	8006692 <_printf_common+0xae>
 80066c4:	3601      	adds	r6, #1
 80066c6:	e7d9      	b.n	800667c <_printf_common+0x98>

080066c8 <_printf_i>:
 80066c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066cc:	7e0f      	ldrb	r7, [r1, #24]
 80066ce:	4691      	mov	r9, r2
 80066d0:	2f78      	cmp	r7, #120	; 0x78
 80066d2:	4680      	mov	r8, r0
 80066d4:	460c      	mov	r4, r1
 80066d6:	469a      	mov	sl, r3
 80066d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80066de:	d807      	bhi.n	80066f0 <_printf_i+0x28>
 80066e0:	2f62      	cmp	r7, #98	; 0x62
 80066e2:	d80a      	bhi.n	80066fa <_printf_i+0x32>
 80066e4:	2f00      	cmp	r7, #0
 80066e6:	f000 80d5 	beq.w	8006894 <_printf_i+0x1cc>
 80066ea:	2f58      	cmp	r7, #88	; 0x58
 80066ec:	f000 80c1 	beq.w	8006872 <_printf_i+0x1aa>
 80066f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066f8:	e03a      	b.n	8006770 <_printf_i+0xa8>
 80066fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066fe:	2b15      	cmp	r3, #21
 8006700:	d8f6      	bhi.n	80066f0 <_printf_i+0x28>
 8006702:	a101      	add	r1, pc, #4	; (adr r1, 8006708 <_printf_i+0x40>)
 8006704:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006708:	08006761 	.word	0x08006761
 800670c:	08006775 	.word	0x08006775
 8006710:	080066f1 	.word	0x080066f1
 8006714:	080066f1 	.word	0x080066f1
 8006718:	080066f1 	.word	0x080066f1
 800671c:	080066f1 	.word	0x080066f1
 8006720:	08006775 	.word	0x08006775
 8006724:	080066f1 	.word	0x080066f1
 8006728:	080066f1 	.word	0x080066f1
 800672c:	080066f1 	.word	0x080066f1
 8006730:	080066f1 	.word	0x080066f1
 8006734:	0800687b 	.word	0x0800687b
 8006738:	080067a1 	.word	0x080067a1
 800673c:	08006835 	.word	0x08006835
 8006740:	080066f1 	.word	0x080066f1
 8006744:	080066f1 	.word	0x080066f1
 8006748:	0800689d 	.word	0x0800689d
 800674c:	080066f1 	.word	0x080066f1
 8006750:	080067a1 	.word	0x080067a1
 8006754:	080066f1 	.word	0x080066f1
 8006758:	080066f1 	.word	0x080066f1
 800675c:	0800683d 	.word	0x0800683d
 8006760:	682b      	ldr	r3, [r5, #0]
 8006762:	1d1a      	adds	r2, r3, #4
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	602a      	str	r2, [r5, #0]
 8006768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800676c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006770:	2301      	movs	r3, #1
 8006772:	e0a0      	b.n	80068b6 <_printf_i+0x1ee>
 8006774:	6820      	ldr	r0, [r4, #0]
 8006776:	682b      	ldr	r3, [r5, #0]
 8006778:	0607      	lsls	r7, r0, #24
 800677a:	f103 0104 	add.w	r1, r3, #4
 800677e:	6029      	str	r1, [r5, #0]
 8006780:	d501      	bpl.n	8006786 <_printf_i+0xbe>
 8006782:	681e      	ldr	r6, [r3, #0]
 8006784:	e003      	b.n	800678e <_printf_i+0xc6>
 8006786:	0646      	lsls	r6, r0, #25
 8006788:	d5fb      	bpl.n	8006782 <_printf_i+0xba>
 800678a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800678e:	2e00      	cmp	r6, #0
 8006790:	da03      	bge.n	800679a <_printf_i+0xd2>
 8006792:	232d      	movs	r3, #45	; 0x2d
 8006794:	4276      	negs	r6, r6
 8006796:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800679a:	230a      	movs	r3, #10
 800679c:	4859      	ldr	r0, [pc, #356]	; (8006904 <_printf_i+0x23c>)
 800679e:	e012      	b.n	80067c6 <_printf_i+0xfe>
 80067a0:	682b      	ldr	r3, [r5, #0]
 80067a2:	6820      	ldr	r0, [r4, #0]
 80067a4:	1d19      	adds	r1, r3, #4
 80067a6:	6029      	str	r1, [r5, #0]
 80067a8:	0605      	lsls	r5, r0, #24
 80067aa:	d501      	bpl.n	80067b0 <_printf_i+0xe8>
 80067ac:	681e      	ldr	r6, [r3, #0]
 80067ae:	e002      	b.n	80067b6 <_printf_i+0xee>
 80067b0:	0641      	lsls	r1, r0, #25
 80067b2:	d5fb      	bpl.n	80067ac <_printf_i+0xe4>
 80067b4:	881e      	ldrh	r6, [r3, #0]
 80067b6:	2f6f      	cmp	r7, #111	; 0x6f
 80067b8:	bf0c      	ite	eq
 80067ba:	2308      	moveq	r3, #8
 80067bc:	230a      	movne	r3, #10
 80067be:	4851      	ldr	r0, [pc, #324]	; (8006904 <_printf_i+0x23c>)
 80067c0:	2100      	movs	r1, #0
 80067c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80067c6:	6865      	ldr	r5, [r4, #4]
 80067c8:	2d00      	cmp	r5, #0
 80067ca:	bfa8      	it	ge
 80067cc:	6821      	ldrge	r1, [r4, #0]
 80067ce:	60a5      	str	r5, [r4, #8]
 80067d0:	bfa4      	itt	ge
 80067d2:	f021 0104 	bicge.w	r1, r1, #4
 80067d6:	6021      	strge	r1, [r4, #0]
 80067d8:	b90e      	cbnz	r6, 80067de <_printf_i+0x116>
 80067da:	2d00      	cmp	r5, #0
 80067dc:	d04b      	beq.n	8006876 <_printf_i+0x1ae>
 80067de:	4615      	mov	r5, r2
 80067e0:	fbb6 f1f3 	udiv	r1, r6, r3
 80067e4:	fb03 6711 	mls	r7, r3, r1, r6
 80067e8:	5dc7      	ldrb	r7, [r0, r7]
 80067ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80067ee:	4637      	mov	r7, r6
 80067f0:	42bb      	cmp	r3, r7
 80067f2:	460e      	mov	r6, r1
 80067f4:	d9f4      	bls.n	80067e0 <_printf_i+0x118>
 80067f6:	2b08      	cmp	r3, #8
 80067f8:	d10b      	bne.n	8006812 <_printf_i+0x14a>
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	07de      	lsls	r6, r3, #31
 80067fe:	d508      	bpl.n	8006812 <_printf_i+0x14a>
 8006800:	6923      	ldr	r3, [r4, #16]
 8006802:	6861      	ldr	r1, [r4, #4]
 8006804:	4299      	cmp	r1, r3
 8006806:	bfde      	ittt	le
 8006808:	2330      	movle	r3, #48	; 0x30
 800680a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800680e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006812:	1b52      	subs	r2, r2, r5
 8006814:	6122      	str	r2, [r4, #16]
 8006816:	464b      	mov	r3, r9
 8006818:	4621      	mov	r1, r4
 800681a:	4640      	mov	r0, r8
 800681c:	f8cd a000 	str.w	sl, [sp]
 8006820:	aa03      	add	r2, sp, #12
 8006822:	f7ff fedf 	bl	80065e4 <_printf_common>
 8006826:	3001      	adds	r0, #1
 8006828:	d14a      	bne.n	80068c0 <_printf_i+0x1f8>
 800682a:	f04f 30ff 	mov.w	r0, #4294967295
 800682e:	b004      	add	sp, #16
 8006830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006834:	6823      	ldr	r3, [r4, #0]
 8006836:	f043 0320 	orr.w	r3, r3, #32
 800683a:	6023      	str	r3, [r4, #0]
 800683c:	2778      	movs	r7, #120	; 0x78
 800683e:	4832      	ldr	r0, [pc, #200]	; (8006908 <_printf_i+0x240>)
 8006840:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006844:	6823      	ldr	r3, [r4, #0]
 8006846:	6829      	ldr	r1, [r5, #0]
 8006848:	061f      	lsls	r7, r3, #24
 800684a:	f851 6b04 	ldr.w	r6, [r1], #4
 800684e:	d402      	bmi.n	8006856 <_printf_i+0x18e>
 8006850:	065f      	lsls	r7, r3, #25
 8006852:	bf48      	it	mi
 8006854:	b2b6      	uxthmi	r6, r6
 8006856:	07df      	lsls	r7, r3, #31
 8006858:	bf48      	it	mi
 800685a:	f043 0320 	orrmi.w	r3, r3, #32
 800685e:	6029      	str	r1, [r5, #0]
 8006860:	bf48      	it	mi
 8006862:	6023      	strmi	r3, [r4, #0]
 8006864:	b91e      	cbnz	r6, 800686e <_printf_i+0x1a6>
 8006866:	6823      	ldr	r3, [r4, #0]
 8006868:	f023 0320 	bic.w	r3, r3, #32
 800686c:	6023      	str	r3, [r4, #0]
 800686e:	2310      	movs	r3, #16
 8006870:	e7a6      	b.n	80067c0 <_printf_i+0xf8>
 8006872:	4824      	ldr	r0, [pc, #144]	; (8006904 <_printf_i+0x23c>)
 8006874:	e7e4      	b.n	8006840 <_printf_i+0x178>
 8006876:	4615      	mov	r5, r2
 8006878:	e7bd      	b.n	80067f6 <_printf_i+0x12e>
 800687a:	682b      	ldr	r3, [r5, #0]
 800687c:	6826      	ldr	r6, [r4, #0]
 800687e:	1d18      	adds	r0, r3, #4
 8006880:	6961      	ldr	r1, [r4, #20]
 8006882:	6028      	str	r0, [r5, #0]
 8006884:	0635      	lsls	r5, r6, #24
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	d501      	bpl.n	800688e <_printf_i+0x1c6>
 800688a:	6019      	str	r1, [r3, #0]
 800688c:	e002      	b.n	8006894 <_printf_i+0x1cc>
 800688e:	0670      	lsls	r0, r6, #25
 8006890:	d5fb      	bpl.n	800688a <_printf_i+0x1c2>
 8006892:	8019      	strh	r1, [r3, #0]
 8006894:	2300      	movs	r3, #0
 8006896:	4615      	mov	r5, r2
 8006898:	6123      	str	r3, [r4, #16]
 800689a:	e7bc      	b.n	8006816 <_printf_i+0x14e>
 800689c:	682b      	ldr	r3, [r5, #0]
 800689e:	2100      	movs	r1, #0
 80068a0:	1d1a      	adds	r2, r3, #4
 80068a2:	602a      	str	r2, [r5, #0]
 80068a4:	681d      	ldr	r5, [r3, #0]
 80068a6:	6862      	ldr	r2, [r4, #4]
 80068a8:	4628      	mov	r0, r5
 80068aa:	f000 fbe2 	bl	8007072 <memchr>
 80068ae:	b108      	cbz	r0, 80068b4 <_printf_i+0x1ec>
 80068b0:	1b40      	subs	r0, r0, r5
 80068b2:	6060      	str	r0, [r4, #4]
 80068b4:	6863      	ldr	r3, [r4, #4]
 80068b6:	6123      	str	r3, [r4, #16]
 80068b8:	2300      	movs	r3, #0
 80068ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068be:	e7aa      	b.n	8006816 <_printf_i+0x14e>
 80068c0:	462a      	mov	r2, r5
 80068c2:	4649      	mov	r1, r9
 80068c4:	4640      	mov	r0, r8
 80068c6:	6923      	ldr	r3, [r4, #16]
 80068c8:	47d0      	blx	sl
 80068ca:	3001      	adds	r0, #1
 80068cc:	d0ad      	beq.n	800682a <_printf_i+0x162>
 80068ce:	6823      	ldr	r3, [r4, #0]
 80068d0:	079b      	lsls	r3, r3, #30
 80068d2:	d413      	bmi.n	80068fc <_printf_i+0x234>
 80068d4:	68e0      	ldr	r0, [r4, #12]
 80068d6:	9b03      	ldr	r3, [sp, #12]
 80068d8:	4298      	cmp	r0, r3
 80068da:	bfb8      	it	lt
 80068dc:	4618      	movlt	r0, r3
 80068de:	e7a6      	b.n	800682e <_printf_i+0x166>
 80068e0:	2301      	movs	r3, #1
 80068e2:	4632      	mov	r2, r6
 80068e4:	4649      	mov	r1, r9
 80068e6:	4640      	mov	r0, r8
 80068e8:	47d0      	blx	sl
 80068ea:	3001      	adds	r0, #1
 80068ec:	d09d      	beq.n	800682a <_printf_i+0x162>
 80068ee:	3501      	adds	r5, #1
 80068f0:	68e3      	ldr	r3, [r4, #12]
 80068f2:	9903      	ldr	r1, [sp, #12]
 80068f4:	1a5b      	subs	r3, r3, r1
 80068f6:	42ab      	cmp	r3, r5
 80068f8:	dcf2      	bgt.n	80068e0 <_printf_i+0x218>
 80068fa:	e7eb      	b.n	80068d4 <_printf_i+0x20c>
 80068fc:	2500      	movs	r5, #0
 80068fe:	f104 0619 	add.w	r6, r4, #25
 8006902:	e7f5      	b.n	80068f0 <_printf_i+0x228>
 8006904:	0800a834 	.word	0x0800a834
 8006908:	0800a845 	.word	0x0800a845

0800690c <_scanf_float>:
 800690c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006910:	b087      	sub	sp, #28
 8006912:	9303      	str	r3, [sp, #12]
 8006914:	688b      	ldr	r3, [r1, #8]
 8006916:	4617      	mov	r7, r2
 8006918:	1e5a      	subs	r2, r3, #1
 800691a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800691e:	bf85      	ittet	hi
 8006920:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006924:	195b      	addhi	r3, r3, r5
 8006926:	2300      	movls	r3, #0
 8006928:	9302      	strhi	r3, [sp, #8]
 800692a:	bf88      	it	hi
 800692c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006930:	468b      	mov	fp, r1
 8006932:	f04f 0500 	mov.w	r5, #0
 8006936:	bf8c      	ite	hi
 8006938:	608b      	strhi	r3, [r1, #8]
 800693a:	9302      	strls	r3, [sp, #8]
 800693c:	680b      	ldr	r3, [r1, #0]
 800693e:	4680      	mov	r8, r0
 8006940:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006944:	f84b 3b1c 	str.w	r3, [fp], #28
 8006948:	460c      	mov	r4, r1
 800694a:	465e      	mov	r6, fp
 800694c:	46aa      	mov	sl, r5
 800694e:	46a9      	mov	r9, r5
 8006950:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006954:	9501      	str	r5, [sp, #4]
 8006956:	68a2      	ldr	r2, [r4, #8]
 8006958:	b152      	cbz	r2, 8006970 <_scanf_float+0x64>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	2b4e      	cmp	r3, #78	; 0x4e
 8006960:	d864      	bhi.n	8006a2c <_scanf_float+0x120>
 8006962:	2b40      	cmp	r3, #64	; 0x40
 8006964:	d83c      	bhi.n	80069e0 <_scanf_float+0xd4>
 8006966:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800696a:	b2c8      	uxtb	r0, r1
 800696c:	280e      	cmp	r0, #14
 800696e:	d93a      	bls.n	80069e6 <_scanf_float+0xda>
 8006970:	f1b9 0f00 	cmp.w	r9, #0
 8006974:	d003      	beq.n	800697e <_scanf_float+0x72>
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800697c:	6023      	str	r3, [r4, #0]
 800697e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006982:	f1ba 0f01 	cmp.w	sl, #1
 8006986:	f200 8113 	bhi.w	8006bb0 <_scanf_float+0x2a4>
 800698a:	455e      	cmp	r6, fp
 800698c:	f200 8105 	bhi.w	8006b9a <_scanf_float+0x28e>
 8006990:	2501      	movs	r5, #1
 8006992:	4628      	mov	r0, r5
 8006994:	b007      	add	sp, #28
 8006996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800699a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800699e:	2a0d      	cmp	r2, #13
 80069a0:	d8e6      	bhi.n	8006970 <_scanf_float+0x64>
 80069a2:	a101      	add	r1, pc, #4	; (adr r1, 80069a8 <_scanf_float+0x9c>)
 80069a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80069a8:	08006ae7 	.word	0x08006ae7
 80069ac:	08006971 	.word	0x08006971
 80069b0:	08006971 	.word	0x08006971
 80069b4:	08006971 	.word	0x08006971
 80069b8:	08006b47 	.word	0x08006b47
 80069bc:	08006b1f 	.word	0x08006b1f
 80069c0:	08006971 	.word	0x08006971
 80069c4:	08006971 	.word	0x08006971
 80069c8:	08006af5 	.word	0x08006af5
 80069cc:	08006971 	.word	0x08006971
 80069d0:	08006971 	.word	0x08006971
 80069d4:	08006971 	.word	0x08006971
 80069d8:	08006971 	.word	0x08006971
 80069dc:	08006aad 	.word	0x08006aad
 80069e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80069e4:	e7db      	b.n	800699e <_scanf_float+0x92>
 80069e6:	290e      	cmp	r1, #14
 80069e8:	d8c2      	bhi.n	8006970 <_scanf_float+0x64>
 80069ea:	a001      	add	r0, pc, #4	; (adr r0, 80069f0 <_scanf_float+0xe4>)
 80069ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80069f0:	08006a9f 	.word	0x08006a9f
 80069f4:	08006971 	.word	0x08006971
 80069f8:	08006a9f 	.word	0x08006a9f
 80069fc:	08006b33 	.word	0x08006b33
 8006a00:	08006971 	.word	0x08006971
 8006a04:	08006a4d 	.word	0x08006a4d
 8006a08:	08006a89 	.word	0x08006a89
 8006a0c:	08006a89 	.word	0x08006a89
 8006a10:	08006a89 	.word	0x08006a89
 8006a14:	08006a89 	.word	0x08006a89
 8006a18:	08006a89 	.word	0x08006a89
 8006a1c:	08006a89 	.word	0x08006a89
 8006a20:	08006a89 	.word	0x08006a89
 8006a24:	08006a89 	.word	0x08006a89
 8006a28:	08006a89 	.word	0x08006a89
 8006a2c:	2b6e      	cmp	r3, #110	; 0x6e
 8006a2e:	d809      	bhi.n	8006a44 <_scanf_float+0x138>
 8006a30:	2b60      	cmp	r3, #96	; 0x60
 8006a32:	d8b2      	bhi.n	800699a <_scanf_float+0x8e>
 8006a34:	2b54      	cmp	r3, #84	; 0x54
 8006a36:	d077      	beq.n	8006b28 <_scanf_float+0x21c>
 8006a38:	2b59      	cmp	r3, #89	; 0x59
 8006a3a:	d199      	bne.n	8006970 <_scanf_float+0x64>
 8006a3c:	2d07      	cmp	r5, #7
 8006a3e:	d197      	bne.n	8006970 <_scanf_float+0x64>
 8006a40:	2508      	movs	r5, #8
 8006a42:	e029      	b.n	8006a98 <_scanf_float+0x18c>
 8006a44:	2b74      	cmp	r3, #116	; 0x74
 8006a46:	d06f      	beq.n	8006b28 <_scanf_float+0x21c>
 8006a48:	2b79      	cmp	r3, #121	; 0x79
 8006a4a:	e7f6      	b.n	8006a3a <_scanf_float+0x12e>
 8006a4c:	6821      	ldr	r1, [r4, #0]
 8006a4e:	05c8      	lsls	r0, r1, #23
 8006a50:	d51a      	bpl.n	8006a88 <_scanf_float+0x17c>
 8006a52:	9b02      	ldr	r3, [sp, #8]
 8006a54:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006a58:	6021      	str	r1, [r4, #0]
 8006a5a:	f109 0901 	add.w	r9, r9, #1
 8006a5e:	b11b      	cbz	r3, 8006a68 <_scanf_float+0x15c>
 8006a60:	3b01      	subs	r3, #1
 8006a62:	3201      	adds	r2, #1
 8006a64:	9302      	str	r3, [sp, #8]
 8006a66:	60a2      	str	r2, [r4, #8]
 8006a68:	68a3      	ldr	r3, [r4, #8]
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	60a3      	str	r3, [r4, #8]
 8006a6e:	6923      	ldr	r3, [r4, #16]
 8006a70:	3301      	adds	r3, #1
 8006a72:	6123      	str	r3, [r4, #16]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	3b01      	subs	r3, #1
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	607b      	str	r3, [r7, #4]
 8006a7c:	f340 8084 	ble.w	8006b88 <_scanf_float+0x27c>
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	3301      	adds	r3, #1
 8006a84:	603b      	str	r3, [r7, #0]
 8006a86:	e766      	b.n	8006956 <_scanf_float+0x4a>
 8006a88:	eb1a 0f05 	cmn.w	sl, r5
 8006a8c:	f47f af70 	bne.w	8006970 <_scanf_float+0x64>
 8006a90:	6822      	ldr	r2, [r4, #0]
 8006a92:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006a96:	6022      	str	r2, [r4, #0]
 8006a98:	f806 3b01 	strb.w	r3, [r6], #1
 8006a9c:	e7e4      	b.n	8006a68 <_scanf_float+0x15c>
 8006a9e:	6822      	ldr	r2, [r4, #0]
 8006aa0:	0610      	lsls	r0, r2, #24
 8006aa2:	f57f af65 	bpl.w	8006970 <_scanf_float+0x64>
 8006aa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006aaa:	e7f4      	b.n	8006a96 <_scanf_float+0x18a>
 8006aac:	f1ba 0f00 	cmp.w	sl, #0
 8006ab0:	d10e      	bne.n	8006ad0 <_scanf_float+0x1c4>
 8006ab2:	f1b9 0f00 	cmp.w	r9, #0
 8006ab6:	d10e      	bne.n	8006ad6 <_scanf_float+0x1ca>
 8006ab8:	6822      	ldr	r2, [r4, #0]
 8006aba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006abe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006ac2:	d108      	bne.n	8006ad6 <_scanf_float+0x1ca>
 8006ac4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006ac8:	f04f 0a01 	mov.w	sl, #1
 8006acc:	6022      	str	r2, [r4, #0]
 8006ace:	e7e3      	b.n	8006a98 <_scanf_float+0x18c>
 8006ad0:	f1ba 0f02 	cmp.w	sl, #2
 8006ad4:	d055      	beq.n	8006b82 <_scanf_float+0x276>
 8006ad6:	2d01      	cmp	r5, #1
 8006ad8:	d002      	beq.n	8006ae0 <_scanf_float+0x1d4>
 8006ada:	2d04      	cmp	r5, #4
 8006adc:	f47f af48 	bne.w	8006970 <_scanf_float+0x64>
 8006ae0:	3501      	adds	r5, #1
 8006ae2:	b2ed      	uxtb	r5, r5
 8006ae4:	e7d8      	b.n	8006a98 <_scanf_float+0x18c>
 8006ae6:	f1ba 0f01 	cmp.w	sl, #1
 8006aea:	f47f af41 	bne.w	8006970 <_scanf_float+0x64>
 8006aee:	f04f 0a02 	mov.w	sl, #2
 8006af2:	e7d1      	b.n	8006a98 <_scanf_float+0x18c>
 8006af4:	b97d      	cbnz	r5, 8006b16 <_scanf_float+0x20a>
 8006af6:	f1b9 0f00 	cmp.w	r9, #0
 8006afa:	f47f af3c 	bne.w	8006976 <_scanf_float+0x6a>
 8006afe:	6822      	ldr	r2, [r4, #0]
 8006b00:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006b04:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006b08:	f47f af39 	bne.w	800697e <_scanf_float+0x72>
 8006b0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b10:	2501      	movs	r5, #1
 8006b12:	6022      	str	r2, [r4, #0]
 8006b14:	e7c0      	b.n	8006a98 <_scanf_float+0x18c>
 8006b16:	2d03      	cmp	r5, #3
 8006b18:	d0e2      	beq.n	8006ae0 <_scanf_float+0x1d4>
 8006b1a:	2d05      	cmp	r5, #5
 8006b1c:	e7de      	b.n	8006adc <_scanf_float+0x1d0>
 8006b1e:	2d02      	cmp	r5, #2
 8006b20:	f47f af26 	bne.w	8006970 <_scanf_float+0x64>
 8006b24:	2503      	movs	r5, #3
 8006b26:	e7b7      	b.n	8006a98 <_scanf_float+0x18c>
 8006b28:	2d06      	cmp	r5, #6
 8006b2a:	f47f af21 	bne.w	8006970 <_scanf_float+0x64>
 8006b2e:	2507      	movs	r5, #7
 8006b30:	e7b2      	b.n	8006a98 <_scanf_float+0x18c>
 8006b32:	6822      	ldr	r2, [r4, #0]
 8006b34:	0591      	lsls	r1, r2, #22
 8006b36:	f57f af1b 	bpl.w	8006970 <_scanf_float+0x64>
 8006b3a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006b3e:	6022      	str	r2, [r4, #0]
 8006b40:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b44:	e7a8      	b.n	8006a98 <_scanf_float+0x18c>
 8006b46:	6822      	ldr	r2, [r4, #0]
 8006b48:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006b4c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006b50:	d006      	beq.n	8006b60 <_scanf_float+0x254>
 8006b52:	0550      	lsls	r0, r2, #21
 8006b54:	f57f af0c 	bpl.w	8006970 <_scanf_float+0x64>
 8006b58:	f1b9 0f00 	cmp.w	r9, #0
 8006b5c:	f43f af0f 	beq.w	800697e <_scanf_float+0x72>
 8006b60:	0591      	lsls	r1, r2, #22
 8006b62:	bf58      	it	pl
 8006b64:	9901      	ldrpl	r1, [sp, #4]
 8006b66:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b6a:	bf58      	it	pl
 8006b6c:	eba9 0101 	subpl.w	r1, r9, r1
 8006b70:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006b74:	f04f 0900 	mov.w	r9, #0
 8006b78:	bf58      	it	pl
 8006b7a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006b7e:	6022      	str	r2, [r4, #0]
 8006b80:	e78a      	b.n	8006a98 <_scanf_float+0x18c>
 8006b82:	f04f 0a03 	mov.w	sl, #3
 8006b86:	e787      	b.n	8006a98 <_scanf_float+0x18c>
 8006b88:	4639      	mov	r1, r7
 8006b8a:	4640      	mov	r0, r8
 8006b8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006b90:	4798      	blx	r3
 8006b92:	2800      	cmp	r0, #0
 8006b94:	f43f aedf 	beq.w	8006956 <_scanf_float+0x4a>
 8006b98:	e6ea      	b.n	8006970 <_scanf_float+0x64>
 8006b9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b9e:	463a      	mov	r2, r7
 8006ba0:	4640      	mov	r0, r8
 8006ba2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ba6:	4798      	blx	r3
 8006ba8:	6923      	ldr	r3, [r4, #16]
 8006baa:	3b01      	subs	r3, #1
 8006bac:	6123      	str	r3, [r4, #16]
 8006bae:	e6ec      	b.n	800698a <_scanf_float+0x7e>
 8006bb0:	1e6b      	subs	r3, r5, #1
 8006bb2:	2b06      	cmp	r3, #6
 8006bb4:	d825      	bhi.n	8006c02 <_scanf_float+0x2f6>
 8006bb6:	2d02      	cmp	r5, #2
 8006bb8:	d836      	bhi.n	8006c28 <_scanf_float+0x31c>
 8006bba:	455e      	cmp	r6, fp
 8006bbc:	f67f aee8 	bls.w	8006990 <_scanf_float+0x84>
 8006bc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bc4:	463a      	mov	r2, r7
 8006bc6:	4640      	mov	r0, r8
 8006bc8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006bcc:	4798      	blx	r3
 8006bce:	6923      	ldr	r3, [r4, #16]
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	6123      	str	r3, [r4, #16]
 8006bd4:	e7f1      	b.n	8006bba <_scanf_float+0x2ae>
 8006bd6:	9802      	ldr	r0, [sp, #8]
 8006bd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bdc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006be0:	463a      	mov	r2, r7
 8006be2:	9002      	str	r0, [sp, #8]
 8006be4:	4640      	mov	r0, r8
 8006be6:	4798      	blx	r3
 8006be8:	6923      	ldr	r3, [r4, #16]
 8006bea:	3b01      	subs	r3, #1
 8006bec:	6123      	str	r3, [r4, #16]
 8006bee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bf2:	fa5f fa8a 	uxtb.w	sl, sl
 8006bf6:	f1ba 0f02 	cmp.w	sl, #2
 8006bfa:	d1ec      	bne.n	8006bd6 <_scanf_float+0x2ca>
 8006bfc:	3d03      	subs	r5, #3
 8006bfe:	b2ed      	uxtb	r5, r5
 8006c00:	1b76      	subs	r6, r6, r5
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	05da      	lsls	r2, r3, #23
 8006c06:	d52f      	bpl.n	8006c68 <_scanf_float+0x35c>
 8006c08:	055b      	lsls	r3, r3, #21
 8006c0a:	d510      	bpl.n	8006c2e <_scanf_float+0x322>
 8006c0c:	455e      	cmp	r6, fp
 8006c0e:	f67f aebf 	bls.w	8006990 <_scanf_float+0x84>
 8006c12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c16:	463a      	mov	r2, r7
 8006c18:	4640      	mov	r0, r8
 8006c1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c1e:	4798      	blx	r3
 8006c20:	6923      	ldr	r3, [r4, #16]
 8006c22:	3b01      	subs	r3, #1
 8006c24:	6123      	str	r3, [r4, #16]
 8006c26:	e7f1      	b.n	8006c0c <_scanf_float+0x300>
 8006c28:	46aa      	mov	sl, r5
 8006c2a:	9602      	str	r6, [sp, #8]
 8006c2c:	e7df      	b.n	8006bee <_scanf_float+0x2e2>
 8006c2e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006c32:	6923      	ldr	r3, [r4, #16]
 8006c34:	2965      	cmp	r1, #101	; 0x65
 8006c36:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c3a:	f106 35ff 	add.w	r5, r6, #4294967295
 8006c3e:	6123      	str	r3, [r4, #16]
 8006c40:	d00c      	beq.n	8006c5c <_scanf_float+0x350>
 8006c42:	2945      	cmp	r1, #69	; 0x45
 8006c44:	d00a      	beq.n	8006c5c <_scanf_float+0x350>
 8006c46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c4a:	463a      	mov	r2, r7
 8006c4c:	4640      	mov	r0, r8
 8006c4e:	4798      	blx	r3
 8006c50:	6923      	ldr	r3, [r4, #16]
 8006c52:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006c56:	3b01      	subs	r3, #1
 8006c58:	1eb5      	subs	r5, r6, #2
 8006c5a:	6123      	str	r3, [r4, #16]
 8006c5c:	463a      	mov	r2, r7
 8006c5e:	4640      	mov	r0, r8
 8006c60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c64:	4798      	blx	r3
 8006c66:	462e      	mov	r6, r5
 8006c68:	6825      	ldr	r5, [r4, #0]
 8006c6a:	f015 0510 	ands.w	r5, r5, #16
 8006c6e:	d155      	bne.n	8006d1c <_scanf_float+0x410>
 8006c70:	7035      	strb	r5, [r6, #0]
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c7c:	d11d      	bne.n	8006cba <_scanf_float+0x3ae>
 8006c7e:	9b01      	ldr	r3, [sp, #4]
 8006c80:	454b      	cmp	r3, r9
 8006c82:	eba3 0209 	sub.w	r2, r3, r9
 8006c86:	d125      	bne.n	8006cd4 <_scanf_float+0x3c8>
 8006c88:	2200      	movs	r2, #0
 8006c8a:	4659      	mov	r1, fp
 8006c8c:	4640      	mov	r0, r8
 8006c8e:	f002 fc23 	bl	80094d8 <_strtod_r>
 8006c92:	9b03      	ldr	r3, [sp, #12]
 8006c94:	f8d4 c000 	ldr.w	ip, [r4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f01c 0f02 	tst.w	ip, #2
 8006c9e:	4606      	mov	r6, r0
 8006ca0:	460f      	mov	r7, r1
 8006ca2:	f103 0204 	add.w	r2, r3, #4
 8006ca6:	d020      	beq.n	8006cea <_scanf_float+0x3de>
 8006ca8:	9903      	ldr	r1, [sp, #12]
 8006caa:	600a      	str	r2, [r1, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	e9c3 6700 	strd	r6, r7, [r3]
 8006cb2:	68e3      	ldr	r3, [r4, #12]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	60e3      	str	r3, [r4, #12]
 8006cb8:	e66b      	b.n	8006992 <_scanf_float+0x86>
 8006cba:	9b04      	ldr	r3, [sp, #16]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d0e3      	beq.n	8006c88 <_scanf_float+0x37c>
 8006cc0:	9905      	ldr	r1, [sp, #20]
 8006cc2:	230a      	movs	r3, #10
 8006cc4:	462a      	mov	r2, r5
 8006cc6:	4640      	mov	r0, r8
 8006cc8:	3101      	adds	r1, #1
 8006cca:	f002 fc89 	bl	80095e0 <_strtol_r>
 8006cce:	9b04      	ldr	r3, [sp, #16]
 8006cd0:	9e05      	ldr	r6, [sp, #20]
 8006cd2:	1ac2      	subs	r2, r0, r3
 8006cd4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006cd8:	429e      	cmp	r6, r3
 8006cda:	bf28      	it	cs
 8006cdc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006ce0:	4630      	mov	r0, r6
 8006ce2:	490f      	ldr	r1, [pc, #60]	; (8006d20 <_scanf_float+0x414>)
 8006ce4:	f000 f8e2 	bl	8006eac <siprintf>
 8006ce8:	e7ce      	b.n	8006c88 <_scanf_float+0x37c>
 8006cea:	f01c 0f04 	tst.w	ip, #4
 8006cee:	d1db      	bne.n	8006ca8 <_scanf_float+0x39c>
 8006cf0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006cf4:	f8cc 2000 	str.w	r2, [ip]
 8006cf8:	f8d3 8000 	ldr.w	r8, [r3]
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	f7f9 fef0 	bl	8000ae4 <__aeabi_dcmpun>
 8006d04:	b128      	cbz	r0, 8006d12 <_scanf_float+0x406>
 8006d06:	4807      	ldr	r0, [pc, #28]	; (8006d24 <_scanf_float+0x418>)
 8006d08:	f000 f9c2 	bl	8007090 <nanf>
 8006d0c:	f8c8 0000 	str.w	r0, [r8]
 8006d10:	e7cf      	b.n	8006cb2 <_scanf_float+0x3a6>
 8006d12:	4630      	mov	r0, r6
 8006d14:	4639      	mov	r1, r7
 8006d16:	f7f9 ff43 	bl	8000ba0 <__aeabi_d2f>
 8006d1a:	e7f7      	b.n	8006d0c <_scanf_float+0x400>
 8006d1c:	2500      	movs	r5, #0
 8006d1e:	e638      	b.n	8006992 <_scanf_float+0x86>
 8006d20:	0800a856 	.word	0x0800a856
 8006d24:	0800abed 	.word	0x0800abed

08006d28 <std>:
 8006d28:	2300      	movs	r3, #0
 8006d2a:	b510      	push	{r4, lr}
 8006d2c:	4604      	mov	r4, r0
 8006d2e:	e9c0 3300 	strd	r3, r3, [r0]
 8006d32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d36:	6083      	str	r3, [r0, #8]
 8006d38:	8181      	strh	r1, [r0, #12]
 8006d3a:	6643      	str	r3, [r0, #100]	; 0x64
 8006d3c:	81c2      	strh	r2, [r0, #14]
 8006d3e:	6183      	str	r3, [r0, #24]
 8006d40:	4619      	mov	r1, r3
 8006d42:	2208      	movs	r2, #8
 8006d44:	305c      	adds	r0, #92	; 0x5c
 8006d46:	f000 f914 	bl	8006f72 <memset>
 8006d4a:	4b0d      	ldr	r3, [pc, #52]	; (8006d80 <std+0x58>)
 8006d4c:	6224      	str	r4, [r4, #32]
 8006d4e:	6263      	str	r3, [r4, #36]	; 0x24
 8006d50:	4b0c      	ldr	r3, [pc, #48]	; (8006d84 <std+0x5c>)
 8006d52:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d54:	4b0c      	ldr	r3, [pc, #48]	; (8006d88 <std+0x60>)
 8006d56:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d58:	4b0c      	ldr	r3, [pc, #48]	; (8006d8c <std+0x64>)
 8006d5a:	6323      	str	r3, [r4, #48]	; 0x30
 8006d5c:	4b0c      	ldr	r3, [pc, #48]	; (8006d90 <std+0x68>)
 8006d5e:	429c      	cmp	r4, r3
 8006d60:	d006      	beq.n	8006d70 <std+0x48>
 8006d62:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006d66:	4294      	cmp	r4, r2
 8006d68:	d002      	beq.n	8006d70 <std+0x48>
 8006d6a:	33d0      	adds	r3, #208	; 0xd0
 8006d6c:	429c      	cmp	r4, r3
 8006d6e:	d105      	bne.n	8006d7c <std+0x54>
 8006d70:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d78:	f000 b978 	b.w	800706c <__retarget_lock_init_recursive>
 8006d7c:	bd10      	pop	{r4, pc}
 8006d7e:	bf00      	nop
 8006d80:	08006eed 	.word	0x08006eed
 8006d84:	08006f0f 	.word	0x08006f0f
 8006d88:	08006f47 	.word	0x08006f47
 8006d8c:	08006f6b 	.word	0x08006f6b
 8006d90:	20000368 	.word	0x20000368

08006d94 <stdio_exit_handler>:
 8006d94:	4a02      	ldr	r2, [pc, #8]	; (8006da0 <stdio_exit_handler+0xc>)
 8006d96:	4903      	ldr	r1, [pc, #12]	; (8006da4 <stdio_exit_handler+0x10>)
 8006d98:	4803      	ldr	r0, [pc, #12]	; (8006da8 <stdio_exit_handler+0x14>)
 8006d9a:	f000 b869 	b.w	8006e70 <_fwalk_sglue>
 8006d9e:	bf00      	nop
 8006da0:	2000001c 	.word	0x2000001c
 8006da4:	08009999 	.word	0x08009999
 8006da8:	20000028 	.word	0x20000028

08006dac <cleanup_stdio>:
 8006dac:	6841      	ldr	r1, [r0, #4]
 8006dae:	4b0c      	ldr	r3, [pc, #48]	; (8006de0 <cleanup_stdio+0x34>)
 8006db0:	b510      	push	{r4, lr}
 8006db2:	4299      	cmp	r1, r3
 8006db4:	4604      	mov	r4, r0
 8006db6:	d001      	beq.n	8006dbc <cleanup_stdio+0x10>
 8006db8:	f002 fdee 	bl	8009998 <_fflush_r>
 8006dbc:	68a1      	ldr	r1, [r4, #8]
 8006dbe:	4b09      	ldr	r3, [pc, #36]	; (8006de4 <cleanup_stdio+0x38>)
 8006dc0:	4299      	cmp	r1, r3
 8006dc2:	d002      	beq.n	8006dca <cleanup_stdio+0x1e>
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f002 fde7 	bl	8009998 <_fflush_r>
 8006dca:	68e1      	ldr	r1, [r4, #12]
 8006dcc:	4b06      	ldr	r3, [pc, #24]	; (8006de8 <cleanup_stdio+0x3c>)
 8006dce:	4299      	cmp	r1, r3
 8006dd0:	d004      	beq.n	8006ddc <cleanup_stdio+0x30>
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dd8:	f002 bdde 	b.w	8009998 <_fflush_r>
 8006ddc:	bd10      	pop	{r4, pc}
 8006dde:	bf00      	nop
 8006de0:	20000368 	.word	0x20000368
 8006de4:	200003d0 	.word	0x200003d0
 8006de8:	20000438 	.word	0x20000438

08006dec <global_stdio_init.part.0>:
 8006dec:	b510      	push	{r4, lr}
 8006dee:	4b0b      	ldr	r3, [pc, #44]	; (8006e1c <global_stdio_init.part.0+0x30>)
 8006df0:	4c0b      	ldr	r4, [pc, #44]	; (8006e20 <global_stdio_init.part.0+0x34>)
 8006df2:	4a0c      	ldr	r2, [pc, #48]	; (8006e24 <global_stdio_init.part.0+0x38>)
 8006df4:	4620      	mov	r0, r4
 8006df6:	601a      	str	r2, [r3, #0]
 8006df8:	2104      	movs	r1, #4
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f7ff ff94 	bl	8006d28 <std>
 8006e00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006e04:	2201      	movs	r2, #1
 8006e06:	2109      	movs	r1, #9
 8006e08:	f7ff ff8e 	bl	8006d28 <std>
 8006e0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006e10:	2202      	movs	r2, #2
 8006e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e16:	2112      	movs	r1, #18
 8006e18:	f7ff bf86 	b.w	8006d28 <std>
 8006e1c:	200004a0 	.word	0x200004a0
 8006e20:	20000368 	.word	0x20000368
 8006e24:	08006d95 	.word	0x08006d95

08006e28 <__sfp_lock_acquire>:
 8006e28:	4801      	ldr	r0, [pc, #4]	; (8006e30 <__sfp_lock_acquire+0x8>)
 8006e2a:	f000 b920 	b.w	800706e <__retarget_lock_acquire_recursive>
 8006e2e:	bf00      	nop
 8006e30:	200004a9 	.word	0x200004a9

08006e34 <__sfp_lock_release>:
 8006e34:	4801      	ldr	r0, [pc, #4]	; (8006e3c <__sfp_lock_release+0x8>)
 8006e36:	f000 b91b 	b.w	8007070 <__retarget_lock_release_recursive>
 8006e3a:	bf00      	nop
 8006e3c:	200004a9 	.word	0x200004a9

08006e40 <__sinit>:
 8006e40:	b510      	push	{r4, lr}
 8006e42:	4604      	mov	r4, r0
 8006e44:	f7ff fff0 	bl	8006e28 <__sfp_lock_acquire>
 8006e48:	6a23      	ldr	r3, [r4, #32]
 8006e4a:	b11b      	cbz	r3, 8006e54 <__sinit+0x14>
 8006e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e50:	f7ff bff0 	b.w	8006e34 <__sfp_lock_release>
 8006e54:	4b04      	ldr	r3, [pc, #16]	; (8006e68 <__sinit+0x28>)
 8006e56:	6223      	str	r3, [r4, #32]
 8006e58:	4b04      	ldr	r3, [pc, #16]	; (8006e6c <__sinit+0x2c>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1f5      	bne.n	8006e4c <__sinit+0xc>
 8006e60:	f7ff ffc4 	bl	8006dec <global_stdio_init.part.0>
 8006e64:	e7f2      	b.n	8006e4c <__sinit+0xc>
 8006e66:	bf00      	nop
 8006e68:	08006dad 	.word	0x08006dad
 8006e6c:	200004a0 	.word	0x200004a0

08006e70 <_fwalk_sglue>:
 8006e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e74:	4607      	mov	r7, r0
 8006e76:	4688      	mov	r8, r1
 8006e78:	4614      	mov	r4, r2
 8006e7a:	2600      	movs	r6, #0
 8006e7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e80:	f1b9 0901 	subs.w	r9, r9, #1
 8006e84:	d505      	bpl.n	8006e92 <_fwalk_sglue+0x22>
 8006e86:	6824      	ldr	r4, [r4, #0]
 8006e88:	2c00      	cmp	r4, #0
 8006e8a:	d1f7      	bne.n	8006e7c <_fwalk_sglue+0xc>
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e92:	89ab      	ldrh	r3, [r5, #12]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d907      	bls.n	8006ea8 <_fwalk_sglue+0x38>
 8006e98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	d003      	beq.n	8006ea8 <_fwalk_sglue+0x38>
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	4638      	mov	r0, r7
 8006ea4:	47c0      	blx	r8
 8006ea6:	4306      	orrs	r6, r0
 8006ea8:	3568      	adds	r5, #104	; 0x68
 8006eaa:	e7e9      	b.n	8006e80 <_fwalk_sglue+0x10>

08006eac <siprintf>:
 8006eac:	b40e      	push	{r1, r2, r3}
 8006eae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006eb2:	b500      	push	{lr}
 8006eb4:	b09c      	sub	sp, #112	; 0x70
 8006eb6:	ab1d      	add	r3, sp, #116	; 0x74
 8006eb8:	9002      	str	r0, [sp, #8]
 8006eba:	9006      	str	r0, [sp, #24]
 8006ebc:	9107      	str	r1, [sp, #28]
 8006ebe:	9104      	str	r1, [sp, #16]
 8006ec0:	4808      	ldr	r0, [pc, #32]	; (8006ee4 <siprintf+0x38>)
 8006ec2:	4909      	ldr	r1, [pc, #36]	; (8006ee8 <siprintf+0x3c>)
 8006ec4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ec8:	9105      	str	r1, [sp, #20]
 8006eca:	6800      	ldr	r0, [r0, #0]
 8006ecc:	a902      	add	r1, sp, #8
 8006ece:	9301      	str	r3, [sp, #4]
 8006ed0:	f002 fbe2 	bl	8009698 <_svfiprintf_r>
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	9b02      	ldr	r3, [sp, #8]
 8006ed8:	701a      	strb	r2, [r3, #0]
 8006eda:	b01c      	add	sp, #112	; 0x70
 8006edc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ee0:	b003      	add	sp, #12
 8006ee2:	4770      	bx	lr
 8006ee4:	20000074 	.word	0x20000074
 8006ee8:	ffff0208 	.word	0xffff0208

08006eec <__sread>:
 8006eec:	b510      	push	{r4, lr}
 8006eee:	460c      	mov	r4, r1
 8006ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ef4:	f000 f86c 	bl	8006fd0 <_read_r>
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	bfab      	itete	ge
 8006efc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006efe:	89a3      	ldrhlt	r3, [r4, #12]
 8006f00:	181b      	addge	r3, r3, r0
 8006f02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f06:	bfac      	ite	ge
 8006f08:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f0a:	81a3      	strhlt	r3, [r4, #12]
 8006f0c:	bd10      	pop	{r4, pc}

08006f0e <__swrite>:
 8006f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f12:	461f      	mov	r7, r3
 8006f14:	898b      	ldrh	r3, [r1, #12]
 8006f16:	4605      	mov	r5, r0
 8006f18:	05db      	lsls	r3, r3, #23
 8006f1a:	460c      	mov	r4, r1
 8006f1c:	4616      	mov	r6, r2
 8006f1e:	d505      	bpl.n	8006f2c <__swrite+0x1e>
 8006f20:	2302      	movs	r3, #2
 8006f22:	2200      	movs	r2, #0
 8006f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f28:	f000 f840 	bl	8006fac <_lseek_r>
 8006f2c:	89a3      	ldrh	r3, [r4, #12]
 8006f2e:	4632      	mov	r2, r6
 8006f30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f34:	81a3      	strh	r3, [r4, #12]
 8006f36:	4628      	mov	r0, r5
 8006f38:	463b      	mov	r3, r7
 8006f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f42:	f000 b857 	b.w	8006ff4 <_write_r>

08006f46 <__sseek>:
 8006f46:	b510      	push	{r4, lr}
 8006f48:	460c      	mov	r4, r1
 8006f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f4e:	f000 f82d 	bl	8006fac <_lseek_r>
 8006f52:	1c43      	adds	r3, r0, #1
 8006f54:	89a3      	ldrh	r3, [r4, #12]
 8006f56:	bf15      	itete	ne
 8006f58:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f62:	81a3      	strheq	r3, [r4, #12]
 8006f64:	bf18      	it	ne
 8006f66:	81a3      	strhne	r3, [r4, #12]
 8006f68:	bd10      	pop	{r4, pc}

08006f6a <__sclose>:
 8006f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f6e:	f000 b80d 	b.w	8006f8c <_close_r>

08006f72 <memset>:
 8006f72:	4603      	mov	r3, r0
 8006f74:	4402      	add	r2, r0
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d100      	bne.n	8006f7c <memset+0xa>
 8006f7a:	4770      	bx	lr
 8006f7c:	f803 1b01 	strb.w	r1, [r3], #1
 8006f80:	e7f9      	b.n	8006f76 <memset+0x4>
	...

08006f84 <_localeconv_r>:
 8006f84:	4800      	ldr	r0, [pc, #0]	; (8006f88 <_localeconv_r+0x4>)
 8006f86:	4770      	bx	lr
 8006f88:	20000168 	.word	0x20000168

08006f8c <_close_r>:
 8006f8c:	b538      	push	{r3, r4, r5, lr}
 8006f8e:	2300      	movs	r3, #0
 8006f90:	4d05      	ldr	r5, [pc, #20]	; (8006fa8 <_close_r+0x1c>)
 8006f92:	4604      	mov	r4, r0
 8006f94:	4608      	mov	r0, r1
 8006f96:	602b      	str	r3, [r5, #0]
 8006f98:	f7fb fbe3 	bl	8002762 <_close>
 8006f9c:	1c43      	adds	r3, r0, #1
 8006f9e:	d102      	bne.n	8006fa6 <_close_r+0x1a>
 8006fa0:	682b      	ldr	r3, [r5, #0]
 8006fa2:	b103      	cbz	r3, 8006fa6 <_close_r+0x1a>
 8006fa4:	6023      	str	r3, [r4, #0]
 8006fa6:	bd38      	pop	{r3, r4, r5, pc}
 8006fa8:	200004a4 	.word	0x200004a4

08006fac <_lseek_r>:
 8006fac:	b538      	push	{r3, r4, r5, lr}
 8006fae:	4604      	mov	r4, r0
 8006fb0:	4608      	mov	r0, r1
 8006fb2:	4611      	mov	r1, r2
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	4d05      	ldr	r5, [pc, #20]	; (8006fcc <_lseek_r+0x20>)
 8006fb8:	602a      	str	r2, [r5, #0]
 8006fba:	461a      	mov	r2, r3
 8006fbc:	f7fb fbf5 	bl	80027aa <_lseek>
 8006fc0:	1c43      	adds	r3, r0, #1
 8006fc2:	d102      	bne.n	8006fca <_lseek_r+0x1e>
 8006fc4:	682b      	ldr	r3, [r5, #0]
 8006fc6:	b103      	cbz	r3, 8006fca <_lseek_r+0x1e>
 8006fc8:	6023      	str	r3, [r4, #0]
 8006fca:	bd38      	pop	{r3, r4, r5, pc}
 8006fcc:	200004a4 	.word	0x200004a4

08006fd0 <_read_r>:
 8006fd0:	b538      	push	{r3, r4, r5, lr}
 8006fd2:	4604      	mov	r4, r0
 8006fd4:	4608      	mov	r0, r1
 8006fd6:	4611      	mov	r1, r2
 8006fd8:	2200      	movs	r2, #0
 8006fda:	4d05      	ldr	r5, [pc, #20]	; (8006ff0 <_read_r+0x20>)
 8006fdc:	602a      	str	r2, [r5, #0]
 8006fde:	461a      	mov	r2, r3
 8006fe0:	f7fb fb86 	bl	80026f0 <_read>
 8006fe4:	1c43      	adds	r3, r0, #1
 8006fe6:	d102      	bne.n	8006fee <_read_r+0x1e>
 8006fe8:	682b      	ldr	r3, [r5, #0]
 8006fea:	b103      	cbz	r3, 8006fee <_read_r+0x1e>
 8006fec:	6023      	str	r3, [r4, #0]
 8006fee:	bd38      	pop	{r3, r4, r5, pc}
 8006ff0:	200004a4 	.word	0x200004a4

08006ff4 <_write_r>:
 8006ff4:	b538      	push	{r3, r4, r5, lr}
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	4608      	mov	r0, r1
 8006ffa:	4611      	mov	r1, r2
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	4d05      	ldr	r5, [pc, #20]	; (8007014 <_write_r+0x20>)
 8007000:	602a      	str	r2, [r5, #0]
 8007002:	461a      	mov	r2, r3
 8007004:	f7fb fb91 	bl	800272a <_write>
 8007008:	1c43      	adds	r3, r0, #1
 800700a:	d102      	bne.n	8007012 <_write_r+0x1e>
 800700c:	682b      	ldr	r3, [r5, #0]
 800700e:	b103      	cbz	r3, 8007012 <_write_r+0x1e>
 8007010:	6023      	str	r3, [r4, #0]
 8007012:	bd38      	pop	{r3, r4, r5, pc}
 8007014:	200004a4 	.word	0x200004a4

08007018 <__errno>:
 8007018:	4b01      	ldr	r3, [pc, #4]	; (8007020 <__errno+0x8>)
 800701a:	6818      	ldr	r0, [r3, #0]
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	20000074 	.word	0x20000074

08007024 <__libc_init_array>:
 8007024:	b570      	push	{r4, r5, r6, lr}
 8007026:	2600      	movs	r6, #0
 8007028:	4d0c      	ldr	r5, [pc, #48]	; (800705c <__libc_init_array+0x38>)
 800702a:	4c0d      	ldr	r4, [pc, #52]	; (8007060 <__libc_init_array+0x3c>)
 800702c:	1b64      	subs	r4, r4, r5
 800702e:	10a4      	asrs	r4, r4, #2
 8007030:	42a6      	cmp	r6, r4
 8007032:	d109      	bne.n	8007048 <__libc_init_array+0x24>
 8007034:	f003 fbc2 	bl	800a7bc <_init>
 8007038:	2600      	movs	r6, #0
 800703a:	4d0a      	ldr	r5, [pc, #40]	; (8007064 <__libc_init_array+0x40>)
 800703c:	4c0a      	ldr	r4, [pc, #40]	; (8007068 <__libc_init_array+0x44>)
 800703e:	1b64      	subs	r4, r4, r5
 8007040:	10a4      	asrs	r4, r4, #2
 8007042:	42a6      	cmp	r6, r4
 8007044:	d105      	bne.n	8007052 <__libc_init_array+0x2e>
 8007046:	bd70      	pop	{r4, r5, r6, pc}
 8007048:	f855 3b04 	ldr.w	r3, [r5], #4
 800704c:	4798      	blx	r3
 800704e:	3601      	adds	r6, #1
 8007050:	e7ee      	b.n	8007030 <__libc_init_array+0xc>
 8007052:	f855 3b04 	ldr.w	r3, [r5], #4
 8007056:	4798      	blx	r3
 8007058:	3601      	adds	r6, #1
 800705a:	e7f2      	b.n	8007042 <__libc_init_array+0x1e>
 800705c:	0800ac50 	.word	0x0800ac50
 8007060:	0800ac50 	.word	0x0800ac50
 8007064:	0800ac50 	.word	0x0800ac50
 8007068:	0800ac54 	.word	0x0800ac54

0800706c <__retarget_lock_init_recursive>:
 800706c:	4770      	bx	lr

0800706e <__retarget_lock_acquire_recursive>:
 800706e:	4770      	bx	lr

08007070 <__retarget_lock_release_recursive>:
 8007070:	4770      	bx	lr

08007072 <memchr>:
 8007072:	4603      	mov	r3, r0
 8007074:	b510      	push	{r4, lr}
 8007076:	b2c9      	uxtb	r1, r1
 8007078:	4402      	add	r2, r0
 800707a:	4293      	cmp	r3, r2
 800707c:	4618      	mov	r0, r3
 800707e:	d101      	bne.n	8007084 <memchr+0x12>
 8007080:	2000      	movs	r0, #0
 8007082:	e003      	b.n	800708c <memchr+0x1a>
 8007084:	7804      	ldrb	r4, [r0, #0]
 8007086:	3301      	adds	r3, #1
 8007088:	428c      	cmp	r4, r1
 800708a:	d1f6      	bne.n	800707a <memchr+0x8>
 800708c:	bd10      	pop	{r4, pc}
	...

08007090 <nanf>:
 8007090:	4800      	ldr	r0, [pc, #0]	; (8007094 <nanf+0x4>)
 8007092:	4770      	bx	lr
 8007094:	7fc00000 	.word	0x7fc00000

08007098 <quorem>:
 8007098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800709c:	6903      	ldr	r3, [r0, #16]
 800709e:	690c      	ldr	r4, [r1, #16]
 80070a0:	4607      	mov	r7, r0
 80070a2:	42a3      	cmp	r3, r4
 80070a4:	db7f      	blt.n	80071a6 <quorem+0x10e>
 80070a6:	3c01      	subs	r4, #1
 80070a8:	f100 0514 	add.w	r5, r0, #20
 80070ac:	f101 0814 	add.w	r8, r1, #20
 80070b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070b4:	9301      	str	r3, [sp, #4]
 80070b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070be:	3301      	adds	r3, #1
 80070c0:	429a      	cmp	r2, r3
 80070c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80070c6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80070ca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070ce:	d331      	bcc.n	8007134 <quorem+0x9c>
 80070d0:	f04f 0e00 	mov.w	lr, #0
 80070d4:	4640      	mov	r0, r8
 80070d6:	46ac      	mov	ip, r5
 80070d8:	46f2      	mov	sl, lr
 80070da:	f850 2b04 	ldr.w	r2, [r0], #4
 80070de:	b293      	uxth	r3, r2
 80070e0:	fb06 e303 	mla	r3, r6, r3, lr
 80070e4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80070e8:	0c1a      	lsrs	r2, r3, #16
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	fb06 220e 	mla	r2, r6, lr, r2
 80070f0:	ebaa 0303 	sub.w	r3, sl, r3
 80070f4:	f8dc a000 	ldr.w	sl, [ip]
 80070f8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80070fc:	fa1f fa8a 	uxth.w	sl, sl
 8007100:	4453      	add	r3, sl
 8007102:	f8dc a000 	ldr.w	sl, [ip]
 8007106:	b292      	uxth	r2, r2
 8007108:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800710c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007110:	b29b      	uxth	r3, r3
 8007112:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007116:	4581      	cmp	r9, r0
 8007118:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800711c:	f84c 3b04 	str.w	r3, [ip], #4
 8007120:	d2db      	bcs.n	80070da <quorem+0x42>
 8007122:	f855 300b 	ldr.w	r3, [r5, fp]
 8007126:	b92b      	cbnz	r3, 8007134 <quorem+0x9c>
 8007128:	9b01      	ldr	r3, [sp, #4]
 800712a:	3b04      	subs	r3, #4
 800712c:	429d      	cmp	r5, r3
 800712e:	461a      	mov	r2, r3
 8007130:	d32d      	bcc.n	800718e <quorem+0xf6>
 8007132:	613c      	str	r4, [r7, #16]
 8007134:	4638      	mov	r0, r7
 8007136:	f001 f9df 	bl	80084f8 <__mcmp>
 800713a:	2800      	cmp	r0, #0
 800713c:	db23      	blt.n	8007186 <quorem+0xee>
 800713e:	4629      	mov	r1, r5
 8007140:	2000      	movs	r0, #0
 8007142:	3601      	adds	r6, #1
 8007144:	f858 2b04 	ldr.w	r2, [r8], #4
 8007148:	f8d1 c000 	ldr.w	ip, [r1]
 800714c:	b293      	uxth	r3, r2
 800714e:	1ac3      	subs	r3, r0, r3
 8007150:	0c12      	lsrs	r2, r2, #16
 8007152:	fa1f f08c 	uxth.w	r0, ip
 8007156:	4403      	add	r3, r0
 8007158:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800715c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007160:	b29b      	uxth	r3, r3
 8007162:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007166:	45c1      	cmp	r9, r8
 8007168:	ea4f 4022 	mov.w	r0, r2, asr #16
 800716c:	f841 3b04 	str.w	r3, [r1], #4
 8007170:	d2e8      	bcs.n	8007144 <quorem+0xac>
 8007172:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007176:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800717a:	b922      	cbnz	r2, 8007186 <quorem+0xee>
 800717c:	3b04      	subs	r3, #4
 800717e:	429d      	cmp	r5, r3
 8007180:	461a      	mov	r2, r3
 8007182:	d30a      	bcc.n	800719a <quorem+0x102>
 8007184:	613c      	str	r4, [r7, #16]
 8007186:	4630      	mov	r0, r6
 8007188:	b003      	add	sp, #12
 800718a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800718e:	6812      	ldr	r2, [r2, #0]
 8007190:	3b04      	subs	r3, #4
 8007192:	2a00      	cmp	r2, #0
 8007194:	d1cd      	bne.n	8007132 <quorem+0x9a>
 8007196:	3c01      	subs	r4, #1
 8007198:	e7c8      	b.n	800712c <quorem+0x94>
 800719a:	6812      	ldr	r2, [r2, #0]
 800719c:	3b04      	subs	r3, #4
 800719e:	2a00      	cmp	r2, #0
 80071a0:	d1f0      	bne.n	8007184 <quorem+0xec>
 80071a2:	3c01      	subs	r4, #1
 80071a4:	e7eb      	b.n	800717e <quorem+0xe6>
 80071a6:	2000      	movs	r0, #0
 80071a8:	e7ee      	b.n	8007188 <quorem+0xf0>
 80071aa:	0000      	movs	r0, r0
 80071ac:	0000      	movs	r0, r0
	...

080071b0 <_dtoa_r>:
 80071b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b4:	4616      	mov	r6, r2
 80071b6:	461f      	mov	r7, r3
 80071b8:	69c4      	ldr	r4, [r0, #28]
 80071ba:	b099      	sub	sp, #100	; 0x64
 80071bc:	4605      	mov	r5, r0
 80071be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80071c2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80071c6:	b974      	cbnz	r4, 80071e6 <_dtoa_r+0x36>
 80071c8:	2010      	movs	r0, #16
 80071ca:	f000 fe1d 	bl	8007e08 <malloc>
 80071ce:	4602      	mov	r2, r0
 80071d0:	61e8      	str	r0, [r5, #28]
 80071d2:	b920      	cbnz	r0, 80071de <_dtoa_r+0x2e>
 80071d4:	21ef      	movs	r1, #239	; 0xef
 80071d6:	4bac      	ldr	r3, [pc, #688]	; (8007488 <_dtoa_r+0x2d8>)
 80071d8:	48ac      	ldr	r0, [pc, #688]	; (800748c <_dtoa_r+0x2dc>)
 80071da:	f002 fc55 	bl	8009a88 <__assert_func>
 80071de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071e2:	6004      	str	r4, [r0, #0]
 80071e4:	60c4      	str	r4, [r0, #12]
 80071e6:	69eb      	ldr	r3, [r5, #28]
 80071e8:	6819      	ldr	r1, [r3, #0]
 80071ea:	b151      	cbz	r1, 8007202 <_dtoa_r+0x52>
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	2301      	movs	r3, #1
 80071f0:	4093      	lsls	r3, r2
 80071f2:	604a      	str	r2, [r1, #4]
 80071f4:	608b      	str	r3, [r1, #8]
 80071f6:	4628      	mov	r0, r5
 80071f8:	f000 fefa 	bl	8007ff0 <_Bfree>
 80071fc:	2200      	movs	r2, #0
 80071fe:	69eb      	ldr	r3, [r5, #28]
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	1e3b      	subs	r3, r7, #0
 8007204:	bfaf      	iteee	ge
 8007206:	2300      	movge	r3, #0
 8007208:	2201      	movlt	r2, #1
 800720a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800720e:	9305      	strlt	r3, [sp, #20]
 8007210:	bfa8      	it	ge
 8007212:	f8c8 3000 	strge.w	r3, [r8]
 8007216:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800721a:	4b9d      	ldr	r3, [pc, #628]	; (8007490 <_dtoa_r+0x2e0>)
 800721c:	bfb8      	it	lt
 800721e:	f8c8 2000 	strlt.w	r2, [r8]
 8007222:	ea33 0309 	bics.w	r3, r3, r9
 8007226:	d119      	bne.n	800725c <_dtoa_r+0xac>
 8007228:	f242 730f 	movw	r3, #9999	; 0x270f
 800722c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800722e:	6013      	str	r3, [r2, #0]
 8007230:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007234:	4333      	orrs	r3, r6
 8007236:	f000 8589 	beq.w	8007d4c <_dtoa_r+0xb9c>
 800723a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800723c:	b953      	cbnz	r3, 8007254 <_dtoa_r+0xa4>
 800723e:	4b95      	ldr	r3, [pc, #596]	; (8007494 <_dtoa_r+0x2e4>)
 8007240:	e023      	b.n	800728a <_dtoa_r+0xda>
 8007242:	4b95      	ldr	r3, [pc, #596]	; (8007498 <_dtoa_r+0x2e8>)
 8007244:	9303      	str	r3, [sp, #12]
 8007246:	3308      	adds	r3, #8
 8007248:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800724a:	6013      	str	r3, [r2, #0]
 800724c:	9803      	ldr	r0, [sp, #12]
 800724e:	b019      	add	sp, #100	; 0x64
 8007250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007254:	4b8f      	ldr	r3, [pc, #572]	; (8007494 <_dtoa_r+0x2e4>)
 8007256:	9303      	str	r3, [sp, #12]
 8007258:	3303      	adds	r3, #3
 800725a:	e7f5      	b.n	8007248 <_dtoa_r+0x98>
 800725c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007260:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007264:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007268:	2200      	movs	r2, #0
 800726a:	2300      	movs	r3, #0
 800726c:	f7f9 fc08 	bl	8000a80 <__aeabi_dcmpeq>
 8007270:	4680      	mov	r8, r0
 8007272:	b160      	cbz	r0, 800728e <_dtoa_r+0xde>
 8007274:	2301      	movs	r3, #1
 8007276:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007278:	6013      	str	r3, [r2, #0]
 800727a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 8562 	beq.w	8007d46 <_dtoa_r+0xb96>
 8007282:	4b86      	ldr	r3, [pc, #536]	; (800749c <_dtoa_r+0x2ec>)
 8007284:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007286:	6013      	str	r3, [r2, #0]
 8007288:	3b01      	subs	r3, #1
 800728a:	9303      	str	r3, [sp, #12]
 800728c:	e7de      	b.n	800724c <_dtoa_r+0x9c>
 800728e:	ab16      	add	r3, sp, #88	; 0x58
 8007290:	9301      	str	r3, [sp, #4]
 8007292:	ab17      	add	r3, sp, #92	; 0x5c
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	4628      	mov	r0, r5
 8007298:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800729c:	f001 fa3c 	bl	8008718 <__d2b>
 80072a0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80072a4:	4682      	mov	sl, r0
 80072a6:	2c00      	cmp	r4, #0
 80072a8:	d07e      	beq.n	80073a8 <_dtoa_r+0x1f8>
 80072aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80072ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072b0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80072b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072b8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80072bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80072c0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80072c4:	4619      	mov	r1, r3
 80072c6:	2200      	movs	r2, #0
 80072c8:	4b75      	ldr	r3, [pc, #468]	; (80074a0 <_dtoa_r+0x2f0>)
 80072ca:	f7f8 ffb9 	bl	8000240 <__aeabi_dsub>
 80072ce:	a368      	add	r3, pc, #416	; (adr r3, 8007470 <_dtoa_r+0x2c0>)
 80072d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d4:	f7f9 f96c 	bl	80005b0 <__aeabi_dmul>
 80072d8:	a367      	add	r3, pc, #412	; (adr r3, 8007478 <_dtoa_r+0x2c8>)
 80072da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072de:	f7f8 ffb1 	bl	8000244 <__adddf3>
 80072e2:	4606      	mov	r6, r0
 80072e4:	4620      	mov	r0, r4
 80072e6:	460f      	mov	r7, r1
 80072e8:	f7f9 f8f8 	bl	80004dc <__aeabi_i2d>
 80072ec:	a364      	add	r3, pc, #400	; (adr r3, 8007480 <_dtoa_r+0x2d0>)
 80072ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f2:	f7f9 f95d 	bl	80005b0 <__aeabi_dmul>
 80072f6:	4602      	mov	r2, r0
 80072f8:	460b      	mov	r3, r1
 80072fa:	4630      	mov	r0, r6
 80072fc:	4639      	mov	r1, r7
 80072fe:	f7f8 ffa1 	bl	8000244 <__adddf3>
 8007302:	4606      	mov	r6, r0
 8007304:	460f      	mov	r7, r1
 8007306:	f7f9 fc03 	bl	8000b10 <__aeabi_d2iz>
 800730a:	2200      	movs	r2, #0
 800730c:	4683      	mov	fp, r0
 800730e:	2300      	movs	r3, #0
 8007310:	4630      	mov	r0, r6
 8007312:	4639      	mov	r1, r7
 8007314:	f7f9 fbbe 	bl	8000a94 <__aeabi_dcmplt>
 8007318:	b148      	cbz	r0, 800732e <_dtoa_r+0x17e>
 800731a:	4658      	mov	r0, fp
 800731c:	f7f9 f8de 	bl	80004dc <__aeabi_i2d>
 8007320:	4632      	mov	r2, r6
 8007322:	463b      	mov	r3, r7
 8007324:	f7f9 fbac 	bl	8000a80 <__aeabi_dcmpeq>
 8007328:	b908      	cbnz	r0, 800732e <_dtoa_r+0x17e>
 800732a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800732e:	f1bb 0f16 	cmp.w	fp, #22
 8007332:	d857      	bhi.n	80073e4 <_dtoa_r+0x234>
 8007334:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007338:	4b5a      	ldr	r3, [pc, #360]	; (80074a4 <_dtoa_r+0x2f4>)
 800733a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800733e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007342:	f7f9 fba7 	bl	8000a94 <__aeabi_dcmplt>
 8007346:	2800      	cmp	r0, #0
 8007348:	d04e      	beq.n	80073e8 <_dtoa_r+0x238>
 800734a:	2300      	movs	r3, #0
 800734c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007350:	930f      	str	r3, [sp, #60]	; 0x3c
 8007352:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007354:	1b1b      	subs	r3, r3, r4
 8007356:	1e5a      	subs	r2, r3, #1
 8007358:	bf46      	itte	mi
 800735a:	f1c3 0901 	rsbmi	r9, r3, #1
 800735e:	2300      	movmi	r3, #0
 8007360:	f04f 0900 	movpl.w	r9, #0
 8007364:	9209      	str	r2, [sp, #36]	; 0x24
 8007366:	bf48      	it	mi
 8007368:	9309      	strmi	r3, [sp, #36]	; 0x24
 800736a:	f1bb 0f00 	cmp.w	fp, #0
 800736e:	db3d      	blt.n	80073ec <_dtoa_r+0x23c>
 8007370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007372:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007376:	445b      	add	r3, fp
 8007378:	9309      	str	r3, [sp, #36]	; 0x24
 800737a:	2300      	movs	r3, #0
 800737c:	930a      	str	r3, [sp, #40]	; 0x28
 800737e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007380:	2b09      	cmp	r3, #9
 8007382:	d867      	bhi.n	8007454 <_dtoa_r+0x2a4>
 8007384:	2b05      	cmp	r3, #5
 8007386:	bfc4      	itt	gt
 8007388:	3b04      	subgt	r3, #4
 800738a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800738c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800738e:	bfc8      	it	gt
 8007390:	2400      	movgt	r4, #0
 8007392:	f1a3 0302 	sub.w	r3, r3, #2
 8007396:	bfd8      	it	le
 8007398:	2401      	movle	r4, #1
 800739a:	2b03      	cmp	r3, #3
 800739c:	f200 8086 	bhi.w	80074ac <_dtoa_r+0x2fc>
 80073a0:	e8df f003 	tbb	[pc, r3]
 80073a4:	5637392c 	.word	0x5637392c
 80073a8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80073ac:	441c      	add	r4, r3
 80073ae:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80073b2:	2b20      	cmp	r3, #32
 80073b4:	bfc1      	itttt	gt
 80073b6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80073ba:	fa09 f903 	lslgt.w	r9, r9, r3
 80073be:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80073c2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80073c6:	bfd6      	itet	le
 80073c8:	f1c3 0320 	rsble	r3, r3, #32
 80073cc:	ea49 0003 	orrgt.w	r0, r9, r3
 80073d0:	fa06 f003 	lslle.w	r0, r6, r3
 80073d4:	f7f9 f872 	bl	80004bc <__aeabi_ui2d>
 80073d8:	2201      	movs	r2, #1
 80073da:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80073de:	3c01      	subs	r4, #1
 80073e0:	9213      	str	r2, [sp, #76]	; 0x4c
 80073e2:	e76f      	b.n	80072c4 <_dtoa_r+0x114>
 80073e4:	2301      	movs	r3, #1
 80073e6:	e7b3      	b.n	8007350 <_dtoa_r+0x1a0>
 80073e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80073ea:	e7b2      	b.n	8007352 <_dtoa_r+0x1a2>
 80073ec:	f1cb 0300 	rsb	r3, fp, #0
 80073f0:	930a      	str	r3, [sp, #40]	; 0x28
 80073f2:	2300      	movs	r3, #0
 80073f4:	eba9 090b 	sub.w	r9, r9, fp
 80073f8:	930e      	str	r3, [sp, #56]	; 0x38
 80073fa:	e7c0      	b.n	800737e <_dtoa_r+0x1ce>
 80073fc:	2300      	movs	r3, #0
 80073fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007400:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007402:	2b00      	cmp	r3, #0
 8007404:	dc55      	bgt.n	80074b2 <_dtoa_r+0x302>
 8007406:	2301      	movs	r3, #1
 8007408:	461a      	mov	r2, r3
 800740a:	9306      	str	r3, [sp, #24]
 800740c:	9308      	str	r3, [sp, #32]
 800740e:	9223      	str	r2, [sp, #140]	; 0x8c
 8007410:	e00b      	b.n	800742a <_dtoa_r+0x27a>
 8007412:	2301      	movs	r3, #1
 8007414:	e7f3      	b.n	80073fe <_dtoa_r+0x24e>
 8007416:	2300      	movs	r3, #0
 8007418:	930b      	str	r3, [sp, #44]	; 0x2c
 800741a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800741c:	445b      	add	r3, fp
 800741e:	9306      	str	r3, [sp, #24]
 8007420:	3301      	adds	r3, #1
 8007422:	2b01      	cmp	r3, #1
 8007424:	9308      	str	r3, [sp, #32]
 8007426:	bfb8      	it	lt
 8007428:	2301      	movlt	r3, #1
 800742a:	2100      	movs	r1, #0
 800742c:	2204      	movs	r2, #4
 800742e:	69e8      	ldr	r0, [r5, #28]
 8007430:	f102 0614 	add.w	r6, r2, #20
 8007434:	429e      	cmp	r6, r3
 8007436:	d940      	bls.n	80074ba <_dtoa_r+0x30a>
 8007438:	6041      	str	r1, [r0, #4]
 800743a:	4628      	mov	r0, r5
 800743c:	f000 fd98 	bl	8007f70 <_Balloc>
 8007440:	9003      	str	r0, [sp, #12]
 8007442:	2800      	cmp	r0, #0
 8007444:	d13c      	bne.n	80074c0 <_dtoa_r+0x310>
 8007446:	4602      	mov	r2, r0
 8007448:	f240 11af 	movw	r1, #431	; 0x1af
 800744c:	4b16      	ldr	r3, [pc, #88]	; (80074a8 <_dtoa_r+0x2f8>)
 800744e:	e6c3      	b.n	80071d8 <_dtoa_r+0x28>
 8007450:	2301      	movs	r3, #1
 8007452:	e7e1      	b.n	8007418 <_dtoa_r+0x268>
 8007454:	2401      	movs	r4, #1
 8007456:	2300      	movs	r3, #0
 8007458:	940b      	str	r4, [sp, #44]	; 0x2c
 800745a:	9322      	str	r3, [sp, #136]	; 0x88
 800745c:	f04f 33ff 	mov.w	r3, #4294967295
 8007460:	2200      	movs	r2, #0
 8007462:	9306      	str	r3, [sp, #24]
 8007464:	9308      	str	r3, [sp, #32]
 8007466:	2312      	movs	r3, #18
 8007468:	e7d1      	b.n	800740e <_dtoa_r+0x25e>
 800746a:	bf00      	nop
 800746c:	f3af 8000 	nop.w
 8007470:	636f4361 	.word	0x636f4361
 8007474:	3fd287a7 	.word	0x3fd287a7
 8007478:	8b60c8b3 	.word	0x8b60c8b3
 800747c:	3fc68a28 	.word	0x3fc68a28
 8007480:	509f79fb 	.word	0x509f79fb
 8007484:	3fd34413 	.word	0x3fd34413
 8007488:	0800a868 	.word	0x0800a868
 800748c:	0800a87f 	.word	0x0800a87f
 8007490:	7ff00000 	.word	0x7ff00000
 8007494:	0800a864 	.word	0x0800a864
 8007498:	0800a85b 	.word	0x0800a85b
 800749c:	0800a833 	.word	0x0800a833
 80074a0:	3ff80000 	.word	0x3ff80000
 80074a4:	0800a970 	.word	0x0800a970
 80074a8:	0800a8d7 	.word	0x0800a8d7
 80074ac:	2301      	movs	r3, #1
 80074ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80074b0:	e7d4      	b.n	800745c <_dtoa_r+0x2ac>
 80074b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074b4:	9306      	str	r3, [sp, #24]
 80074b6:	9308      	str	r3, [sp, #32]
 80074b8:	e7b7      	b.n	800742a <_dtoa_r+0x27a>
 80074ba:	3101      	adds	r1, #1
 80074bc:	0052      	lsls	r2, r2, #1
 80074be:	e7b7      	b.n	8007430 <_dtoa_r+0x280>
 80074c0:	69eb      	ldr	r3, [r5, #28]
 80074c2:	9a03      	ldr	r2, [sp, #12]
 80074c4:	601a      	str	r2, [r3, #0]
 80074c6:	9b08      	ldr	r3, [sp, #32]
 80074c8:	2b0e      	cmp	r3, #14
 80074ca:	f200 80a8 	bhi.w	800761e <_dtoa_r+0x46e>
 80074ce:	2c00      	cmp	r4, #0
 80074d0:	f000 80a5 	beq.w	800761e <_dtoa_r+0x46e>
 80074d4:	f1bb 0f00 	cmp.w	fp, #0
 80074d8:	dd34      	ble.n	8007544 <_dtoa_r+0x394>
 80074da:	4b9a      	ldr	r3, [pc, #616]	; (8007744 <_dtoa_r+0x594>)
 80074dc:	f00b 020f 	and.w	r2, fp, #15
 80074e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074e4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80074e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074ec:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80074f0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80074f4:	d016      	beq.n	8007524 <_dtoa_r+0x374>
 80074f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074fa:	4b93      	ldr	r3, [pc, #588]	; (8007748 <_dtoa_r+0x598>)
 80074fc:	2703      	movs	r7, #3
 80074fe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007502:	f7f9 f97f 	bl	8000804 <__aeabi_ddiv>
 8007506:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800750a:	f004 040f 	and.w	r4, r4, #15
 800750e:	4e8e      	ldr	r6, [pc, #568]	; (8007748 <_dtoa_r+0x598>)
 8007510:	b954      	cbnz	r4, 8007528 <_dtoa_r+0x378>
 8007512:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007516:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800751a:	f7f9 f973 	bl	8000804 <__aeabi_ddiv>
 800751e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007522:	e029      	b.n	8007578 <_dtoa_r+0x3c8>
 8007524:	2702      	movs	r7, #2
 8007526:	e7f2      	b.n	800750e <_dtoa_r+0x35e>
 8007528:	07e1      	lsls	r1, r4, #31
 800752a:	d508      	bpl.n	800753e <_dtoa_r+0x38e>
 800752c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007530:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007534:	f7f9 f83c 	bl	80005b0 <__aeabi_dmul>
 8007538:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800753c:	3701      	adds	r7, #1
 800753e:	1064      	asrs	r4, r4, #1
 8007540:	3608      	adds	r6, #8
 8007542:	e7e5      	b.n	8007510 <_dtoa_r+0x360>
 8007544:	f000 80a5 	beq.w	8007692 <_dtoa_r+0x4e2>
 8007548:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800754c:	f1cb 0400 	rsb	r4, fp, #0
 8007550:	4b7c      	ldr	r3, [pc, #496]	; (8007744 <_dtoa_r+0x594>)
 8007552:	f004 020f 	and.w	r2, r4, #15
 8007556:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800755a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755e:	f7f9 f827 	bl	80005b0 <__aeabi_dmul>
 8007562:	2702      	movs	r7, #2
 8007564:	2300      	movs	r3, #0
 8007566:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800756a:	4e77      	ldr	r6, [pc, #476]	; (8007748 <_dtoa_r+0x598>)
 800756c:	1124      	asrs	r4, r4, #4
 800756e:	2c00      	cmp	r4, #0
 8007570:	f040 8084 	bne.w	800767c <_dtoa_r+0x4cc>
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1d2      	bne.n	800751e <_dtoa_r+0x36e>
 8007578:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800757c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007580:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007582:	2b00      	cmp	r3, #0
 8007584:	f000 8087 	beq.w	8007696 <_dtoa_r+0x4e6>
 8007588:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800758c:	2200      	movs	r2, #0
 800758e:	4b6f      	ldr	r3, [pc, #444]	; (800774c <_dtoa_r+0x59c>)
 8007590:	f7f9 fa80 	bl	8000a94 <__aeabi_dcmplt>
 8007594:	2800      	cmp	r0, #0
 8007596:	d07e      	beq.n	8007696 <_dtoa_r+0x4e6>
 8007598:	9b08      	ldr	r3, [sp, #32]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d07b      	beq.n	8007696 <_dtoa_r+0x4e6>
 800759e:	9b06      	ldr	r3, [sp, #24]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	dd38      	ble.n	8007616 <_dtoa_r+0x466>
 80075a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075a8:	2200      	movs	r2, #0
 80075aa:	4b69      	ldr	r3, [pc, #420]	; (8007750 <_dtoa_r+0x5a0>)
 80075ac:	f7f9 f800 	bl	80005b0 <__aeabi_dmul>
 80075b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075b4:	9c06      	ldr	r4, [sp, #24]
 80075b6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80075ba:	3701      	adds	r7, #1
 80075bc:	4638      	mov	r0, r7
 80075be:	f7f8 ff8d 	bl	80004dc <__aeabi_i2d>
 80075c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075c6:	f7f8 fff3 	bl	80005b0 <__aeabi_dmul>
 80075ca:	2200      	movs	r2, #0
 80075cc:	4b61      	ldr	r3, [pc, #388]	; (8007754 <_dtoa_r+0x5a4>)
 80075ce:	f7f8 fe39 	bl	8000244 <__adddf3>
 80075d2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80075d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80075da:	9611      	str	r6, [sp, #68]	; 0x44
 80075dc:	2c00      	cmp	r4, #0
 80075de:	d15d      	bne.n	800769c <_dtoa_r+0x4ec>
 80075e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075e4:	2200      	movs	r2, #0
 80075e6:	4b5c      	ldr	r3, [pc, #368]	; (8007758 <_dtoa_r+0x5a8>)
 80075e8:	f7f8 fe2a 	bl	8000240 <__aeabi_dsub>
 80075ec:	4602      	mov	r2, r0
 80075ee:	460b      	mov	r3, r1
 80075f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80075f4:	4633      	mov	r3, r6
 80075f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80075f8:	f7f9 fa6a 	bl	8000ad0 <__aeabi_dcmpgt>
 80075fc:	2800      	cmp	r0, #0
 80075fe:	f040 8295 	bne.w	8007b2c <_dtoa_r+0x97c>
 8007602:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007606:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007608:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800760c:	f7f9 fa42 	bl	8000a94 <__aeabi_dcmplt>
 8007610:	2800      	cmp	r0, #0
 8007612:	f040 8289 	bne.w	8007b28 <_dtoa_r+0x978>
 8007616:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800761a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800761e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007620:	2b00      	cmp	r3, #0
 8007622:	f2c0 8151 	blt.w	80078c8 <_dtoa_r+0x718>
 8007626:	f1bb 0f0e 	cmp.w	fp, #14
 800762a:	f300 814d 	bgt.w	80078c8 <_dtoa_r+0x718>
 800762e:	4b45      	ldr	r3, [pc, #276]	; (8007744 <_dtoa_r+0x594>)
 8007630:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007634:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007638:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800763c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800763e:	2b00      	cmp	r3, #0
 8007640:	f280 80da 	bge.w	80077f8 <_dtoa_r+0x648>
 8007644:	9b08      	ldr	r3, [sp, #32]
 8007646:	2b00      	cmp	r3, #0
 8007648:	f300 80d6 	bgt.w	80077f8 <_dtoa_r+0x648>
 800764c:	f040 826b 	bne.w	8007b26 <_dtoa_r+0x976>
 8007650:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007654:	2200      	movs	r2, #0
 8007656:	4b40      	ldr	r3, [pc, #256]	; (8007758 <_dtoa_r+0x5a8>)
 8007658:	f7f8 ffaa 	bl	80005b0 <__aeabi_dmul>
 800765c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007660:	f7f9 fa2c 	bl	8000abc <__aeabi_dcmpge>
 8007664:	9c08      	ldr	r4, [sp, #32]
 8007666:	4626      	mov	r6, r4
 8007668:	2800      	cmp	r0, #0
 800766a:	f040 8241 	bne.w	8007af0 <_dtoa_r+0x940>
 800766e:	2331      	movs	r3, #49	; 0x31
 8007670:	9f03      	ldr	r7, [sp, #12]
 8007672:	f10b 0b01 	add.w	fp, fp, #1
 8007676:	f807 3b01 	strb.w	r3, [r7], #1
 800767a:	e23d      	b.n	8007af8 <_dtoa_r+0x948>
 800767c:	07e2      	lsls	r2, r4, #31
 800767e:	d505      	bpl.n	800768c <_dtoa_r+0x4dc>
 8007680:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007684:	f7f8 ff94 	bl	80005b0 <__aeabi_dmul>
 8007688:	2301      	movs	r3, #1
 800768a:	3701      	adds	r7, #1
 800768c:	1064      	asrs	r4, r4, #1
 800768e:	3608      	adds	r6, #8
 8007690:	e76d      	b.n	800756e <_dtoa_r+0x3be>
 8007692:	2702      	movs	r7, #2
 8007694:	e770      	b.n	8007578 <_dtoa_r+0x3c8>
 8007696:	46d8      	mov	r8, fp
 8007698:	9c08      	ldr	r4, [sp, #32]
 800769a:	e78f      	b.n	80075bc <_dtoa_r+0x40c>
 800769c:	9903      	ldr	r1, [sp, #12]
 800769e:	4b29      	ldr	r3, [pc, #164]	; (8007744 <_dtoa_r+0x594>)
 80076a0:	4421      	add	r1, r4
 80076a2:	9112      	str	r1, [sp, #72]	; 0x48
 80076a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80076aa:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80076ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80076b2:	2900      	cmp	r1, #0
 80076b4:	d054      	beq.n	8007760 <_dtoa_r+0x5b0>
 80076b6:	2000      	movs	r0, #0
 80076b8:	4928      	ldr	r1, [pc, #160]	; (800775c <_dtoa_r+0x5ac>)
 80076ba:	f7f9 f8a3 	bl	8000804 <__aeabi_ddiv>
 80076be:	463b      	mov	r3, r7
 80076c0:	4632      	mov	r2, r6
 80076c2:	f7f8 fdbd 	bl	8000240 <__aeabi_dsub>
 80076c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80076ca:	9f03      	ldr	r7, [sp, #12]
 80076cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076d0:	f7f9 fa1e 	bl	8000b10 <__aeabi_d2iz>
 80076d4:	4604      	mov	r4, r0
 80076d6:	f7f8 ff01 	bl	80004dc <__aeabi_i2d>
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076e2:	f7f8 fdad 	bl	8000240 <__aeabi_dsub>
 80076e6:	4602      	mov	r2, r0
 80076e8:	460b      	mov	r3, r1
 80076ea:	3430      	adds	r4, #48	; 0x30
 80076ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80076f4:	f807 4b01 	strb.w	r4, [r7], #1
 80076f8:	f7f9 f9cc 	bl	8000a94 <__aeabi_dcmplt>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	d173      	bne.n	80077e8 <_dtoa_r+0x638>
 8007700:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007704:	2000      	movs	r0, #0
 8007706:	4911      	ldr	r1, [pc, #68]	; (800774c <_dtoa_r+0x59c>)
 8007708:	f7f8 fd9a 	bl	8000240 <__aeabi_dsub>
 800770c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007710:	f7f9 f9c0 	bl	8000a94 <__aeabi_dcmplt>
 8007714:	2800      	cmp	r0, #0
 8007716:	f040 80b6 	bne.w	8007886 <_dtoa_r+0x6d6>
 800771a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800771c:	429f      	cmp	r7, r3
 800771e:	f43f af7a 	beq.w	8007616 <_dtoa_r+0x466>
 8007722:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007726:	2200      	movs	r2, #0
 8007728:	4b09      	ldr	r3, [pc, #36]	; (8007750 <_dtoa_r+0x5a0>)
 800772a:	f7f8 ff41 	bl	80005b0 <__aeabi_dmul>
 800772e:	2200      	movs	r2, #0
 8007730:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007734:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007738:	4b05      	ldr	r3, [pc, #20]	; (8007750 <_dtoa_r+0x5a0>)
 800773a:	f7f8 ff39 	bl	80005b0 <__aeabi_dmul>
 800773e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007742:	e7c3      	b.n	80076cc <_dtoa_r+0x51c>
 8007744:	0800a970 	.word	0x0800a970
 8007748:	0800a948 	.word	0x0800a948
 800774c:	3ff00000 	.word	0x3ff00000
 8007750:	40240000 	.word	0x40240000
 8007754:	401c0000 	.word	0x401c0000
 8007758:	40140000 	.word	0x40140000
 800775c:	3fe00000 	.word	0x3fe00000
 8007760:	4630      	mov	r0, r6
 8007762:	4639      	mov	r1, r7
 8007764:	f7f8 ff24 	bl	80005b0 <__aeabi_dmul>
 8007768:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800776a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800776e:	9c03      	ldr	r4, [sp, #12]
 8007770:	9314      	str	r3, [sp, #80]	; 0x50
 8007772:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007776:	f7f9 f9cb 	bl	8000b10 <__aeabi_d2iz>
 800777a:	9015      	str	r0, [sp, #84]	; 0x54
 800777c:	f7f8 feae 	bl	80004dc <__aeabi_i2d>
 8007780:	4602      	mov	r2, r0
 8007782:	460b      	mov	r3, r1
 8007784:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007788:	f7f8 fd5a 	bl	8000240 <__aeabi_dsub>
 800778c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800778e:	4606      	mov	r6, r0
 8007790:	3330      	adds	r3, #48	; 0x30
 8007792:	f804 3b01 	strb.w	r3, [r4], #1
 8007796:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007798:	460f      	mov	r7, r1
 800779a:	429c      	cmp	r4, r3
 800779c:	f04f 0200 	mov.w	r2, #0
 80077a0:	d124      	bne.n	80077ec <_dtoa_r+0x63c>
 80077a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80077a6:	4baf      	ldr	r3, [pc, #700]	; (8007a64 <_dtoa_r+0x8b4>)
 80077a8:	f7f8 fd4c 	bl	8000244 <__adddf3>
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	4630      	mov	r0, r6
 80077b2:	4639      	mov	r1, r7
 80077b4:	f7f9 f98c 	bl	8000ad0 <__aeabi_dcmpgt>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	d163      	bne.n	8007884 <_dtoa_r+0x6d4>
 80077bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80077c0:	2000      	movs	r0, #0
 80077c2:	49a8      	ldr	r1, [pc, #672]	; (8007a64 <_dtoa_r+0x8b4>)
 80077c4:	f7f8 fd3c 	bl	8000240 <__aeabi_dsub>
 80077c8:	4602      	mov	r2, r0
 80077ca:	460b      	mov	r3, r1
 80077cc:	4630      	mov	r0, r6
 80077ce:	4639      	mov	r1, r7
 80077d0:	f7f9 f960 	bl	8000a94 <__aeabi_dcmplt>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	f43f af1e 	beq.w	8007616 <_dtoa_r+0x466>
 80077da:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80077dc:	1e7b      	subs	r3, r7, #1
 80077de:	9314      	str	r3, [sp, #80]	; 0x50
 80077e0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80077e4:	2b30      	cmp	r3, #48	; 0x30
 80077e6:	d0f8      	beq.n	80077da <_dtoa_r+0x62a>
 80077e8:	46c3      	mov	fp, r8
 80077ea:	e03b      	b.n	8007864 <_dtoa_r+0x6b4>
 80077ec:	4b9e      	ldr	r3, [pc, #632]	; (8007a68 <_dtoa_r+0x8b8>)
 80077ee:	f7f8 fedf 	bl	80005b0 <__aeabi_dmul>
 80077f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077f6:	e7bc      	b.n	8007772 <_dtoa_r+0x5c2>
 80077f8:	9f03      	ldr	r7, [sp, #12]
 80077fa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80077fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007802:	4640      	mov	r0, r8
 8007804:	4649      	mov	r1, r9
 8007806:	f7f8 fffd 	bl	8000804 <__aeabi_ddiv>
 800780a:	f7f9 f981 	bl	8000b10 <__aeabi_d2iz>
 800780e:	4604      	mov	r4, r0
 8007810:	f7f8 fe64 	bl	80004dc <__aeabi_i2d>
 8007814:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007818:	f7f8 feca 	bl	80005b0 <__aeabi_dmul>
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	4640      	mov	r0, r8
 8007822:	4649      	mov	r1, r9
 8007824:	f7f8 fd0c 	bl	8000240 <__aeabi_dsub>
 8007828:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800782c:	f807 6b01 	strb.w	r6, [r7], #1
 8007830:	9e03      	ldr	r6, [sp, #12]
 8007832:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007836:	1bbe      	subs	r6, r7, r6
 8007838:	45b4      	cmp	ip, r6
 800783a:	4602      	mov	r2, r0
 800783c:	460b      	mov	r3, r1
 800783e:	d136      	bne.n	80078ae <_dtoa_r+0x6fe>
 8007840:	f7f8 fd00 	bl	8000244 <__adddf3>
 8007844:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007848:	4680      	mov	r8, r0
 800784a:	4689      	mov	r9, r1
 800784c:	f7f9 f940 	bl	8000ad0 <__aeabi_dcmpgt>
 8007850:	bb58      	cbnz	r0, 80078aa <_dtoa_r+0x6fa>
 8007852:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007856:	4640      	mov	r0, r8
 8007858:	4649      	mov	r1, r9
 800785a:	f7f9 f911 	bl	8000a80 <__aeabi_dcmpeq>
 800785e:	b108      	cbz	r0, 8007864 <_dtoa_r+0x6b4>
 8007860:	07e3      	lsls	r3, r4, #31
 8007862:	d422      	bmi.n	80078aa <_dtoa_r+0x6fa>
 8007864:	4651      	mov	r1, sl
 8007866:	4628      	mov	r0, r5
 8007868:	f000 fbc2 	bl	8007ff0 <_Bfree>
 800786c:	2300      	movs	r3, #0
 800786e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007870:	703b      	strb	r3, [r7, #0]
 8007872:	f10b 0301 	add.w	r3, fp, #1
 8007876:	6013      	str	r3, [r2, #0]
 8007878:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800787a:	2b00      	cmp	r3, #0
 800787c:	f43f ace6 	beq.w	800724c <_dtoa_r+0x9c>
 8007880:	601f      	str	r7, [r3, #0]
 8007882:	e4e3      	b.n	800724c <_dtoa_r+0x9c>
 8007884:	4627      	mov	r7, r4
 8007886:	463b      	mov	r3, r7
 8007888:	461f      	mov	r7, r3
 800788a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800788e:	2a39      	cmp	r2, #57	; 0x39
 8007890:	d107      	bne.n	80078a2 <_dtoa_r+0x6f2>
 8007892:	9a03      	ldr	r2, [sp, #12]
 8007894:	429a      	cmp	r2, r3
 8007896:	d1f7      	bne.n	8007888 <_dtoa_r+0x6d8>
 8007898:	2230      	movs	r2, #48	; 0x30
 800789a:	9903      	ldr	r1, [sp, #12]
 800789c:	f108 0801 	add.w	r8, r8, #1
 80078a0:	700a      	strb	r2, [r1, #0]
 80078a2:	781a      	ldrb	r2, [r3, #0]
 80078a4:	3201      	adds	r2, #1
 80078a6:	701a      	strb	r2, [r3, #0]
 80078a8:	e79e      	b.n	80077e8 <_dtoa_r+0x638>
 80078aa:	46d8      	mov	r8, fp
 80078ac:	e7eb      	b.n	8007886 <_dtoa_r+0x6d6>
 80078ae:	2200      	movs	r2, #0
 80078b0:	4b6d      	ldr	r3, [pc, #436]	; (8007a68 <_dtoa_r+0x8b8>)
 80078b2:	f7f8 fe7d 	bl	80005b0 <__aeabi_dmul>
 80078b6:	2200      	movs	r2, #0
 80078b8:	2300      	movs	r3, #0
 80078ba:	4680      	mov	r8, r0
 80078bc:	4689      	mov	r9, r1
 80078be:	f7f9 f8df 	bl	8000a80 <__aeabi_dcmpeq>
 80078c2:	2800      	cmp	r0, #0
 80078c4:	d09b      	beq.n	80077fe <_dtoa_r+0x64e>
 80078c6:	e7cd      	b.n	8007864 <_dtoa_r+0x6b4>
 80078c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078ca:	2a00      	cmp	r2, #0
 80078cc:	f000 80c4 	beq.w	8007a58 <_dtoa_r+0x8a8>
 80078d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80078d2:	2a01      	cmp	r2, #1
 80078d4:	f300 80a8 	bgt.w	8007a28 <_dtoa_r+0x878>
 80078d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80078da:	2a00      	cmp	r2, #0
 80078dc:	f000 80a0 	beq.w	8007a20 <_dtoa_r+0x870>
 80078e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80078e4:	464f      	mov	r7, r9
 80078e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80078e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078ea:	2101      	movs	r1, #1
 80078ec:	441a      	add	r2, r3
 80078ee:	4628      	mov	r0, r5
 80078f0:	4499      	add	r9, r3
 80078f2:	9209      	str	r2, [sp, #36]	; 0x24
 80078f4:	f000 fc7c 	bl	80081f0 <__i2b>
 80078f8:	4606      	mov	r6, r0
 80078fa:	b15f      	cbz	r7, 8007914 <_dtoa_r+0x764>
 80078fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078fe:	2b00      	cmp	r3, #0
 8007900:	dd08      	ble.n	8007914 <_dtoa_r+0x764>
 8007902:	42bb      	cmp	r3, r7
 8007904:	bfa8      	it	ge
 8007906:	463b      	movge	r3, r7
 8007908:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800790a:	eba9 0903 	sub.w	r9, r9, r3
 800790e:	1aff      	subs	r7, r7, r3
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	9309      	str	r3, [sp, #36]	; 0x24
 8007914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007916:	b1f3      	cbz	r3, 8007956 <_dtoa_r+0x7a6>
 8007918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 80a0 	beq.w	8007a60 <_dtoa_r+0x8b0>
 8007920:	2c00      	cmp	r4, #0
 8007922:	dd10      	ble.n	8007946 <_dtoa_r+0x796>
 8007924:	4631      	mov	r1, r6
 8007926:	4622      	mov	r2, r4
 8007928:	4628      	mov	r0, r5
 800792a:	f000 fd1f 	bl	800836c <__pow5mult>
 800792e:	4652      	mov	r2, sl
 8007930:	4601      	mov	r1, r0
 8007932:	4606      	mov	r6, r0
 8007934:	4628      	mov	r0, r5
 8007936:	f000 fc71 	bl	800821c <__multiply>
 800793a:	4680      	mov	r8, r0
 800793c:	4651      	mov	r1, sl
 800793e:	4628      	mov	r0, r5
 8007940:	f000 fb56 	bl	8007ff0 <_Bfree>
 8007944:	46c2      	mov	sl, r8
 8007946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007948:	1b1a      	subs	r2, r3, r4
 800794a:	d004      	beq.n	8007956 <_dtoa_r+0x7a6>
 800794c:	4651      	mov	r1, sl
 800794e:	4628      	mov	r0, r5
 8007950:	f000 fd0c 	bl	800836c <__pow5mult>
 8007954:	4682      	mov	sl, r0
 8007956:	2101      	movs	r1, #1
 8007958:	4628      	mov	r0, r5
 800795a:	f000 fc49 	bl	80081f0 <__i2b>
 800795e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007960:	4604      	mov	r4, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	f340 8082 	ble.w	8007a6c <_dtoa_r+0x8bc>
 8007968:	461a      	mov	r2, r3
 800796a:	4601      	mov	r1, r0
 800796c:	4628      	mov	r0, r5
 800796e:	f000 fcfd 	bl	800836c <__pow5mult>
 8007972:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007974:	4604      	mov	r4, r0
 8007976:	2b01      	cmp	r3, #1
 8007978:	dd7b      	ble.n	8007a72 <_dtoa_r+0x8c2>
 800797a:	f04f 0800 	mov.w	r8, #0
 800797e:	6923      	ldr	r3, [r4, #16]
 8007980:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007984:	6918      	ldr	r0, [r3, #16]
 8007986:	f000 fbe5 	bl	8008154 <__hi0bits>
 800798a:	f1c0 0020 	rsb	r0, r0, #32
 800798e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007990:	4418      	add	r0, r3
 8007992:	f010 001f 	ands.w	r0, r0, #31
 8007996:	f000 8092 	beq.w	8007abe <_dtoa_r+0x90e>
 800799a:	f1c0 0320 	rsb	r3, r0, #32
 800799e:	2b04      	cmp	r3, #4
 80079a0:	f340 8085 	ble.w	8007aae <_dtoa_r+0x8fe>
 80079a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a6:	f1c0 001c 	rsb	r0, r0, #28
 80079aa:	4403      	add	r3, r0
 80079ac:	4481      	add	r9, r0
 80079ae:	4407      	add	r7, r0
 80079b0:	9309      	str	r3, [sp, #36]	; 0x24
 80079b2:	f1b9 0f00 	cmp.w	r9, #0
 80079b6:	dd05      	ble.n	80079c4 <_dtoa_r+0x814>
 80079b8:	4651      	mov	r1, sl
 80079ba:	464a      	mov	r2, r9
 80079bc:	4628      	mov	r0, r5
 80079be:	f000 fd2f 	bl	8008420 <__lshift>
 80079c2:	4682      	mov	sl, r0
 80079c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	dd05      	ble.n	80079d6 <_dtoa_r+0x826>
 80079ca:	4621      	mov	r1, r4
 80079cc:	461a      	mov	r2, r3
 80079ce:	4628      	mov	r0, r5
 80079d0:	f000 fd26 	bl	8008420 <__lshift>
 80079d4:	4604      	mov	r4, r0
 80079d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d072      	beq.n	8007ac2 <_dtoa_r+0x912>
 80079dc:	4621      	mov	r1, r4
 80079de:	4650      	mov	r0, sl
 80079e0:	f000 fd8a 	bl	80084f8 <__mcmp>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	da6c      	bge.n	8007ac2 <_dtoa_r+0x912>
 80079e8:	2300      	movs	r3, #0
 80079ea:	4651      	mov	r1, sl
 80079ec:	220a      	movs	r2, #10
 80079ee:	4628      	mov	r0, r5
 80079f0:	f000 fb20 	bl	8008034 <__multadd>
 80079f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079f6:	4682      	mov	sl, r0
 80079f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f000 81ac 	beq.w	8007d5a <_dtoa_r+0xbaa>
 8007a02:	2300      	movs	r3, #0
 8007a04:	4631      	mov	r1, r6
 8007a06:	220a      	movs	r2, #10
 8007a08:	4628      	mov	r0, r5
 8007a0a:	f000 fb13 	bl	8008034 <__multadd>
 8007a0e:	9b06      	ldr	r3, [sp, #24]
 8007a10:	4606      	mov	r6, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f300 8093 	bgt.w	8007b3e <_dtoa_r+0x98e>
 8007a18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	dc59      	bgt.n	8007ad2 <_dtoa_r+0x922>
 8007a1e:	e08e      	b.n	8007b3e <_dtoa_r+0x98e>
 8007a20:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007a22:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a26:	e75d      	b.n	80078e4 <_dtoa_r+0x734>
 8007a28:	9b08      	ldr	r3, [sp, #32]
 8007a2a:	1e5c      	subs	r4, r3, #1
 8007a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a2e:	42a3      	cmp	r3, r4
 8007a30:	bfbf      	itttt	lt
 8007a32:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007a34:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007a36:	1ae3      	sublt	r3, r4, r3
 8007a38:	18d2      	addlt	r2, r2, r3
 8007a3a:	bfa8      	it	ge
 8007a3c:	1b1c      	subge	r4, r3, r4
 8007a3e:	9b08      	ldr	r3, [sp, #32]
 8007a40:	bfbe      	ittt	lt
 8007a42:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007a44:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007a46:	2400      	movlt	r4, #0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	bfb5      	itete	lt
 8007a4c:	eba9 0703 	sublt.w	r7, r9, r3
 8007a50:	464f      	movge	r7, r9
 8007a52:	2300      	movlt	r3, #0
 8007a54:	9b08      	ldrge	r3, [sp, #32]
 8007a56:	e747      	b.n	80078e8 <_dtoa_r+0x738>
 8007a58:	464f      	mov	r7, r9
 8007a5a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007a5c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007a5e:	e74c      	b.n	80078fa <_dtoa_r+0x74a>
 8007a60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a62:	e773      	b.n	800794c <_dtoa_r+0x79c>
 8007a64:	3fe00000 	.word	0x3fe00000
 8007a68:	40240000 	.word	0x40240000
 8007a6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	dc18      	bgt.n	8007aa4 <_dtoa_r+0x8f4>
 8007a72:	9b04      	ldr	r3, [sp, #16]
 8007a74:	b9b3      	cbnz	r3, 8007aa4 <_dtoa_r+0x8f4>
 8007a76:	9b05      	ldr	r3, [sp, #20]
 8007a78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a7c:	b993      	cbnz	r3, 8007aa4 <_dtoa_r+0x8f4>
 8007a7e:	9b05      	ldr	r3, [sp, #20]
 8007a80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a84:	0d1b      	lsrs	r3, r3, #20
 8007a86:	051b      	lsls	r3, r3, #20
 8007a88:	b17b      	cbz	r3, 8007aaa <_dtoa_r+0x8fa>
 8007a8a:	f04f 0801 	mov.w	r8, #1
 8007a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a90:	f109 0901 	add.w	r9, r9, #1
 8007a94:	3301      	adds	r3, #1
 8007a96:	9309      	str	r3, [sp, #36]	; 0x24
 8007a98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f47f af6f 	bne.w	800797e <_dtoa_r+0x7ce>
 8007aa0:	2001      	movs	r0, #1
 8007aa2:	e774      	b.n	800798e <_dtoa_r+0x7de>
 8007aa4:	f04f 0800 	mov.w	r8, #0
 8007aa8:	e7f6      	b.n	8007a98 <_dtoa_r+0x8e8>
 8007aaa:	4698      	mov	r8, r3
 8007aac:	e7f4      	b.n	8007a98 <_dtoa_r+0x8e8>
 8007aae:	d080      	beq.n	80079b2 <_dtoa_r+0x802>
 8007ab0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ab2:	331c      	adds	r3, #28
 8007ab4:	441a      	add	r2, r3
 8007ab6:	4499      	add	r9, r3
 8007ab8:	441f      	add	r7, r3
 8007aba:	9209      	str	r2, [sp, #36]	; 0x24
 8007abc:	e779      	b.n	80079b2 <_dtoa_r+0x802>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	e7f6      	b.n	8007ab0 <_dtoa_r+0x900>
 8007ac2:	9b08      	ldr	r3, [sp, #32]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	dc34      	bgt.n	8007b32 <_dtoa_r+0x982>
 8007ac8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	dd31      	ble.n	8007b32 <_dtoa_r+0x982>
 8007ace:	9b08      	ldr	r3, [sp, #32]
 8007ad0:	9306      	str	r3, [sp, #24]
 8007ad2:	9b06      	ldr	r3, [sp, #24]
 8007ad4:	b963      	cbnz	r3, 8007af0 <_dtoa_r+0x940>
 8007ad6:	4621      	mov	r1, r4
 8007ad8:	2205      	movs	r2, #5
 8007ada:	4628      	mov	r0, r5
 8007adc:	f000 faaa 	bl	8008034 <__multadd>
 8007ae0:	4601      	mov	r1, r0
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	4650      	mov	r0, sl
 8007ae6:	f000 fd07 	bl	80084f8 <__mcmp>
 8007aea:	2800      	cmp	r0, #0
 8007aec:	f73f adbf 	bgt.w	800766e <_dtoa_r+0x4be>
 8007af0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007af2:	9f03      	ldr	r7, [sp, #12]
 8007af4:	ea6f 0b03 	mvn.w	fp, r3
 8007af8:	f04f 0800 	mov.w	r8, #0
 8007afc:	4621      	mov	r1, r4
 8007afe:	4628      	mov	r0, r5
 8007b00:	f000 fa76 	bl	8007ff0 <_Bfree>
 8007b04:	2e00      	cmp	r6, #0
 8007b06:	f43f aead 	beq.w	8007864 <_dtoa_r+0x6b4>
 8007b0a:	f1b8 0f00 	cmp.w	r8, #0
 8007b0e:	d005      	beq.n	8007b1c <_dtoa_r+0x96c>
 8007b10:	45b0      	cmp	r8, r6
 8007b12:	d003      	beq.n	8007b1c <_dtoa_r+0x96c>
 8007b14:	4641      	mov	r1, r8
 8007b16:	4628      	mov	r0, r5
 8007b18:	f000 fa6a 	bl	8007ff0 <_Bfree>
 8007b1c:	4631      	mov	r1, r6
 8007b1e:	4628      	mov	r0, r5
 8007b20:	f000 fa66 	bl	8007ff0 <_Bfree>
 8007b24:	e69e      	b.n	8007864 <_dtoa_r+0x6b4>
 8007b26:	2400      	movs	r4, #0
 8007b28:	4626      	mov	r6, r4
 8007b2a:	e7e1      	b.n	8007af0 <_dtoa_r+0x940>
 8007b2c:	46c3      	mov	fp, r8
 8007b2e:	4626      	mov	r6, r4
 8007b30:	e59d      	b.n	800766e <_dtoa_r+0x4be>
 8007b32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 80c8 	beq.w	8007cca <_dtoa_r+0xb1a>
 8007b3a:	9b08      	ldr	r3, [sp, #32]
 8007b3c:	9306      	str	r3, [sp, #24]
 8007b3e:	2f00      	cmp	r7, #0
 8007b40:	dd05      	ble.n	8007b4e <_dtoa_r+0x99e>
 8007b42:	4631      	mov	r1, r6
 8007b44:	463a      	mov	r2, r7
 8007b46:	4628      	mov	r0, r5
 8007b48:	f000 fc6a 	bl	8008420 <__lshift>
 8007b4c:	4606      	mov	r6, r0
 8007b4e:	f1b8 0f00 	cmp.w	r8, #0
 8007b52:	d05b      	beq.n	8007c0c <_dtoa_r+0xa5c>
 8007b54:	4628      	mov	r0, r5
 8007b56:	6871      	ldr	r1, [r6, #4]
 8007b58:	f000 fa0a 	bl	8007f70 <_Balloc>
 8007b5c:	4607      	mov	r7, r0
 8007b5e:	b928      	cbnz	r0, 8007b6c <_dtoa_r+0x9bc>
 8007b60:	4602      	mov	r2, r0
 8007b62:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007b66:	4b81      	ldr	r3, [pc, #516]	; (8007d6c <_dtoa_r+0xbbc>)
 8007b68:	f7ff bb36 	b.w	80071d8 <_dtoa_r+0x28>
 8007b6c:	6932      	ldr	r2, [r6, #16]
 8007b6e:	f106 010c 	add.w	r1, r6, #12
 8007b72:	3202      	adds	r2, #2
 8007b74:	0092      	lsls	r2, r2, #2
 8007b76:	300c      	adds	r0, #12
 8007b78:	f001 ff72 	bl	8009a60 <memcpy>
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	4639      	mov	r1, r7
 8007b80:	4628      	mov	r0, r5
 8007b82:	f000 fc4d 	bl	8008420 <__lshift>
 8007b86:	46b0      	mov	r8, r6
 8007b88:	4606      	mov	r6, r0
 8007b8a:	9b03      	ldr	r3, [sp, #12]
 8007b8c:	9a03      	ldr	r2, [sp, #12]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	9308      	str	r3, [sp, #32]
 8007b92:	9b06      	ldr	r3, [sp, #24]
 8007b94:	4413      	add	r3, r2
 8007b96:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b98:	9b04      	ldr	r3, [sp, #16]
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	930a      	str	r3, [sp, #40]	; 0x28
 8007ba0:	9b08      	ldr	r3, [sp, #32]
 8007ba2:	4621      	mov	r1, r4
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	4650      	mov	r0, sl
 8007ba8:	9304      	str	r3, [sp, #16]
 8007baa:	f7ff fa75 	bl	8007098 <quorem>
 8007bae:	4641      	mov	r1, r8
 8007bb0:	9006      	str	r0, [sp, #24]
 8007bb2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007bb6:	4650      	mov	r0, sl
 8007bb8:	f000 fc9e 	bl	80084f8 <__mcmp>
 8007bbc:	4632      	mov	r2, r6
 8007bbe:	9009      	str	r0, [sp, #36]	; 0x24
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	f000 fcb4 	bl	8008530 <__mdiff>
 8007bc8:	68c2      	ldr	r2, [r0, #12]
 8007bca:	4607      	mov	r7, r0
 8007bcc:	bb02      	cbnz	r2, 8007c10 <_dtoa_r+0xa60>
 8007bce:	4601      	mov	r1, r0
 8007bd0:	4650      	mov	r0, sl
 8007bd2:	f000 fc91 	bl	80084f8 <__mcmp>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	4639      	mov	r1, r7
 8007bda:	4628      	mov	r0, r5
 8007bdc:	920c      	str	r2, [sp, #48]	; 0x30
 8007bde:	f000 fa07 	bl	8007ff0 <_Bfree>
 8007be2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007be4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007be6:	9f08      	ldr	r7, [sp, #32]
 8007be8:	ea43 0102 	orr.w	r1, r3, r2
 8007bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bee:	4319      	orrs	r1, r3
 8007bf0:	d110      	bne.n	8007c14 <_dtoa_r+0xa64>
 8007bf2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007bf6:	d029      	beq.n	8007c4c <_dtoa_r+0xa9c>
 8007bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	dd02      	ble.n	8007c04 <_dtoa_r+0xa54>
 8007bfe:	9b06      	ldr	r3, [sp, #24]
 8007c00:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007c04:	9b04      	ldr	r3, [sp, #16]
 8007c06:	f883 9000 	strb.w	r9, [r3]
 8007c0a:	e777      	b.n	8007afc <_dtoa_r+0x94c>
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	e7ba      	b.n	8007b86 <_dtoa_r+0x9d6>
 8007c10:	2201      	movs	r2, #1
 8007c12:	e7e1      	b.n	8007bd8 <_dtoa_r+0xa28>
 8007c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	db04      	blt.n	8007c24 <_dtoa_r+0xa74>
 8007c1a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007c1c:	430b      	orrs	r3, r1
 8007c1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007c20:	430b      	orrs	r3, r1
 8007c22:	d120      	bne.n	8007c66 <_dtoa_r+0xab6>
 8007c24:	2a00      	cmp	r2, #0
 8007c26:	dded      	ble.n	8007c04 <_dtoa_r+0xa54>
 8007c28:	4651      	mov	r1, sl
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	f000 fbf7 	bl	8008420 <__lshift>
 8007c32:	4621      	mov	r1, r4
 8007c34:	4682      	mov	sl, r0
 8007c36:	f000 fc5f 	bl	80084f8 <__mcmp>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	dc03      	bgt.n	8007c46 <_dtoa_r+0xa96>
 8007c3e:	d1e1      	bne.n	8007c04 <_dtoa_r+0xa54>
 8007c40:	f019 0f01 	tst.w	r9, #1
 8007c44:	d0de      	beq.n	8007c04 <_dtoa_r+0xa54>
 8007c46:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c4a:	d1d8      	bne.n	8007bfe <_dtoa_r+0xa4e>
 8007c4c:	2339      	movs	r3, #57	; 0x39
 8007c4e:	9a04      	ldr	r2, [sp, #16]
 8007c50:	7013      	strb	r3, [r2, #0]
 8007c52:	463b      	mov	r3, r7
 8007c54:	461f      	mov	r7, r3
 8007c56:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	2a39      	cmp	r2, #57	; 0x39
 8007c5e:	d06b      	beq.n	8007d38 <_dtoa_r+0xb88>
 8007c60:	3201      	adds	r2, #1
 8007c62:	701a      	strb	r2, [r3, #0]
 8007c64:	e74a      	b.n	8007afc <_dtoa_r+0x94c>
 8007c66:	2a00      	cmp	r2, #0
 8007c68:	dd07      	ble.n	8007c7a <_dtoa_r+0xaca>
 8007c6a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c6e:	d0ed      	beq.n	8007c4c <_dtoa_r+0xa9c>
 8007c70:	9a04      	ldr	r2, [sp, #16]
 8007c72:	f109 0301 	add.w	r3, r9, #1
 8007c76:	7013      	strb	r3, [r2, #0]
 8007c78:	e740      	b.n	8007afc <_dtoa_r+0x94c>
 8007c7a:	9b08      	ldr	r3, [sp, #32]
 8007c7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c7e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d042      	beq.n	8007d0c <_dtoa_r+0xb5c>
 8007c86:	4651      	mov	r1, sl
 8007c88:	2300      	movs	r3, #0
 8007c8a:	220a      	movs	r2, #10
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	f000 f9d1 	bl	8008034 <__multadd>
 8007c92:	45b0      	cmp	r8, r6
 8007c94:	4682      	mov	sl, r0
 8007c96:	f04f 0300 	mov.w	r3, #0
 8007c9a:	f04f 020a 	mov.w	r2, #10
 8007c9e:	4641      	mov	r1, r8
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	d107      	bne.n	8007cb4 <_dtoa_r+0xb04>
 8007ca4:	f000 f9c6 	bl	8008034 <__multadd>
 8007ca8:	4680      	mov	r8, r0
 8007caa:	4606      	mov	r6, r0
 8007cac:	9b08      	ldr	r3, [sp, #32]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	9308      	str	r3, [sp, #32]
 8007cb2:	e775      	b.n	8007ba0 <_dtoa_r+0x9f0>
 8007cb4:	f000 f9be 	bl	8008034 <__multadd>
 8007cb8:	4631      	mov	r1, r6
 8007cba:	4680      	mov	r8, r0
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	220a      	movs	r2, #10
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	f000 f9b7 	bl	8008034 <__multadd>
 8007cc6:	4606      	mov	r6, r0
 8007cc8:	e7f0      	b.n	8007cac <_dtoa_r+0xafc>
 8007cca:	9b08      	ldr	r3, [sp, #32]
 8007ccc:	9306      	str	r3, [sp, #24]
 8007cce:	9f03      	ldr	r7, [sp, #12]
 8007cd0:	4621      	mov	r1, r4
 8007cd2:	4650      	mov	r0, sl
 8007cd4:	f7ff f9e0 	bl	8007098 <quorem>
 8007cd8:	9b03      	ldr	r3, [sp, #12]
 8007cda:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007cde:	f807 9b01 	strb.w	r9, [r7], #1
 8007ce2:	1afa      	subs	r2, r7, r3
 8007ce4:	9b06      	ldr	r3, [sp, #24]
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	dd07      	ble.n	8007cfa <_dtoa_r+0xb4a>
 8007cea:	4651      	mov	r1, sl
 8007cec:	2300      	movs	r3, #0
 8007cee:	220a      	movs	r2, #10
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	f000 f99f 	bl	8008034 <__multadd>
 8007cf6:	4682      	mov	sl, r0
 8007cf8:	e7ea      	b.n	8007cd0 <_dtoa_r+0xb20>
 8007cfa:	9b06      	ldr	r3, [sp, #24]
 8007cfc:	f04f 0800 	mov.w	r8, #0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	bfcc      	ite	gt
 8007d04:	461f      	movgt	r7, r3
 8007d06:	2701      	movle	r7, #1
 8007d08:	9b03      	ldr	r3, [sp, #12]
 8007d0a:	441f      	add	r7, r3
 8007d0c:	4651      	mov	r1, sl
 8007d0e:	2201      	movs	r2, #1
 8007d10:	4628      	mov	r0, r5
 8007d12:	f000 fb85 	bl	8008420 <__lshift>
 8007d16:	4621      	mov	r1, r4
 8007d18:	4682      	mov	sl, r0
 8007d1a:	f000 fbed 	bl	80084f8 <__mcmp>
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	dc97      	bgt.n	8007c52 <_dtoa_r+0xaa2>
 8007d22:	d102      	bne.n	8007d2a <_dtoa_r+0xb7a>
 8007d24:	f019 0f01 	tst.w	r9, #1
 8007d28:	d193      	bne.n	8007c52 <_dtoa_r+0xaa2>
 8007d2a:	463b      	mov	r3, r7
 8007d2c:	461f      	mov	r7, r3
 8007d2e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d32:	2a30      	cmp	r2, #48	; 0x30
 8007d34:	d0fa      	beq.n	8007d2c <_dtoa_r+0xb7c>
 8007d36:	e6e1      	b.n	8007afc <_dtoa_r+0x94c>
 8007d38:	9a03      	ldr	r2, [sp, #12]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d18a      	bne.n	8007c54 <_dtoa_r+0xaa4>
 8007d3e:	2331      	movs	r3, #49	; 0x31
 8007d40:	f10b 0b01 	add.w	fp, fp, #1
 8007d44:	e797      	b.n	8007c76 <_dtoa_r+0xac6>
 8007d46:	4b0a      	ldr	r3, [pc, #40]	; (8007d70 <_dtoa_r+0xbc0>)
 8007d48:	f7ff ba9f 	b.w	800728a <_dtoa_r+0xda>
 8007d4c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f47f aa77 	bne.w	8007242 <_dtoa_r+0x92>
 8007d54:	4b07      	ldr	r3, [pc, #28]	; (8007d74 <_dtoa_r+0xbc4>)
 8007d56:	f7ff ba98 	b.w	800728a <_dtoa_r+0xda>
 8007d5a:	9b06      	ldr	r3, [sp, #24]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	dcb6      	bgt.n	8007cce <_dtoa_r+0xb1e>
 8007d60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	f73f aeb5 	bgt.w	8007ad2 <_dtoa_r+0x922>
 8007d68:	e7b1      	b.n	8007cce <_dtoa_r+0xb1e>
 8007d6a:	bf00      	nop
 8007d6c:	0800a8d7 	.word	0x0800a8d7
 8007d70:	0800a832 	.word	0x0800a832
 8007d74:	0800a85b 	.word	0x0800a85b

08007d78 <_free_r>:
 8007d78:	b538      	push	{r3, r4, r5, lr}
 8007d7a:	4605      	mov	r5, r0
 8007d7c:	2900      	cmp	r1, #0
 8007d7e:	d040      	beq.n	8007e02 <_free_r+0x8a>
 8007d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d84:	1f0c      	subs	r4, r1, #4
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	bfb8      	it	lt
 8007d8a:	18e4      	addlt	r4, r4, r3
 8007d8c:	f000 f8e4 	bl	8007f58 <__malloc_lock>
 8007d90:	4a1c      	ldr	r2, [pc, #112]	; (8007e04 <_free_r+0x8c>)
 8007d92:	6813      	ldr	r3, [r2, #0]
 8007d94:	b933      	cbnz	r3, 8007da4 <_free_r+0x2c>
 8007d96:	6063      	str	r3, [r4, #4]
 8007d98:	6014      	str	r4, [r2, #0]
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007da0:	f000 b8e0 	b.w	8007f64 <__malloc_unlock>
 8007da4:	42a3      	cmp	r3, r4
 8007da6:	d908      	bls.n	8007dba <_free_r+0x42>
 8007da8:	6820      	ldr	r0, [r4, #0]
 8007daa:	1821      	adds	r1, r4, r0
 8007dac:	428b      	cmp	r3, r1
 8007dae:	bf01      	itttt	eq
 8007db0:	6819      	ldreq	r1, [r3, #0]
 8007db2:	685b      	ldreq	r3, [r3, #4]
 8007db4:	1809      	addeq	r1, r1, r0
 8007db6:	6021      	streq	r1, [r4, #0]
 8007db8:	e7ed      	b.n	8007d96 <_free_r+0x1e>
 8007dba:	461a      	mov	r2, r3
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	b10b      	cbz	r3, 8007dc4 <_free_r+0x4c>
 8007dc0:	42a3      	cmp	r3, r4
 8007dc2:	d9fa      	bls.n	8007dba <_free_r+0x42>
 8007dc4:	6811      	ldr	r1, [r2, #0]
 8007dc6:	1850      	adds	r0, r2, r1
 8007dc8:	42a0      	cmp	r0, r4
 8007dca:	d10b      	bne.n	8007de4 <_free_r+0x6c>
 8007dcc:	6820      	ldr	r0, [r4, #0]
 8007dce:	4401      	add	r1, r0
 8007dd0:	1850      	adds	r0, r2, r1
 8007dd2:	4283      	cmp	r3, r0
 8007dd4:	6011      	str	r1, [r2, #0]
 8007dd6:	d1e0      	bne.n	8007d9a <_free_r+0x22>
 8007dd8:	6818      	ldr	r0, [r3, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	4408      	add	r0, r1
 8007dde:	6010      	str	r0, [r2, #0]
 8007de0:	6053      	str	r3, [r2, #4]
 8007de2:	e7da      	b.n	8007d9a <_free_r+0x22>
 8007de4:	d902      	bls.n	8007dec <_free_r+0x74>
 8007de6:	230c      	movs	r3, #12
 8007de8:	602b      	str	r3, [r5, #0]
 8007dea:	e7d6      	b.n	8007d9a <_free_r+0x22>
 8007dec:	6820      	ldr	r0, [r4, #0]
 8007dee:	1821      	adds	r1, r4, r0
 8007df0:	428b      	cmp	r3, r1
 8007df2:	bf01      	itttt	eq
 8007df4:	6819      	ldreq	r1, [r3, #0]
 8007df6:	685b      	ldreq	r3, [r3, #4]
 8007df8:	1809      	addeq	r1, r1, r0
 8007dfa:	6021      	streq	r1, [r4, #0]
 8007dfc:	6063      	str	r3, [r4, #4]
 8007dfe:	6054      	str	r4, [r2, #4]
 8007e00:	e7cb      	b.n	8007d9a <_free_r+0x22>
 8007e02:	bd38      	pop	{r3, r4, r5, pc}
 8007e04:	200004ac 	.word	0x200004ac

08007e08 <malloc>:
 8007e08:	4b02      	ldr	r3, [pc, #8]	; (8007e14 <malloc+0xc>)
 8007e0a:	4601      	mov	r1, r0
 8007e0c:	6818      	ldr	r0, [r3, #0]
 8007e0e:	f000 b823 	b.w	8007e58 <_malloc_r>
 8007e12:	bf00      	nop
 8007e14:	20000074 	.word	0x20000074

08007e18 <sbrk_aligned>:
 8007e18:	b570      	push	{r4, r5, r6, lr}
 8007e1a:	4e0e      	ldr	r6, [pc, #56]	; (8007e54 <sbrk_aligned+0x3c>)
 8007e1c:	460c      	mov	r4, r1
 8007e1e:	6831      	ldr	r1, [r6, #0]
 8007e20:	4605      	mov	r5, r0
 8007e22:	b911      	cbnz	r1, 8007e2a <sbrk_aligned+0x12>
 8007e24:	f001 fe0c 	bl	8009a40 <_sbrk_r>
 8007e28:	6030      	str	r0, [r6, #0]
 8007e2a:	4621      	mov	r1, r4
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	f001 fe07 	bl	8009a40 <_sbrk_r>
 8007e32:	1c43      	adds	r3, r0, #1
 8007e34:	d00a      	beq.n	8007e4c <sbrk_aligned+0x34>
 8007e36:	1cc4      	adds	r4, r0, #3
 8007e38:	f024 0403 	bic.w	r4, r4, #3
 8007e3c:	42a0      	cmp	r0, r4
 8007e3e:	d007      	beq.n	8007e50 <sbrk_aligned+0x38>
 8007e40:	1a21      	subs	r1, r4, r0
 8007e42:	4628      	mov	r0, r5
 8007e44:	f001 fdfc 	bl	8009a40 <_sbrk_r>
 8007e48:	3001      	adds	r0, #1
 8007e4a:	d101      	bne.n	8007e50 <sbrk_aligned+0x38>
 8007e4c:	f04f 34ff 	mov.w	r4, #4294967295
 8007e50:	4620      	mov	r0, r4
 8007e52:	bd70      	pop	{r4, r5, r6, pc}
 8007e54:	200004b0 	.word	0x200004b0

08007e58 <_malloc_r>:
 8007e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e5c:	1ccd      	adds	r5, r1, #3
 8007e5e:	f025 0503 	bic.w	r5, r5, #3
 8007e62:	3508      	adds	r5, #8
 8007e64:	2d0c      	cmp	r5, #12
 8007e66:	bf38      	it	cc
 8007e68:	250c      	movcc	r5, #12
 8007e6a:	2d00      	cmp	r5, #0
 8007e6c:	4607      	mov	r7, r0
 8007e6e:	db01      	blt.n	8007e74 <_malloc_r+0x1c>
 8007e70:	42a9      	cmp	r1, r5
 8007e72:	d905      	bls.n	8007e80 <_malloc_r+0x28>
 8007e74:	230c      	movs	r3, #12
 8007e76:	2600      	movs	r6, #0
 8007e78:	603b      	str	r3, [r7, #0]
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e80:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007f54 <_malloc_r+0xfc>
 8007e84:	f000 f868 	bl	8007f58 <__malloc_lock>
 8007e88:	f8d8 3000 	ldr.w	r3, [r8]
 8007e8c:	461c      	mov	r4, r3
 8007e8e:	bb5c      	cbnz	r4, 8007ee8 <_malloc_r+0x90>
 8007e90:	4629      	mov	r1, r5
 8007e92:	4638      	mov	r0, r7
 8007e94:	f7ff ffc0 	bl	8007e18 <sbrk_aligned>
 8007e98:	1c43      	adds	r3, r0, #1
 8007e9a:	4604      	mov	r4, r0
 8007e9c:	d155      	bne.n	8007f4a <_malloc_r+0xf2>
 8007e9e:	f8d8 4000 	ldr.w	r4, [r8]
 8007ea2:	4626      	mov	r6, r4
 8007ea4:	2e00      	cmp	r6, #0
 8007ea6:	d145      	bne.n	8007f34 <_malloc_r+0xdc>
 8007ea8:	2c00      	cmp	r4, #0
 8007eaa:	d048      	beq.n	8007f3e <_malloc_r+0xe6>
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	4631      	mov	r1, r6
 8007eb0:	4638      	mov	r0, r7
 8007eb2:	eb04 0903 	add.w	r9, r4, r3
 8007eb6:	f001 fdc3 	bl	8009a40 <_sbrk_r>
 8007eba:	4581      	cmp	r9, r0
 8007ebc:	d13f      	bne.n	8007f3e <_malloc_r+0xe6>
 8007ebe:	6821      	ldr	r1, [r4, #0]
 8007ec0:	4638      	mov	r0, r7
 8007ec2:	1a6d      	subs	r5, r5, r1
 8007ec4:	4629      	mov	r1, r5
 8007ec6:	f7ff ffa7 	bl	8007e18 <sbrk_aligned>
 8007eca:	3001      	adds	r0, #1
 8007ecc:	d037      	beq.n	8007f3e <_malloc_r+0xe6>
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	442b      	add	r3, r5
 8007ed2:	6023      	str	r3, [r4, #0]
 8007ed4:	f8d8 3000 	ldr.w	r3, [r8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d038      	beq.n	8007f4e <_malloc_r+0xf6>
 8007edc:	685a      	ldr	r2, [r3, #4]
 8007ede:	42a2      	cmp	r2, r4
 8007ee0:	d12b      	bne.n	8007f3a <_malloc_r+0xe2>
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	605a      	str	r2, [r3, #4]
 8007ee6:	e00f      	b.n	8007f08 <_malloc_r+0xb0>
 8007ee8:	6822      	ldr	r2, [r4, #0]
 8007eea:	1b52      	subs	r2, r2, r5
 8007eec:	d41f      	bmi.n	8007f2e <_malloc_r+0xd6>
 8007eee:	2a0b      	cmp	r2, #11
 8007ef0:	d917      	bls.n	8007f22 <_malloc_r+0xca>
 8007ef2:	1961      	adds	r1, r4, r5
 8007ef4:	42a3      	cmp	r3, r4
 8007ef6:	6025      	str	r5, [r4, #0]
 8007ef8:	bf18      	it	ne
 8007efa:	6059      	strne	r1, [r3, #4]
 8007efc:	6863      	ldr	r3, [r4, #4]
 8007efe:	bf08      	it	eq
 8007f00:	f8c8 1000 	streq.w	r1, [r8]
 8007f04:	5162      	str	r2, [r4, r5]
 8007f06:	604b      	str	r3, [r1, #4]
 8007f08:	4638      	mov	r0, r7
 8007f0a:	f104 060b 	add.w	r6, r4, #11
 8007f0e:	f000 f829 	bl	8007f64 <__malloc_unlock>
 8007f12:	f026 0607 	bic.w	r6, r6, #7
 8007f16:	1d23      	adds	r3, r4, #4
 8007f18:	1af2      	subs	r2, r6, r3
 8007f1a:	d0ae      	beq.n	8007e7a <_malloc_r+0x22>
 8007f1c:	1b9b      	subs	r3, r3, r6
 8007f1e:	50a3      	str	r3, [r4, r2]
 8007f20:	e7ab      	b.n	8007e7a <_malloc_r+0x22>
 8007f22:	42a3      	cmp	r3, r4
 8007f24:	6862      	ldr	r2, [r4, #4]
 8007f26:	d1dd      	bne.n	8007ee4 <_malloc_r+0x8c>
 8007f28:	f8c8 2000 	str.w	r2, [r8]
 8007f2c:	e7ec      	b.n	8007f08 <_malloc_r+0xb0>
 8007f2e:	4623      	mov	r3, r4
 8007f30:	6864      	ldr	r4, [r4, #4]
 8007f32:	e7ac      	b.n	8007e8e <_malloc_r+0x36>
 8007f34:	4634      	mov	r4, r6
 8007f36:	6876      	ldr	r6, [r6, #4]
 8007f38:	e7b4      	b.n	8007ea4 <_malloc_r+0x4c>
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	e7cc      	b.n	8007ed8 <_malloc_r+0x80>
 8007f3e:	230c      	movs	r3, #12
 8007f40:	4638      	mov	r0, r7
 8007f42:	603b      	str	r3, [r7, #0]
 8007f44:	f000 f80e 	bl	8007f64 <__malloc_unlock>
 8007f48:	e797      	b.n	8007e7a <_malloc_r+0x22>
 8007f4a:	6025      	str	r5, [r4, #0]
 8007f4c:	e7dc      	b.n	8007f08 <_malloc_r+0xb0>
 8007f4e:	605b      	str	r3, [r3, #4]
 8007f50:	deff      	udf	#255	; 0xff
 8007f52:	bf00      	nop
 8007f54:	200004ac 	.word	0x200004ac

08007f58 <__malloc_lock>:
 8007f58:	4801      	ldr	r0, [pc, #4]	; (8007f60 <__malloc_lock+0x8>)
 8007f5a:	f7ff b888 	b.w	800706e <__retarget_lock_acquire_recursive>
 8007f5e:	bf00      	nop
 8007f60:	200004a8 	.word	0x200004a8

08007f64 <__malloc_unlock>:
 8007f64:	4801      	ldr	r0, [pc, #4]	; (8007f6c <__malloc_unlock+0x8>)
 8007f66:	f7ff b883 	b.w	8007070 <__retarget_lock_release_recursive>
 8007f6a:	bf00      	nop
 8007f6c:	200004a8 	.word	0x200004a8

08007f70 <_Balloc>:
 8007f70:	b570      	push	{r4, r5, r6, lr}
 8007f72:	69c6      	ldr	r6, [r0, #28]
 8007f74:	4604      	mov	r4, r0
 8007f76:	460d      	mov	r5, r1
 8007f78:	b976      	cbnz	r6, 8007f98 <_Balloc+0x28>
 8007f7a:	2010      	movs	r0, #16
 8007f7c:	f7ff ff44 	bl	8007e08 <malloc>
 8007f80:	4602      	mov	r2, r0
 8007f82:	61e0      	str	r0, [r4, #28]
 8007f84:	b920      	cbnz	r0, 8007f90 <_Balloc+0x20>
 8007f86:	216b      	movs	r1, #107	; 0x6b
 8007f88:	4b17      	ldr	r3, [pc, #92]	; (8007fe8 <_Balloc+0x78>)
 8007f8a:	4818      	ldr	r0, [pc, #96]	; (8007fec <_Balloc+0x7c>)
 8007f8c:	f001 fd7c 	bl	8009a88 <__assert_func>
 8007f90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f94:	6006      	str	r6, [r0, #0]
 8007f96:	60c6      	str	r6, [r0, #12]
 8007f98:	69e6      	ldr	r6, [r4, #28]
 8007f9a:	68f3      	ldr	r3, [r6, #12]
 8007f9c:	b183      	cbz	r3, 8007fc0 <_Balloc+0x50>
 8007f9e:	69e3      	ldr	r3, [r4, #28]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007fa6:	b9b8      	cbnz	r0, 8007fd8 <_Balloc+0x68>
 8007fa8:	2101      	movs	r1, #1
 8007faa:	fa01 f605 	lsl.w	r6, r1, r5
 8007fae:	1d72      	adds	r2, r6, #5
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	0092      	lsls	r2, r2, #2
 8007fb4:	f001 fd86 	bl	8009ac4 <_calloc_r>
 8007fb8:	b160      	cbz	r0, 8007fd4 <_Balloc+0x64>
 8007fba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007fbe:	e00e      	b.n	8007fde <_Balloc+0x6e>
 8007fc0:	2221      	movs	r2, #33	; 0x21
 8007fc2:	2104      	movs	r1, #4
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	f001 fd7d 	bl	8009ac4 <_calloc_r>
 8007fca:	69e3      	ldr	r3, [r4, #28]
 8007fcc:	60f0      	str	r0, [r6, #12]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1e4      	bne.n	8007f9e <_Balloc+0x2e>
 8007fd4:	2000      	movs	r0, #0
 8007fd6:	bd70      	pop	{r4, r5, r6, pc}
 8007fd8:	6802      	ldr	r2, [r0, #0]
 8007fda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007fde:	2300      	movs	r3, #0
 8007fe0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fe4:	e7f7      	b.n	8007fd6 <_Balloc+0x66>
 8007fe6:	bf00      	nop
 8007fe8:	0800a868 	.word	0x0800a868
 8007fec:	0800a8e8 	.word	0x0800a8e8

08007ff0 <_Bfree>:
 8007ff0:	b570      	push	{r4, r5, r6, lr}
 8007ff2:	69c6      	ldr	r6, [r0, #28]
 8007ff4:	4605      	mov	r5, r0
 8007ff6:	460c      	mov	r4, r1
 8007ff8:	b976      	cbnz	r6, 8008018 <_Bfree+0x28>
 8007ffa:	2010      	movs	r0, #16
 8007ffc:	f7ff ff04 	bl	8007e08 <malloc>
 8008000:	4602      	mov	r2, r0
 8008002:	61e8      	str	r0, [r5, #28]
 8008004:	b920      	cbnz	r0, 8008010 <_Bfree+0x20>
 8008006:	218f      	movs	r1, #143	; 0x8f
 8008008:	4b08      	ldr	r3, [pc, #32]	; (800802c <_Bfree+0x3c>)
 800800a:	4809      	ldr	r0, [pc, #36]	; (8008030 <_Bfree+0x40>)
 800800c:	f001 fd3c 	bl	8009a88 <__assert_func>
 8008010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008014:	6006      	str	r6, [r0, #0]
 8008016:	60c6      	str	r6, [r0, #12]
 8008018:	b13c      	cbz	r4, 800802a <_Bfree+0x3a>
 800801a:	69eb      	ldr	r3, [r5, #28]
 800801c:	6862      	ldr	r2, [r4, #4]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008024:	6021      	str	r1, [r4, #0]
 8008026:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800802a:	bd70      	pop	{r4, r5, r6, pc}
 800802c:	0800a868 	.word	0x0800a868
 8008030:	0800a8e8 	.word	0x0800a8e8

08008034 <__multadd>:
 8008034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008038:	4607      	mov	r7, r0
 800803a:	460c      	mov	r4, r1
 800803c:	461e      	mov	r6, r3
 800803e:	2000      	movs	r0, #0
 8008040:	690d      	ldr	r5, [r1, #16]
 8008042:	f101 0c14 	add.w	ip, r1, #20
 8008046:	f8dc 3000 	ldr.w	r3, [ip]
 800804a:	3001      	adds	r0, #1
 800804c:	b299      	uxth	r1, r3
 800804e:	fb02 6101 	mla	r1, r2, r1, r6
 8008052:	0c1e      	lsrs	r6, r3, #16
 8008054:	0c0b      	lsrs	r3, r1, #16
 8008056:	fb02 3306 	mla	r3, r2, r6, r3
 800805a:	b289      	uxth	r1, r1
 800805c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008060:	4285      	cmp	r5, r0
 8008062:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008066:	f84c 1b04 	str.w	r1, [ip], #4
 800806a:	dcec      	bgt.n	8008046 <__multadd+0x12>
 800806c:	b30e      	cbz	r6, 80080b2 <__multadd+0x7e>
 800806e:	68a3      	ldr	r3, [r4, #8]
 8008070:	42ab      	cmp	r3, r5
 8008072:	dc19      	bgt.n	80080a8 <__multadd+0x74>
 8008074:	6861      	ldr	r1, [r4, #4]
 8008076:	4638      	mov	r0, r7
 8008078:	3101      	adds	r1, #1
 800807a:	f7ff ff79 	bl	8007f70 <_Balloc>
 800807e:	4680      	mov	r8, r0
 8008080:	b928      	cbnz	r0, 800808e <__multadd+0x5a>
 8008082:	4602      	mov	r2, r0
 8008084:	21ba      	movs	r1, #186	; 0xba
 8008086:	4b0c      	ldr	r3, [pc, #48]	; (80080b8 <__multadd+0x84>)
 8008088:	480c      	ldr	r0, [pc, #48]	; (80080bc <__multadd+0x88>)
 800808a:	f001 fcfd 	bl	8009a88 <__assert_func>
 800808e:	6922      	ldr	r2, [r4, #16]
 8008090:	f104 010c 	add.w	r1, r4, #12
 8008094:	3202      	adds	r2, #2
 8008096:	0092      	lsls	r2, r2, #2
 8008098:	300c      	adds	r0, #12
 800809a:	f001 fce1 	bl	8009a60 <memcpy>
 800809e:	4621      	mov	r1, r4
 80080a0:	4638      	mov	r0, r7
 80080a2:	f7ff ffa5 	bl	8007ff0 <_Bfree>
 80080a6:	4644      	mov	r4, r8
 80080a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080ac:	3501      	adds	r5, #1
 80080ae:	615e      	str	r6, [r3, #20]
 80080b0:	6125      	str	r5, [r4, #16]
 80080b2:	4620      	mov	r0, r4
 80080b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080b8:	0800a8d7 	.word	0x0800a8d7
 80080bc:	0800a8e8 	.word	0x0800a8e8

080080c0 <__s2b>:
 80080c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080c4:	4615      	mov	r5, r2
 80080c6:	2209      	movs	r2, #9
 80080c8:	461f      	mov	r7, r3
 80080ca:	3308      	adds	r3, #8
 80080cc:	460c      	mov	r4, r1
 80080ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80080d2:	4606      	mov	r6, r0
 80080d4:	2201      	movs	r2, #1
 80080d6:	2100      	movs	r1, #0
 80080d8:	429a      	cmp	r2, r3
 80080da:	db09      	blt.n	80080f0 <__s2b+0x30>
 80080dc:	4630      	mov	r0, r6
 80080de:	f7ff ff47 	bl	8007f70 <_Balloc>
 80080e2:	b940      	cbnz	r0, 80080f6 <__s2b+0x36>
 80080e4:	4602      	mov	r2, r0
 80080e6:	21d3      	movs	r1, #211	; 0xd3
 80080e8:	4b18      	ldr	r3, [pc, #96]	; (800814c <__s2b+0x8c>)
 80080ea:	4819      	ldr	r0, [pc, #100]	; (8008150 <__s2b+0x90>)
 80080ec:	f001 fccc 	bl	8009a88 <__assert_func>
 80080f0:	0052      	lsls	r2, r2, #1
 80080f2:	3101      	adds	r1, #1
 80080f4:	e7f0      	b.n	80080d8 <__s2b+0x18>
 80080f6:	9b08      	ldr	r3, [sp, #32]
 80080f8:	2d09      	cmp	r5, #9
 80080fa:	6143      	str	r3, [r0, #20]
 80080fc:	f04f 0301 	mov.w	r3, #1
 8008100:	6103      	str	r3, [r0, #16]
 8008102:	dd16      	ble.n	8008132 <__s2b+0x72>
 8008104:	f104 0909 	add.w	r9, r4, #9
 8008108:	46c8      	mov	r8, r9
 800810a:	442c      	add	r4, r5
 800810c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008110:	4601      	mov	r1, r0
 8008112:	220a      	movs	r2, #10
 8008114:	4630      	mov	r0, r6
 8008116:	3b30      	subs	r3, #48	; 0x30
 8008118:	f7ff ff8c 	bl	8008034 <__multadd>
 800811c:	45a0      	cmp	r8, r4
 800811e:	d1f5      	bne.n	800810c <__s2b+0x4c>
 8008120:	f1a5 0408 	sub.w	r4, r5, #8
 8008124:	444c      	add	r4, r9
 8008126:	1b2d      	subs	r5, r5, r4
 8008128:	1963      	adds	r3, r4, r5
 800812a:	42bb      	cmp	r3, r7
 800812c:	db04      	blt.n	8008138 <__s2b+0x78>
 800812e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008132:	2509      	movs	r5, #9
 8008134:	340a      	adds	r4, #10
 8008136:	e7f6      	b.n	8008126 <__s2b+0x66>
 8008138:	f814 3b01 	ldrb.w	r3, [r4], #1
 800813c:	4601      	mov	r1, r0
 800813e:	220a      	movs	r2, #10
 8008140:	4630      	mov	r0, r6
 8008142:	3b30      	subs	r3, #48	; 0x30
 8008144:	f7ff ff76 	bl	8008034 <__multadd>
 8008148:	e7ee      	b.n	8008128 <__s2b+0x68>
 800814a:	bf00      	nop
 800814c:	0800a8d7 	.word	0x0800a8d7
 8008150:	0800a8e8 	.word	0x0800a8e8

08008154 <__hi0bits>:
 8008154:	0c02      	lsrs	r2, r0, #16
 8008156:	0412      	lsls	r2, r2, #16
 8008158:	4603      	mov	r3, r0
 800815a:	b9ca      	cbnz	r2, 8008190 <__hi0bits+0x3c>
 800815c:	0403      	lsls	r3, r0, #16
 800815e:	2010      	movs	r0, #16
 8008160:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008164:	bf04      	itt	eq
 8008166:	021b      	lsleq	r3, r3, #8
 8008168:	3008      	addeq	r0, #8
 800816a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800816e:	bf04      	itt	eq
 8008170:	011b      	lsleq	r3, r3, #4
 8008172:	3004      	addeq	r0, #4
 8008174:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008178:	bf04      	itt	eq
 800817a:	009b      	lsleq	r3, r3, #2
 800817c:	3002      	addeq	r0, #2
 800817e:	2b00      	cmp	r3, #0
 8008180:	db05      	blt.n	800818e <__hi0bits+0x3a>
 8008182:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008186:	f100 0001 	add.w	r0, r0, #1
 800818a:	bf08      	it	eq
 800818c:	2020      	moveq	r0, #32
 800818e:	4770      	bx	lr
 8008190:	2000      	movs	r0, #0
 8008192:	e7e5      	b.n	8008160 <__hi0bits+0xc>

08008194 <__lo0bits>:
 8008194:	6803      	ldr	r3, [r0, #0]
 8008196:	4602      	mov	r2, r0
 8008198:	f013 0007 	ands.w	r0, r3, #7
 800819c:	d00b      	beq.n	80081b6 <__lo0bits+0x22>
 800819e:	07d9      	lsls	r1, r3, #31
 80081a0:	d421      	bmi.n	80081e6 <__lo0bits+0x52>
 80081a2:	0798      	lsls	r0, r3, #30
 80081a4:	bf49      	itett	mi
 80081a6:	085b      	lsrmi	r3, r3, #1
 80081a8:	089b      	lsrpl	r3, r3, #2
 80081aa:	2001      	movmi	r0, #1
 80081ac:	6013      	strmi	r3, [r2, #0]
 80081ae:	bf5c      	itt	pl
 80081b0:	2002      	movpl	r0, #2
 80081b2:	6013      	strpl	r3, [r2, #0]
 80081b4:	4770      	bx	lr
 80081b6:	b299      	uxth	r1, r3
 80081b8:	b909      	cbnz	r1, 80081be <__lo0bits+0x2a>
 80081ba:	2010      	movs	r0, #16
 80081bc:	0c1b      	lsrs	r3, r3, #16
 80081be:	b2d9      	uxtb	r1, r3
 80081c0:	b909      	cbnz	r1, 80081c6 <__lo0bits+0x32>
 80081c2:	3008      	adds	r0, #8
 80081c4:	0a1b      	lsrs	r3, r3, #8
 80081c6:	0719      	lsls	r1, r3, #28
 80081c8:	bf04      	itt	eq
 80081ca:	091b      	lsreq	r3, r3, #4
 80081cc:	3004      	addeq	r0, #4
 80081ce:	0799      	lsls	r1, r3, #30
 80081d0:	bf04      	itt	eq
 80081d2:	089b      	lsreq	r3, r3, #2
 80081d4:	3002      	addeq	r0, #2
 80081d6:	07d9      	lsls	r1, r3, #31
 80081d8:	d403      	bmi.n	80081e2 <__lo0bits+0x4e>
 80081da:	085b      	lsrs	r3, r3, #1
 80081dc:	f100 0001 	add.w	r0, r0, #1
 80081e0:	d003      	beq.n	80081ea <__lo0bits+0x56>
 80081e2:	6013      	str	r3, [r2, #0]
 80081e4:	4770      	bx	lr
 80081e6:	2000      	movs	r0, #0
 80081e8:	4770      	bx	lr
 80081ea:	2020      	movs	r0, #32
 80081ec:	4770      	bx	lr
	...

080081f0 <__i2b>:
 80081f0:	b510      	push	{r4, lr}
 80081f2:	460c      	mov	r4, r1
 80081f4:	2101      	movs	r1, #1
 80081f6:	f7ff febb 	bl	8007f70 <_Balloc>
 80081fa:	4602      	mov	r2, r0
 80081fc:	b928      	cbnz	r0, 800820a <__i2b+0x1a>
 80081fe:	f240 1145 	movw	r1, #325	; 0x145
 8008202:	4b04      	ldr	r3, [pc, #16]	; (8008214 <__i2b+0x24>)
 8008204:	4804      	ldr	r0, [pc, #16]	; (8008218 <__i2b+0x28>)
 8008206:	f001 fc3f 	bl	8009a88 <__assert_func>
 800820a:	2301      	movs	r3, #1
 800820c:	6144      	str	r4, [r0, #20]
 800820e:	6103      	str	r3, [r0, #16]
 8008210:	bd10      	pop	{r4, pc}
 8008212:	bf00      	nop
 8008214:	0800a8d7 	.word	0x0800a8d7
 8008218:	0800a8e8 	.word	0x0800a8e8

0800821c <__multiply>:
 800821c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008220:	4691      	mov	r9, r2
 8008222:	690a      	ldr	r2, [r1, #16]
 8008224:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008228:	460c      	mov	r4, r1
 800822a:	429a      	cmp	r2, r3
 800822c:	bfbe      	ittt	lt
 800822e:	460b      	movlt	r3, r1
 8008230:	464c      	movlt	r4, r9
 8008232:	4699      	movlt	r9, r3
 8008234:	6927      	ldr	r7, [r4, #16]
 8008236:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800823a:	68a3      	ldr	r3, [r4, #8]
 800823c:	6861      	ldr	r1, [r4, #4]
 800823e:	eb07 060a 	add.w	r6, r7, sl
 8008242:	42b3      	cmp	r3, r6
 8008244:	b085      	sub	sp, #20
 8008246:	bfb8      	it	lt
 8008248:	3101      	addlt	r1, #1
 800824a:	f7ff fe91 	bl	8007f70 <_Balloc>
 800824e:	b930      	cbnz	r0, 800825e <__multiply+0x42>
 8008250:	4602      	mov	r2, r0
 8008252:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008256:	4b43      	ldr	r3, [pc, #268]	; (8008364 <__multiply+0x148>)
 8008258:	4843      	ldr	r0, [pc, #268]	; (8008368 <__multiply+0x14c>)
 800825a:	f001 fc15 	bl	8009a88 <__assert_func>
 800825e:	f100 0514 	add.w	r5, r0, #20
 8008262:	462b      	mov	r3, r5
 8008264:	2200      	movs	r2, #0
 8008266:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800826a:	4543      	cmp	r3, r8
 800826c:	d321      	bcc.n	80082b2 <__multiply+0x96>
 800826e:	f104 0314 	add.w	r3, r4, #20
 8008272:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008276:	f109 0314 	add.w	r3, r9, #20
 800827a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800827e:	9202      	str	r2, [sp, #8]
 8008280:	1b3a      	subs	r2, r7, r4
 8008282:	3a15      	subs	r2, #21
 8008284:	f022 0203 	bic.w	r2, r2, #3
 8008288:	3204      	adds	r2, #4
 800828a:	f104 0115 	add.w	r1, r4, #21
 800828e:	428f      	cmp	r7, r1
 8008290:	bf38      	it	cc
 8008292:	2204      	movcc	r2, #4
 8008294:	9201      	str	r2, [sp, #4]
 8008296:	9a02      	ldr	r2, [sp, #8]
 8008298:	9303      	str	r3, [sp, #12]
 800829a:	429a      	cmp	r2, r3
 800829c:	d80c      	bhi.n	80082b8 <__multiply+0x9c>
 800829e:	2e00      	cmp	r6, #0
 80082a0:	dd03      	ble.n	80082aa <__multiply+0x8e>
 80082a2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d05a      	beq.n	8008360 <__multiply+0x144>
 80082aa:	6106      	str	r6, [r0, #16]
 80082ac:	b005      	add	sp, #20
 80082ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b2:	f843 2b04 	str.w	r2, [r3], #4
 80082b6:	e7d8      	b.n	800826a <__multiply+0x4e>
 80082b8:	f8b3 a000 	ldrh.w	sl, [r3]
 80082bc:	f1ba 0f00 	cmp.w	sl, #0
 80082c0:	d023      	beq.n	800830a <__multiply+0xee>
 80082c2:	46a9      	mov	r9, r5
 80082c4:	f04f 0c00 	mov.w	ip, #0
 80082c8:	f104 0e14 	add.w	lr, r4, #20
 80082cc:	f85e 2b04 	ldr.w	r2, [lr], #4
 80082d0:	f8d9 1000 	ldr.w	r1, [r9]
 80082d4:	fa1f fb82 	uxth.w	fp, r2
 80082d8:	b289      	uxth	r1, r1
 80082da:	fb0a 110b 	mla	r1, sl, fp, r1
 80082de:	4461      	add	r1, ip
 80082e0:	f8d9 c000 	ldr.w	ip, [r9]
 80082e4:	0c12      	lsrs	r2, r2, #16
 80082e6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80082ea:	fb0a c202 	mla	r2, sl, r2, ip
 80082ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80082f2:	b289      	uxth	r1, r1
 80082f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80082f8:	4577      	cmp	r7, lr
 80082fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80082fe:	f849 1b04 	str.w	r1, [r9], #4
 8008302:	d8e3      	bhi.n	80082cc <__multiply+0xb0>
 8008304:	9a01      	ldr	r2, [sp, #4]
 8008306:	f845 c002 	str.w	ip, [r5, r2]
 800830a:	9a03      	ldr	r2, [sp, #12]
 800830c:	3304      	adds	r3, #4
 800830e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008312:	f1b9 0f00 	cmp.w	r9, #0
 8008316:	d021      	beq.n	800835c <__multiply+0x140>
 8008318:	46ae      	mov	lr, r5
 800831a:	f04f 0a00 	mov.w	sl, #0
 800831e:	6829      	ldr	r1, [r5, #0]
 8008320:	f104 0c14 	add.w	ip, r4, #20
 8008324:	f8bc b000 	ldrh.w	fp, [ip]
 8008328:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800832c:	b289      	uxth	r1, r1
 800832e:	fb09 220b 	mla	r2, r9, fp, r2
 8008332:	4452      	add	r2, sl
 8008334:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008338:	f84e 1b04 	str.w	r1, [lr], #4
 800833c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008340:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008344:	f8be 1000 	ldrh.w	r1, [lr]
 8008348:	4567      	cmp	r7, ip
 800834a:	fb09 110a 	mla	r1, r9, sl, r1
 800834e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008352:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008356:	d8e5      	bhi.n	8008324 <__multiply+0x108>
 8008358:	9a01      	ldr	r2, [sp, #4]
 800835a:	50a9      	str	r1, [r5, r2]
 800835c:	3504      	adds	r5, #4
 800835e:	e79a      	b.n	8008296 <__multiply+0x7a>
 8008360:	3e01      	subs	r6, #1
 8008362:	e79c      	b.n	800829e <__multiply+0x82>
 8008364:	0800a8d7 	.word	0x0800a8d7
 8008368:	0800a8e8 	.word	0x0800a8e8

0800836c <__pow5mult>:
 800836c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008370:	4615      	mov	r5, r2
 8008372:	f012 0203 	ands.w	r2, r2, #3
 8008376:	4606      	mov	r6, r0
 8008378:	460f      	mov	r7, r1
 800837a:	d007      	beq.n	800838c <__pow5mult+0x20>
 800837c:	4c25      	ldr	r4, [pc, #148]	; (8008414 <__pow5mult+0xa8>)
 800837e:	3a01      	subs	r2, #1
 8008380:	2300      	movs	r3, #0
 8008382:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008386:	f7ff fe55 	bl	8008034 <__multadd>
 800838a:	4607      	mov	r7, r0
 800838c:	10ad      	asrs	r5, r5, #2
 800838e:	d03d      	beq.n	800840c <__pow5mult+0xa0>
 8008390:	69f4      	ldr	r4, [r6, #28]
 8008392:	b97c      	cbnz	r4, 80083b4 <__pow5mult+0x48>
 8008394:	2010      	movs	r0, #16
 8008396:	f7ff fd37 	bl	8007e08 <malloc>
 800839a:	4602      	mov	r2, r0
 800839c:	61f0      	str	r0, [r6, #28]
 800839e:	b928      	cbnz	r0, 80083ac <__pow5mult+0x40>
 80083a0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80083a4:	4b1c      	ldr	r3, [pc, #112]	; (8008418 <__pow5mult+0xac>)
 80083a6:	481d      	ldr	r0, [pc, #116]	; (800841c <__pow5mult+0xb0>)
 80083a8:	f001 fb6e 	bl	8009a88 <__assert_func>
 80083ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083b0:	6004      	str	r4, [r0, #0]
 80083b2:	60c4      	str	r4, [r0, #12]
 80083b4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80083b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083bc:	b94c      	cbnz	r4, 80083d2 <__pow5mult+0x66>
 80083be:	f240 2171 	movw	r1, #625	; 0x271
 80083c2:	4630      	mov	r0, r6
 80083c4:	f7ff ff14 	bl	80081f0 <__i2b>
 80083c8:	2300      	movs	r3, #0
 80083ca:	4604      	mov	r4, r0
 80083cc:	f8c8 0008 	str.w	r0, [r8, #8]
 80083d0:	6003      	str	r3, [r0, #0]
 80083d2:	f04f 0900 	mov.w	r9, #0
 80083d6:	07eb      	lsls	r3, r5, #31
 80083d8:	d50a      	bpl.n	80083f0 <__pow5mult+0x84>
 80083da:	4639      	mov	r1, r7
 80083dc:	4622      	mov	r2, r4
 80083de:	4630      	mov	r0, r6
 80083e0:	f7ff ff1c 	bl	800821c <__multiply>
 80083e4:	4680      	mov	r8, r0
 80083e6:	4639      	mov	r1, r7
 80083e8:	4630      	mov	r0, r6
 80083ea:	f7ff fe01 	bl	8007ff0 <_Bfree>
 80083ee:	4647      	mov	r7, r8
 80083f0:	106d      	asrs	r5, r5, #1
 80083f2:	d00b      	beq.n	800840c <__pow5mult+0xa0>
 80083f4:	6820      	ldr	r0, [r4, #0]
 80083f6:	b938      	cbnz	r0, 8008408 <__pow5mult+0x9c>
 80083f8:	4622      	mov	r2, r4
 80083fa:	4621      	mov	r1, r4
 80083fc:	4630      	mov	r0, r6
 80083fe:	f7ff ff0d 	bl	800821c <__multiply>
 8008402:	6020      	str	r0, [r4, #0]
 8008404:	f8c0 9000 	str.w	r9, [r0]
 8008408:	4604      	mov	r4, r0
 800840a:	e7e4      	b.n	80083d6 <__pow5mult+0x6a>
 800840c:	4638      	mov	r0, r7
 800840e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008412:	bf00      	nop
 8008414:	0800aa38 	.word	0x0800aa38
 8008418:	0800a868 	.word	0x0800a868
 800841c:	0800a8e8 	.word	0x0800a8e8

08008420 <__lshift>:
 8008420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008424:	460c      	mov	r4, r1
 8008426:	4607      	mov	r7, r0
 8008428:	4691      	mov	r9, r2
 800842a:	6923      	ldr	r3, [r4, #16]
 800842c:	6849      	ldr	r1, [r1, #4]
 800842e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008432:	68a3      	ldr	r3, [r4, #8]
 8008434:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008438:	f108 0601 	add.w	r6, r8, #1
 800843c:	42b3      	cmp	r3, r6
 800843e:	db0b      	blt.n	8008458 <__lshift+0x38>
 8008440:	4638      	mov	r0, r7
 8008442:	f7ff fd95 	bl	8007f70 <_Balloc>
 8008446:	4605      	mov	r5, r0
 8008448:	b948      	cbnz	r0, 800845e <__lshift+0x3e>
 800844a:	4602      	mov	r2, r0
 800844c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008450:	4b27      	ldr	r3, [pc, #156]	; (80084f0 <__lshift+0xd0>)
 8008452:	4828      	ldr	r0, [pc, #160]	; (80084f4 <__lshift+0xd4>)
 8008454:	f001 fb18 	bl	8009a88 <__assert_func>
 8008458:	3101      	adds	r1, #1
 800845a:	005b      	lsls	r3, r3, #1
 800845c:	e7ee      	b.n	800843c <__lshift+0x1c>
 800845e:	2300      	movs	r3, #0
 8008460:	f100 0114 	add.w	r1, r0, #20
 8008464:	f100 0210 	add.w	r2, r0, #16
 8008468:	4618      	mov	r0, r3
 800846a:	4553      	cmp	r3, sl
 800846c:	db33      	blt.n	80084d6 <__lshift+0xb6>
 800846e:	6920      	ldr	r0, [r4, #16]
 8008470:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008474:	f104 0314 	add.w	r3, r4, #20
 8008478:	f019 091f 	ands.w	r9, r9, #31
 800847c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008480:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008484:	d02b      	beq.n	80084de <__lshift+0xbe>
 8008486:	468a      	mov	sl, r1
 8008488:	2200      	movs	r2, #0
 800848a:	f1c9 0e20 	rsb	lr, r9, #32
 800848e:	6818      	ldr	r0, [r3, #0]
 8008490:	fa00 f009 	lsl.w	r0, r0, r9
 8008494:	4310      	orrs	r0, r2
 8008496:	f84a 0b04 	str.w	r0, [sl], #4
 800849a:	f853 2b04 	ldr.w	r2, [r3], #4
 800849e:	459c      	cmp	ip, r3
 80084a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80084a4:	d8f3      	bhi.n	800848e <__lshift+0x6e>
 80084a6:	ebac 0304 	sub.w	r3, ip, r4
 80084aa:	3b15      	subs	r3, #21
 80084ac:	f023 0303 	bic.w	r3, r3, #3
 80084b0:	3304      	adds	r3, #4
 80084b2:	f104 0015 	add.w	r0, r4, #21
 80084b6:	4584      	cmp	ip, r0
 80084b8:	bf38      	it	cc
 80084ba:	2304      	movcc	r3, #4
 80084bc:	50ca      	str	r2, [r1, r3]
 80084be:	b10a      	cbz	r2, 80084c4 <__lshift+0xa4>
 80084c0:	f108 0602 	add.w	r6, r8, #2
 80084c4:	3e01      	subs	r6, #1
 80084c6:	4638      	mov	r0, r7
 80084c8:	4621      	mov	r1, r4
 80084ca:	612e      	str	r6, [r5, #16]
 80084cc:	f7ff fd90 	bl	8007ff0 <_Bfree>
 80084d0:	4628      	mov	r0, r5
 80084d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80084da:	3301      	adds	r3, #1
 80084dc:	e7c5      	b.n	800846a <__lshift+0x4a>
 80084de:	3904      	subs	r1, #4
 80084e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80084e4:	459c      	cmp	ip, r3
 80084e6:	f841 2f04 	str.w	r2, [r1, #4]!
 80084ea:	d8f9      	bhi.n	80084e0 <__lshift+0xc0>
 80084ec:	e7ea      	b.n	80084c4 <__lshift+0xa4>
 80084ee:	bf00      	nop
 80084f0:	0800a8d7 	.word	0x0800a8d7
 80084f4:	0800a8e8 	.word	0x0800a8e8

080084f8 <__mcmp>:
 80084f8:	4603      	mov	r3, r0
 80084fa:	690a      	ldr	r2, [r1, #16]
 80084fc:	6900      	ldr	r0, [r0, #16]
 80084fe:	b530      	push	{r4, r5, lr}
 8008500:	1a80      	subs	r0, r0, r2
 8008502:	d10d      	bne.n	8008520 <__mcmp+0x28>
 8008504:	3314      	adds	r3, #20
 8008506:	3114      	adds	r1, #20
 8008508:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800850c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008510:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008514:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008518:	4295      	cmp	r5, r2
 800851a:	d002      	beq.n	8008522 <__mcmp+0x2a>
 800851c:	d304      	bcc.n	8008528 <__mcmp+0x30>
 800851e:	2001      	movs	r0, #1
 8008520:	bd30      	pop	{r4, r5, pc}
 8008522:	42a3      	cmp	r3, r4
 8008524:	d3f4      	bcc.n	8008510 <__mcmp+0x18>
 8008526:	e7fb      	b.n	8008520 <__mcmp+0x28>
 8008528:	f04f 30ff 	mov.w	r0, #4294967295
 800852c:	e7f8      	b.n	8008520 <__mcmp+0x28>
	...

08008530 <__mdiff>:
 8008530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008534:	460d      	mov	r5, r1
 8008536:	4607      	mov	r7, r0
 8008538:	4611      	mov	r1, r2
 800853a:	4628      	mov	r0, r5
 800853c:	4614      	mov	r4, r2
 800853e:	f7ff ffdb 	bl	80084f8 <__mcmp>
 8008542:	1e06      	subs	r6, r0, #0
 8008544:	d111      	bne.n	800856a <__mdiff+0x3a>
 8008546:	4631      	mov	r1, r6
 8008548:	4638      	mov	r0, r7
 800854a:	f7ff fd11 	bl	8007f70 <_Balloc>
 800854e:	4602      	mov	r2, r0
 8008550:	b928      	cbnz	r0, 800855e <__mdiff+0x2e>
 8008552:	f240 2137 	movw	r1, #567	; 0x237
 8008556:	4b3a      	ldr	r3, [pc, #232]	; (8008640 <__mdiff+0x110>)
 8008558:	483a      	ldr	r0, [pc, #232]	; (8008644 <__mdiff+0x114>)
 800855a:	f001 fa95 	bl	8009a88 <__assert_func>
 800855e:	2301      	movs	r3, #1
 8008560:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008564:	4610      	mov	r0, r2
 8008566:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800856a:	bfa4      	itt	ge
 800856c:	4623      	movge	r3, r4
 800856e:	462c      	movge	r4, r5
 8008570:	4638      	mov	r0, r7
 8008572:	6861      	ldr	r1, [r4, #4]
 8008574:	bfa6      	itte	ge
 8008576:	461d      	movge	r5, r3
 8008578:	2600      	movge	r6, #0
 800857a:	2601      	movlt	r6, #1
 800857c:	f7ff fcf8 	bl	8007f70 <_Balloc>
 8008580:	4602      	mov	r2, r0
 8008582:	b918      	cbnz	r0, 800858c <__mdiff+0x5c>
 8008584:	f240 2145 	movw	r1, #581	; 0x245
 8008588:	4b2d      	ldr	r3, [pc, #180]	; (8008640 <__mdiff+0x110>)
 800858a:	e7e5      	b.n	8008558 <__mdiff+0x28>
 800858c:	f102 0814 	add.w	r8, r2, #20
 8008590:	46c2      	mov	sl, r8
 8008592:	f04f 0c00 	mov.w	ip, #0
 8008596:	6927      	ldr	r7, [r4, #16]
 8008598:	60c6      	str	r6, [r0, #12]
 800859a:	692e      	ldr	r6, [r5, #16]
 800859c:	f104 0014 	add.w	r0, r4, #20
 80085a0:	f105 0914 	add.w	r9, r5, #20
 80085a4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80085a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80085ac:	3410      	adds	r4, #16
 80085ae:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80085b2:	f859 3b04 	ldr.w	r3, [r9], #4
 80085b6:	fa1f f18b 	uxth.w	r1, fp
 80085ba:	4461      	add	r1, ip
 80085bc:	fa1f fc83 	uxth.w	ip, r3
 80085c0:	0c1b      	lsrs	r3, r3, #16
 80085c2:	eba1 010c 	sub.w	r1, r1, ip
 80085c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80085ca:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80085ce:	b289      	uxth	r1, r1
 80085d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80085d4:	454e      	cmp	r6, r9
 80085d6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80085da:	f84a 1b04 	str.w	r1, [sl], #4
 80085de:	d8e6      	bhi.n	80085ae <__mdiff+0x7e>
 80085e0:	1b73      	subs	r3, r6, r5
 80085e2:	3b15      	subs	r3, #21
 80085e4:	f023 0303 	bic.w	r3, r3, #3
 80085e8:	3515      	adds	r5, #21
 80085ea:	3304      	adds	r3, #4
 80085ec:	42ae      	cmp	r6, r5
 80085ee:	bf38      	it	cc
 80085f0:	2304      	movcc	r3, #4
 80085f2:	4418      	add	r0, r3
 80085f4:	4443      	add	r3, r8
 80085f6:	461e      	mov	r6, r3
 80085f8:	4605      	mov	r5, r0
 80085fa:	4575      	cmp	r5, lr
 80085fc:	d30e      	bcc.n	800861c <__mdiff+0xec>
 80085fe:	f10e 0103 	add.w	r1, lr, #3
 8008602:	1a09      	subs	r1, r1, r0
 8008604:	f021 0103 	bic.w	r1, r1, #3
 8008608:	3803      	subs	r0, #3
 800860a:	4586      	cmp	lr, r0
 800860c:	bf38      	it	cc
 800860e:	2100      	movcc	r1, #0
 8008610:	440b      	add	r3, r1
 8008612:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008616:	b189      	cbz	r1, 800863c <__mdiff+0x10c>
 8008618:	6117      	str	r7, [r2, #16]
 800861a:	e7a3      	b.n	8008564 <__mdiff+0x34>
 800861c:	f855 8b04 	ldr.w	r8, [r5], #4
 8008620:	fa1f f188 	uxth.w	r1, r8
 8008624:	4461      	add	r1, ip
 8008626:	140c      	asrs	r4, r1, #16
 8008628:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800862c:	b289      	uxth	r1, r1
 800862e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008632:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008636:	f846 1b04 	str.w	r1, [r6], #4
 800863a:	e7de      	b.n	80085fa <__mdiff+0xca>
 800863c:	3f01      	subs	r7, #1
 800863e:	e7e8      	b.n	8008612 <__mdiff+0xe2>
 8008640:	0800a8d7 	.word	0x0800a8d7
 8008644:	0800a8e8 	.word	0x0800a8e8

08008648 <__ulp>:
 8008648:	4b0e      	ldr	r3, [pc, #56]	; (8008684 <__ulp+0x3c>)
 800864a:	400b      	ands	r3, r1
 800864c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008650:	2b00      	cmp	r3, #0
 8008652:	dc08      	bgt.n	8008666 <__ulp+0x1e>
 8008654:	425b      	negs	r3, r3
 8008656:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800865a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800865e:	da04      	bge.n	800866a <__ulp+0x22>
 8008660:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008664:	4113      	asrs	r3, r2
 8008666:	2200      	movs	r2, #0
 8008668:	e008      	b.n	800867c <__ulp+0x34>
 800866a:	f1a2 0314 	sub.w	r3, r2, #20
 800866e:	2b1e      	cmp	r3, #30
 8008670:	bfd6      	itet	le
 8008672:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008676:	2201      	movgt	r2, #1
 8008678:	40da      	lsrle	r2, r3
 800867a:	2300      	movs	r3, #0
 800867c:	4619      	mov	r1, r3
 800867e:	4610      	mov	r0, r2
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	7ff00000 	.word	0x7ff00000

08008688 <__b2d>:
 8008688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868a:	6905      	ldr	r5, [r0, #16]
 800868c:	f100 0714 	add.w	r7, r0, #20
 8008690:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008694:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008698:	1f2e      	subs	r6, r5, #4
 800869a:	4620      	mov	r0, r4
 800869c:	f7ff fd5a 	bl	8008154 <__hi0bits>
 80086a0:	f1c0 0220 	rsb	r2, r0, #32
 80086a4:	280a      	cmp	r0, #10
 80086a6:	4603      	mov	r3, r0
 80086a8:	f8df c068 	ldr.w	ip, [pc, #104]	; 8008714 <__b2d+0x8c>
 80086ac:	600a      	str	r2, [r1, #0]
 80086ae:	dc12      	bgt.n	80086d6 <__b2d+0x4e>
 80086b0:	f1c0 0e0b 	rsb	lr, r0, #11
 80086b4:	fa24 f20e 	lsr.w	r2, r4, lr
 80086b8:	42b7      	cmp	r7, r6
 80086ba:	ea42 010c 	orr.w	r1, r2, ip
 80086be:	bf2c      	ite	cs
 80086c0:	2200      	movcs	r2, #0
 80086c2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80086c6:	3315      	adds	r3, #21
 80086c8:	fa04 f303 	lsl.w	r3, r4, r3
 80086cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80086d0:	431a      	orrs	r2, r3
 80086d2:	4610      	mov	r0, r2
 80086d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086d6:	42b7      	cmp	r7, r6
 80086d8:	bf2e      	itee	cs
 80086da:	2200      	movcs	r2, #0
 80086dc:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80086e0:	f1a5 0608 	subcc.w	r6, r5, #8
 80086e4:	3b0b      	subs	r3, #11
 80086e6:	d012      	beq.n	800870e <__b2d+0x86>
 80086e8:	f1c3 0520 	rsb	r5, r3, #32
 80086ec:	fa22 f105 	lsr.w	r1, r2, r5
 80086f0:	409c      	lsls	r4, r3
 80086f2:	430c      	orrs	r4, r1
 80086f4:	42be      	cmp	r6, r7
 80086f6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 80086fa:	bf94      	ite	ls
 80086fc:	2400      	movls	r4, #0
 80086fe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008702:	409a      	lsls	r2, r3
 8008704:	40ec      	lsrs	r4, r5
 8008706:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800870a:	4322      	orrs	r2, r4
 800870c:	e7e1      	b.n	80086d2 <__b2d+0x4a>
 800870e:	ea44 010c 	orr.w	r1, r4, ip
 8008712:	e7de      	b.n	80086d2 <__b2d+0x4a>
 8008714:	3ff00000 	.word	0x3ff00000

08008718 <__d2b>:
 8008718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800871a:	2101      	movs	r1, #1
 800871c:	4617      	mov	r7, r2
 800871e:	461c      	mov	r4, r3
 8008720:	9e08      	ldr	r6, [sp, #32]
 8008722:	f7ff fc25 	bl	8007f70 <_Balloc>
 8008726:	4605      	mov	r5, r0
 8008728:	b930      	cbnz	r0, 8008738 <__d2b+0x20>
 800872a:	4602      	mov	r2, r0
 800872c:	f240 310f 	movw	r1, #783	; 0x30f
 8008730:	4b22      	ldr	r3, [pc, #136]	; (80087bc <__d2b+0xa4>)
 8008732:	4823      	ldr	r0, [pc, #140]	; (80087c0 <__d2b+0xa8>)
 8008734:	f001 f9a8 	bl	8009a88 <__assert_func>
 8008738:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800873c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008740:	bb24      	cbnz	r4, 800878c <__d2b+0x74>
 8008742:	2f00      	cmp	r7, #0
 8008744:	9301      	str	r3, [sp, #4]
 8008746:	d026      	beq.n	8008796 <__d2b+0x7e>
 8008748:	4668      	mov	r0, sp
 800874a:	9700      	str	r7, [sp, #0]
 800874c:	f7ff fd22 	bl	8008194 <__lo0bits>
 8008750:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008754:	b1e8      	cbz	r0, 8008792 <__d2b+0x7a>
 8008756:	f1c0 0320 	rsb	r3, r0, #32
 800875a:	fa02 f303 	lsl.w	r3, r2, r3
 800875e:	430b      	orrs	r3, r1
 8008760:	40c2      	lsrs	r2, r0
 8008762:	616b      	str	r3, [r5, #20]
 8008764:	9201      	str	r2, [sp, #4]
 8008766:	9b01      	ldr	r3, [sp, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	bf14      	ite	ne
 800876c:	2102      	movne	r1, #2
 800876e:	2101      	moveq	r1, #1
 8008770:	61ab      	str	r3, [r5, #24]
 8008772:	6129      	str	r1, [r5, #16]
 8008774:	b1bc      	cbz	r4, 80087a6 <__d2b+0x8e>
 8008776:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800877a:	4404      	add	r4, r0
 800877c:	6034      	str	r4, [r6, #0]
 800877e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008784:	6018      	str	r0, [r3, #0]
 8008786:	4628      	mov	r0, r5
 8008788:	b003      	add	sp, #12
 800878a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800878c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008790:	e7d7      	b.n	8008742 <__d2b+0x2a>
 8008792:	6169      	str	r1, [r5, #20]
 8008794:	e7e7      	b.n	8008766 <__d2b+0x4e>
 8008796:	a801      	add	r0, sp, #4
 8008798:	f7ff fcfc 	bl	8008194 <__lo0bits>
 800879c:	9b01      	ldr	r3, [sp, #4]
 800879e:	2101      	movs	r1, #1
 80087a0:	616b      	str	r3, [r5, #20]
 80087a2:	3020      	adds	r0, #32
 80087a4:	e7e5      	b.n	8008772 <__d2b+0x5a>
 80087a6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80087aa:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80087ae:	6030      	str	r0, [r6, #0]
 80087b0:	6918      	ldr	r0, [r3, #16]
 80087b2:	f7ff fccf 	bl	8008154 <__hi0bits>
 80087b6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80087ba:	e7e2      	b.n	8008782 <__d2b+0x6a>
 80087bc:	0800a8d7 	.word	0x0800a8d7
 80087c0:	0800a8e8 	.word	0x0800a8e8

080087c4 <__ratio>:
 80087c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c8:	4688      	mov	r8, r1
 80087ca:	4669      	mov	r1, sp
 80087cc:	4681      	mov	r9, r0
 80087ce:	f7ff ff5b 	bl	8008688 <__b2d>
 80087d2:	460f      	mov	r7, r1
 80087d4:	4604      	mov	r4, r0
 80087d6:	460d      	mov	r5, r1
 80087d8:	4640      	mov	r0, r8
 80087da:	a901      	add	r1, sp, #4
 80087dc:	f7ff ff54 	bl	8008688 <__b2d>
 80087e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80087e4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80087e8:	468b      	mov	fp, r1
 80087ea:	eba3 0c02 	sub.w	ip, r3, r2
 80087ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 80087f2:	1a9b      	subs	r3, r3, r2
 80087f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	bfd5      	itete	le
 80087fc:	460a      	movle	r2, r1
 80087fe:	462a      	movgt	r2, r5
 8008800:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008804:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008808:	bfd8      	it	le
 800880a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800880e:	465b      	mov	r3, fp
 8008810:	4602      	mov	r2, r0
 8008812:	4639      	mov	r1, r7
 8008814:	4620      	mov	r0, r4
 8008816:	f7f7 fff5 	bl	8000804 <__aeabi_ddiv>
 800881a:	b003      	add	sp, #12
 800881c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008820 <__copybits>:
 8008820:	3901      	subs	r1, #1
 8008822:	b570      	push	{r4, r5, r6, lr}
 8008824:	1149      	asrs	r1, r1, #5
 8008826:	6914      	ldr	r4, [r2, #16]
 8008828:	3101      	adds	r1, #1
 800882a:	f102 0314 	add.w	r3, r2, #20
 800882e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008832:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008836:	1f05      	subs	r5, r0, #4
 8008838:	42a3      	cmp	r3, r4
 800883a:	d30c      	bcc.n	8008856 <__copybits+0x36>
 800883c:	1aa3      	subs	r3, r4, r2
 800883e:	3b11      	subs	r3, #17
 8008840:	f023 0303 	bic.w	r3, r3, #3
 8008844:	3211      	adds	r2, #17
 8008846:	42a2      	cmp	r2, r4
 8008848:	bf88      	it	hi
 800884a:	2300      	movhi	r3, #0
 800884c:	4418      	add	r0, r3
 800884e:	2300      	movs	r3, #0
 8008850:	4288      	cmp	r0, r1
 8008852:	d305      	bcc.n	8008860 <__copybits+0x40>
 8008854:	bd70      	pop	{r4, r5, r6, pc}
 8008856:	f853 6b04 	ldr.w	r6, [r3], #4
 800885a:	f845 6f04 	str.w	r6, [r5, #4]!
 800885e:	e7eb      	b.n	8008838 <__copybits+0x18>
 8008860:	f840 3b04 	str.w	r3, [r0], #4
 8008864:	e7f4      	b.n	8008850 <__copybits+0x30>

08008866 <__any_on>:
 8008866:	f100 0214 	add.w	r2, r0, #20
 800886a:	6900      	ldr	r0, [r0, #16]
 800886c:	114b      	asrs	r3, r1, #5
 800886e:	4298      	cmp	r0, r3
 8008870:	b510      	push	{r4, lr}
 8008872:	db11      	blt.n	8008898 <__any_on+0x32>
 8008874:	dd0a      	ble.n	800888c <__any_on+0x26>
 8008876:	f011 011f 	ands.w	r1, r1, #31
 800887a:	d007      	beq.n	800888c <__any_on+0x26>
 800887c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008880:	fa24 f001 	lsr.w	r0, r4, r1
 8008884:	fa00 f101 	lsl.w	r1, r0, r1
 8008888:	428c      	cmp	r4, r1
 800888a:	d10b      	bne.n	80088a4 <__any_on+0x3e>
 800888c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008890:	4293      	cmp	r3, r2
 8008892:	d803      	bhi.n	800889c <__any_on+0x36>
 8008894:	2000      	movs	r0, #0
 8008896:	bd10      	pop	{r4, pc}
 8008898:	4603      	mov	r3, r0
 800889a:	e7f7      	b.n	800888c <__any_on+0x26>
 800889c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80088a0:	2900      	cmp	r1, #0
 80088a2:	d0f5      	beq.n	8008890 <__any_on+0x2a>
 80088a4:	2001      	movs	r0, #1
 80088a6:	e7f6      	b.n	8008896 <__any_on+0x30>

080088a8 <sulp>:
 80088a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ac:	460f      	mov	r7, r1
 80088ae:	4690      	mov	r8, r2
 80088b0:	f7ff feca 	bl	8008648 <__ulp>
 80088b4:	4604      	mov	r4, r0
 80088b6:	460d      	mov	r5, r1
 80088b8:	f1b8 0f00 	cmp.w	r8, #0
 80088bc:	d011      	beq.n	80088e2 <sulp+0x3a>
 80088be:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80088c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	dd0b      	ble.n	80088e2 <sulp+0x3a>
 80088ca:	2400      	movs	r4, #0
 80088cc:	051b      	lsls	r3, r3, #20
 80088ce:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80088d2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80088d6:	4622      	mov	r2, r4
 80088d8:	462b      	mov	r3, r5
 80088da:	f7f7 fe69 	bl	80005b0 <__aeabi_dmul>
 80088de:	4604      	mov	r4, r0
 80088e0:	460d      	mov	r5, r1
 80088e2:	4620      	mov	r0, r4
 80088e4:	4629      	mov	r1, r5
 80088e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088ea:	0000      	movs	r0, r0
 80088ec:	0000      	movs	r0, r0
	...

080088f0 <_strtod_l>:
 80088f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f4:	b09f      	sub	sp, #124	; 0x7c
 80088f6:	9217      	str	r2, [sp, #92]	; 0x5c
 80088f8:	2200      	movs	r2, #0
 80088fa:	4604      	mov	r4, r0
 80088fc:	921a      	str	r2, [sp, #104]	; 0x68
 80088fe:	460d      	mov	r5, r1
 8008900:	f04f 0800 	mov.w	r8, #0
 8008904:	f04f 0900 	mov.w	r9, #0
 8008908:	460a      	mov	r2, r1
 800890a:	9219      	str	r2, [sp, #100]	; 0x64
 800890c:	7811      	ldrb	r1, [r2, #0]
 800890e:	292b      	cmp	r1, #43	; 0x2b
 8008910:	d04a      	beq.n	80089a8 <_strtod_l+0xb8>
 8008912:	d838      	bhi.n	8008986 <_strtod_l+0x96>
 8008914:	290d      	cmp	r1, #13
 8008916:	d832      	bhi.n	800897e <_strtod_l+0x8e>
 8008918:	2908      	cmp	r1, #8
 800891a:	d832      	bhi.n	8008982 <_strtod_l+0x92>
 800891c:	2900      	cmp	r1, #0
 800891e:	d03b      	beq.n	8008998 <_strtod_l+0xa8>
 8008920:	2200      	movs	r2, #0
 8008922:	920e      	str	r2, [sp, #56]	; 0x38
 8008924:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008926:	7832      	ldrb	r2, [r6, #0]
 8008928:	2a30      	cmp	r2, #48	; 0x30
 800892a:	f040 80b2 	bne.w	8008a92 <_strtod_l+0x1a2>
 800892e:	7872      	ldrb	r2, [r6, #1]
 8008930:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008934:	2a58      	cmp	r2, #88	; 0x58
 8008936:	d16e      	bne.n	8008a16 <_strtod_l+0x126>
 8008938:	9302      	str	r3, [sp, #8]
 800893a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800893c:	4620      	mov	r0, r4
 800893e:	9301      	str	r3, [sp, #4]
 8008940:	ab1a      	add	r3, sp, #104	; 0x68
 8008942:	9300      	str	r3, [sp, #0]
 8008944:	4a8c      	ldr	r2, [pc, #560]	; (8008b78 <_strtod_l+0x288>)
 8008946:	ab1b      	add	r3, sp, #108	; 0x6c
 8008948:	a919      	add	r1, sp, #100	; 0x64
 800894a:	f001 f937 	bl	8009bbc <__gethex>
 800894e:	f010 070f 	ands.w	r7, r0, #15
 8008952:	4605      	mov	r5, r0
 8008954:	d005      	beq.n	8008962 <_strtod_l+0x72>
 8008956:	2f06      	cmp	r7, #6
 8008958:	d128      	bne.n	80089ac <_strtod_l+0xbc>
 800895a:	2300      	movs	r3, #0
 800895c:	3601      	adds	r6, #1
 800895e:	9619      	str	r6, [sp, #100]	; 0x64
 8008960:	930e      	str	r3, [sp, #56]	; 0x38
 8008962:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008964:	2b00      	cmp	r3, #0
 8008966:	f040 85a0 	bne.w	80094aa <_strtod_l+0xbba>
 800896a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800896c:	b1cb      	cbz	r3, 80089a2 <_strtod_l+0xb2>
 800896e:	4642      	mov	r2, r8
 8008970:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008974:	4610      	mov	r0, r2
 8008976:	4619      	mov	r1, r3
 8008978:	b01f      	add	sp, #124	; 0x7c
 800897a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800897e:	2920      	cmp	r1, #32
 8008980:	d1ce      	bne.n	8008920 <_strtod_l+0x30>
 8008982:	3201      	adds	r2, #1
 8008984:	e7c1      	b.n	800890a <_strtod_l+0x1a>
 8008986:	292d      	cmp	r1, #45	; 0x2d
 8008988:	d1ca      	bne.n	8008920 <_strtod_l+0x30>
 800898a:	2101      	movs	r1, #1
 800898c:	910e      	str	r1, [sp, #56]	; 0x38
 800898e:	1c51      	adds	r1, r2, #1
 8008990:	9119      	str	r1, [sp, #100]	; 0x64
 8008992:	7852      	ldrb	r2, [r2, #1]
 8008994:	2a00      	cmp	r2, #0
 8008996:	d1c5      	bne.n	8008924 <_strtod_l+0x34>
 8008998:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800899a:	9519      	str	r5, [sp, #100]	; 0x64
 800899c:	2b00      	cmp	r3, #0
 800899e:	f040 8582 	bne.w	80094a6 <_strtod_l+0xbb6>
 80089a2:	4642      	mov	r2, r8
 80089a4:	464b      	mov	r3, r9
 80089a6:	e7e5      	b.n	8008974 <_strtod_l+0x84>
 80089a8:	2100      	movs	r1, #0
 80089aa:	e7ef      	b.n	800898c <_strtod_l+0x9c>
 80089ac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80089ae:	b13a      	cbz	r2, 80089c0 <_strtod_l+0xd0>
 80089b0:	2135      	movs	r1, #53	; 0x35
 80089b2:	a81c      	add	r0, sp, #112	; 0x70
 80089b4:	f7ff ff34 	bl	8008820 <__copybits>
 80089b8:	4620      	mov	r0, r4
 80089ba:	991a      	ldr	r1, [sp, #104]	; 0x68
 80089bc:	f7ff fb18 	bl	8007ff0 <_Bfree>
 80089c0:	3f01      	subs	r7, #1
 80089c2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80089c4:	2f04      	cmp	r7, #4
 80089c6:	d806      	bhi.n	80089d6 <_strtod_l+0xe6>
 80089c8:	e8df f007 	tbb	[pc, r7]
 80089cc:	201d0314 	.word	0x201d0314
 80089d0:	14          	.byte	0x14
 80089d1:	00          	.byte	0x00
 80089d2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80089d6:	05e9      	lsls	r1, r5, #23
 80089d8:	bf48      	it	mi
 80089da:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80089de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80089e2:	0d1b      	lsrs	r3, r3, #20
 80089e4:	051b      	lsls	r3, r3, #20
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1bb      	bne.n	8008962 <_strtod_l+0x72>
 80089ea:	f7fe fb15 	bl	8007018 <__errno>
 80089ee:	2322      	movs	r3, #34	; 0x22
 80089f0:	6003      	str	r3, [r0, #0]
 80089f2:	e7b6      	b.n	8008962 <_strtod_l+0x72>
 80089f4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80089f8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80089fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008a00:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008a04:	e7e7      	b.n	80089d6 <_strtod_l+0xe6>
 8008a06:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8008b7c <_strtod_l+0x28c>
 8008a0a:	e7e4      	b.n	80089d6 <_strtod_l+0xe6>
 8008a0c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008a10:	f04f 38ff 	mov.w	r8, #4294967295
 8008a14:	e7df      	b.n	80089d6 <_strtod_l+0xe6>
 8008a16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a18:	1c5a      	adds	r2, r3, #1
 8008a1a:	9219      	str	r2, [sp, #100]	; 0x64
 8008a1c:	785b      	ldrb	r3, [r3, #1]
 8008a1e:	2b30      	cmp	r3, #48	; 0x30
 8008a20:	d0f9      	beq.n	8008a16 <_strtod_l+0x126>
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d09d      	beq.n	8008962 <_strtod_l+0x72>
 8008a26:	2301      	movs	r3, #1
 8008a28:	f04f 0a00 	mov.w	sl, #0
 8008a2c:	220a      	movs	r2, #10
 8008a2e:	46d3      	mov	fp, sl
 8008a30:	9305      	str	r3, [sp, #20]
 8008a32:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a34:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8008a38:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a3a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008a3c:	7806      	ldrb	r6, [r0, #0]
 8008a3e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008a42:	b2d9      	uxtb	r1, r3
 8008a44:	2909      	cmp	r1, #9
 8008a46:	d926      	bls.n	8008a96 <_strtod_l+0x1a6>
 8008a48:	2201      	movs	r2, #1
 8008a4a:	494d      	ldr	r1, [pc, #308]	; (8008b80 <_strtod_l+0x290>)
 8008a4c:	f000 ffe6 	bl	8009a1c <strncmp>
 8008a50:	2800      	cmp	r0, #0
 8008a52:	d030      	beq.n	8008ab6 <_strtod_l+0x1c6>
 8008a54:	2000      	movs	r0, #0
 8008a56:	4632      	mov	r2, r6
 8008a58:	4603      	mov	r3, r0
 8008a5a:	465e      	mov	r6, fp
 8008a5c:	9008      	str	r0, [sp, #32]
 8008a5e:	2a65      	cmp	r2, #101	; 0x65
 8008a60:	d001      	beq.n	8008a66 <_strtod_l+0x176>
 8008a62:	2a45      	cmp	r2, #69	; 0x45
 8008a64:	d113      	bne.n	8008a8e <_strtod_l+0x19e>
 8008a66:	b91e      	cbnz	r6, 8008a70 <_strtod_l+0x180>
 8008a68:	9a05      	ldr	r2, [sp, #20]
 8008a6a:	4302      	orrs	r2, r0
 8008a6c:	d094      	beq.n	8008998 <_strtod_l+0xa8>
 8008a6e:	2600      	movs	r6, #0
 8008a70:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008a72:	1c6a      	adds	r2, r5, #1
 8008a74:	9219      	str	r2, [sp, #100]	; 0x64
 8008a76:	786a      	ldrb	r2, [r5, #1]
 8008a78:	2a2b      	cmp	r2, #43	; 0x2b
 8008a7a:	d074      	beq.n	8008b66 <_strtod_l+0x276>
 8008a7c:	2a2d      	cmp	r2, #45	; 0x2d
 8008a7e:	d078      	beq.n	8008b72 <_strtod_l+0x282>
 8008a80:	f04f 0c00 	mov.w	ip, #0
 8008a84:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008a88:	2909      	cmp	r1, #9
 8008a8a:	d97f      	bls.n	8008b8c <_strtod_l+0x29c>
 8008a8c:	9519      	str	r5, [sp, #100]	; 0x64
 8008a8e:	2700      	movs	r7, #0
 8008a90:	e09e      	b.n	8008bd0 <_strtod_l+0x2e0>
 8008a92:	2300      	movs	r3, #0
 8008a94:	e7c8      	b.n	8008a28 <_strtod_l+0x138>
 8008a96:	f1bb 0f08 	cmp.w	fp, #8
 8008a9a:	bfd8      	it	le
 8008a9c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8008a9e:	f100 0001 	add.w	r0, r0, #1
 8008aa2:	bfd6      	itet	le
 8008aa4:	fb02 3301 	mlale	r3, r2, r1, r3
 8008aa8:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008aac:	930a      	strle	r3, [sp, #40]	; 0x28
 8008aae:	f10b 0b01 	add.w	fp, fp, #1
 8008ab2:	9019      	str	r0, [sp, #100]	; 0x64
 8008ab4:	e7c1      	b.n	8008a3a <_strtod_l+0x14a>
 8008ab6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ab8:	1c5a      	adds	r2, r3, #1
 8008aba:	9219      	str	r2, [sp, #100]	; 0x64
 8008abc:	785a      	ldrb	r2, [r3, #1]
 8008abe:	f1bb 0f00 	cmp.w	fp, #0
 8008ac2:	d037      	beq.n	8008b34 <_strtod_l+0x244>
 8008ac4:	465e      	mov	r6, fp
 8008ac6:	9008      	str	r0, [sp, #32]
 8008ac8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008acc:	2b09      	cmp	r3, #9
 8008ace:	d912      	bls.n	8008af6 <_strtod_l+0x206>
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e7c4      	b.n	8008a5e <_strtod_l+0x16e>
 8008ad4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ad6:	3001      	adds	r0, #1
 8008ad8:	1c5a      	adds	r2, r3, #1
 8008ada:	9219      	str	r2, [sp, #100]	; 0x64
 8008adc:	785a      	ldrb	r2, [r3, #1]
 8008ade:	2a30      	cmp	r2, #48	; 0x30
 8008ae0:	d0f8      	beq.n	8008ad4 <_strtod_l+0x1e4>
 8008ae2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008ae6:	2b08      	cmp	r3, #8
 8008ae8:	f200 84e4 	bhi.w	80094b4 <_strtod_l+0xbc4>
 8008aec:	9008      	str	r0, [sp, #32]
 8008aee:	2000      	movs	r0, #0
 8008af0:	4606      	mov	r6, r0
 8008af2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008af4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008af6:	3a30      	subs	r2, #48	; 0x30
 8008af8:	f100 0301 	add.w	r3, r0, #1
 8008afc:	d014      	beq.n	8008b28 <_strtod_l+0x238>
 8008afe:	9908      	ldr	r1, [sp, #32]
 8008b00:	eb00 0c06 	add.w	ip, r0, r6
 8008b04:	4419      	add	r1, r3
 8008b06:	9108      	str	r1, [sp, #32]
 8008b08:	4633      	mov	r3, r6
 8008b0a:	210a      	movs	r1, #10
 8008b0c:	4563      	cmp	r3, ip
 8008b0e:	d113      	bne.n	8008b38 <_strtod_l+0x248>
 8008b10:	1833      	adds	r3, r6, r0
 8008b12:	2b08      	cmp	r3, #8
 8008b14:	f106 0601 	add.w	r6, r6, #1
 8008b18:	4406      	add	r6, r0
 8008b1a:	dc1a      	bgt.n	8008b52 <_strtod_l+0x262>
 8008b1c:	230a      	movs	r3, #10
 8008b1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b20:	fb03 2301 	mla	r3, r3, r1, r2
 8008b24:	930a      	str	r3, [sp, #40]	; 0x28
 8008b26:	2300      	movs	r3, #0
 8008b28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	1c51      	adds	r1, r2, #1
 8008b2e:	9119      	str	r1, [sp, #100]	; 0x64
 8008b30:	7852      	ldrb	r2, [r2, #1]
 8008b32:	e7c9      	b.n	8008ac8 <_strtod_l+0x1d8>
 8008b34:	4658      	mov	r0, fp
 8008b36:	e7d2      	b.n	8008ade <_strtod_l+0x1ee>
 8008b38:	2b08      	cmp	r3, #8
 8008b3a:	f103 0301 	add.w	r3, r3, #1
 8008b3e:	dc03      	bgt.n	8008b48 <_strtod_l+0x258>
 8008b40:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008b42:	434f      	muls	r7, r1
 8008b44:	970a      	str	r7, [sp, #40]	; 0x28
 8008b46:	e7e1      	b.n	8008b0c <_strtod_l+0x21c>
 8008b48:	2b10      	cmp	r3, #16
 8008b4a:	bfd8      	it	le
 8008b4c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008b50:	e7dc      	b.n	8008b0c <_strtod_l+0x21c>
 8008b52:	2e10      	cmp	r6, #16
 8008b54:	bfdc      	itt	le
 8008b56:	230a      	movle	r3, #10
 8008b58:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008b5c:	e7e3      	b.n	8008b26 <_strtod_l+0x236>
 8008b5e:	2300      	movs	r3, #0
 8008b60:	9308      	str	r3, [sp, #32]
 8008b62:	2301      	movs	r3, #1
 8008b64:	e780      	b.n	8008a68 <_strtod_l+0x178>
 8008b66:	f04f 0c00 	mov.w	ip, #0
 8008b6a:	1caa      	adds	r2, r5, #2
 8008b6c:	9219      	str	r2, [sp, #100]	; 0x64
 8008b6e:	78aa      	ldrb	r2, [r5, #2]
 8008b70:	e788      	b.n	8008a84 <_strtod_l+0x194>
 8008b72:	f04f 0c01 	mov.w	ip, #1
 8008b76:	e7f8      	b.n	8008b6a <_strtod_l+0x27a>
 8008b78:	0800aa48 	.word	0x0800aa48
 8008b7c:	7ff00000 	.word	0x7ff00000
 8008b80:	0800aa44 	.word	0x0800aa44
 8008b84:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008b86:	1c51      	adds	r1, r2, #1
 8008b88:	9119      	str	r1, [sp, #100]	; 0x64
 8008b8a:	7852      	ldrb	r2, [r2, #1]
 8008b8c:	2a30      	cmp	r2, #48	; 0x30
 8008b8e:	d0f9      	beq.n	8008b84 <_strtod_l+0x294>
 8008b90:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008b94:	2908      	cmp	r1, #8
 8008b96:	f63f af7a 	bhi.w	8008a8e <_strtod_l+0x19e>
 8008b9a:	3a30      	subs	r2, #48	; 0x30
 8008b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b9e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008ba0:	920c      	str	r2, [sp, #48]	; 0x30
 8008ba2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008ba4:	1c57      	adds	r7, r2, #1
 8008ba6:	9719      	str	r7, [sp, #100]	; 0x64
 8008ba8:	7852      	ldrb	r2, [r2, #1]
 8008baa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008bae:	f1be 0f09 	cmp.w	lr, #9
 8008bb2:	d938      	bls.n	8008c26 <_strtod_l+0x336>
 8008bb4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008bb6:	1a7f      	subs	r7, r7, r1
 8008bb8:	2f08      	cmp	r7, #8
 8008bba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008bbe:	dc03      	bgt.n	8008bc8 <_strtod_l+0x2d8>
 8008bc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bc2:	428f      	cmp	r7, r1
 8008bc4:	bfa8      	it	ge
 8008bc6:	460f      	movge	r7, r1
 8008bc8:	f1bc 0f00 	cmp.w	ip, #0
 8008bcc:	d000      	beq.n	8008bd0 <_strtod_l+0x2e0>
 8008bce:	427f      	negs	r7, r7
 8008bd0:	2e00      	cmp	r6, #0
 8008bd2:	d14f      	bne.n	8008c74 <_strtod_l+0x384>
 8008bd4:	9905      	ldr	r1, [sp, #20]
 8008bd6:	4301      	orrs	r1, r0
 8008bd8:	f47f aec3 	bne.w	8008962 <_strtod_l+0x72>
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f47f aedb 	bne.w	8008998 <_strtod_l+0xa8>
 8008be2:	2a69      	cmp	r2, #105	; 0x69
 8008be4:	d029      	beq.n	8008c3a <_strtod_l+0x34a>
 8008be6:	dc26      	bgt.n	8008c36 <_strtod_l+0x346>
 8008be8:	2a49      	cmp	r2, #73	; 0x49
 8008bea:	d026      	beq.n	8008c3a <_strtod_l+0x34a>
 8008bec:	2a4e      	cmp	r2, #78	; 0x4e
 8008bee:	f47f aed3 	bne.w	8008998 <_strtod_l+0xa8>
 8008bf2:	499a      	ldr	r1, [pc, #616]	; (8008e5c <_strtod_l+0x56c>)
 8008bf4:	a819      	add	r0, sp, #100	; 0x64
 8008bf6:	f001 fa23 	bl	800a040 <__match>
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	f43f aecc 	beq.w	8008998 <_strtod_l+0xa8>
 8008c00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	2b28      	cmp	r3, #40	; 0x28
 8008c06:	d12f      	bne.n	8008c68 <_strtod_l+0x378>
 8008c08:	4995      	ldr	r1, [pc, #596]	; (8008e60 <_strtod_l+0x570>)
 8008c0a:	aa1c      	add	r2, sp, #112	; 0x70
 8008c0c:	a819      	add	r0, sp, #100	; 0x64
 8008c0e:	f001 fa2b 	bl	800a068 <__hexnan>
 8008c12:	2805      	cmp	r0, #5
 8008c14:	d128      	bne.n	8008c68 <_strtod_l+0x378>
 8008c16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c18:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008c1c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008c20:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008c24:	e69d      	b.n	8008962 <_strtod_l+0x72>
 8008c26:	210a      	movs	r1, #10
 8008c28:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008c2a:	fb01 2107 	mla	r1, r1, r7, r2
 8008c2e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008c32:	9209      	str	r2, [sp, #36]	; 0x24
 8008c34:	e7b5      	b.n	8008ba2 <_strtod_l+0x2b2>
 8008c36:	2a6e      	cmp	r2, #110	; 0x6e
 8008c38:	e7d9      	b.n	8008bee <_strtod_l+0x2fe>
 8008c3a:	498a      	ldr	r1, [pc, #552]	; (8008e64 <_strtod_l+0x574>)
 8008c3c:	a819      	add	r0, sp, #100	; 0x64
 8008c3e:	f001 f9ff 	bl	800a040 <__match>
 8008c42:	2800      	cmp	r0, #0
 8008c44:	f43f aea8 	beq.w	8008998 <_strtod_l+0xa8>
 8008c48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c4a:	4987      	ldr	r1, [pc, #540]	; (8008e68 <_strtod_l+0x578>)
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	a819      	add	r0, sp, #100	; 0x64
 8008c50:	9319      	str	r3, [sp, #100]	; 0x64
 8008c52:	f001 f9f5 	bl	800a040 <__match>
 8008c56:	b910      	cbnz	r0, 8008c5e <_strtod_l+0x36e>
 8008c58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	9319      	str	r3, [sp, #100]	; 0x64
 8008c5e:	f04f 0800 	mov.w	r8, #0
 8008c62:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8008e6c <_strtod_l+0x57c>
 8008c66:	e67c      	b.n	8008962 <_strtod_l+0x72>
 8008c68:	4881      	ldr	r0, [pc, #516]	; (8008e70 <_strtod_l+0x580>)
 8008c6a:	f000 ff07 	bl	8009a7c <nan>
 8008c6e:	4680      	mov	r8, r0
 8008c70:	4689      	mov	r9, r1
 8008c72:	e676      	b.n	8008962 <_strtod_l+0x72>
 8008c74:	9b08      	ldr	r3, [sp, #32]
 8008c76:	f1bb 0f00 	cmp.w	fp, #0
 8008c7a:	bf08      	it	eq
 8008c7c:	46b3      	moveq	fp, r6
 8008c7e:	1afb      	subs	r3, r7, r3
 8008c80:	2e10      	cmp	r6, #16
 8008c82:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008c84:	4635      	mov	r5, r6
 8008c86:	9309      	str	r3, [sp, #36]	; 0x24
 8008c88:	bfa8      	it	ge
 8008c8a:	2510      	movge	r5, #16
 8008c8c:	f7f7 fc16 	bl	80004bc <__aeabi_ui2d>
 8008c90:	2e09      	cmp	r6, #9
 8008c92:	4680      	mov	r8, r0
 8008c94:	4689      	mov	r9, r1
 8008c96:	dd13      	ble.n	8008cc0 <_strtod_l+0x3d0>
 8008c98:	4b76      	ldr	r3, [pc, #472]	; (8008e74 <_strtod_l+0x584>)
 8008c9a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008c9e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008ca2:	f7f7 fc85 	bl	80005b0 <__aeabi_dmul>
 8008ca6:	4680      	mov	r8, r0
 8008ca8:	4650      	mov	r0, sl
 8008caa:	4689      	mov	r9, r1
 8008cac:	f7f7 fc06 	bl	80004bc <__aeabi_ui2d>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	4640      	mov	r0, r8
 8008cb6:	4649      	mov	r1, r9
 8008cb8:	f7f7 fac4 	bl	8000244 <__adddf3>
 8008cbc:	4680      	mov	r8, r0
 8008cbe:	4689      	mov	r9, r1
 8008cc0:	2e0f      	cmp	r6, #15
 8008cc2:	dc36      	bgt.n	8008d32 <_strtod_l+0x442>
 8008cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f43f ae4b 	beq.w	8008962 <_strtod_l+0x72>
 8008ccc:	dd22      	ble.n	8008d14 <_strtod_l+0x424>
 8008cce:	2b16      	cmp	r3, #22
 8008cd0:	dc09      	bgt.n	8008ce6 <_strtod_l+0x3f6>
 8008cd2:	4968      	ldr	r1, [pc, #416]	; (8008e74 <_strtod_l+0x584>)
 8008cd4:	4642      	mov	r2, r8
 8008cd6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008cda:	464b      	mov	r3, r9
 8008cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ce0:	f7f7 fc66 	bl	80005b0 <__aeabi_dmul>
 8008ce4:	e7c3      	b.n	8008c6e <_strtod_l+0x37e>
 8008ce6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ce8:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008cec:	4293      	cmp	r3, r2
 8008cee:	db20      	blt.n	8008d32 <_strtod_l+0x442>
 8008cf0:	4c60      	ldr	r4, [pc, #384]	; (8008e74 <_strtod_l+0x584>)
 8008cf2:	f1c6 060f 	rsb	r6, r6, #15
 8008cf6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008cfa:	4642      	mov	r2, r8
 8008cfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d00:	464b      	mov	r3, r9
 8008d02:	f7f7 fc55 	bl	80005b0 <__aeabi_dmul>
 8008d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d08:	1b9e      	subs	r6, r3, r6
 8008d0a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008d0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008d12:	e7e5      	b.n	8008ce0 <_strtod_l+0x3f0>
 8008d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d16:	3316      	adds	r3, #22
 8008d18:	db0b      	blt.n	8008d32 <_strtod_l+0x442>
 8008d1a:	9b08      	ldr	r3, [sp, #32]
 8008d1c:	4640      	mov	r0, r8
 8008d1e:	1bdf      	subs	r7, r3, r7
 8008d20:	4b54      	ldr	r3, [pc, #336]	; (8008e74 <_strtod_l+0x584>)
 8008d22:	4649      	mov	r1, r9
 8008d24:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008d28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d2c:	f7f7 fd6a 	bl	8000804 <__aeabi_ddiv>
 8008d30:	e79d      	b.n	8008c6e <_strtod_l+0x37e>
 8008d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d34:	1b75      	subs	r5, r6, r5
 8008d36:	441d      	add	r5, r3
 8008d38:	2d00      	cmp	r5, #0
 8008d3a:	dd70      	ble.n	8008e1e <_strtod_l+0x52e>
 8008d3c:	f015 030f 	ands.w	r3, r5, #15
 8008d40:	d00a      	beq.n	8008d58 <_strtod_l+0x468>
 8008d42:	494c      	ldr	r1, [pc, #304]	; (8008e74 <_strtod_l+0x584>)
 8008d44:	4642      	mov	r2, r8
 8008d46:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d4e:	464b      	mov	r3, r9
 8008d50:	f7f7 fc2e 	bl	80005b0 <__aeabi_dmul>
 8008d54:	4680      	mov	r8, r0
 8008d56:	4689      	mov	r9, r1
 8008d58:	f035 050f 	bics.w	r5, r5, #15
 8008d5c:	d04d      	beq.n	8008dfa <_strtod_l+0x50a>
 8008d5e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008d62:	dd22      	ble.n	8008daa <_strtod_l+0x4ba>
 8008d64:	2600      	movs	r6, #0
 8008d66:	46b3      	mov	fp, r6
 8008d68:	960b      	str	r6, [sp, #44]	; 0x2c
 8008d6a:	9608      	str	r6, [sp, #32]
 8008d6c:	2322      	movs	r3, #34	; 0x22
 8008d6e:	f04f 0800 	mov.w	r8, #0
 8008d72:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8008e6c <_strtod_l+0x57c>
 8008d76:	6023      	str	r3, [r4, #0]
 8008d78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f43f adf1 	beq.w	8008962 <_strtod_l+0x72>
 8008d80:	4620      	mov	r0, r4
 8008d82:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008d84:	f7ff f934 	bl	8007ff0 <_Bfree>
 8008d88:	4620      	mov	r0, r4
 8008d8a:	9908      	ldr	r1, [sp, #32]
 8008d8c:	f7ff f930 	bl	8007ff0 <_Bfree>
 8008d90:	4659      	mov	r1, fp
 8008d92:	4620      	mov	r0, r4
 8008d94:	f7ff f92c 	bl	8007ff0 <_Bfree>
 8008d98:	4620      	mov	r0, r4
 8008d9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d9c:	f7ff f928 	bl	8007ff0 <_Bfree>
 8008da0:	4631      	mov	r1, r6
 8008da2:	4620      	mov	r0, r4
 8008da4:	f7ff f924 	bl	8007ff0 <_Bfree>
 8008da8:	e5db      	b.n	8008962 <_strtod_l+0x72>
 8008daa:	4b33      	ldr	r3, [pc, #204]	; (8008e78 <_strtod_l+0x588>)
 8008dac:	4640      	mov	r0, r8
 8008dae:	9305      	str	r3, [sp, #20]
 8008db0:	2300      	movs	r3, #0
 8008db2:	4649      	mov	r1, r9
 8008db4:	469a      	mov	sl, r3
 8008db6:	112d      	asrs	r5, r5, #4
 8008db8:	2d01      	cmp	r5, #1
 8008dba:	dc21      	bgt.n	8008e00 <_strtod_l+0x510>
 8008dbc:	b10b      	cbz	r3, 8008dc2 <_strtod_l+0x4d2>
 8008dbe:	4680      	mov	r8, r0
 8008dc0:	4689      	mov	r9, r1
 8008dc2:	492d      	ldr	r1, [pc, #180]	; (8008e78 <_strtod_l+0x588>)
 8008dc4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008dc8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008dcc:	4642      	mov	r2, r8
 8008dce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dd2:	464b      	mov	r3, r9
 8008dd4:	f7f7 fbec 	bl	80005b0 <__aeabi_dmul>
 8008dd8:	4b24      	ldr	r3, [pc, #144]	; (8008e6c <_strtod_l+0x57c>)
 8008dda:	460a      	mov	r2, r1
 8008ddc:	400b      	ands	r3, r1
 8008dde:	4927      	ldr	r1, [pc, #156]	; (8008e7c <_strtod_l+0x58c>)
 8008de0:	4680      	mov	r8, r0
 8008de2:	428b      	cmp	r3, r1
 8008de4:	d8be      	bhi.n	8008d64 <_strtod_l+0x474>
 8008de6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008dea:	428b      	cmp	r3, r1
 8008dec:	bf86      	itte	hi
 8008dee:	f04f 38ff 	movhi.w	r8, #4294967295
 8008df2:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008e80 <_strtod_l+0x590>
 8008df6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	9305      	str	r3, [sp, #20]
 8008dfe:	e07b      	b.n	8008ef8 <_strtod_l+0x608>
 8008e00:	07ea      	lsls	r2, r5, #31
 8008e02:	d505      	bpl.n	8008e10 <_strtod_l+0x520>
 8008e04:	9b05      	ldr	r3, [sp, #20]
 8008e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0a:	f7f7 fbd1 	bl	80005b0 <__aeabi_dmul>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	9a05      	ldr	r2, [sp, #20]
 8008e12:	f10a 0a01 	add.w	sl, sl, #1
 8008e16:	3208      	adds	r2, #8
 8008e18:	106d      	asrs	r5, r5, #1
 8008e1a:	9205      	str	r2, [sp, #20]
 8008e1c:	e7cc      	b.n	8008db8 <_strtod_l+0x4c8>
 8008e1e:	d0ec      	beq.n	8008dfa <_strtod_l+0x50a>
 8008e20:	426d      	negs	r5, r5
 8008e22:	f015 020f 	ands.w	r2, r5, #15
 8008e26:	d00a      	beq.n	8008e3e <_strtod_l+0x54e>
 8008e28:	4b12      	ldr	r3, [pc, #72]	; (8008e74 <_strtod_l+0x584>)
 8008e2a:	4640      	mov	r0, r8
 8008e2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e30:	4649      	mov	r1, r9
 8008e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e36:	f7f7 fce5 	bl	8000804 <__aeabi_ddiv>
 8008e3a:	4680      	mov	r8, r0
 8008e3c:	4689      	mov	r9, r1
 8008e3e:	112d      	asrs	r5, r5, #4
 8008e40:	d0db      	beq.n	8008dfa <_strtod_l+0x50a>
 8008e42:	2d1f      	cmp	r5, #31
 8008e44:	dd1e      	ble.n	8008e84 <_strtod_l+0x594>
 8008e46:	2600      	movs	r6, #0
 8008e48:	46b3      	mov	fp, r6
 8008e4a:	960b      	str	r6, [sp, #44]	; 0x2c
 8008e4c:	9608      	str	r6, [sp, #32]
 8008e4e:	2322      	movs	r3, #34	; 0x22
 8008e50:	f04f 0800 	mov.w	r8, #0
 8008e54:	f04f 0900 	mov.w	r9, #0
 8008e58:	6023      	str	r3, [r4, #0]
 8008e5a:	e78d      	b.n	8008d78 <_strtod_l+0x488>
 8008e5c:	0800a82f 	.word	0x0800a82f
 8008e60:	0800aa5c 	.word	0x0800aa5c
 8008e64:	0800a827 	.word	0x0800a827
 8008e68:	0800a85e 	.word	0x0800a85e
 8008e6c:	7ff00000 	.word	0x7ff00000
 8008e70:	0800abed 	.word	0x0800abed
 8008e74:	0800a970 	.word	0x0800a970
 8008e78:	0800a948 	.word	0x0800a948
 8008e7c:	7ca00000 	.word	0x7ca00000
 8008e80:	7fefffff 	.word	0x7fefffff
 8008e84:	f015 0310 	ands.w	r3, r5, #16
 8008e88:	bf18      	it	ne
 8008e8a:	236a      	movne	r3, #106	; 0x6a
 8008e8c:	4640      	mov	r0, r8
 8008e8e:	9305      	str	r3, [sp, #20]
 8008e90:	4649      	mov	r1, r9
 8008e92:	2300      	movs	r3, #0
 8008e94:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8009160 <_strtod_l+0x870>
 8008e98:	07ea      	lsls	r2, r5, #31
 8008e9a:	d504      	bpl.n	8008ea6 <_strtod_l+0x5b6>
 8008e9c:	e9da 2300 	ldrd	r2, r3, [sl]
 8008ea0:	f7f7 fb86 	bl	80005b0 <__aeabi_dmul>
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	106d      	asrs	r5, r5, #1
 8008ea8:	f10a 0a08 	add.w	sl, sl, #8
 8008eac:	d1f4      	bne.n	8008e98 <_strtod_l+0x5a8>
 8008eae:	b10b      	cbz	r3, 8008eb4 <_strtod_l+0x5c4>
 8008eb0:	4680      	mov	r8, r0
 8008eb2:	4689      	mov	r9, r1
 8008eb4:	9b05      	ldr	r3, [sp, #20]
 8008eb6:	b1bb      	cbz	r3, 8008ee8 <_strtod_l+0x5f8>
 8008eb8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008ebc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	4649      	mov	r1, r9
 8008ec4:	dd10      	ble.n	8008ee8 <_strtod_l+0x5f8>
 8008ec6:	2b1f      	cmp	r3, #31
 8008ec8:	f340 8128 	ble.w	800911c <_strtod_l+0x82c>
 8008ecc:	2b34      	cmp	r3, #52	; 0x34
 8008ece:	bfd8      	it	le
 8008ed0:	f04f 33ff 	movle.w	r3, #4294967295
 8008ed4:	f04f 0800 	mov.w	r8, #0
 8008ed8:	bfcf      	iteee	gt
 8008eda:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008ede:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008ee2:	4093      	lslle	r3, r2
 8008ee4:	ea03 0901 	andle.w	r9, r3, r1
 8008ee8:	2200      	movs	r2, #0
 8008eea:	2300      	movs	r3, #0
 8008eec:	4640      	mov	r0, r8
 8008eee:	4649      	mov	r1, r9
 8008ef0:	f7f7 fdc6 	bl	8000a80 <__aeabi_dcmpeq>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d1a6      	bne.n	8008e46 <_strtod_l+0x556>
 8008ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008efa:	465a      	mov	r2, fp
 8008efc:	9300      	str	r3, [sp, #0]
 8008efe:	4620      	mov	r0, r4
 8008f00:	4633      	mov	r3, r6
 8008f02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f04:	f7ff f8dc 	bl	80080c0 <__s2b>
 8008f08:	900b      	str	r0, [sp, #44]	; 0x2c
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	f43f af2a 	beq.w	8008d64 <_strtod_l+0x474>
 8008f10:	2600      	movs	r6, #0
 8008f12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f14:	9b08      	ldr	r3, [sp, #32]
 8008f16:	2a00      	cmp	r2, #0
 8008f18:	eba3 0307 	sub.w	r3, r3, r7
 8008f1c:	bfa8      	it	ge
 8008f1e:	2300      	movge	r3, #0
 8008f20:	46b3      	mov	fp, r6
 8008f22:	9312      	str	r3, [sp, #72]	; 0x48
 8008f24:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008f28:	9316      	str	r3, [sp, #88]	; 0x58
 8008f2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	6859      	ldr	r1, [r3, #4]
 8008f30:	f7ff f81e 	bl	8007f70 <_Balloc>
 8008f34:	9008      	str	r0, [sp, #32]
 8008f36:	2800      	cmp	r0, #0
 8008f38:	f43f af18 	beq.w	8008d6c <_strtod_l+0x47c>
 8008f3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f3e:	300c      	adds	r0, #12
 8008f40:	691a      	ldr	r2, [r3, #16]
 8008f42:	f103 010c 	add.w	r1, r3, #12
 8008f46:	3202      	adds	r2, #2
 8008f48:	0092      	lsls	r2, r2, #2
 8008f4a:	f000 fd89 	bl	8009a60 <memcpy>
 8008f4e:	ab1c      	add	r3, sp, #112	; 0x70
 8008f50:	9301      	str	r3, [sp, #4]
 8008f52:	ab1b      	add	r3, sp, #108	; 0x6c
 8008f54:	9300      	str	r3, [sp, #0]
 8008f56:	4642      	mov	r2, r8
 8008f58:	464b      	mov	r3, r9
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8008f60:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8008f64:	f7ff fbd8 	bl	8008718 <__d2b>
 8008f68:	901a      	str	r0, [sp, #104]	; 0x68
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	f43f aefe 	beq.w	8008d6c <_strtod_l+0x47c>
 8008f70:	2101      	movs	r1, #1
 8008f72:	4620      	mov	r0, r4
 8008f74:	f7ff f93c 	bl	80081f0 <__i2b>
 8008f78:	4683      	mov	fp, r0
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	f43f aef6 	beq.w	8008d6c <_strtod_l+0x47c>
 8008f80:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008f82:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008f84:	2f00      	cmp	r7, #0
 8008f86:	bfab      	itete	ge
 8008f88:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8008f8a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008f8c:	eb07 0a03 	addge.w	sl, r7, r3
 8008f90:	1bdd      	sublt	r5, r3, r7
 8008f92:	9b05      	ldr	r3, [sp, #20]
 8008f94:	bfa8      	it	ge
 8008f96:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008f98:	eba7 0703 	sub.w	r7, r7, r3
 8008f9c:	4417      	add	r7, r2
 8008f9e:	4b71      	ldr	r3, [pc, #452]	; (8009164 <_strtod_l+0x874>)
 8008fa0:	f107 37ff 	add.w	r7, r7, #4294967295
 8008fa4:	bfb8      	it	lt
 8008fa6:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8008faa:	429f      	cmp	r7, r3
 8008fac:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008fb0:	f280 80c7 	bge.w	8009142 <_strtod_l+0x852>
 8008fb4:	1bdb      	subs	r3, r3, r7
 8008fb6:	2b1f      	cmp	r3, #31
 8008fb8:	f04f 0101 	mov.w	r1, #1
 8008fbc:	eba2 0203 	sub.w	r2, r2, r3
 8008fc0:	f300 80b3 	bgt.w	800912a <_strtod_l+0x83a>
 8008fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8008fc8:	9313      	str	r3, [sp, #76]	; 0x4c
 8008fca:	2300      	movs	r3, #0
 8008fcc:	9310      	str	r3, [sp, #64]	; 0x40
 8008fce:	eb0a 0702 	add.w	r7, sl, r2
 8008fd2:	9b05      	ldr	r3, [sp, #20]
 8008fd4:	45ba      	cmp	sl, r7
 8008fd6:	4415      	add	r5, r2
 8008fd8:	441d      	add	r5, r3
 8008fda:	4653      	mov	r3, sl
 8008fdc:	bfa8      	it	ge
 8008fde:	463b      	movge	r3, r7
 8008fe0:	42ab      	cmp	r3, r5
 8008fe2:	bfa8      	it	ge
 8008fe4:	462b      	movge	r3, r5
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	bfc2      	ittt	gt
 8008fea:	1aff      	subgt	r7, r7, r3
 8008fec:	1aed      	subgt	r5, r5, r3
 8008fee:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008ff2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	dd17      	ble.n	8009028 <_strtod_l+0x738>
 8008ff8:	4659      	mov	r1, fp
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f7ff f9b5 	bl	800836c <__pow5mult>
 8009002:	4683      	mov	fp, r0
 8009004:	2800      	cmp	r0, #0
 8009006:	f43f aeb1 	beq.w	8008d6c <_strtod_l+0x47c>
 800900a:	4601      	mov	r1, r0
 800900c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800900e:	4620      	mov	r0, r4
 8009010:	f7ff f904 	bl	800821c <__multiply>
 8009014:	900a      	str	r0, [sp, #40]	; 0x28
 8009016:	2800      	cmp	r0, #0
 8009018:	f43f aea8 	beq.w	8008d6c <_strtod_l+0x47c>
 800901c:	4620      	mov	r0, r4
 800901e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009020:	f7fe ffe6 	bl	8007ff0 <_Bfree>
 8009024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009026:	931a      	str	r3, [sp, #104]	; 0x68
 8009028:	2f00      	cmp	r7, #0
 800902a:	f300 808f 	bgt.w	800914c <_strtod_l+0x85c>
 800902e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009030:	2b00      	cmp	r3, #0
 8009032:	dd08      	ble.n	8009046 <_strtod_l+0x756>
 8009034:	4620      	mov	r0, r4
 8009036:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009038:	9908      	ldr	r1, [sp, #32]
 800903a:	f7ff f997 	bl	800836c <__pow5mult>
 800903e:	9008      	str	r0, [sp, #32]
 8009040:	2800      	cmp	r0, #0
 8009042:	f43f ae93 	beq.w	8008d6c <_strtod_l+0x47c>
 8009046:	2d00      	cmp	r5, #0
 8009048:	dd08      	ble.n	800905c <_strtod_l+0x76c>
 800904a:	462a      	mov	r2, r5
 800904c:	4620      	mov	r0, r4
 800904e:	9908      	ldr	r1, [sp, #32]
 8009050:	f7ff f9e6 	bl	8008420 <__lshift>
 8009054:	9008      	str	r0, [sp, #32]
 8009056:	2800      	cmp	r0, #0
 8009058:	f43f ae88 	beq.w	8008d6c <_strtod_l+0x47c>
 800905c:	f1ba 0f00 	cmp.w	sl, #0
 8009060:	dd08      	ble.n	8009074 <_strtod_l+0x784>
 8009062:	4659      	mov	r1, fp
 8009064:	4652      	mov	r2, sl
 8009066:	4620      	mov	r0, r4
 8009068:	f7ff f9da 	bl	8008420 <__lshift>
 800906c:	4683      	mov	fp, r0
 800906e:	2800      	cmp	r0, #0
 8009070:	f43f ae7c 	beq.w	8008d6c <_strtod_l+0x47c>
 8009074:	4620      	mov	r0, r4
 8009076:	9a08      	ldr	r2, [sp, #32]
 8009078:	991a      	ldr	r1, [sp, #104]	; 0x68
 800907a:	f7ff fa59 	bl	8008530 <__mdiff>
 800907e:	4606      	mov	r6, r0
 8009080:	2800      	cmp	r0, #0
 8009082:	f43f ae73 	beq.w	8008d6c <_strtod_l+0x47c>
 8009086:	2500      	movs	r5, #0
 8009088:	68c3      	ldr	r3, [r0, #12]
 800908a:	4659      	mov	r1, fp
 800908c:	60c5      	str	r5, [r0, #12]
 800908e:	930a      	str	r3, [sp, #40]	; 0x28
 8009090:	f7ff fa32 	bl	80084f8 <__mcmp>
 8009094:	42a8      	cmp	r0, r5
 8009096:	da6b      	bge.n	8009170 <_strtod_l+0x880>
 8009098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800909a:	ea53 0308 	orrs.w	r3, r3, r8
 800909e:	f040 808f 	bne.w	80091c0 <_strtod_l+0x8d0>
 80090a2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f040 808a 	bne.w	80091c0 <_strtod_l+0x8d0>
 80090ac:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80090b0:	0d1b      	lsrs	r3, r3, #20
 80090b2:	051b      	lsls	r3, r3, #20
 80090b4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80090b8:	f240 8082 	bls.w	80091c0 <_strtod_l+0x8d0>
 80090bc:	6973      	ldr	r3, [r6, #20]
 80090be:	b913      	cbnz	r3, 80090c6 <_strtod_l+0x7d6>
 80090c0:	6933      	ldr	r3, [r6, #16]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	dd7c      	ble.n	80091c0 <_strtod_l+0x8d0>
 80090c6:	4631      	mov	r1, r6
 80090c8:	2201      	movs	r2, #1
 80090ca:	4620      	mov	r0, r4
 80090cc:	f7ff f9a8 	bl	8008420 <__lshift>
 80090d0:	4659      	mov	r1, fp
 80090d2:	4606      	mov	r6, r0
 80090d4:	f7ff fa10 	bl	80084f8 <__mcmp>
 80090d8:	2800      	cmp	r0, #0
 80090da:	dd71      	ble.n	80091c0 <_strtod_l+0x8d0>
 80090dc:	9905      	ldr	r1, [sp, #20]
 80090de:	464b      	mov	r3, r9
 80090e0:	4a21      	ldr	r2, [pc, #132]	; (8009168 <_strtod_l+0x878>)
 80090e2:	2900      	cmp	r1, #0
 80090e4:	f000 808d 	beq.w	8009202 <_strtod_l+0x912>
 80090e8:	ea02 0109 	and.w	r1, r2, r9
 80090ec:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80090f0:	f300 8087 	bgt.w	8009202 <_strtod_l+0x912>
 80090f4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80090f8:	f77f aea9 	ble.w	8008e4e <_strtod_l+0x55e>
 80090fc:	4640      	mov	r0, r8
 80090fe:	4649      	mov	r1, r9
 8009100:	4b1a      	ldr	r3, [pc, #104]	; (800916c <_strtod_l+0x87c>)
 8009102:	2200      	movs	r2, #0
 8009104:	f7f7 fa54 	bl	80005b0 <__aeabi_dmul>
 8009108:	4b17      	ldr	r3, [pc, #92]	; (8009168 <_strtod_l+0x878>)
 800910a:	4680      	mov	r8, r0
 800910c:	400b      	ands	r3, r1
 800910e:	4689      	mov	r9, r1
 8009110:	2b00      	cmp	r3, #0
 8009112:	f47f ae35 	bne.w	8008d80 <_strtod_l+0x490>
 8009116:	2322      	movs	r3, #34	; 0x22
 8009118:	6023      	str	r3, [r4, #0]
 800911a:	e631      	b.n	8008d80 <_strtod_l+0x490>
 800911c:	f04f 32ff 	mov.w	r2, #4294967295
 8009120:	fa02 f303 	lsl.w	r3, r2, r3
 8009124:	ea03 0808 	and.w	r8, r3, r8
 8009128:	e6de      	b.n	8008ee8 <_strtod_l+0x5f8>
 800912a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800912e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8009132:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8009136:	37e2      	adds	r7, #226	; 0xe2
 8009138:	fa01 f307 	lsl.w	r3, r1, r7
 800913c:	9310      	str	r3, [sp, #64]	; 0x40
 800913e:	9113      	str	r1, [sp, #76]	; 0x4c
 8009140:	e745      	b.n	8008fce <_strtod_l+0x6de>
 8009142:	2300      	movs	r3, #0
 8009144:	9310      	str	r3, [sp, #64]	; 0x40
 8009146:	2301      	movs	r3, #1
 8009148:	9313      	str	r3, [sp, #76]	; 0x4c
 800914a:	e740      	b.n	8008fce <_strtod_l+0x6de>
 800914c:	463a      	mov	r2, r7
 800914e:	4620      	mov	r0, r4
 8009150:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009152:	f7ff f965 	bl	8008420 <__lshift>
 8009156:	901a      	str	r0, [sp, #104]	; 0x68
 8009158:	2800      	cmp	r0, #0
 800915a:	f47f af68 	bne.w	800902e <_strtod_l+0x73e>
 800915e:	e605      	b.n	8008d6c <_strtod_l+0x47c>
 8009160:	0800aa70 	.word	0x0800aa70
 8009164:	fffffc02 	.word	0xfffffc02
 8009168:	7ff00000 	.word	0x7ff00000
 800916c:	39500000 	.word	0x39500000
 8009170:	46ca      	mov	sl, r9
 8009172:	d165      	bne.n	8009240 <_strtod_l+0x950>
 8009174:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009176:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800917a:	b352      	cbz	r2, 80091d2 <_strtod_l+0x8e2>
 800917c:	4a9e      	ldr	r2, [pc, #632]	; (80093f8 <_strtod_l+0xb08>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d12a      	bne.n	80091d8 <_strtod_l+0x8e8>
 8009182:	9b05      	ldr	r3, [sp, #20]
 8009184:	4641      	mov	r1, r8
 8009186:	b1fb      	cbz	r3, 80091c8 <_strtod_l+0x8d8>
 8009188:	4b9c      	ldr	r3, [pc, #624]	; (80093fc <_strtod_l+0xb0c>)
 800918a:	f04f 32ff 	mov.w	r2, #4294967295
 800918e:	ea09 0303 	and.w	r3, r9, r3
 8009192:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009196:	d81a      	bhi.n	80091ce <_strtod_l+0x8de>
 8009198:	0d1b      	lsrs	r3, r3, #20
 800919a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800919e:	fa02 f303 	lsl.w	r3, r2, r3
 80091a2:	4299      	cmp	r1, r3
 80091a4:	d118      	bne.n	80091d8 <_strtod_l+0x8e8>
 80091a6:	4b96      	ldr	r3, [pc, #600]	; (8009400 <_strtod_l+0xb10>)
 80091a8:	459a      	cmp	sl, r3
 80091aa:	d102      	bne.n	80091b2 <_strtod_l+0x8c2>
 80091ac:	3101      	adds	r1, #1
 80091ae:	f43f addd 	beq.w	8008d6c <_strtod_l+0x47c>
 80091b2:	f04f 0800 	mov.w	r8, #0
 80091b6:	4b91      	ldr	r3, [pc, #580]	; (80093fc <_strtod_l+0xb0c>)
 80091b8:	ea0a 0303 	and.w	r3, sl, r3
 80091bc:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80091c0:	9b05      	ldr	r3, [sp, #20]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d19a      	bne.n	80090fc <_strtod_l+0x80c>
 80091c6:	e5db      	b.n	8008d80 <_strtod_l+0x490>
 80091c8:	f04f 33ff 	mov.w	r3, #4294967295
 80091cc:	e7e9      	b.n	80091a2 <_strtod_l+0x8b2>
 80091ce:	4613      	mov	r3, r2
 80091d0:	e7e7      	b.n	80091a2 <_strtod_l+0x8b2>
 80091d2:	ea53 0308 	orrs.w	r3, r3, r8
 80091d6:	d081      	beq.n	80090dc <_strtod_l+0x7ec>
 80091d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091da:	b1e3      	cbz	r3, 8009216 <_strtod_l+0x926>
 80091dc:	ea13 0f0a 	tst.w	r3, sl
 80091e0:	d0ee      	beq.n	80091c0 <_strtod_l+0x8d0>
 80091e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091e4:	4640      	mov	r0, r8
 80091e6:	4649      	mov	r1, r9
 80091e8:	9a05      	ldr	r2, [sp, #20]
 80091ea:	b1c3      	cbz	r3, 800921e <_strtod_l+0x92e>
 80091ec:	f7ff fb5c 	bl	80088a8 <sulp>
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80091f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80091f8:	f7f7 f824 	bl	8000244 <__adddf3>
 80091fc:	4680      	mov	r8, r0
 80091fe:	4689      	mov	r9, r1
 8009200:	e7de      	b.n	80091c0 <_strtod_l+0x8d0>
 8009202:	4013      	ands	r3, r2
 8009204:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009208:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800920c:	f04f 38ff 	mov.w	r8, #4294967295
 8009210:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009214:	e7d4      	b.n	80091c0 <_strtod_l+0x8d0>
 8009216:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009218:	ea13 0f08 	tst.w	r3, r8
 800921c:	e7e0      	b.n	80091e0 <_strtod_l+0x8f0>
 800921e:	f7ff fb43 	bl	80088a8 <sulp>
 8009222:	4602      	mov	r2, r0
 8009224:	460b      	mov	r3, r1
 8009226:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009228:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800922a:	f7f7 f809 	bl	8000240 <__aeabi_dsub>
 800922e:	2200      	movs	r2, #0
 8009230:	2300      	movs	r3, #0
 8009232:	4680      	mov	r8, r0
 8009234:	4689      	mov	r9, r1
 8009236:	f7f7 fc23 	bl	8000a80 <__aeabi_dcmpeq>
 800923a:	2800      	cmp	r0, #0
 800923c:	d0c0      	beq.n	80091c0 <_strtod_l+0x8d0>
 800923e:	e606      	b.n	8008e4e <_strtod_l+0x55e>
 8009240:	4659      	mov	r1, fp
 8009242:	4630      	mov	r0, r6
 8009244:	f7ff fabe 	bl	80087c4 <__ratio>
 8009248:	4602      	mov	r2, r0
 800924a:	460b      	mov	r3, r1
 800924c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009250:	2200      	movs	r2, #0
 8009252:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009256:	f7f7 fc27 	bl	8000aa8 <__aeabi_dcmple>
 800925a:	2800      	cmp	r0, #0
 800925c:	d06f      	beq.n	800933e <_strtod_l+0xa4e>
 800925e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009260:	2b00      	cmp	r3, #0
 8009262:	d17c      	bne.n	800935e <_strtod_l+0xa6e>
 8009264:	f1b8 0f00 	cmp.w	r8, #0
 8009268:	d159      	bne.n	800931e <_strtod_l+0xa2e>
 800926a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800926e:	2b00      	cmp	r3, #0
 8009270:	d17b      	bne.n	800936a <_strtod_l+0xa7a>
 8009272:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009276:	2200      	movs	r2, #0
 8009278:	4b62      	ldr	r3, [pc, #392]	; (8009404 <_strtod_l+0xb14>)
 800927a:	f7f7 fc0b 	bl	8000a94 <__aeabi_dcmplt>
 800927e:	2800      	cmp	r0, #0
 8009280:	d15a      	bne.n	8009338 <_strtod_l+0xa48>
 8009282:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009286:	2200      	movs	r2, #0
 8009288:	4b5f      	ldr	r3, [pc, #380]	; (8009408 <_strtod_l+0xb18>)
 800928a:	f7f7 f991 	bl	80005b0 <__aeabi_dmul>
 800928e:	4605      	mov	r5, r0
 8009290:	460f      	mov	r7, r1
 8009292:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009296:	9506      	str	r5, [sp, #24]
 8009298:	9307      	str	r3, [sp, #28]
 800929a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800929e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80092a2:	4b56      	ldr	r3, [pc, #344]	; (80093fc <_strtod_l+0xb0c>)
 80092a4:	4a55      	ldr	r2, [pc, #340]	; (80093fc <_strtod_l+0xb0c>)
 80092a6:	ea0a 0303 	and.w	r3, sl, r3
 80092aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80092ac:	4b57      	ldr	r3, [pc, #348]	; (800940c <_strtod_l+0xb1c>)
 80092ae:	ea0a 0202 	and.w	r2, sl, r2
 80092b2:	429a      	cmp	r2, r3
 80092b4:	f040 80b0 	bne.w	8009418 <_strtod_l+0xb28>
 80092b8:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80092bc:	4640      	mov	r0, r8
 80092be:	4649      	mov	r1, r9
 80092c0:	f7ff f9c2 	bl	8008648 <__ulp>
 80092c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092c8:	f7f7 f972 	bl	80005b0 <__aeabi_dmul>
 80092cc:	4642      	mov	r2, r8
 80092ce:	464b      	mov	r3, r9
 80092d0:	f7f6 ffb8 	bl	8000244 <__adddf3>
 80092d4:	f8df a124 	ldr.w	sl, [pc, #292]	; 80093fc <_strtod_l+0xb0c>
 80092d8:	4a4d      	ldr	r2, [pc, #308]	; (8009410 <_strtod_l+0xb20>)
 80092da:	ea01 0a0a 	and.w	sl, r1, sl
 80092de:	4592      	cmp	sl, r2
 80092e0:	4680      	mov	r8, r0
 80092e2:	d948      	bls.n	8009376 <_strtod_l+0xa86>
 80092e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80092e6:	4b46      	ldr	r3, [pc, #280]	; (8009400 <_strtod_l+0xb10>)
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d103      	bne.n	80092f4 <_strtod_l+0xa04>
 80092ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092ee:	3301      	adds	r3, #1
 80092f0:	f43f ad3c 	beq.w	8008d6c <_strtod_l+0x47c>
 80092f4:	f04f 38ff 	mov.w	r8, #4294967295
 80092f8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8009400 <_strtod_l+0xb10>
 80092fc:	4620      	mov	r0, r4
 80092fe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009300:	f7fe fe76 	bl	8007ff0 <_Bfree>
 8009304:	4620      	mov	r0, r4
 8009306:	9908      	ldr	r1, [sp, #32]
 8009308:	f7fe fe72 	bl	8007ff0 <_Bfree>
 800930c:	4659      	mov	r1, fp
 800930e:	4620      	mov	r0, r4
 8009310:	f7fe fe6e 	bl	8007ff0 <_Bfree>
 8009314:	4631      	mov	r1, r6
 8009316:	4620      	mov	r0, r4
 8009318:	f7fe fe6a 	bl	8007ff0 <_Bfree>
 800931c:	e605      	b.n	8008f2a <_strtod_l+0x63a>
 800931e:	f1b8 0f01 	cmp.w	r8, #1
 8009322:	d103      	bne.n	800932c <_strtod_l+0xa3c>
 8009324:	f1b9 0f00 	cmp.w	r9, #0
 8009328:	f43f ad91 	beq.w	8008e4e <_strtod_l+0x55e>
 800932c:	2200      	movs	r2, #0
 800932e:	4b39      	ldr	r3, [pc, #228]	; (8009414 <_strtod_l+0xb24>)
 8009330:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009332:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009336:	e016      	b.n	8009366 <_strtod_l+0xa76>
 8009338:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800933a:	4f33      	ldr	r7, [pc, #204]	; (8009408 <_strtod_l+0xb18>)
 800933c:	e7a9      	b.n	8009292 <_strtod_l+0x9a2>
 800933e:	4b32      	ldr	r3, [pc, #200]	; (8009408 <_strtod_l+0xb18>)
 8009340:	2200      	movs	r2, #0
 8009342:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009346:	f7f7 f933 	bl	80005b0 <__aeabi_dmul>
 800934a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800934c:	4605      	mov	r5, r0
 800934e:	460f      	mov	r7, r1
 8009350:	2b00      	cmp	r3, #0
 8009352:	d09e      	beq.n	8009292 <_strtod_l+0x9a2>
 8009354:	4602      	mov	r2, r0
 8009356:	460b      	mov	r3, r1
 8009358:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800935c:	e79d      	b.n	800929a <_strtod_l+0x9aa>
 800935e:	2200      	movs	r2, #0
 8009360:	4b28      	ldr	r3, [pc, #160]	; (8009404 <_strtod_l+0xb14>)
 8009362:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009366:	4f27      	ldr	r7, [pc, #156]	; (8009404 <_strtod_l+0xb14>)
 8009368:	e797      	b.n	800929a <_strtod_l+0x9aa>
 800936a:	2200      	movs	r2, #0
 800936c:	4b29      	ldr	r3, [pc, #164]	; (8009414 <_strtod_l+0xb24>)
 800936e:	4645      	mov	r5, r8
 8009370:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009374:	e7f7      	b.n	8009366 <_strtod_l+0xa76>
 8009376:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800937a:	9b05      	ldr	r3, [sp, #20]
 800937c:	46ca      	mov	sl, r9
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1bc      	bne.n	80092fc <_strtod_l+0xa0c>
 8009382:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009386:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009388:	0d1b      	lsrs	r3, r3, #20
 800938a:	051b      	lsls	r3, r3, #20
 800938c:	429a      	cmp	r2, r3
 800938e:	d1b5      	bne.n	80092fc <_strtod_l+0xa0c>
 8009390:	4628      	mov	r0, r5
 8009392:	4639      	mov	r1, r7
 8009394:	f7f7 ff48 	bl	8001228 <__aeabi_d2lz>
 8009398:	f7f7 f8dc 	bl	8000554 <__aeabi_l2d>
 800939c:	4602      	mov	r2, r0
 800939e:	460b      	mov	r3, r1
 80093a0:	4628      	mov	r0, r5
 80093a2:	4639      	mov	r1, r7
 80093a4:	f7f6 ff4c 	bl	8000240 <__aeabi_dsub>
 80093a8:	460b      	mov	r3, r1
 80093aa:	4602      	mov	r2, r0
 80093ac:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80093b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80093b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093b6:	ea4a 0a08 	orr.w	sl, sl, r8
 80093ba:	ea5a 0a03 	orrs.w	sl, sl, r3
 80093be:	d06c      	beq.n	800949a <_strtod_l+0xbaa>
 80093c0:	a309      	add	r3, pc, #36	; (adr r3, 80093e8 <_strtod_l+0xaf8>)
 80093c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c6:	f7f7 fb65 	bl	8000a94 <__aeabi_dcmplt>
 80093ca:	2800      	cmp	r0, #0
 80093cc:	f47f acd8 	bne.w	8008d80 <_strtod_l+0x490>
 80093d0:	a307      	add	r3, pc, #28	; (adr r3, 80093f0 <_strtod_l+0xb00>)
 80093d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80093da:	f7f7 fb79 	bl	8000ad0 <__aeabi_dcmpgt>
 80093de:	2800      	cmp	r0, #0
 80093e0:	d08c      	beq.n	80092fc <_strtod_l+0xa0c>
 80093e2:	e4cd      	b.n	8008d80 <_strtod_l+0x490>
 80093e4:	f3af 8000 	nop.w
 80093e8:	94a03595 	.word	0x94a03595
 80093ec:	3fdfffff 	.word	0x3fdfffff
 80093f0:	35afe535 	.word	0x35afe535
 80093f4:	3fe00000 	.word	0x3fe00000
 80093f8:	000fffff 	.word	0x000fffff
 80093fc:	7ff00000 	.word	0x7ff00000
 8009400:	7fefffff 	.word	0x7fefffff
 8009404:	3ff00000 	.word	0x3ff00000
 8009408:	3fe00000 	.word	0x3fe00000
 800940c:	7fe00000 	.word	0x7fe00000
 8009410:	7c9fffff 	.word	0x7c9fffff
 8009414:	bff00000 	.word	0xbff00000
 8009418:	9b05      	ldr	r3, [sp, #20]
 800941a:	b333      	cbz	r3, 800946a <_strtod_l+0xb7a>
 800941c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800941e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009422:	d822      	bhi.n	800946a <_strtod_l+0xb7a>
 8009424:	a328      	add	r3, pc, #160	; (adr r3, 80094c8 <_strtod_l+0xbd8>)
 8009426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942a:	4628      	mov	r0, r5
 800942c:	4639      	mov	r1, r7
 800942e:	f7f7 fb3b 	bl	8000aa8 <__aeabi_dcmple>
 8009432:	b1a0      	cbz	r0, 800945e <_strtod_l+0xb6e>
 8009434:	4639      	mov	r1, r7
 8009436:	4628      	mov	r0, r5
 8009438:	f7f7 fb92 	bl	8000b60 <__aeabi_d2uiz>
 800943c:	2801      	cmp	r0, #1
 800943e:	bf38      	it	cc
 8009440:	2001      	movcc	r0, #1
 8009442:	f7f7 f83b 	bl	80004bc <__aeabi_ui2d>
 8009446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009448:	4605      	mov	r5, r0
 800944a:	460f      	mov	r7, r1
 800944c:	bb03      	cbnz	r3, 8009490 <_strtod_l+0xba0>
 800944e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009452:	9014      	str	r0, [sp, #80]	; 0x50
 8009454:	9315      	str	r3, [sp, #84]	; 0x54
 8009456:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800945a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800945e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009460:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009462:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009466:	1a9b      	subs	r3, r3, r2
 8009468:	9311      	str	r3, [sp, #68]	; 0x44
 800946a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800946c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800946e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8009472:	f7ff f8e9 	bl	8008648 <__ulp>
 8009476:	4602      	mov	r2, r0
 8009478:	460b      	mov	r3, r1
 800947a:	4640      	mov	r0, r8
 800947c:	4649      	mov	r1, r9
 800947e:	f7f7 f897 	bl	80005b0 <__aeabi_dmul>
 8009482:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009484:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009486:	f7f6 fedd 	bl	8000244 <__adddf3>
 800948a:	4680      	mov	r8, r0
 800948c:	4689      	mov	r9, r1
 800948e:	e774      	b.n	800937a <_strtod_l+0xa8a>
 8009490:	4602      	mov	r2, r0
 8009492:	460b      	mov	r3, r1
 8009494:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009498:	e7dd      	b.n	8009456 <_strtod_l+0xb66>
 800949a:	a30d      	add	r3, pc, #52	; (adr r3, 80094d0 <_strtod_l+0xbe0>)
 800949c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a0:	f7f7 faf8 	bl	8000a94 <__aeabi_dcmplt>
 80094a4:	e79b      	b.n	80093de <_strtod_l+0xaee>
 80094a6:	2300      	movs	r3, #0
 80094a8:	930e      	str	r3, [sp, #56]	; 0x38
 80094aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80094ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80094ae:	6013      	str	r3, [r2, #0]
 80094b0:	f7ff ba5b 	b.w	800896a <_strtod_l+0x7a>
 80094b4:	2a65      	cmp	r2, #101	; 0x65
 80094b6:	f43f ab52 	beq.w	8008b5e <_strtod_l+0x26e>
 80094ba:	2a45      	cmp	r2, #69	; 0x45
 80094bc:	f43f ab4f 	beq.w	8008b5e <_strtod_l+0x26e>
 80094c0:	2301      	movs	r3, #1
 80094c2:	f7ff bb87 	b.w	8008bd4 <_strtod_l+0x2e4>
 80094c6:	bf00      	nop
 80094c8:	ffc00000 	.word	0xffc00000
 80094cc:	41dfffff 	.word	0x41dfffff
 80094d0:	94a03595 	.word	0x94a03595
 80094d4:	3fcfffff 	.word	0x3fcfffff

080094d8 <_strtod_r>:
 80094d8:	4b01      	ldr	r3, [pc, #4]	; (80094e0 <_strtod_r+0x8>)
 80094da:	f7ff ba09 	b.w	80088f0 <_strtod_l>
 80094de:	bf00      	nop
 80094e0:	20000078 	.word	0x20000078

080094e4 <_strtol_l.constprop.0>:
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094ea:	4686      	mov	lr, r0
 80094ec:	4690      	mov	r8, r2
 80094ee:	d001      	beq.n	80094f4 <_strtol_l.constprop.0+0x10>
 80094f0:	2b24      	cmp	r3, #36	; 0x24
 80094f2:	d906      	bls.n	8009502 <_strtol_l.constprop.0+0x1e>
 80094f4:	f7fd fd90 	bl	8007018 <__errno>
 80094f8:	2316      	movs	r3, #22
 80094fa:	6003      	str	r3, [r0, #0]
 80094fc:	2000      	movs	r0, #0
 80094fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009502:	460d      	mov	r5, r1
 8009504:	4835      	ldr	r0, [pc, #212]	; (80095dc <_strtol_l.constprop.0+0xf8>)
 8009506:	462a      	mov	r2, r5
 8009508:	f815 4b01 	ldrb.w	r4, [r5], #1
 800950c:	5d06      	ldrb	r6, [r0, r4]
 800950e:	f016 0608 	ands.w	r6, r6, #8
 8009512:	d1f8      	bne.n	8009506 <_strtol_l.constprop.0+0x22>
 8009514:	2c2d      	cmp	r4, #45	; 0x2d
 8009516:	d12e      	bne.n	8009576 <_strtol_l.constprop.0+0x92>
 8009518:	2601      	movs	r6, #1
 800951a:	782c      	ldrb	r4, [r5, #0]
 800951c:	1c95      	adds	r5, r2, #2
 800951e:	2b00      	cmp	r3, #0
 8009520:	d057      	beq.n	80095d2 <_strtol_l.constprop.0+0xee>
 8009522:	2b10      	cmp	r3, #16
 8009524:	d109      	bne.n	800953a <_strtol_l.constprop.0+0x56>
 8009526:	2c30      	cmp	r4, #48	; 0x30
 8009528:	d107      	bne.n	800953a <_strtol_l.constprop.0+0x56>
 800952a:	782a      	ldrb	r2, [r5, #0]
 800952c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009530:	2a58      	cmp	r2, #88	; 0x58
 8009532:	d149      	bne.n	80095c8 <_strtol_l.constprop.0+0xe4>
 8009534:	2310      	movs	r3, #16
 8009536:	786c      	ldrb	r4, [r5, #1]
 8009538:	3502      	adds	r5, #2
 800953a:	2200      	movs	r2, #0
 800953c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8009540:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009544:	fbbc f9f3 	udiv	r9, ip, r3
 8009548:	4610      	mov	r0, r2
 800954a:	fb03 ca19 	mls	sl, r3, r9, ip
 800954e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009552:	2f09      	cmp	r7, #9
 8009554:	d814      	bhi.n	8009580 <_strtol_l.constprop.0+0x9c>
 8009556:	463c      	mov	r4, r7
 8009558:	42a3      	cmp	r3, r4
 800955a:	dd20      	ble.n	800959e <_strtol_l.constprop.0+0xba>
 800955c:	1c57      	adds	r7, r2, #1
 800955e:	d007      	beq.n	8009570 <_strtol_l.constprop.0+0x8c>
 8009560:	4581      	cmp	r9, r0
 8009562:	d319      	bcc.n	8009598 <_strtol_l.constprop.0+0xb4>
 8009564:	d101      	bne.n	800956a <_strtol_l.constprop.0+0x86>
 8009566:	45a2      	cmp	sl, r4
 8009568:	db16      	blt.n	8009598 <_strtol_l.constprop.0+0xb4>
 800956a:	2201      	movs	r2, #1
 800956c:	fb00 4003 	mla	r0, r0, r3, r4
 8009570:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009574:	e7eb      	b.n	800954e <_strtol_l.constprop.0+0x6a>
 8009576:	2c2b      	cmp	r4, #43	; 0x2b
 8009578:	bf04      	itt	eq
 800957a:	782c      	ldrbeq	r4, [r5, #0]
 800957c:	1c95      	addeq	r5, r2, #2
 800957e:	e7ce      	b.n	800951e <_strtol_l.constprop.0+0x3a>
 8009580:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009584:	2f19      	cmp	r7, #25
 8009586:	d801      	bhi.n	800958c <_strtol_l.constprop.0+0xa8>
 8009588:	3c37      	subs	r4, #55	; 0x37
 800958a:	e7e5      	b.n	8009558 <_strtol_l.constprop.0+0x74>
 800958c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009590:	2f19      	cmp	r7, #25
 8009592:	d804      	bhi.n	800959e <_strtol_l.constprop.0+0xba>
 8009594:	3c57      	subs	r4, #87	; 0x57
 8009596:	e7df      	b.n	8009558 <_strtol_l.constprop.0+0x74>
 8009598:	f04f 32ff 	mov.w	r2, #4294967295
 800959c:	e7e8      	b.n	8009570 <_strtol_l.constprop.0+0x8c>
 800959e:	1c53      	adds	r3, r2, #1
 80095a0:	d108      	bne.n	80095b4 <_strtol_l.constprop.0+0xd0>
 80095a2:	2322      	movs	r3, #34	; 0x22
 80095a4:	4660      	mov	r0, ip
 80095a6:	f8ce 3000 	str.w	r3, [lr]
 80095aa:	f1b8 0f00 	cmp.w	r8, #0
 80095ae:	d0a6      	beq.n	80094fe <_strtol_l.constprop.0+0x1a>
 80095b0:	1e69      	subs	r1, r5, #1
 80095b2:	e006      	b.n	80095c2 <_strtol_l.constprop.0+0xde>
 80095b4:	b106      	cbz	r6, 80095b8 <_strtol_l.constprop.0+0xd4>
 80095b6:	4240      	negs	r0, r0
 80095b8:	f1b8 0f00 	cmp.w	r8, #0
 80095bc:	d09f      	beq.n	80094fe <_strtol_l.constprop.0+0x1a>
 80095be:	2a00      	cmp	r2, #0
 80095c0:	d1f6      	bne.n	80095b0 <_strtol_l.constprop.0+0xcc>
 80095c2:	f8c8 1000 	str.w	r1, [r8]
 80095c6:	e79a      	b.n	80094fe <_strtol_l.constprop.0+0x1a>
 80095c8:	2430      	movs	r4, #48	; 0x30
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1b5      	bne.n	800953a <_strtol_l.constprop.0+0x56>
 80095ce:	2308      	movs	r3, #8
 80095d0:	e7b3      	b.n	800953a <_strtol_l.constprop.0+0x56>
 80095d2:	2c30      	cmp	r4, #48	; 0x30
 80095d4:	d0a9      	beq.n	800952a <_strtol_l.constprop.0+0x46>
 80095d6:	230a      	movs	r3, #10
 80095d8:	e7af      	b.n	800953a <_strtol_l.constprop.0+0x56>
 80095da:	bf00      	nop
 80095dc:	0800aa99 	.word	0x0800aa99

080095e0 <_strtol_r>:
 80095e0:	f7ff bf80 	b.w	80094e4 <_strtol_l.constprop.0>

080095e4 <__ssputs_r>:
 80095e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095e8:	461f      	mov	r7, r3
 80095ea:	688e      	ldr	r6, [r1, #8]
 80095ec:	4682      	mov	sl, r0
 80095ee:	42be      	cmp	r6, r7
 80095f0:	460c      	mov	r4, r1
 80095f2:	4690      	mov	r8, r2
 80095f4:	680b      	ldr	r3, [r1, #0]
 80095f6:	d82c      	bhi.n	8009652 <__ssputs_r+0x6e>
 80095f8:	898a      	ldrh	r2, [r1, #12]
 80095fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095fe:	d026      	beq.n	800964e <__ssputs_r+0x6a>
 8009600:	6965      	ldr	r5, [r4, #20]
 8009602:	6909      	ldr	r1, [r1, #16]
 8009604:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009608:	eba3 0901 	sub.w	r9, r3, r1
 800960c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009610:	1c7b      	adds	r3, r7, #1
 8009612:	444b      	add	r3, r9
 8009614:	106d      	asrs	r5, r5, #1
 8009616:	429d      	cmp	r5, r3
 8009618:	bf38      	it	cc
 800961a:	461d      	movcc	r5, r3
 800961c:	0553      	lsls	r3, r2, #21
 800961e:	d527      	bpl.n	8009670 <__ssputs_r+0x8c>
 8009620:	4629      	mov	r1, r5
 8009622:	f7fe fc19 	bl	8007e58 <_malloc_r>
 8009626:	4606      	mov	r6, r0
 8009628:	b360      	cbz	r0, 8009684 <__ssputs_r+0xa0>
 800962a:	464a      	mov	r2, r9
 800962c:	6921      	ldr	r1, [r4, #16]
 800962e:	f000 fa17 	bl	8009a60 <memcpy>
 8009632:	89a3      	ldrh	r3, [r4, #12]
 8009634:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800963c:	81a3      	strh	r3, [r4, #12]
 800963e:	6126      	str	r6, [r4, #16]
 8009640:	444e      	add	r6, r9
 8009642:	6026      	str	r6, [r4, #0]
 8009644:	463e      	mov	r6, r7
 8009646:	6165      	str	r5, [r4, #20]
 8009648:	eba5 0509 	sub.w	r5, r5, r9
 800964c:	60a5      	str	r5, [r4, #8]
 800964e:	42be      	cmp	r6, r7
 8009650:	d900      	bls.n	8009654 <__ssputs_r+0x70>
 8009652:	463e      	mov	r6, r7
 8009654:	4632      	mov	r2, r6
 8009656:	4641      	mov	r1, r8
 8009658:	6820      	ldr	r0, [r4, #0]
 800965a:	f000 f9c5 	bl	80099e8 <memmove>
 800965e:	2000      	movs	r0, #0
 8009660:	68a3      	ldr	r3, [r4, #8]
 8009662:	1b9b      	subs	r3, r3, r6
 8009664:	60a3      	str	r3, [r4, #8]
 8009666:	6823      	ldr	r3, [r4, #0]
 8009668:	4433      	add	r3, r6
 800966a:	6023      	str	r3, [r4, #0]
 800966c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009670:	462a      	mov	r2, r5
 8009672:	f000 fda6 	bl	800a1c2 <_realloc_r>
 8009676:	4606      	mov	r6, r0
 8009678:	2800      	cmp	r0, #0
 800967a:	d1e0      	bne.n	800963e <__ssputs_r+0x5a>
 800967c:	4650      	mov	r0, sl
 800967e:	6921      	ldr	r1, [r4, #16]
 8009680:	f7fe fb7a 	bl	8007d78 <_free_r>
 8009684:	230c      	movs	r3, #12
 8009686:	f8ca 3000 	str.w	r3, [sl]
 800968a:	89a3      	ldrh	r3, [r4, #12]
 800968c:	f04f 30ff 	mov.w	r0, #4294967295
 8009690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009694:	81a3      	strh	r3, [r4, #12]
 8009696:	e7e9      	b.n	800966c <__ssputs_r+0x88>

08009698 <_svfiprintf_r>:
 8009698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800969c:	4698      	mov	r8, r3
 800969e:	898b      	ldrh	r3, [r1, #12]
 80096a0:	4607      	mov	r7, r0
 80096a2:	061b      	lsls	r3, r3, #24
 80096a4:	460d      	mov	r5, r1
 80096a6:	4614      	mov	r4, r2
 80096a8:	b09d      	sub	sp, #116	; 0x74
 80096aa:	d50e      	bpl.n	80096ca <_svfiprintf_r+0x32>
 80096ac:	690b      	ldr	r3, [r1, #16]
 80096ae:	b963      	cbnz	r3, 80096ca <_svfiprintf_r+0x32>
 80096b0:	2140      	movs	r1, #64	; 0x40
 80096b2:	f7fe fbd1 	bl	8007e58 <_malloc_r>
 80096b6:	6028      	str	r0, [r5, #0]
 80096b8:	6128      	str	r0, [r5, #16]
 80096ba:	b920      	cbnz	r0, 80096c6 <_svfiprintf_r+0x2e>
 80096bc:	230c      	movs	r3, #12
 80096be:	603b      	str	r3, [r7, #0]
 80096c0:	f04f 30ff 	mov.w	r0, #4294967295
 80096c4:	e0d0      	b.n	8009868 <_svfiprintf_r+0x1d0>
 80096c6:	2340      	movs	r3, #64	; 0x40
 80096c8:	616b      	str	r3, [r5, #20]
 80096ca:	2300      	movs	r3, #0
 80096cc:	9309      	str	r3, [sp, #36]	; 0x24
 80096ce:	2320      	movs	r3, #32
 80096d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096d4:	2330      	movs	r3, #48	; 0x30
 80096d6:	f04f 0901 	mov.w	r9, #1
 80096da:	f8cd 800c 	str.w	r8, [sp, #12]
 80096de:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009880 <_svfiprintf_r+0x1e8>
 80096e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096e6:	4623      	mov	r3, r4
 80096e8:	469a      	mov	sl, r3
 80096ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096ee:	b10a      	cbz	r2, 80096f4 <_svfiprintf_r+0x5c>
 80096f0:	2a25      	cmp	r2, #37	; 0x25
 80096f2:	d1f9      	bne.n	80096e8 <_svfiprintf_r+0x50>
 80096f4:	ebba 0b04 	subs.w	fp, sl, r4
 80096f8:	d00b      	beq.n	8009712 <_svfiprintf_r+0x7a>
 80096fa:	465b      	mov	r3, fp
 80096fc:	4622      	mov	r2, r4
 80096fe:	4629      	mov	r1, r5
 8009700:	4638      	mov	r0, r7
 8009702:	f7ff ff6f 	bl	80095e4 <__ssputs_r>
 8009706:	3001      	adds	r0, #1
 8009708:	f000 80a9 	beq.w	800985e <_svfiprintf_r+0x1c6>
 800970c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800970e:	445a      	add	r2, fp
 8009710:	9209      	str	r2, [sp, #36]	; 0x24
 8009712:	f89a 3000 	ldrb.w	r3, [sl]
 8009716:	2b00      	cmp	r3, #0
 8009718:	f000 80a1 	beq.w	800985e <_svfiprintf_r+0x1c6>
 800971c:	2300      	movs	r3, #0
 800971e:	f04f 32ff 	mov.w	r2, #4294967295
 8009722:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009726:	f10a 0a01 	add.w	sl, sl, #1
 800972a:	9304      	str	r3, [sp, #16]
 800972c:	9307      	str	r3, [sp, #28]
 800972e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009732:	931a      	str	r3, [sp, #104]	; 0x68
 8009734:	4654      	mov	r4, sl
 8009736:	2205      	movs	r2, #5
 8009738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800973c:	4850      	ldr	r0, [pc, #320]	; (8009880 <_svfiprintf_r+0x1e8>)
 800973e:	f7fd fc98 	bl	8007072 <memchr>
 8009742:	9a04      	ldr	r2, [sp, #16]
 8009744:	b9d8      	cbnz	r0, 800977e <_svfiprintf_r+0xe6>
 8009746:	06d0      	lsls	r0, r2, #27
 8009748:	bf44      	itt	mi
 800974a:	2320      	movmi	r3, #32
 800974c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009750:	0711      	lsls	r1, r2, #28
 8009752:	bf44      	itt	mi
 8009754:	232b      	movmi	r3, #43	; 0x2b
 8009756:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800975a:	f89a 3000 	ldrb.w	r3, [sl]
 800975e:	2b2a      	cmp	r3, #42	; 0x2a
 8009760:	d015      	beq.n	800978e <_svfiprintf_r+0xf6>
 8009762:	4654      	mov	r4, sl
 8009764:	2000      	movs	r0, #0
 8009766:	f04f 0c0a 	mov.w	ip, #10
 800976a:	9a07      	ldr	r2, [sp, #28]
 800976c:	4621      	mov	r1, r4
 800976e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009772:	3b30      	subs	r3, #48	; 0x30
 8009774:	2b09      	cmp	r3, #9
 8009776:	d94d      	bls.n	8009814 <_svfiprintf_r+0x17c>
 8009778:	b1b0      	cbz	r0, 80097a8 <_svfiprintf_r+0x110>
 800977a:	9207      	str	r2, [sp, #28]
 800977c:	e014      	b.n	80097a8 <_svfiprintf_r+0x110>
 800977e:	eba0 0308 	sub.w	r3, r0, r8
 8009782:	fa09 f303 	lsl.w	r3, r9, r3
 8009786:	4313      	orrs	r3, r2
 8009788:	46a2      	mov	sl, r4
 800978a:	9304      	str	r3, [sp, #16]
 800978c:	e7d2      	b.n	8009734 <_svfiprintf_r+0x9c>
 800978e:	9b03      	ldr	r3, [sp, #12]
 8009790:	1d19      	adds	r1, r3, #4
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	9103      	str	r1, [sp, #12]
 8009796:	2b00      	cmp	r3, #0
 8009798:	bfbb      	ittet	lt
 800979a:	425b      	neglt	r3, r3
 800979c:	f042 0202 	orrlt.w	r2, r2, #2
 80097a0:	9307      	strge	r3, [sp, #28]
 80097a2:	9307      	strlt	r3, [sp, #28]
 80097a4:	bfb8      	it	lt
 80097a6:	9204      	strlt	r2, [sp, #16]
 80097a8:	7823      	ldrb	r3, [r4, #0]
 80097aa:	2b2e      	cmp	r3, #46	; 0x2e
 80097ac:	d10c      	bne.n	80097c8 <_svfiprintf_r+0x130>
 80097ae:	7863      	ldrb	r3, [r4, #1]
 80097b0:	2b2a      	cmp	r3, #42	; 0x2a
 80097b2:	d134      	bne.n	800981e <_svfiprintf_r+0x186>
 80097b4:	9b03      	ldr	r3, [sp, #12]
 80097b6:	3402      	adds	r4, #2
 80097b8:	1d1a      	adds	r2, r3, #4
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	9203      	str	r2, [sp, #12]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	bfb8      	it	lt
 80097c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80097c6:	9305      	str	r3, [sp, #20]
 80097c8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009884 <_svfiprintf_r+0x1ec>
 80097cc:	2203      	movs	r2, #3
 80097ce:	4650      	mov	r0, sl
 80097d0:	7821      	ldrb	r1, [r4, #0]
 80097d2:	f7fd fc4e 	bl	8007072 <memchr>
 80097d6:	b138      	cbz	r0, 80097e8 <_svfiprintf_r+0x150>
 80097d8:	2240      	movs	r2, #64	; 0x40
 80097da:	9b04      	ldr	r3, [sp, #16]
 80097dc:	eba0 000a 	sub.w	r0, r0, sl
 80097e0:	4082      	lsls	r2, r0
 80097e2:	4313      	orrs	r3, r2
 80097e4:	3401      	adds	r4, #1
 80097e6:	9304      	str	r3, [sp, #16]
 80097e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097ec:	2206      	movs	r2, #6
 80097ee:	4826      	ldr	r0, [pc, #152]	; (8009888 <_svfiprintf_r+0x1f0>)
 80097f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097f4:	f7fd fc3d 	bl	8007072 <memchr>
 80097f8:	2800      	cmp	r0, #0
 80097fa:	d038      	beq.n	800986e <_svfiprintf_r+0x1d6>
 80097fc:	4b23      	ldr	r3, [pc, #140]	; (800988c <_svfiprintf_r+0x1f4>)
 80097fe:	bb1b      	cbnz	r3, 8009848 <_svfiprintf_r+0x1b0>
 8009800:	9b03      	ldr	r3, [sp, #12]
 8009802:	3307      	adds	r3, #7
 8009804:	f023 0307 	bic.w	r3, r3, #7
 8009808:	3308      	adds	r3, #8
 800980a:	9303      	str	r3, [sp, #12]
 800980c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800980e:	4433      	add	r3, r6
 8009810:	9309      	str	r3, [sp, #36]	; 0x24
 8009812:	e768      	b.n	80096e6 <_svfiprintf_r+0x4e>
 8009814:	460c      	mov	r4, r1
 8009816:	2001      	movs	r0, #1
 8009818:	fb0c 3202 	mla	r2, ip, r2, r3
 800981c:	e7a6      	b.n	800976c <_svfiprintf_r+0xd4>
 800981e:	2300      	movs	r3, #0
 8009820:	f04f 0c0a 	mov.w	ip, #10
 8009824:	4619      	mov	r1, r3
 8009826:	3401      	adds	r4, #1
 8009828:	9305      	str	r3, [sp, #20]
 800982a:	4620      	mov	r0, r4
 800982c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009830:	3a30      	subs	r2, #48	; 0x30
 8009832:	2a09      	cmp	r2, #9
 8009834:	d903      	bls.n	800983e <_svfiprintf_r+0x1a6>
 8009836:	2b00      	cmp	r3, #0
 8009838:	d0c6      	beq.n	80097c8 <_svfiprintf_r+0x130>
 800983a:	9105      	str	r1, [sp, #20]
 800983c:	e7c4      	b.n	80097c8 <_svfiprintf_r+0x130>
 800983e:	4604      	mov	r4, r0
 8009840:	2301      	movs	r3, #1
 8009842:	fb0c 2101 	mla	r1, ip, r1, r2
 8009846:	e7f0      	b.n	800982a <_svfiprintf_r+0x192>
 8009848:	ab03      	add	r3, sp, #12
 800984a:	9300      	str	r3, [sp, #0]
 800984c:	462a      	mov	r2, r5
 800984e:	4638      	mov	r0, r7
 8009850:	4b0f      	ldr	r3, [pc, #60]	; (8009890 <_svfiprintf_r+0x1f8>)
 8009852:	a904      	add	r1, sp, #16
 8009854:	f7fc fc98 	bl	8006188 <_printf_float>
 8009858:	1c42      	adds	r2, r0, #1
 800985a:	4606      	mov	r6, r0
 800985c:	d1d6      	bne.n	800980c <_svfiprintf_r+0x174>
 800985e:	89ab      	ldrh	r3, [r5, #12]
 8009860:	065b      	lsls	r3, r3, #25
 8009862:	f53f af2d 	bmi.w	80096c0 <_svfiprintf_r+0x28>
 8009866:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009868:	b01d      	add	sp, #116	; 0x74
 800986a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800986e:	ab03      	add	r3, sp, #12
 8009870:	9300      	str	r3, [sp, #0]
 8009872:	462a      	mov	r2, r5
 8009874:	4638      	mov	r0, r7
 8009876:	4b06      	ldr	r3, [pc, #24]	; (8009890 <_svfiprintf_r+0x1f8>)
 8009878:	a904      	add	r1, sp, #16
 800987a:	f7fc ff25 	bl	80066c8 <_printf_i>
 800987e:	e7eb      	b.n	8009858 <_svfiprintf_r+0x1c0>
 8009880:	0800ab99 	.word	0x0800ab99
 8009884:	0800ab9f 	.word	0x0800ab9f
 8009888:	0800aba3 	.word	0x0800aba3
 800988c:	08006189 	.word	0x08006189
 8009890:	080095e5 	.word	0x080095e5

08009894 <__sflush_r>:
 8009894:	898a      	ldrh	r2, [r1, #12]
 8009896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009898:	4605      	mov	r5, r0
 800989a:	0710      	lsls	r0, r2, #28
 800989c:	460c      	mov	r4, r1
 800989e:	d457      	bmi.n	8009950 <__sflush_r+0xbc>
 80098a0:	684b      	ldr	r3, [r1, #4]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	dc04      	bgt.n	80098b0 <__sflush_r+0x1c>
 80098a6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	dc01      	bgt.n	80098b0 <__sflush_r+0x1c>
 80098ac:	2000      	movs	r0, #0
 80098ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098b2:	2e00      	cmp	r6, #0
 80098b4:	d0fa      	beq.n	80098ac <__sflush_r+0x18>
 80098b6:	2300      	movs	r3, #0
 80098b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098bc:	682f      	ldr	r7, [r5, #0]
 80098be:	6a21      	ldr	r1, [r4, #32]
 80098c0:	602b      	str	r3, [r5, #0]
 80098c2:	d032      	beq.n	800992a <__sflush_r+0x96>
 80098c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098c6:	89a3      	ldrh	r3, [r4, #12]
 80098c8:	075a      	lsls	r2, r3, #29
 80098ca:	d505      	bpl.n	80098d8 <__sflush_r+0x44>
 80098cc:	6863      	ldr	r3, [r4, #4]
 80098ce:	1ac0      	subs	r0, r0, r3
 80098d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098d2:	b10b      	cbz	r3, 80098d8 <__sflush_r+0x44>
 80098d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098d6:	1ac0      	subs	r0, r0, r3
 80098d8:	2300      	movs	r3, #0
 80098da:	4602      	mov	r2, r0
 80098dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098de:	4628      	mov	r0, r5
 80098e0:	6a21      	ldr	r1, [r4, #32]
 80098e2:	47b0      	blx	r6
 80098e4:	1c43      	adds	r3, r0, #1
 80098e6:	89a3      	ldrh	r3, [r4, #12]
 80098e8:	d106      	bne.n	80098f8 <__sflush_r+0x64>
 80098ea:	6829      	ldr	r1, [r5, #0]
 80098ec:	291d      	cmp	r1, #29
 80098ee:	d82b      	bhi.n	8009948 <__sflush_r+0xb4>
 80098f0:	4a28      	ldr	r2, [pc, #160]	; (8009994 <__sflush_r+0x100>)
 80098f2:	410a      	asrs	r2, r1
 80098f4:	07d6      	lsls	r6, r2, #31
 80098f6:	d427      	bmi.n	8009948 <__sflush_r+0xb4>
 80098f8:	2200      	movs	r2, #0
 80098fa:	6062      	str	r2, [r4, #4]
 80098fc:	6922      	ldr	r2, [r4, #16]
 80098fe:	04d9      	lsls	r1, r3, #19
 8009900:	6022      	str	r2, [r4, #0]
 8009902:	d504      	bpl.n	800990e <__sflush_r+0x7a>
 8009904:	1c42      	adds	r2, r0, #1
 8009906:	d101      	bne.n	800990c <__sflush_r+0x78>
 8009908:	682b      	ldr	r3, [r5, #0]
 800990a:	b903      	cbnz	r3, 800990e <__sflush_r+0x7a>
 800990c:	6560      	str	r0, [r4, #84]	; 0x54
 800990e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009910:	602f      	str	r7, [r5, #0]
 8009912:	2900      	cmp	r1, #0
 8009914:	d0ca      	beq.n	80098ac <__sflush_r+0x18>
 8009916:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800991a:	4299      	cmp	r1, r3
 800991c:	d002      	beq.n	8009924 <__sflush_r+0x90>
 800991e:	4628      	mov	r0, r5
 8009920:	f7fe fa2a 	bl	8007d78 <_free_r>
 8009924:	2000      	movs	r0, #0
 8009926:	6360      	str	r0, [r4, #52]	; 0x34
 8009928:	e7c1      	b.n	80098ae <__sflush_r+0x1a>
 800992a:	2301      	movs	r3, #1
 800992c:	4628      	mov	r0, r5
 800992e:	47b0      	blx	r6
 8009930:	1c41      	adds	r1, r0, #1
 8009932:	d1c8      	bne.n	80098c6 <__sflush_r+0x32>
 8009934:	682b      	ldr	r3, [r5, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d0c5      	beq.n	80098c6 <__sflush_r+0x32>
 800993a:	2b1d      	cmp	r3, #29
 800993c:	d001      	beq.n	8009942 <__sflush_r+0xae>
 800993e:	2b16      	cmp	r3, #22
 8009940:	d101      	bne.n	8009946 <__sflush_r+0xb2>
 8009942:	602f      	str	r7, [r5, #0]
 8009944:	e7b2      	b.n	80098ac <__sflush_r+0x18>
 8009946:	89a3      	ldrh	r3, [r4, #12]
 8009948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800994c:	81a3      	strh	r3, [r4, #12]
 800994e:	e7ae      	b.n	80098ae <__sflush_r+0x1a>
 8009950:	690f      	ldr	r7, [r1, #16]
 8009952:	2f00      	cmp	r7, #0
 8009954:	d0aa      	beq.n	80098ac <__sflush_r+0x18>
 8009956:	0793      	lsls	r3, r2, #30
 8009958:	bf18      	it	ne
 800995a:	2300      	movne	r3, #0
 800995c:	680e      	ldr	r6, [r1, #0]
 800995e:	bf08      	it	eq
 8009960:	694b      	ldreq	r3, [r1, #20]
 8009962:	1bf6      	subs	r6, r6, r7
 8009964:	600f      	str	r7, [r1, #0]
 8009966:	608b      	str	r3, [r1, #8]
 8009968:	2e00      	cmp	r6, #0
 800996a:	dd9f      	ble.n	80098ac <__sflush_r+0x18>
 800996c:	4633      	mov	r3, r6
 800996e:	463a      	mov	r2, r7
 8009970:	4628      	mov	r0, r5
 8009972:	6a21      	ldr	r1, [r4, #32]
 8009974:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009978:	47e0      	blx	ip
 800997a:	2800      	cmp	r0, #0
 800997c:	dc06      	bgt.n	800998c <__sflush_r+0xf8>
 800997e:	89a3      	ldrh	r3, [r4, #12]
 8009980:	f04f 30ff 	mov.w	r0, #4294967295
 8009984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009988:	81a3      	strh	r3, [r4, #12]
 800998a:	e790      	b.n	80098ae <__sflush_r+0x1a>
 800998c:	4407      	add	r7, r0
 800998e:	1a36      	subs	r6, r6, r0
 8009990:	e7ea      	b.n	8009968 <__sflush_r+0xd4>
 8009992:	bf00      	nop
 8009994:	dfbffffe 	.word	0xdfbffffe

08009998 <_fflush_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	690b      	ldr	r3, [r1, #16]
 800999c:	4605      	mov	r5, r0
 800999e:	460c      	mov	r4, r1
 80099a0:	b913      	cbnz	r3, 80099a8 <_fflush_r+0x10>
 80099a2:	2500      	movs	r5, #0
 80099a4:	4628      	mov	r0, r5
 80099a6:	bd38      	pop	{r3, r4, r5, pc}
 80099a8:	b118      	cbz	r0, 80099b2 <_fflush_r+0x1a>
 80099aa:	6a03      	ldr	r3, [r0, #32]
 80099ac:	b90b      	cbnz	r3, 80099b2 <_fflush_r+0x1a>
 80099ae:	f7fd fa47 	bl	8006e40 <__sinit>
 80099b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d0f3      	beq.n	80099a2 <_fflush_r+0xa>
 80099ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099bc:	07d0      	lsls	r0, r2, #31
 80099be:	d404      	bmi.n	80099ca <_fflush_r+0x32>
 80099c0:	0599      	lsls	r1, r3, #22
 80099c2:	d402      	bmi.n	80099ca <_fflush_r+0x32>
 80099c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099c6:	f7fd fb52 	bl	800706e <__retarget_lock_acquire_recursive>
 80099ca:	4628      	mov	r0, r5
 80099cc:	4621      	mov	r1, r4
 80099ce:	f7ff ff61 	bl	8009894 <__sflush_r>
 80099d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099d4:	4605      	mov	r5, r0
 80099d6:	07da      	lsls	r2, r3, #31
 80099d8:	d4e4      	bmi.n	80099a4 <_fflush_r+0xc>
 80099da:	89a3      	ldrh	r3, [r4, #12]
 80099dc:	059b      	lsls	r3, r3, #22
 80099de:	d4e1      	bmi.n	80099a4 <_fflush_r+0xc>
 80099e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099e2:	f7fd fb45 	bl	8007070 <__retarget_lock_release_recursive>
 80099e6:	e7dd      	b.n	80099a4 <_fflush_r+0xc>

080099e8 <memmove>:
 80099e8:	4288      	cmp	r0, r1
 80099ea:	b510      	push	{r4, lr}
 80099ec:	eb01 0402 	add.w	r4, r1, r2
 80099f0:	d902      	bls.n	80099f8 <memmove+0x10>
 80099f2:	4284      	cmp	r4, r0
 80099f4:	4623      	mov	r3, r4
 80099f6:	d807      	bhi.n	8009a08 <memmove+0x20>
 80099f8:	1e43      	subs	r3, r0, #1
 80099fa:	42a1      	cmp	r1, r4
 80099fc:	d008      	beq.n	8009a10 <memmove+0x28>
 80099fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a06:	e7f8      	b.n	80099fa <memmove+0x12>
 8009a08:	4601      	mov	r1, r0
 8009a0a:	4402      	add	r2, r0
 8009a0c:	428a      	cmp	r2, r1
 8009a0e:	d100      	bne.n	8009a12 <memmove+0x2a>
 8009a10:	bd10      	pop	{r4, pc}
 8009a12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a1a:	e7f7      	b.n	8009a0c <memmove+0x24>

08009a1c <strncmp>:
 8009a1c:	b510      	push	{r4, lr}
 8009a1e:	b16a      	cbz	r2, 8009a3c <strncmp+0x20>
 8009a20:	3901      	subs	r1, #1
 8009a22:	1884      	adds	r4, r0, r2
 8009a24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a28:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d103      	bne.n	8009a38 <strncmp+0x1c>
 8009a30:	42a0      	cmp	r0, r4
 8009a32:	d001      	beq.n	8009a38 <strncmp+0x1c>
 8009a34:	2a00      	cmp	r2, #0
 8009a36:	d1f5      	bne.n	8009a24 <strncmp+0x8>
 8009a38:	1ad0      	subs	r0, r2, r3
 8009a3a:	bd10      	pop	{r4, pc}
 8009a3c:	4610      	mov	r0, r2
 8009a3e:	e7fc      	b.n	8009a3a <strncmp+0x1e>

08009a40 <_sbrk_r>:
 8009a40:	b538      	push	{r3, r4, r5, lr}
 8009a42:	2300      	movs	r3, #0
 8009a44:	4d05      	ldr	r5, [pc, #20]	; (8009a5c <_sbrk_r+0x1c>)
 8009a46:	4604      	mov	r4, r0
 8009a48:	4608      	mov	r0, r1
 8009a4a:	602b      	str	r3, [r5, #0]
 8009a4c:	f7f8 feba 	bl	80027c4 <_sbrk>
 8009a50:	1c43      	adds	r3, r0, #1
 8009a52:	d102      	bne.n	8009a5a <_sbrk_r+0x1a>
 8009a54:	682b      	ldr	r3, [r5, #0]
 8009a56:	b103      	cbz	r3, 8009a5a <_sbrk_r+0x1a>
 8009a58:	6023      	str	r3, [r4, #0]
 8009a5a:	bd38      	pop	{r3, r4, r5, pc}
 8009a5c:	200004a4 	.word	0x200004a4

08009a60 <memcpy>:
 8009a60:	440a      	add	r2, r1
 8009a62:	4291      	cmp	r1, r2
 8009a64:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a68:	d100      	bne.n	8009a6c <memcpy+0xc>
 8009a6a:	4770      	bx	lr
 8009a6c:	b510      	push	{r4, lr}
 8009a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a72:	4291      	cmp	r1, r2
 8009a74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a78:	d1f9      	bne.n	8009a6e <memcpy+0xe>
 8009a7a:	bd10      	pop	{r4, pc}

08009a7c <nan>:
 8009a7c:	2000      	movs	r0, #0
 8009a7e:	4901      	ldr	r1, [pc, #4]	; (8009a84 <nan+0x8>)
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	7ff80000 	.word	0x7ff80000

08009a88 <__assert_func>:
 8009a88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a8a:	4614      	mov	r4, r2
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	4b09      	ldr	r3, [pc, #36]	; (8009ab4 <__assert_func+0x2c>)
 8009a90:	4605      	mov	r5, r0
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68d8      	ldr	r0, [r3, #12]
 8009a96:	b14c      	cbz	r4, 8009aac <__assert_func+0x24>
 8009a98:	4b07      	ldr	r3, [pc, #28]	; (8009ab8 <__assert_func+0x30>)
 8009a9a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a9e:	9100      	str	r1, [sp, #0]
 8009aa0:	462b      	mov	r3, r5
 8009aa2:	4906      	ldr	r1, [pc, #24]	; (8009abc <__assert_func+0x34>)
 8009aa4:	f000 fbca 	bl	800a23c <fiprintf>
 8009aa8:	f000 fbda 	bl	800a260 <abort>
 8009aac:	4b04      	ldr	r3, [pc, #16]	; (8009ac0 <__assert_func+0x38>)
 8009aae:	461c      	mov	r4, r3
 8009ab0:	e7f3      	b.n	8009a9a <__assert_func+0x12>
 8009ab2:	bf00      	nop
 8009ab4:	20000074 	.word	0x20000074
 8009ab8:	0800abb2 	.word	0x0800abb2
 8009abc:	0800abbf 	.word	0x0800abbf
 8009ac0:	0800abed 	.word	0x0800abed

08009ac4 <_calloc_r>:
 8009ac4:	b570      	push	{r4, r5, r6, lr}
 8009ac6:	fba1 5402 	umull	r5, r4, r1, r2
 8009aca:	b934      	cbnz	r4, 8009ada <_calloc_r+0x16>
 8009acc:	4629      	mov	r1, r5
 8009ace:	f7fe f9c3 	bl	8007e58 <_malloc_r>
 8009ad2:	4606      	mov	r6, r0
 8009ad4:	b928      	cbnz	r0, 8009ae2 <_calloc_r+0x1e>
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	bd70      	pop	{r4, r5, r6, pc}
 8009ada:	220c      	movs	r2, #12
 8009adc:	2600      	movs	r6, #0
 8009ade:	6002      	str	r2, [r0, #0]
 8009ae0:	e7f9      	b.n	8009ad6 <_calloc_r+0x12>
 8009ae2:	462a      	mov	r2, r5
 8009ae4:	4621      	mov	r1, r4
 8009ae6:	f7fd fa44 	bl	8006f72 <memset>
 8009aea:	e7f4      	b.n	8009ad6 <_calloc_r+0x12>

08009aec <rshift>:
 8009aec:	6903      	ldr	r3, [r0, #16]
 8009aee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009af2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009af6:	f100 0414 	add.w	r4, r0, #20
 8009afa:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009afe:	dd46      	ble.n	8009b8e <rshift+0xa2>
 8009b00:	f011 011f 	ands.w	r1, r1, #31
 8009b04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009b08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009b0c:	d10c      	bne.n	8009b28 <rshift+0x3c>
 8009b0e:	4629      	mov	r1, r5
 8009b10:	f100 0710 	add.w	r7, r0, #16
 8009b14:	42b1      	cmp	r1, r6
 8009b16:	d335      	bcc.n	8009b84 <rshift+0x98>
 8009b18:	1a9b      	subs	r3, r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	1eea      	subs	r2, r5, #3
 8009b1e:	4296      	cmp	r6, r2
 8009b20:	bf38      	it	cc
 8009b22:	2300      	movcc	r3, #0
 8009b24:	4423      	add	r3, r4
 8009b26:	e015      	b.n	8009b54 <rshift+0x68>
 8009b28:	46a1      	mov	r9, r4
 8009b2a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009b2e:	f1c1 0820 	rsb	r8, r1, #32
 8009b32:	40cf      	lsrs	r7, r1
 8009b34:	f105 0e04 	add.w	lr, r5, #4
 8009b38:	4576      	cmp	r6, lr
 8009b3a:	46f4      	mov	ip, lr
 8009b3c:	d816      	bhi.n	8009b6c <rshift+0x80>
 8009b3e:	1a9a      	subs	r2, r3, r2
 8009b40:	0092      	lsls	r2, r2, #2
 8009b42:	3a04      	subs	r2, #4
 8009b44:	3501      	adds	r5, #1
 8009b46:	42ae      	cmp	r6, r5
 8009b48:	bf38      	it	cc
 8009b4a:	2200      	movcc	r2, #0
 8009b4c:	18a3      	adds	r3, r4, r2
 8009b4e:	50a7      	str	r7, [r4, r2]
 8009b50:	b107      	cbz	r7, 8009b54 <rshift+0x68>
 8009b52:	3304      	adds	r3, #4
 8009b54:	42a3      	cmp	r3, r4
 8009b56:	eba3 0204 	sub.w	r2, r3, r4
 8009b5a:	bf08      	it	eq
 8009b5c:	2300      	moveq	r3, #0
 8009b5e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009b62:	6102      	str	r2, [r0, #16]
 8009b64:	bf08      	it	eq
 8009b66:	6143      	streq	r3, [r0, #20]
 8009b68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b6c:	f8dc c000 	ldr.w	ip, [ip]
 8009b70:	fa0c fc08 	lsl.w	ip, ip, r8
 8009b74:	ea4c 0707 	orr.w	r7, ip, r7
 8009b78:	f849 7b04 	str.w	r7, [r9], #4
 8009b7c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b80:	40cf      	lsrs	r7, r1
 8009b82:	e7d9      	b.n	8009b38 <rshift+0x4c>
 8009b84:	f851 cb04 	ldr.w	ip, [r1], #4
 8009b88:	f847 cf04 	str.w	ip, [r7, #4]!
 8009b8c:	e7c2      	b.n	8009b14 <rshift+0x28>
 8009b8e:	4623      	mov	r3, r4
 8009b90:	e7e0      	b.n	8009b54 <rshift+0x68>

08009b92 <__hexdig_fun>:
 8009b92:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009b96:	2b09      	cmp	r3, #9
 8009b98:	d802      	bhi.n	8009ba0 <__hexdig_fun+0xe>
 8009b9a:	3820      	subs	r0, #32
 8009b9c:	b2c0      	uxtb	r0, r0
 8009b9e:	4770      	bx	lr
 8009ba0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009ba4:	2b05      	cmp	r3, #5
 8009ba6:	d801      	bhi.n	8009bac <__hexdig_fun+0x1a>
 8009ba8:	3847      	subs	r0, #71	; 0x47
 8009baa:	e7f7      	b.n	8009b9c <__hexdig_fun+0xa>
 8009bac:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009bb0:	2b05      	cmp	r3, #5
 8009bb2:	d801      	bhi.n	8009bb8 <__hexdig_fun+0x26>
 8009bb4:	3827      	subs	r0, #39	; 0x27
 8009bb6:	e7f1      	b.n	8009b9c <__hexdig_fun+0xa>
 8009bb8:	2000      	movs	r0, #0
 8009bba:	4770      	bx	lr

08009bbc <__gethex>:
 8009bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc0:	4681      	mov	r9, r0
 8009bc2:	468a      	mov	sl, r1
 8009bc4:	4617      	mov	r7, r2
 8009bc6:	680a      	ldr	r2, [r1, #0]
 8009bc8:	b085      	sub	sp, #20
 8009bca:	f102 0b02 	add.w	fp, r2, #2
 8009bce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009bd2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009bd6:	9302      	str	r3, [sp, #8]
 8009bd8:	32fe      	adds	r2, #254	; 0xfe
 8009bda:	eb02 030b 	add.w	r3, r2, fp
 8009bde:	46d8      	mov	r8, fp
 8009be0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009be4:	9301      	str	r3, [sp, #4]
 8009be6:	2830      	cmp	r0, #48	; 0x30
 8009be8:	d0f7      	beq.n	8009bda <__gethex+0x1e>
 8009bea:	f7ff ffd2 	bl	8009b92 <__hexdig_fun>
 8009bee:	4604      	mov	r4, r0
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	d138      	bne.n	8009c66 <__gethex+0xaa>
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	4640      	mov	r0, r8
 8009bf8:	49a7      	ldr	r1, [pc, #668]	; (8009e98 <__gethex+0x2dc>)
 8009bfa:	f7ff ff0f 	bl	8009a1c <strncmp>
 8009bfe:	4606      	mov	r6, r0
 8009c00:	2800      	cmp	r0, #0
 8009c02:	d169      	bne.n	8009cd8 <__gethex+0x11c>
 8009c04:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009c08:	465d      	mov	r5, fp
 8009c0a:	f7ff ffc2 	bl	8009b92 <__hexdig_fun>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	d064      	beq.n	8009cdc <__gethex+0x120>
 8009c12:	465a      	mov	r2, fp
 8009c14:	7810      	ldrb	r0, [r2, #0]
 8009c16:	4690      	mov	r8, r2
 8009c18:	2830      	cmp	r0, #48	; 0x30
 8009c1a:	f102 0201 	add.w	r2, r2, #1
 8009c1e:	d0f9      	beq.n	8009c14 <__gethex+0x58>
 8009c20:	f7ff ffb7 	bl	8009b92 <__hexdig_fun>
 8009c24:	2301      	movs	r3, #1
 8009c26:	fab0 f480 	clz	r4, r0
 8009c2a:	465e      	mov	r6, fp
 8009c2c:	0964      	lsrs	r4, r4, #5
 8009c2e:	9301      	str	r3, [sp, #4]
 8009c30:	4642      	mov	r2, r8
 8009c32:	4615      	mov	r5, r2
 8009c34:	7828      	ldrb	r0, [r5, #0]
 8009c36:	3201      	adds	r2, #1
 8009c38:	f7ff ffab 	bl	8009b92 <__hexdig_fun>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	d1f8      	bne.n	8009c32 <__gethex+0x76>
 8009c40:	2201      	movs	r2, #1
 8009c42:	4628      	mov	r0, r5
 8009c44:	4994      	ldr	r1, [pc, #592]	; (8009e98 <__gethex+0x2dc>)
 8009c46:	f7ff fee9 	bl	8009a1c <strncmp>
 8009c4a:	b978      	cbnz	r0, 8009c6c <__gethex+0xb0>
 8009c4c:	b946      	cbnz	r6, 8009c60 <__gethex+0xa4>
 8009c4e:	1c6e      	adds	r6, r5, #1
 8009c50:	4632      	mov	r2, r6
 8009c52:	4615      	mov	r5, r2
 8009c54:	7828      	ldrb	r0, [r5, #0]
 8009c56:	3201      	adds	r2, #1
 8009c58:	f7ff ff9b 	bl	8009b92 <__hexdig_fun>
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d1f8      	bne.n	8009c52 <__gethex+0x96>
 8009c60:	1b73      	subs	r3, r6, r5
 8009c62:	009e      	lsls	r6, r3, #2
 8009c64:	e004      	b.n	8009c70 <__gethex+0xb4>
 8009c66:	2400      	movs	r4, #0
 8009c68:	4626      	mov	r6, r4
 8009c6a:	e7e1      	b.n	8009c30 <__gethex+0x74>
 8009c6c:	2e00      	cmp	r6, #0
 8009c6e:	d1f7      	bne.n	8009c60 <__gethex+0xa4>
 8009c70:	782b      	ldrb	r3, [r5, #0]
 8009c72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009c76:	2b50      	cmp	r3, #80	; 0x50
 8009c78:	d13d      	bne.n	8009cf6 <__gethex+0x13a>
 8009c7a:	786b      	ldrb	r3, [r5, #1]
 8009c7c:	2b2b      	cmp	r3, #43	; 0x2b
 8009c7e:	d02f      	beq.n	8009ce0 <__gethex+0x124>
 8009c80:	2b2d      	cmp	r3, #45	; 0x2d
 8009c82:	d031      	beq.n	8009ce8 <__gethex+0x12c>
 8009c84:	f04f 0b00 	mov.w	fp, #0
 8009c88:	1c69      	adds	r1, r5, #1
 8009c8a:	7808      	ldrb	r0, [r1, #0]
 8009c8c:	f7ff ff81 	bl	8009b92 <__hexdig_fun>
 8009c90:	1e42      	subs	r2, r0, #1
 8009c92:	b2d2      	uxtb	r2, r2
 8009c94:	2a18      	cmp	r2, #24
 8009c96:	d82e      	bhi.n	8009cf6 <__gethex+0x13a>
 8009c98:	f1a0 0210 	sub.w	r2, r0, #16
 8009c9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009ca0:	f7ff ff77 	bl	8009b92 <__hexdig_fun>
 8009ca4:	f100 3cff 	add.w	ip, r0, #4294967295
 8009ca8:	fa5f fc8c 	uxtb.w	ip, ip
 8009cac:	f1bc 0f18 	cmp.w	ip, #24
 8009cb0:	d91d      	bls.n	8009cee <__gethex+0x132>
 8009cb2:	f1bb 0f00 	cmp.w	fp, #0
 8009cb6:	d000      	beq.n	8009cba <__gethex+0xfe>
 8009cb8:	4252      	negs	r2, r2
 8009cba:	4416      	add	r6, r2
 8009cbc:	f8ca 1000 	str.w	r1, [sl]
 8009cc0:	b1dc      	cbz	r4, 8009cfa <__gethex+0x13e>
 8009cc2:	9b01      	ldr	r3, [sp, #4]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	bf14      	ite	ne
 8009cc8:	f04f 0800 	movne.w	r8, #0
 8009ccc:	f04f 0806 	moveq.w	r8, #6
 8009cd0:	4640      	mov	r0, r8
 8009cd2:	b005      	add	sp, #20
 8009cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd8:	4645      	mov	r5, r8
 8009cda:	4626      	mov	r6, r4
 8009cdc:	2401      	movs	r4, #1
 8009cde:	e7c7      	b.n	8009c70 <__gethex+0xb4>
 8009ce0:	f04f 0b00 	mov.w	fp, #0
 8009ce4:	1ca9      	adds	r1, r5, #2
 8009ce6:	e7d0      	b.n	8009c8a <__gethex+0xce>
 8009ce8:	f04f 0b01 	mov.w	fp, #1
 8009cec:	e7fa      	b.n	8009ce4 <__gethex+0x128>
 8009cee:	230a      	movs	r3, #10
 8009cf0:	fb03 0002 	mla	r0, r3, r2, r0
 8009cf4:	e7d0      	b.n	8009c98 <__gethex+0xdc>
 8009cf6:	4629      	mov	r1, r5
 8009cf8:	e7e0      	b.n	8009cbc <__gethex+0x100>
 8009cfa:	4621      	mov	r1, r4
 8009cfc:	eba5 0308 	sub.w	r3, r5, r8
 8009d00:	3b01      	subs	r3, #1
 8009d02:	2b07      	cmp	r3, #7
 8009d04:	dc0a      	bgt.n	8009d1c <__gethex+0x160>
 8009d06:	4648      	mov	r0, r9
 8009d08:	f7fe f932 	bl	8007f70 <_Balloc>
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	b940      	cbnz	r0, 8009d22 <__gethex+0x166>
 8009d10:	4602      	mov	r2, r0
 8009d12:	21e4      	movs	r1, #228	; 0xe4
 8009d14:	4b61      	ldr	r3, [pc, #388]	; (8009e9c <__gethex+0x2e0>)
 8009d16:	4862      	ldr	r0, [pc, #392]	; (8009ea0 <__gethex+0x2e4>)
 8009d18:	f7ff feb6 	bl	8009a88 <__assert_func>
 8009d1c:	3101      	adds	r1, #1
 8009d1e:	105b      	asrs	r3, r3, #1
 8009d20:	e7ef      	b.n	8009d02 <__gethex+0x146>
 8009d22:	2300      	movs	r3, #0
 8009d24:	469b      	mov	fp, r3
 8009d26:	f100 0a14 	add.w	sl, r0, #20
 8009d2a:	f8cd a004 	str.w	sl, [sp, #4]
 8009d2e:	45a8      	cmp	r8, r5
 8009d30:	d344      	bcc.n	8009dbc <__gethex+0x200>
 8009d32:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009d36:	4658      	mov	r0, fp
 8009d38:	f848 bb04 	str.w	fp, [r8], #4
 8009d3c:	eba8 080a 	sub.w	r8, r8, sl
 8009d40:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8009d44:	6122      	str	r2, [r4, #16]
 8009d46:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8009d4a:	f7fe fa03 	bl	8008154 <__hi0bits>
 8009d4e:	683d      	ldr	r5, [r7, #0]
 8009d50:	eba8 0800 	sub.w	r8, r8, r0
 8009d54:	45a8      	cmp	r8, r5
 8009d56:	dd59      	ble.n	8009e0c <__gethex+0x250>
 8009d58:	eba8 0805 	sub.w	r8, r8, r5
 8009d5c:	4641      	mov	r1, r8
 8009d5e:	4620      	mov	r0, r4
 8009d60:	f7fe fd81 	bl	8008866 <__any_on>
 8009d64:	4683      	mov	fp, r0
 8009d66:	b1b8      	cbz	r0, 8009d98 <__gethex+0x1dc>
 8009d68:	f04f 0b01 	mov.w	fp, #1
 8009d6c:	f108 33ff 	add.w	r3, r8, #4294967295
 8009d70:	1159      	asrs	r1, r3, #5
 8009d72:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009d76:	f003 021f 	and.w	r2, r3, #31
 8009d7a:	fa0b f202 	lsl.w	r2, fp, r2
 8009d7e:	420a      	tst	r2, r1
 8009d80:	d00a      	beq.n	8009d98 <__gethex+0x1dc>
 8009d82:	455b      	cmp	r3, fp
 8009d84:	dd06      	ble.n	8009d94 <__gethex+0x1d8>
 8009d86:	4620      	mov	r0, r4
 8009d88:	f1a8 0102 	sub.w	r1, r8, #2
 8009d8c:	f7fe fd6b 	bl	8008866 <__any_on>
 8009d90:	2800      	cmp	r0, #0
 8009d92:	d138      	bne.n	8009e06 <__gethex+0x24a>
 8009d94:	f04f 0b02 	mov.w	fp, #2
 8009d98:	4641      	mov	r1, r8
 8009d9a:	4620      	mov	r0, r4
 8009d9c:	f7ff fea6 	bl	8009aec <rshift>
 8009da0:	4446      	add	r6, r8
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	42b3      	cmp	r3, r6
 8009da6:	da41      	bge.n	8009e2c <__gethex+0x270>
 8009da8:	4621      	mov	r1, r4
 8009daa:	4648      	mov	r0, r9
 8009dac:	f7fe f920 	bl	8007ff0 <_Bfree>
 8009db0:	2300      	movs	r3, #0
 8009db2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009db4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009db8:	6013      	str	r3, [r2, #0]
 8009dba:	e789      	b.n	8009cd0 <__gethex+0x114>
 8009dbc:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009dc0:	2a2e      	cmp	r2, #46	; 0x2e
 8009dc2:	d014      	beq.n	8009dee <__gethex+0x232>
 8009dc4:	2b20      	cmp	r3, #32
 8009dc6:	d106      	bne.n	8009dd6 <__gethex+0x21a>
 8009dc8:	9b01      	ldr	r3, [sp, #4]
 8009dca:	f843 bb04 	str.w	fp, [r3], #4
 8009dce:	f04f 0b00 	mov.w	fp, #0
 8009dd2:	9301      	str	r3, [sp, #4]
 8009dd4:	465b      	mov	r3, fp
 8009dd6:	7828      	ldrb	r0, [r5, #0]
 8009dd8:	9303      	str	r3, [sp, #12]
 8009dda:	f7ff feda 	bl	8009b92 <__hexdig_fun>
 8009dde:	9b03      	ldr	r3, [sp, #12]
 8009de0:	f000 000f 	and.w	r0, r0, #15
 8009de4:	4098      	lsls	r0, r3
 8009de6:	ea4b 0b00 	orr.w	fp, fp, r0
 8009dea:	3304      	adds	r3, #4
 8009dec:	e79f      	b.n	8009d2e <__gethex+0x172>
 8009dee:	45a8      	cmp	r8, r5
 8009df0:	d8e8      	bhi.n	8009dc4 <__gethex+0x208>
 8009df2:	2201      	movs	r2, #1
 8009df4:	4628      	mov	r0, r5
 8009df6:	4928      	ldr	r1, [pc, #160]	; (8009e98 <__gethex+0x2dc>)
 8009df8:	9303      	str	r3, [sp, #12]
 8009dfa:	f7ff fe0f 	bl	8009a1c <strncmp>
 8009dfe:	9b03      	ldr	r3, [sp, #12]
 8009e00:	2800      	cmp	r0, #0
 8009e02:	d1df      	bne.n	8009dc4 <__gethex+0x208>
 8009e04:	e793      	b.n	8009d2e <__gethex+0x172>
 8009e06:	f04f 0b03 	mov.w	fp, #3
 8009e0a:	e7c5      	b.n	8009d98 <__gethex+0x1dc>
 8009e0c:	da0b      	bge.n	8009e26 <__gethex+0x26a>
 8009e0e:	eba5 0808 	sub.w	r8, r5, r8
 8009e12:	4621      	mov	r1, r4
 8009e14:	4642      	mov	r2, r8
 8009e16:	4648      	mov	r0, r9
 8009e18:	f7fe fb02 	bl	8008420 <__lshift>
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	eba6 0608 	sub.w	r6, r6, r8
 8009e22:	f100 0a14 	add.w	sl, r0, #20
 8009e26:	f04f 0b00 	mov.w	fp, #0
 8009e2a:	e7ba      	b.n	8009da2 <__gethex+0x1e6>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	42b3      	cmp	r3, r6
 8009e30:	dd74      	ble.n	8009f1c <__gethex+0x360>
 8009e32:	1b9e      	subs	r6, r3, r6
 8009e34:	42b5      	cmp	r5, r6
 8009e36:	dc35      	bgt.n	8009ea4 <__gethex+0x2e8>
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d023      	beq.n	8009e86 <__gethex+0x2ca>
 8009e3e:	2b03      	cmp	r3, #3
 8009e40:	d025      	beq.n	8009e8e <__gethex+0x2d2>
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d115      	bne.n	8009e72 <__gethex+0x2b6>
 8009e46:	42b5      	cmp	r5, r6
 8009e48:	d113      	bne.n	8009e72 <__gethex+0x2b6>
 8009e4a:	2d01      	cmp	r5, #1
 8009e4c:	d10b      	bne.n	8009e66 <__gethex+0x2aa>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	9a02      	ldr	r2, [sp, #8]
 8009e52:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009e56:	6013      	str	r3, [r2, #0]
 8009e58:	2301      	movs	r3, #1
 8009e5a:	6123      	str	r3, [r4, #16]
 8009e5c:	f8ca 3000 	str.w	r3, [sl]
 8009e60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e62:	601c      	str	r4, [r3, #0]
 8009e64:	e734      	b.n	8009cd0 <__gethex+0x114>
 8009e66:	4620      	mov	r0, r4
 8009e68:	1e69      	subs	r1, r5, #1
 8009e6a:	f7fe fcfc 	bl	8008866 <__any_on>
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	d1ed      	bne.n	8009e4e <__gethex+0x292>
 8009e72:	4621      	mov	r1, r4
 8009e74:	4648      	mov	r0, r9
 8009e76:	f7fe f8bb 	bl	8007ff0 <_Bfree>
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e7e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009e82:	6013      	str	r3, [r2, #0]
 8009e84:	e724      	b.n	8009cd0 <__gethex+0x114>
 8009e86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d1f2      	bne.n	8009e72 <__gethex+0x2b6>
 8009e8c:	e7df      	b.n	8009e4e <__gethex+0x292>
 8009e8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d1dc      	bne.n	8009e4e <__gethex+0x292>
 8009e94:	e7ed      	b.n	8009e72 <__gethex+0x2b6>
 8009e96:	bf00      	nop
 8009e98:	0800aa44 	.word	0x0800aa44
 8009e9c:	0800a8d7 	.word	0x0800a8d7
 8009ea0:	0800abee 	.word	0x0800abee
 8009ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8009ea8:	f1bb 0f00 	cmp.w	fp, #0
 8009eac:	d133      	bne.n	8009f16 <__gethex+0x35a>
 8009eae:	f1b8 0f00 	cmp.w	r8, #0
 8009eb2:	d004      	beq.n	8009ebe <__gethex+0x302>
 8009eb4:	4641      	mov	r1, r8
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	f7fe fcd5 	bl	8008866 <__any_on>
 8009ebc:	4683      	mov	fp, r0
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009ec4:	f008 081f 	and.w	r8, r8, #31
 8009ec8:	fa03 f308 	lsl.w	r3, r3, r8
 8009ecc:	f04f 0802 	mov.w	r8, #2
 8009ed0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009ed4:	4631      	mov	r1, r6
 8009ed6:	4213      	tst	r3, r2
 8009ed8:	4620      	mov	r0, r4
 8009eda:	bf18      	it	ne
 8009edc:	f04b 0b02 	orrne.w	fp, fp, #2
 8009ee0:	1bad      	subs	r5, r5, r6
 8009ee2:	f7ff fe03 	bl	8009aec <rshift>
 8009ee6:	687e      	ldr	r6, [r7, #4]
 8009ee8:	f1bb 0f00 	cmp.w	fp, #0
 8009eec:	d04a      	beq.n	8009f84 <__gethex+0x3c8>
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d016      	beq.n	8009f22 <__gethex+0x366>
 8009ef4:	2b03      	cmp	r3, #3
 8009ef6:	d018      	beq.n	8009f2a <__gethex+0x36e>
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d109      	bne.n	8009f10 <__gethex+0x354>
 8009efc:	f01b 0f02 	tst.w	fp, #2
 8009f00:	d006      	beq.n	8009f10 <__gethex+0x354>
 8009f02:	f8da 3000 	ldr.w	r3, [sl]
 8009f06:	ea4b 0b03 	orr.w	fp, fp, r3
 8009f0a:	f01b 0f01 	tst.w	fp, #1
 8009f0e:	d10f      	bne.n	8009f30 <__gethex+0x374>
 8009f10:	f048 0810 	orr.w	r8, r8, #16
 8009f14:	e036      	b.n	8009f84 <__gethex+0x3c8>
 8009f16:	f04f 0b01 	mov.w	fp, #1
 8009f1a:	e7d0      	b.n	8009ebe <__gethex+0x302>
 8009f1c:	f04f 0801 	mov.w	r8, #1
 8009f20:	e7e2      	b.n	8009ee8 <__gethex+0x32c>
 8009f22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f24:	f1c3 0301 	rsb	r3, r3, #1
 8009f28:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d0ef      	beq.n	8009f10 <__gethex+0x354>
 8009f30:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009f34:	f104 0214 	add.w	r2, r4, #20
 8009f38:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009f3c:	9301      	str	r3, [sp, #4]
 8009f3e:	2300      	movs	r3, #0
 8009f40:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009f44:	4694      	mov	ip, r2
 8009f46:	f852 1b04 	ldr.w	r1, [r2], #4
 8009f4a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009f4e:	d01e      	beq.n	8009f8e <__gethex+0x3d2>
 8009f50:	3101      	adds	r1, #1
 8009f52:	f8cc 1000 	str.w	r1, [ip]
 8009f56:	f1b8 0f02 	cmp.w	r8, #2
 8009f5a:	f104 0214 	add.w	r2, r4, #20
 8009f5e:	d13d      	bne.n	8009fdc <__gethex+0x420>
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	3b01      	subs	r3, #1
 8009f64:	42ab      	cmp	r3, r5
 8009f66:	d10b      	bne.n	8009f80 <__gethex+0x3c4>
 8009f68:	2301      	movs	r3, #1
 8009f6a:	1169      	asrs	r1, r5, #5
 8009f6c:	f005 051f 	and.w	r5, r5, #31
 8009f70:	fa03 f505 	lsl.w	r5, r3, r5
 8009f74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f78:	421d      	tst	r5, r3
 8009f7a:	bf18      	it	ne
 8009f7c:	f04f 0801 	movne.w	r8, #1
 8009f80:	f048 0820 	orr.w	r8, r8, #32
 8009f84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f86:	601c      	str	r4, [r3, #0]
 8009f88:	9b02      	ldr	r3, [sp, #8]
 8009f8a:	601e      	str	r6, [r3, #0]
 8009f8c:	e6a0      	b.n	8009cd0 <__gethex+0x114>
 8009f8e:	4290      	cmp	r0, r2
 8009f90:	f842 3c04 	str.w	r3, [r2, #-4]
 8009f94:	d8d6      	bhi.n	8009f44 <__gethex+0x388>
 8009f96:	68a2      	ldr	r2, [r4, #8]
 8009f98:	4593      	cmp	fp, r2
 8009f9a:	db17      	blt.n	8009fcc <__gethex+0x410>
 8009f9c:	6861      	ldr	r1, [r4, #4]
 8009f9e:	4648      	mov	r0, r9
 8009fa0:	3101      	adds	r1, #1
 8009fa2:	f7fd ffe5 	bl	8007f70 <_Balloc>
 8009fa6:	4682      	mov	sl, r0
 8009fa8:	b918      	cbnz	r0, 8009fb2 <__gethex+0x3f6>
 8009faa:	4602      	mov	r2, r0
 8009fac:	2184      	movs	r1, #132	; 0x84
 8009fae:	4b1a      	ldr	r3, [pc, #104]	; (800a018 <__gethex+0x45c>)
 8009fb0:	e6b1      	b.n	8009d16 <__gethex+0x15a>
 8009fb2:	6922      	ldr	r2, [r4, #16]
 8009fb4:	f104 010c 	add.w	r1, r4, #12
 8009fb8:	3202      	adds	r2, #2
 8009fba:	0092      	lsls	r2, r2, #2
 8009fbc:	300c      	adds	r0, #12
 8009fbe:	f7ff fd4f 	bl	8009a60 <memcpy>
 8009fc2:	4621      	mov	r1, r4
 8009fc4:	4648      	mov	r0, r9
 8009fc6:	f7fe f813 	bl	8007ff0 <_Bfree>
 8009fca:	4654      	mov	r4, sl
 8009fcc:	6922      	ldr	r2, [r4, #16]
 8009fce:	1c51      	adds	r1, r2, #1
 8009fd0:	6121      	str	r1, [r4, #16]
 8009fd2:	2101      	movs	r1, #1
 8009fd4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009fd8:	6151      	str	r1, [r2, #20]
 8009fda:	e7bc      	b.n	8009f56 <__gethex+0x39a>
 8009fdc:	6921      	ldr	r1, [r4, #16]
 8009fde:	4559      	cmp	r1, fp
 8009fe0:	dd0b      	ble.n	8009ffa <__gethex+0x43e>
 8009fe2:	2101      	movs	r1, #1
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	f7ff fd81 	bl	8009aec <rshift>
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	3601      	adds	r6, #1
 8009fee:	42b3      	cmp	r3, r6
 8009ff0:	f6ff aeda 	blt.w	8009da8 <__gethex+0x1ec>
 8009ff4:	f04f 0801 	mov.w	r8, #1
 8009ff8:	e7c2      	b.n	8009f80 <__gethex+0x3c4>
 8009ffa:	f015 051f 	ands.w	r5, r5, #31
 8009ffe:	d0f9      	beq.n	8009ff4 <__gethex+0x438>
 800a000:	9b01      	ldr	r3, [sp, #4]
 800a002:	f1c5 0520 	rsb	r5, r5, #32
 800a006:	441a      	add	r2, r3
 800a008:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a00c:	f7fe f8a2 	bl	8008154 <__hi0bits>
 800a010:	42a8      	cmp	r0, r5
 800a012:	dbe6      	blt.n	8009fe2 <__gethex+0x426>
 800a014:	e7ee      	b.n	8009ff4 <__gethex+0x438>
 800a016:	bf00      	nop
 800a018:	0800a8d7 	.word	0x0800a8d7

0800a01c <L_shift>:
 800a01c:	f1c2 0208 	rsb	r2, r2, #8
 800a020:	0092      	lsls	r2, r2, #2
 800a022:	b570      	push	{r4, r5, r6, lr}
 800a024:	f1c2 0620 	rsb	r6, r2, #32
 800a028:	6843      	ldr	r3, [r0, #4]
 800a02a:	6804      	ldr	r4, [r0, #0]
 800a02c:	fa03 f506 	lsl.w	r5, r3, r6
 800a030:	432c      	orrs	r4, r5
 800a032:	40d3      	lsrs	r3, r2
 800a034:	6004      	str	r4, [r0, #0]
 800a036:	f840 3f04 	str.w	r3, [r0, #4]!
 800a03a:	4288      	cmp	r0, r1
 800a03c:	d3f4      	bcc.n	800a028 <L_shift+0xc>
 800a03e:	bd70      	pop	{r4, r5, r6, pc}

0800a040 <__match>:
 800a040:	b530      	push	{r4, r5, lr}
 800a042:	6803      	ldr	r3, [r0, #0]
 800a044:	3301      	adds	r3, #1
 800a046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a04a:	b914      	cbnz	r4, 800a052 <__match+0x12>
 800a04c:	6003      	str	r3, [r0, #0]
 800a04e:	2001      	movs	r0, #1
 800a050:	bd30      	pop	{r4, r5, pc}
 800a052:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a056:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a05a:	2d19      	cmp	r5, #25
 800a05c:	bf98      	it	ls
 800a05e:	3220      	addls	r2, #32
 800a060:	42a2      	cmp	r2, r4
 800a062:	d0f0      	beq.n	800a046 <__match+0x6>
 800a064:	2000      	movs	r0, #0
 800a066:	e7f3      	b.n	800a050 <__match+0x10>

0800a068 <__hexnan>:
 800a068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a06c:	2500      	movs	r5, #0
 800a06e:	680b      	ldr	r3, [r1, #0]
 800a070:	4682      	mov	sl, r0
 800a072:	115e      	asrs	r6, r3, #5
 800a074:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a078:	f013 031f 	ands.w	r3, r3, #31
 800a07c:	bf18      	it	ne
 800a07e:	3604      	addne	r6, #4
 800a080:	1f37      	subs	r7, r6, #4
 800a082:	4690      	mov	r8, r2
 800a084:	46b9      	mov	r9, r7
 800a086:	463c      	mov	r4, r7
 800a088:	46ab      	mov	fp, r5
 800a08a:	b087      	sub	sp, #28
 800a08c:	6801      	ldr	r1, [r0, #0]
 800a08e:	9301      	str	r3, [sp, #4]
 800a090:	f846 5c04 	str.w	r5, [r6, #-4]
 800a094:	9502      	str	r5, [sp, #8]
 800a096:	784a      	ldrb	r2, [r1, #1]
 800a098:	1c4b      	adds	r3, r1, #1
 800a09a:	9303      	str	r3, [sp, #12]
 800a09c:	b342      	cbz	r2, 800a0f0 <__hexnan+0x88>
 800a09e:	4610      	mov	r0, r2
 800a0a0:	9105      	str	r1, [sp, #20]
 800a0a2:	9204      	str	r2, [sp, #16]
 800a0a4:	f7ff fd75 	bl	8009b92 <__hexdig_fun>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	d14f      	bne.n	800a14c <__hexnan+0xe4>
 800a0ac:	9a04      	ldr	r2, [sp, #16]
 800a0ae:	9905      	ldr	r1, [sp, #20]
 800a0b0:	2a20      	cmp	r2, #32
 800a0b2:	d818      	bhi.n	800a0e6 <__hexnan+0x7e>
 800a0b4:	9b02      	ldr	r3, [sp, #8]
 800a0b6:	459b      	cmp	fp, r3
 800a0b8:	dd13      	ble.n	800a0e2 <__hexnan+0x7a>
 800a0ba:	454c      	cmp	r4, r9
 800a0bc:	d206      	bcs.n	800a0cc <__hexnan+0x64>
 800a0be:	2d07      	cmp	r5, #7
 800a0c0:	dc04      	bgt.n	800a0cc <__hexnan+0x64>
 800a0c2:	462a      	mov	r2, r5
 800a0c4:	4649      	mov	r1, r9
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	f7ff ffa8 	bl	800a01c <L_shift>
 800a0cc:	4544      	cmp	r4, r8
 800a0ce:	d950      	bls.n	800a172 <__hexnan+0x10a>
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	f1a4 0904 	sub.w	r9, r4, #4
 800a0d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0da:	461d      	mov	r5, r3
 800a0dc:	464c      	mov	r4, r9
 800a0de:	f8cd b008 	str.w	fp, [sp, #8]
 800a0e2:	9903      	ldr	r1, [sp, #12]
 800a0e4:	e7d7      	b.n	800a096 <__hexnan+0x2e>
 800a0e6:	2a29      	cmp	r2, #41	; 0x29
 800a0e8:	d155      	bne.n	800a196 <__hexnan+0x12e>
 800a0ea:	3102      	adds	r1, #2
 800a0ec:	f8ca 1000 	str.w	r1, [sl]
 800a0f0:	f1bb 0f00 	cmp.w	fp, #0
 800a0f4:	d04f      	beq.n	800a196 <__hexnan+0x12e>
 800a0f6:	454c      	cmp	r4, r9
 800a0f8:	d206      	bcs.n	800a108 <__hexnan+0xa0>
 800a0fa:	2d07      	cmp	r5, #7
 800a0fc:	dc04      	bgt.n	800a108 <__hexnan+0xa0>
 800a0fe:	462a      	mov	r2, r5
 800a100:	4649      	mov	r1, r9
 800a102:	4620      	mov	r0, r4
 800a104:	f7ff ff8a 	bl	800a01c <L_shift>
 800a108:	4544      	cmp	r4, r8
 800a10a:	d934      	bls.n	800a176 <__hexnan+0x10e>
 800a10c:	4623      	mov	r3, r4
 800a10e:	f1a8 0204 	sub.w	r2, r8, #4
 800a112:	f853 1b04 	ldr.w	r1, [r3], #4
 800a116:	429f      	cmp	r7, r3
 800a118:	f842 1f04 	str.w	r1, [r2, #4]!
 800a11c:	d2f9      	bcs.n	800a112 <__hexnan+0xaa>
 800a11e:	1b3b      	subs	r3, r7, r4
 800a120:	f023 0303 	bic.w	r3, r3, #3
 800a124:	3304      	adds	r3, #4
 800a126:	3e03      	subs	r6, #3
 800a128:	3401      	adds	r4, #1
 800a12a:	42a6      	cmp	r6, r4
 800a12c:	bf38      	it	cc
 800a12e:	2304      	movcc	r3, #4
 800a130:	2200      	movs	r2, #0
 800a132:	4443      	add	r3, r8
 800a134:	f843 2b04 	str.w	r2, [r3], #4
 800a138:	429f      	cmp	r7, r3
 800a13a:	d2fb      	bcs.n	800a134 <__hexnan+0xcc>
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	b91b      	cbnz	r3, 800a148 <__hexnan+0xe0>
 800a140:	4547      	cmp	r7, r8
 800a142:	d126      	bne.n	800a192 <__hexnan+0x12a>
 800a144:	2301      	movs	r3, #1
 800a146:	603b      	str	r3, [r7, #0]
 800a148:	2005      	movs	r0, #5
 800a14a:	e025      	b.n	800a198 <__hexnan+0x130>
 800a14c:	3501      	adds	r5, #1
 800a14e:	2d08      	cmp	r5, #8
 800a150:	f10b 0b01 	add.w	fp, fp, #1
 800a154:	dd06      	ble.n	800a164 <__hexnan+0xfc>
 800a156:	4544      	cmp	r4, r8
 800a158:	d9c3      	bls.n	800a0e2 <__hexnan+0x7a>
 800a15a:	2300      	movs	r3, #0
 800a15c:	2501      	movs	r5, #1
 800a15e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a162:	3c04      	subs	r4, #4
 800a164:	6822      	ldr	r2, [r4, #0]
 800a166:	f000 000f 	and.w	r0, r0, #15
 800a16a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a16e:	6020      	str	r0, [r4, #0]
 800a170:	e7b7      	b.n	800a0e2 <__hexnan+0x7a>
 800a172:	2508      	movs	r5, #8
 800a174:	e7b5      	b.n	800a0e2 <__hexnan+0x7a>
 800a176:	9b01      	ldr	r3, [sp, #4]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d0df      	beq.n	800a13c <__hexnan+0xd4>
 800a17c:	f04f 32ff 	mov.w	r2, #4294967295
 800a180:	f1c3 0320 	rsb	r3, r3, #32
 800a184:	40da      	lsrs	r2, r3
 800a186:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a18a:	4013      	ands	r3, r2
 800a18c:	f846 3c04 	str.w	r3, [r6, #-4]
 800a190:	e7d4      	b.n	800a13c <__hexnan+0xd4>
 800a192:	3f04      	subs	r7, #4
 800a194:	e7d2      	b.n	800a13c <__hexnan+0xd4>
 800a196:	2004      	movs	r0, #4
 800a198:	b007      	add	sp, #28
 800a19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a19e <__ascii_mbtowc>:
 800a19e:	b082      	sub	sp, #8
 800a1a0:	b901      	cbnz	r1, 800a1a4 <__ascii_mbtowc+0x6>
 800a1a2:	a901      	add	r1, sp, #4
 800a1a4:	b142      	cbz	r2, 800a1b8 <__ascii_mbtowc+0x1a>
 800a1a6:	b14b      	cbz	r3, 800a1bc <__ascii_mbtowc+0x1e>
 800a1a8:	7813      	ldrb	r3, [r2, #0]
 800a1aa:	600b      	str	r3, [r1, #0]
 800a1ac:	7812      	ldrb	r2, [r2, #0]
 800a1ae:	1e10      	subs	r0, r2, #0
 800a1b0:	bf18      	it	ne
 800a1b2:	2001      	movne	r0, #1
 800a1b4:	b002      	add	sp, #8
 800a1b6:	4770      	bx	lr
 800a1b8:	4610      	mov	r0, r2
 800a1ba:	e7fb      	b.n	800a1b4 <__ascii_mbtowc+0x16>
 800a1bc:	f06f 0001 	mvn.w	r0, #1
 800a1c0:	e7f8      	b.n	800a1b4 <__ascii_mbtowc+0x16>

0800a1c2 <_realloc_r>:
 800a1c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c6:	4680      	mov	r8, r0
 800a1c8:	4614      	mov	r4, r2
 800a1ca:	460e      	mov	r6, r1
 800a1cc:	b921      	cbnz	r1, 800a1d8 <_realloc_r+0x16>
 800a1ce:	4611      	mov	r1, r2
 800a1d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1d4:	f7fd be40 	b.w	8007e58 <_malloc_r>
 800a1d8:	b92a      	cbnz	r2, 800a1e6 <_realloc_r+0x24>
 800a1da:	f7fd fdcd 	bl	8007d78 <_free_r>
 800a1de:	4625      	mov	r5, r4
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e6:	f000 f842 	bl	800a26e <_malloc_usable_size_r>
 800a1ea:	4284      	cmp	r4, r0
 800a1ec:	4607      	mov	r7, r0
 800a1ee:	d802      	bhi.n	800a1f6 <_realloc_r+0x34>
 800a1f0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a1f4:	d812      	bhi.n	800a21c <_realloc_r+0x5a>
 800a1f6:	4621      	mov	r1, r4
 800a1f8:	4640      	mov	r0, r8
 800a1fa:	f7fd fe2d 	bl	8007e58 <_malloc_r>
 800a1fe:	4605      	mov	r5, r0
 800a200:	2800      	cmp	r0, #0
 800a202:	d0ed      	beq.n	800a1e0 <_realloc_r+0x1e>
 800a204:	42bc      	cmp	r4, r7
 800a206:	4622      	mov	r2, r4
 800a208:	4631      	mov	r1, r6
 800a20a:	bf28      	it	cs
 800a20c:	463a      	movcs	r2, r7
 800a20e:	f7ff fc27 	bl	8009a60 <memcpy>
 800a212:	4631      	mov	r1, r6
 800a214:	4640      	mov	r0, r8
 800a216:	f7fd fdaf 	bl	8007d78 <_free_r>
 800a21a:	e7e1      	b.n	800a1e0 <_realloc_r+0x1e>
 800a21c:	4635      	mov	r5, r6
 800a21e:	e7df      	b.n	800a1e0 <_realloc_r+0x1e>

0800a220 <__ascii_wctomb>:
 800a220:	4603      	mov	r3, r0
 800a222:	4608      	mov	r0, r1
 800a224:	b141      	cbz	r1, 800a238 <__ascii_wctomb+0x18>
 800a226:	2aff      	cmp	r2, #255	; 0xff
 800a228:	d904      	bls.n	800a234 <__ascii_wctomb+0x14>
 800a22a:	228a      	movs	r2, #138	; 0x8a
 800a22c:	f04f 30ff 	mov.w	r0, #4294967295
 800a230:	601a      	str	r2, [r3, #0]
 800a232:	4770      	bx	lr
 800a234:	2001      	movs	r0, #1
 800a236:	700a      	strb	r2, [r1, #0]
 800a238:	4770      	bx	lr
	...

0800a23c <fiprintf>:
 800a23c:	b40e      	push	{r1, r2, r3}
 800a23e:	b503      	push	{r0, r1, lr}
 800a240:	4601      	mov	r1, r0
 800a242:	ab03      	add	r3, sp, #12
 800a244:	4805      	ldr	r0, [pc, #20]	; (800a25c <fiprintf+0x20>)
 800a246:	f853 2b04 	ldr.w	r2, [r3], #4
 800a24a:	6800      	ldr	r0, [r0, #0]
 800a24c:	9301      	str	r3, [sp, #4]
 800a24e:	f000 f83d 	bl	800a2cc <_vfiprintf_r>
 800a252:	b002      	add	sp, #8
 800a254:	f85d eb04 	ldr.w	lr, [sp], #4
 800a258:	b003      	add	sp, #12
 800a25a:	4770      	bx	lr
 800a25c:	20000074 	.word	0x20000074

0800a260 <abort>:
 800a260:	2006      	movs	r0, #6
 800a262:	b508      	push	{r3, lr}
 800a264:	f000 fa0a 	bl	800a67c <raise>
 800a268:	2001      	movs	r0, #1
 800a26a:	f7f8 fa37 	bl	80026dc <_exit>

0800a26e <_malloc_usable_size_r>:
 800a26e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a272:	1f18      	subs	r0, r3, #4
 800a274:	2b00      	cmp	r3, #0
 800a276:	bfbc      	itt	lt
 800a278:	580b      	ldrlt	r3, [r1, r0]
 800a27a:	18c0      	addlt	r0, r0, r3
 800a27c:	4770      	bx	lr

0800a27e <__sfputc_r>:
 800a27e:	6893      	ldr	r3, [r2, #8]
 800a280:	b410      	push	{r4}
 800a282:	3b01      	subs	r3, #1
 800a284:	2b00      	cmp	r3, #0
 800a286:	6093      	str	r3, [r2, #8]
 800a288:	da07      	bge.n	800a29a <__sfputc_r+0x1c>
 800a28a:	6994      	ldr	r4, [r2, #24]
 800a28c:	42a3      	cmp	r3, r4
 800a28e:	db01      	blt.n	800a294 <__sfputc_r+0x16>
 800a290:	290a      	cmp	r1, #10
 800a292:	d102      	bne.n	800a29a <__sfputc_r+0x1c>
 800a294:	bc10      	pop	{r4}
 800a296:	f000 b933 	b.w	800a500 <__swbuf_r>
 800a29a:	6813      	ldr	r3, [r2, #0]
 800a29c:	1c58      	adds	r0, r3, #1
 800a29e:	6010      	str	r0, [r2, #0]
 800a2a0:	7019      	strb	r1, [r3, #0]
 800a2a2:	4608      	mov	r0, r1
 800a2a4:	bc10      	pop	{r4}
 800a2a6:	4770      	bx	lr

0800a2a8 <__sfputs_r>:
 800a2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2aa:	4606      	mov	r6, r0
 800a2ac:	460f      	mov	r7, r1
 800a2ae:	4614      	mov	r4, r2
 800a2b0:	18d5      	adds	r5, r2, r3
 800a2b2:	42ac      	cmp	r4, r5
 800a2b4:	d101      	bne.n	800a2ba <__sfputs_r+0x12>
 800a2b6:	2000      	movs	r0, #0
 800a2b8:	e007      	b.n	800a2ca <__sfputs_r+0x22>
 800a2ba:	463a      	mov	r2, r7
 800a2bc:	4630      	mov	r0, r6
 800a2be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2c2:	f7ff ffdc 	bl	800a27e <__sfputc_r>
 800a2c6:	1c43      	adds	r3, r0, #1
 800a2c8:	d1f3      	bne.n	800a2b2 <__sfputs_r+0xa>
 800a2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a2cc <_vfiprintf_r>:
 800a2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d0:	460d      	mov	r5, r1
 800a2d2:	4614      	mov	r4, r2
 800a2d4:	4698      	mov	r8, r3
 800a2d6:	4606      	mov	r6, r0
 800a2d8:	b09d      	sub	sp, #116	; 0x74
 800a2da:	b118      	cbz	r0, 800a2e4 <_vfiprintf_r+0x18>
 800a2dc:	6a03      	ldr	r3, [r0, #32]
 800a2de:	b90b      	cbnz	r3, 800a2e4 <_vfiprintf_r+0x18>
 800a2e0:	f7fc fdae 	bl	8006e40 <__sinit>
 800a2e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2e6:	07d9      	lsls	r1, r3, #31
 800a2e8:	d405      	bmi.n	800a2f6 <_vfiprintf_r+0x2a>
 800a2ea:	89ab      	ldrh	r3, [r5, #12]
 800a2ec:	059a      	lsls	r2, r3, #22
 800a2ee:	d402      	bmi.n	800a2f6 <_vfiprintf_r+0x2a>
 800a2f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2f2:	f7fc febc 	bl	800706e <__retarget_lock_acquire_recursive>
 800a2f6:	89ab      	ldrh	r3, [r5, #12]
 800a2f8:	071b      	lsls	r3, r3, #28
 800a2fa:	d501      	bpl.n	800a300 <_vfiprintf_r+0x34>
 800a2fc:	692b      	ldr	r3, [r5, #16]
 800a2fe:	b99b      	cbnz	r3, 800a328 <_vfiprintf_r+0x5c>
 800a300:	4629      	mov	r1, r5
 800a302:	4630      	mov	r0, r6
 800a304:	f000 f93a 	bl	800a57c <__swsetup_r>
 800a308:	b170      	cbz	r0, 800a328 <_vfiprintf_r+0x5c>
 800a30a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a30c:	07dc      	lsls	r4, r3, #31
 800a30e:	d504      	bpl.n	800a31a <_vfiprintf_r+0x4e>
 800a310:	f04f 30ff 	mov.w	r0, #4294967295
 800a314:	b01d      	add	sp, #116	; 0x74
 800a316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a31a:	89ab      	ldrh	r3, [r5, #12]
 800a31c:	0598      	lsls	r0, r3, #22
 800a31e:	d4f7      	bmi.n	800a310 <_vfiprintf_r+0x44>
 800a320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a322:	f7fc fea5 	bl	8007070 <__retarget_lock_release_recursive>
 800a326:	e7f3      	b.n	800a310 <_vfiprintf_r+0x44>
 800a328:	2300      	movs	r3, #0
 800a32a:	9309      	str	r3, [sp, #36]	; 0x24
 800a32c:	2320      	movs	r3, #32
 800a32e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a332:	2330      	movs	r3, #48	; 0x30
 800a334:	f04f 0901 	mov.w	r9, #1
 800a338:	f8cd 800c 	str.w	r8, [sp, #12]
 800a33c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800a4ec <_vfiprintf_r+0x220>
 800a340:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a344:	4623      	mov	r3, r4
 800a346:	469a      	mov	sl, r3
 800a348:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a34c:	b10a      	cbz	r2, 800a352 <_vfiprintf_r+0x86>
 800a34e:	2a25      	cmp	r2, #37	; 0x25
 800a350:	d1f9      	bne.n	800a346 <_vfiprintf_r+0x7a>
 800a352:	ebba 0b04 	subs.w	fp, sl, r4
 800a356:	d00b      	beq.n	800a370 <_vfiprintf_r+0xa4>
 800a358:	465b      	mov	r3, fp
 800a35a:	4622      	mov	r2, r4
 800a35c:	4629      	mov	r1, r5
 800a35e:	4630      	mov	r0, r6
 800a360:	f7ff ffa2 	bl	800a2a8 <__sfputs_r>
 800a364:	3001      	adds	r0, #1
 800a366:	f000 80a9 	beq.w	800a4bc <_vfiprintf_r+0x1f0>
 800a36a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a36c:	445a      	add	r2, fp
 800a36e:	9209      	str	r2, [sp, #36]	; 0x24
 800a370:	f89a 3000 	ldrb.w	r3, [sl]
 800a374:	2b00      	cmp	r3, #0
 800a376:	f000 80a1 	beq.w	800a4bc <_vfiprintf_r+0x1f0>
 800a37a:	2300      	movs	r3, #0
 800a37c:	f04f 32ff 	mov.w	r2, #4294967295
 800a380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a384:	f10a 0a01 	add.w	sl, sl, #1
 800a388:	9304      	str	r3, [sp, #16]
 800a38a:	9307      	str	r3, [sp, #28]
 800a38c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a390:	931a      	str	r3, [sp, #104]	; 0x68
 800a392:	4654      	mov	r4, sl
 800a394:	2205      	movs	r2, #5
 800a396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a39a:	4854      	ldr	r0, [pc, #336]	; (800a4ec <_vfiprintf_r+0x220>)
 800a39c:	f7fc fe69 	bl	8007072 <memchr>
 800a3a0:	9a04      	ldr	r2, [sp, #16]
 800a3a2:	b9d8      	cbnz	r0, 800a3dc <_vfiprintf_r+0x110>
 800a3a4:	06d1      	lsls	r1, r2, #27
 800a3a6:	bf44      	itt	mi
 800a3a8:	2320      	movmi	r3, #32
 800a3aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3ae:	0713      	lsls	r3, r2, #28
 800a3b0:	bf44      	itt	mi
 800a3b2:	232b      	movmi	r3, #43	; 0x2b
 800a3b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3b8:	f89a 3000 	ldrb.w	r3, [sl]
 800a3bc:	2b2a      	cmp	r3, #42	; 0x2a
 800a3be:	d015      	beq.n	800a3ec <_vfiprintf_r+0x120>
 800a3c0:	4654      	mov	r4, sl
 800a3c2:	2000      	movs	r0, #0
 800a3c4:	f04f 0c0a 	mov.w	ip, #10
 800a3c8:	9a07      	ldr	r2, [sp, #28]
 800a3ca:	4621      	mov	r1, r4
 800a3cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3d0:	3b30      	subs	r3, #48	; 0x30
 800a3d2:	2b09      	cmp	r3, #9
 800a3d4:	d94d      	bls.n	800a472 <_vfiprintf_r+0x1a6>
 800a3d6:	b1b0      	cbz	r0, 800a406 <_vfiprintf_r+0x13a>
 800a3d8:	9207      	str	r2, [sp, #28]
 800a3da:	e014      	b.n	800a406 <_vfiprintf_r+0x13a>
 800a3dc:	eba0 0308 	sub.w	r3, r0, r8
 800a3e0:	fa09 f303 	lsl.w	r3, r9, r3
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	46a2      	mov	sl, r4
 800a3e8:	9304      	str	r3, [sp, #16]
 800a3ea:	e7d2      	b.n	800a392 <_vfiprintf_r+0xc6>
 800a3ec:	9b03      	ldr	r3, [sp, #12]
 800a3ee:	1d19      	adds	r1, r3, #4
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	9103      	str	r1, [sp, #12]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	bfbb      	ittet	lt
 800a3f8:	425b      	neglt	r3, r3
 800a3fa:	f042 0202 	orrlt.w	r2, r2, #2
 800a3fe:	9307      	strge	r3, [sp, #28]
 800a400:	9307      	strlt	r3, [sp, #28]
 800a402:	bfb8      	it	lt
 800a404:	9204      	strlt	r2, [sp, #16]
 800a406:	7823      	ldrb	r3, [r4, #0]
 800a408:	2b2e      	cmp	r3, #46	; 0x2e
 800a40a:	d10c      	bne.n	800a426 <_vfiprintf_r+0x15a>
 800a40c:	7863      	ldrb	r3, [r4, #1]
 800a40e:	2b2a      	cmp	r3, #42	; 0x2a
 800a410:	d134      	bne.n	800a47c <_vfiprintf_r+0x1b0>
 800a412:	9b03      	ldr	r3, [sp, #12]
 800a414:	3402      	adds	r4, #2
 800a416:	1d1a      	adds	r2, r3, #4
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	9203      	str	r2, [sp, #12]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	bfb8      	it	lt
 800a420:	f04f 33ff 	movlt.w	r3, #4294967295
 800a424:	9305      	str	r3, [sp, #20]
 800a426:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a4f0 <_vfiprintf_r+0x224>
 800a42a:	2203      	movs	r2, #3
 800a42c:	4650      	mov	r0, sl
 800a42e:	7821      	ldrb	r1, [r4, #0]
 800a430:	f7fc fe1f 	bl	8007072 <memchr>
 800a434:	b138      	cbz	r0, 800a446 <_vfiprintf_r+0x17a>
 800a436:	2240      	movs	r2, #64	; 0x40
 800a438:	9b04      	ldr	r3, [sp, #16]
 800a43a:	eba0 000a 	sub.w	r0, r0, sl
 800a43e:	4082      	lsls	r2, r0
 800a440:	4313      	orrs	r3, r2
 800a442:	3401      	adds	r4, #1
 800a444:	9304      	str	r3, [sp, #16]
 800a446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a44a:	2206      	movs	r2, #6
 800a44c:	4829      	ldr	r0, [pc, #164]	; (800a4f4 <_vfiprintf_r+0x228>)
 800a44e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a452:	f7fc fe0e 	bl	8007072 <memchr>
 800a456:	2800      	cmp	r0, #0
 800a458:	d03f      	beq.n	800a4da <_vfiprintf_r+0x20e>
 800a45a:	4b27      	ldr	r3, [pc, #156]	; (800a4f8 <_vfiprintf_r+0x22c>)
 800a45c:	bb1b      	cbnz	r3, 800a4a6 <_vfiprintf_r+0x1da>
 800a45e:	9b03      	ldr	r3, [sp, #12]
 800a460:	3307      	adds	r3, #7
 800a462:	f023 0307 	bic.w	r3, r3, #7
 800a466:	3308      	adds	r3, #8
 800a468:	9303      	str	r3, [sp, #12]
 800a46a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a46c:	443b      	add	r3, r7
 800a46e:	9309      	str	r3, [sp, #36]	; 0x24
 800a470:	e768      	b.n	800a344 <_vfiprintf_r+0x78>
 800a472:	460c      	mov	r4, r1
 800a474:	2001      	movs	r0, #1
 800a476:	fb0c 3202 	mla	r2, ip, r2, r3
 800a47a:	e7a6      	b.n	800a3ca <_vfiprintf_r+0xfe>
 800a47c:	2300      	movs	r3, #0
 800a47e:	f04f 0c0a 	mov.w	ip, #10
 800a482:	4619      	mov	r1, r3
 800a484:	3401      	adds	r4, #1
 800a486:	9305      	str	r3, [sp, #20]
 800a488:	4620      	mov	r0, r4
 800a48a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a48e:	3a30      	subs	r2, #48	; 0x30
 800a490:	2a09      	cmp	r2, #9
 800a492:	d903      	bls.n	800a49c <_vfiprintf_r+0x1d0>
 800a494:	2b00      	cmp	r3, #0
 800a496:	d0c6      	beq.n	800a426 <_vfiprintf_r+0x15a>
 800a498:	9105      	str	r1, [sp, #20]
 800a49a:	e7c4      	b.n	800a426 <_vfiprintf_r+0x15a>
 800a49c:	4604      	mov	r4, r0
 800a49e:	2301      	movs	r3, #1
 800a4a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4a4:	e7f0      	b.n	800a488 <_vfiprintf_r+0x1bc>
 800a4a6:	ab03      	add	r3, sp, #12
 800a4a8:	9300      	str	r3, [sp, #0]
 800a4aa:	462a      	mov	r2, r5
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	4b13      	ldr	r3, [pc, #76]	; (800a4fc <_vfiprintf_r+0x230>)
 800a4b0:	a904      	add	r1, sp, #16
 800a4b2:	f7fb fe69 	bl	8006188 <_printf_float>
 800a4b6:	4607      	mov	r7, r0
 800a4b8:	1c78      	adds	r0, r7, #1
 800a4ba:	d1d6      	bne.n	800a46a <_vfiprintf_r+0x19e>
 800a4bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4be:	07d9      	lsls	r1, r3, #31
 800a4c0:	d405      	bmi.n	800a4ce <_vfiprintf_r+0x202>
 800a4c2:	89ab      	ldrh	r3, [r5, #12]
 800a4c4:	059a      	lsls	r2, r3, #22
 800a4c6:	d402      	bmi.n	800a4ce <_vfiprintf_r+0x202>
 800a4c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4ca:	f7fc fdd1 	bl	8007070 <__retarget_lock_release_recursive>
 800a4ce:	89ab      	ldrh	r3, [r5, #12]
 800a4d0:	065b      	lsls	r3, r3, #25
 800a4d2:	f53f af1d 	bmi.w	800a310 <_vfiprintf_r+0x44>
 800a4d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4d8:	e71c      	b.n	800a314 <_vfiprintf_r+0x48>
 800a4da:	ab03      	add	r3, sp, #12
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	462a      	mov	r2, r5
 800a4e0:	4630      	mov	r0, r6
 800a4e2:	4b06      	ldr	r3, [pc, #24]	; (800a4fc <_vfiprintf_r+0x230>)
 800a4e4:	a904      	add	r1, sp, #16
 800a4e6:	f7fc f8ef 	bl	80066c8 <_printf_i>
 800a4ea:	e7e4      	b.n	800a4b6 <_vfiprintf_r+0x1ea>
 800a4ec:	0800ab99 	.word	0x0800ab99
 800a4f0:	0800ab9f 	.word	0x0800ab9f
 800a4f4:	0800aba3 	.word	0x0800aba3
 800a4f8:	08006189 	.word	0x08006189
 800a4fc:	0800a2a9 	.word	0x0800a2a9

0800a500 <__swbuf_r>:
 800a500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a502:	460e      	mov	r6, r1
 800a504:	4614      	mov	r4, r2
 800a506:	4605      	mov	r5, r0
 800a508:	b118      	cbz	r0, 800a512 <__swbuf_r+0x12>
 800a50a:	6a03      	ldr	r3, [r0, #32]
 800a50c:	b90b      	cbnz	r3, 800a512 <__swbuf_r+0x12>
 800a50e:	f7fc fc97 	bl	8006e40 <__sinit>
 800a512:	69a3      	ldr	r3, [r4, #24]
 800a514:	60a3      	str	r3, [r4, #8]
 800a516:	89a3      	ldrh	r3, [r4, #12]
 800a518:	071a      	lsls	r2, r3, #28
 800a51a:	d525      	bpl.n	800a568 <__swbuf_r+0x68>
 800a51c:	6923      	ldr	r3, [r4, #16]
 800a51e:	b31b      	cbz	r3, 800a568 <__swbuf_r+0x68>
 800a520:	6823      	ldr	r3, [r4, #0]
 800a522:	6922      	ldr	r2, [r4, #16]
 800a524:	b2f6      	uxtb	r6, r6
 800a526:	1a98      	subs	r0, r3, r2
 800a528:	6963      	ldr	r3, [r4, #20]
 800a52a:	4637      	mov	r7, r6
 800a52c:	4283      	cmp	r3, r0
 800a52e:	dc04      	bgt.n	800a53a <__swbuf_r+0x3a>
 800a530:	4621      	mov	r1, r4
 800a532:	4628      	mov	r0, r5
 800a534:	f7ff fa30 	bl	8009998 <_fflush_r>
 800a538:	b9e0      	cbnz	r0, 800a574 <__swbuf_r+0x74>
 800a53a:	68a3      	ldr	r3, [r4, #8]
 800a53c:	3b01      	subs	r3, #1
 800a53e:	60a3      	str	r3, [r4, #8]
 800a540:	6823      	ldr	r3, [r4, #0]
 800a542:	1c5a      	adds	r2, r3, #1
 800a544:	6022      	str	r2, [r4, #0]
 800a546:	701e      	strb	r6, [r3, #0]
 800a548:	6962      	ldr	r2, [r4, #20]
 800a54a:	1c43      	adds	r3, r0, #1
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d004      	beq.n	800a55a <__swbuf_r+0x5a>
 800a550:	89a3      	ldrh	r3, [r4, #12]
 800a552:	07db      	lsls	r3, r3, #31
 800a554:	d506      	bpl.n	800a564 <__swbuf_r+0x64>
 800a556:	2e0a      	cmp	r6, #10
 800a558:	d104      	bne.n	800a564 <__swbuf_r+0x64>
 800a55a:	4621      	mov	r1, r4
 800a55c:	4628      	mov	r0, r5
 800a55e:	f7ff fa1b 	bl	8009998 <_fflush_r>
 800a562:	b938      	cbnz	r0, 800a574 <__swbuf_r+0x74>
 800a564:	4638      	mov	r0, r7
 800a566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a568:	4621      	mov	r1, r4
 800a56a:	4628      	mov	r0, r5
 800a56c:	f000 f806 	bl	800a57c <__swsetup_r>
 800a570:	2800      	cmp	r0, #0
 800a572:	d0d5      	beq.n	800a520 <__swbuf_r+0x20>
 800a574:	f04f 37ff 	mov.w	r7, #4294967295
 800a578:	e7f4      	b.n	800a564 <__swbuf_r+0x64>
	...

0800a57c <__swsetup_r>:
 800a57c:	b538      	push	{r3, r4, r5, lr}
 800a57e:	4b2a      	ldr	r3, [pc, #168]	; (800a628 <__swsetup_r+0xac>)
 800a580:	4605      	mov	r5, r0
 800a582:	6818      	ldr	r0, [r3, #0]
 800a584:	460c      	mov	r4, r1
 800a586:	b118      	cbz	r0, 800a590 <__swsetup_r+0x14>
 800a588:	6a03      	ldr	r3, [r0, #32]
 800a58a:	b90b      	cbnz	r3, 800a590 <__swsetup_r+0x14>
 800a58c:	f7fc fc58 	bl	8006e40 <__sinit>
 800a590:	89a3      	ldrh	r3, [r4, #12]
 800a592:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a596:	0718      	lsls	r0, r3, #28
 800a598:	d422      	bmi.n	800a5e0 <__swsetup_r+0x64>
 800a59a:	06d9      	lsls	r1, r3, #27
 800a59c:	d407      	bmi.n	800a5ae <__swsetup_r+0x32>
 800a59e:	2309      	movs	r3, #9
 800a5a0:	602b      	str	r3, [r5, #0]
 800a5a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a5a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5aa:	81a3      	strh	r3, [r4, #12]
 800a5ac:	e034      	b.n	800a618 <__swsetup_r+0x9c>
 800a5ae:	0758      	lsls	r0, r3, #29
 800a5b0:	d512      	bpl.n	800a5d8 <__swsetup_r+0x5c>
 800a5b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5b4:	b141      	cbz	r1, 800a5c8 <__swsetup_r+0x4c>
 800a5b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5ba:	4299      	cmp	r1, r3
 800a5bc:	d002      	beq.n	800a5c4 <__swsetup_r+0x48>
 800a5be:	4628      	mov	r0, r5
 800a5c0:	f7fd fbda 	bl	8007d78 <_free_r>
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	6363      	str	r3, [r4, #52]	; 0x34
 800a5c8:	89a3      	ldrh	r3, [r4, #12]
 800a5ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5ce:	81a3      	strh	r3, [r4, #12]
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	6063      	str	r3, [r4, #4]
 800a5d4:	6923      	ldr	r3, [r4, #16]
 800a5d6:	6023      	str	r3, [r4, #0]
 800a5d8:	89a3      	ldrh	r3, [r4, #12]
 800a5da:	f043 0308 	orr.w	r3, r3, #8
 800a5de:	81a3      	strh	r3, [r4, #12]
 800a5e0:	6923      	ldr	r3, [r4, #16]
 800a5e2:	b94b      	cbnz	r3, 800a5f8 <__swsetup_r+0x7c>
 800a5e4:	89a3      	ldrh	r3, [r4, #12]
 800a5e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5ee:	d003      	beq.n	800a5f8 <__swsetup_r+0x7c>
 800a5f0:	4621      	mov	r1, r4
 800a5f2:	4628      	mov	r0, r5
 800a5f4:	f000 f883 	bl	800a6fe <__smakebuf_r>
 800a5f8:	89a0      	ldrh	r0, [r4, #12]
 800a5fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5fe:	f010 0301 	ands.w	r3, r0, #1
 800a602:	d00a      	beq.n	800a61a <__swsetup_r+0x9e>
 800a604:	2300      	movs	r3, #0
 800a606:	60a3      	str	r3, [r4, #8]
 800a608:	6963      	ldr	r3, [r4, #20]
 800a60a:	425b      	negs	r3, r3
 800a60c:	61a3      	str	r3, [r4, #24]
 800a60e:	6923      	ldr	r3, [r4, #16]
 800a610:	b943      	cbnz	r3, 800a624 <__swsetup_r+0xa8>
 800a612:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a616:	d1c4      	bne.n	800a5a2 <__swsetup_r+0x26>
 800a618:	bd38      	pop	{r3, r4, r5, pc}
 800a61a:	0781      	lsls	r1, r0, #30
 800a61c:	bf58      	it	pl
 800a61e:	6963      	ldrpl	r3, [r4, #20]
 800a620:	60a3      	str	r3, [r4, #8]
 800a622:	e7f4      	b.n	800a60e <__swsetup_r+0x92>
 800a624:	2000      	movs	r0, #0
 800a626:	e7f7      	b.n	800a618 <__swsetup_r+0x9c>
 800a628:	20000074 	.word	0x20000074

0800a62c <_raise_r>:
 800a62c:	291f      	cmp	r1, #31
 800a62e:	b538      	push	{r3, r4, r5, lr}
 800a630:	4604      	mov	r4, r0
 800a632:	460d      	mov	r5, r1
 800a634:	d904      	bls.n	800a640 <_raise_r+0x14>
 800a636:	2316      	movs	r3, #22
 800a638:	6003      	str	r3, [r0, #0]
 800a63a:	f04f 30ff 	mov.w	r0, #4294967295
 800a63e:	bd38      	pop	{r3, r4, r5, pc}
 800a640:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a642:	b112      	cbz	r2, 800a64a <_raise_r+0x1e>
 800a644:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a648:	b94b      	cbnz	r3, 800a65e <_raise_r+0x32>
 800a64a:	4620      	mov	r0, r4
 800a64c:	f000 f830 	bl	800a6b0 <_getpid_r>
 800a650:	462a      	mov	r2, r5
 800a652:	4601      	mov	r1, r0
 800a654:	4620      	mov	r0, r4
 800a656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a65a:	f000 b817 	b.w	800a68c <_kill_r>
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d00a      	beq.n	800a678 <_raise_r+0x4c>
 800a662:	1c59      	adds	r1, r3, #1
 800a664:	d103      	bne.n	800a66e <_raise_r+0x42>
 800a666:	2316      	movs	r3, #22
 800a668:	6003      	str	r3, [r0, #0]
 800a66a:	2001      	movs	r0, #1
 800a66c:	e7e7      	b.n	800a63e <_raise_r+0x12>
 800a66e:	2400      	movs	r4, #0
 800a670:	4628      	mov	r0, r5
 800a672:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a676:	4798      	blx	r3
 800a678:	2000      	movs	r0, #0
 800a67a:	e7e0      	b.n	800a63e <_raise_r+0x12>

0800a67c <raise>:
 800a67c:	4b02      	ldr	r3, [pc, #8]	; (800a688 <raise+0xc>)
 800a67e:	4601      	mov	r1, r0
 800a680:	6818      	ldr	r0, [r3, #0]
 800a682:	f7ff bfd3 	b.w	800a62c <_raise_r>
 800a686:	bf00      	nop
 800a688:	20000074 	.word	0x20000074

0800a68c <_kill_r>:
 800a68c:	b538      	push	{r3, r4, r5, lr}
 800a68e:	2300      	movs	r3, #0
 800a690:	4d06      	ldr	r5, [pc, #24]	; (800a6ac <_kill_r+0x20>)
 800a692:	4604      	mov	r4, r0
 800a694:	4608      	mov	r0, r1
 800a696:	4611      	mov	r1, r2
 800a698:	602b      	str	r3, [r5, #0]
 800a69a:	f7f8 f80f 	bl	80026bc <_kill>
 800a69e:	1c43      	adds	r3, r0, #1
 800a6a0:	d102      	bne.n	800a6a8 <_kill_r+0x1c>
 800a6a2:	682b      	ldr	r3, [r5, #0]
 800a6a4:	b103      	cbz	r3, 800a6a8 <_kill_r+0x1c>
 800a6a6:	6023      	str	r3, [r4, #0]
 800a6a8:	bd38      	pop	{r3, r4, r5, pc}
 800a6aa:	bf00      	nop
 800a6ac:	200004a4 	.word	0x200004a4

0800a6b0 <_getpid_r>:
 800a6b0:	f7f7 bffd 	b.w	80026ae <_getpid>

0800a6b4 <__swhatbuf_r>:
 800a6b4:	b570      	push	{r4, r5, r6, lr}
 800a6b6:	460c      	mov	r4, r1
 800a6b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6bc:	4615      	mov	r5, r2
 800a6be:	2900      	cmp	r1, #0
 800a6c0:	461e      	mov	r6, r3
 800a6c2:	b096      	sub	sp, #88	; 0x58
 800a6c4:	da0c      	bge.n	800a6e0 <__swhatbuf_r+0x2c>
 800a6c6:	89a3      	ldrh	r3, [r4, #12]
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a6ce:	bf0c      	ite	eq
 800a6d0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a6d4:	2340      	movne	r3, #64	; 0x40
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	6031      	str	r1, [r6, #0]
 800a6da:	602b      	str	r3, [r5, #0]
 800a6dc:	b016      	add	sp, #88	; 0x58
 800a6de:	bd70      	pop	{r4, r5, r6, pc}
 800a6e0:	466a      	mov	r2, sp
 800a6e2:	f000 f849 	bl	800a778 <_fstat_r>
 800a6e6:	2800      	cmp	r0, #0
 800a6e8:	dbed      	blt.n	800a6c6 <__swhatbuf_r+0x12>
 800a6ea:	9901      	ldr	r1, [sp, #4]
 800a6ec:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a6f0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a6f4:	4259      	negs	r1, r3
 800a6f6:	4159      	adcs	r1, r3
 800a6f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6fc:	e7eb      	b.n	800a6d6 <__swhatbuf_r+0x22>

0800a6fe <__smakebuf_r>:
 800a6fe:	898b      	ldrh	r3, [r1, #12]
 800a700:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a702:	079d      	lsls	r5, r3, #30
 800a704:	4606      	mov	r6, r0
 800a706:	460c      	mov	r4, r1
 800a708:	d507      	bpl.n	800a71a <__smakebuf_r+0x1c>
 800a70a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a70e:	6023      	str	r3, [r4, #0]
 800a710:	6123      	str	r3, [r4, #16]
 800a712:	2301      	movs	r3, #1
 800a714:	6163      	str	r3, [r4, #20]
 800a716:	b002      	add	sp, #8
 800a718:	bd70      	pop	{r4, r5, r6, pc}
 800a71a:	466a      	mov	r2, sp
 800a71c:	ab01      	add	r3, sp, #4
 800a71e:	f7ff ffc9 	bl	800a6b4 <__swhatbuf_r>
 800a722:	9900      	ldr	r1, [sp, #0]
 800a724:	4605      	mov	r5, r0
 800a726:	4630      	mov	r0, r6
 800a728:	f7fd fb96 	bl	8007e58 <_malloc_r>
 800a72c:	b948      	cbnz	r0, 800a742 <__smakebuf_r+0x44>
 800a72e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a732:	059a      	lsls	r2, r3, #22
 800a734:	d4ef      	bmi.n	800a716 <__smakebuf_r+0x18>
 800a736:	f023 0303 	bic.w	r3, r3, #3
 800a73a:	f043 0302 	orr.w	r3, r3, #2
 800a73e:	81a3      	strh	r3, [r4, #12]
 800a740:	e7e3      	b.n	800a70a <__smakebuf_r+0xc>
 800a742:	89a3      	ldrh	r3, [r4, #12]
 800a744:	6020      	str	r0, [r4, #0]
 800a746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a74a:	81a3      	strh	r3, [r4, #12]
 800a74c:	9b00      	ldr	r3, [sp, #0]
 800a74e:	6120      	str	r0, [r4, #16]
 800a750:	6163      	str	r3, [r4, #20]
 800a752:	9b01      	ldr	r3, [sp, #4]
 800a754:	b15b      	cbz	r3, 800a76e <__smakebuf_r+0x70>
 800a756:	4630      	mov	r0, r6
 800a758:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a75c:	f000 f81e 	bl	800a79c <_isatty_r>
 800a760:	b128      	cbz	r0, 800a76e <__smakebuf_r+0x70>
 800a762:	89a3      	ldrh	r3, [r4, #12]
 800a764:	f023 0303 	bic.w	r3, r3, #3
 800a768:	f043 0301 	orr.w	r3, r3, #1
 800a76c:	81a3      	strh	r3, [r4, #12]
 800a76e:	89a3      	ldrh	r3, [r4, #12]
 800a770:	431d      	orrs	r5, r3
 800a772:	81a5      	strh	r5, [r4, #12]
 800a774:	e7cf      	b.n	800a716 <__smakebuf_r+0x18>
	...

0800a778 <_fstat_r>:
 800a778:	b538      	push	{r3, r4, r5, lr}
 800a77a:	2300      	movs	r3, #0
 800a77c:	4d06      	ldr	r5, [pc, #24]	; (800a798 <_fstat_r+0x20>)
 800a77e:	4604      	mov	r4, r0
 800a780:	4608      	mov	r0, r1
 800a782:	4611      	mov	r1, r2
 800a784:	602b      	str	r3, [r5, #0]
 800a786:	f7f7 fff7 	bl	8002778 <_fstat>
 800a78a:	1c43      	adds	r3, r0, #1
 800a78c:	d102      	bne.n	800a794 <_fstat_r+0x1c>
 800a78e:	682b      	ldr	r3, [r5, #0]
 800a790:	b103      	cbz	r3, 800a794 <_fstat_r+0x1c>
 800a792:	6023      	str	r3, [r4, #0]
 800a794:	bd38      	pop	{r3, r4, r5, pc}
 800a796:	bf00      	nop
 800a798:	200004a4 	.word	0x200004a4

0800a79c <_isatty_r>:
 800a79c:	b538      	push	{r3, r4, r5, lr}
 800a79e:	2300      	movs	r3, #0
 800a7a0:	4d05      	ldr	r5, [pc, #20]	; (800a7b8 <_isatty_r+0x1c>)
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	4608      	mov	r0, r1
 800a7a6:	602b      	str	r3, [r5, #0]
 800a7a8:	f7f7 fff5 	bl	8002796 <_isatty>
 800a7ac:	1c43      	adds	r3, r0, #1
 800a7ae:	d102      	bne.n	800a7b6 <_isatty_r+0x1a>
 800a7b0:	682b      	ldr	r3, [r5, #0]
 800a7b2:	b103      	cbz	r3, 800a7b6 <_isatty_r+0x1a>
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	bd38      	pop	{r3, r4, r5, pc}
 800a7b8:	200004a4 	.word	0x200004a4

0800a7bc <_init>:
 800a7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7be:	bf00      	nop
 800a7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7c2:	bc08      	pop	{r3}
 800a7c4:	469e      	mov	lr, r3
 800a7c6:	4770      	bx	lr

0800a7c8 <_fini>:
 800a7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ca:	bf00      	nop
 800a7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ce:	bc08      	pop	{r3}
 800a7d0:	469e      	mov	lr, r3
 800a7d2:	4770      	bx	lr
