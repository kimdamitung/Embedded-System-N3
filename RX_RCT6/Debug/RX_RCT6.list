
RX_RCT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6bc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800a8a8  0800a8a8  0001a8a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad40  0800ad40  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800ad40  0800ad40  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ad40  0800ad40  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad40  0800ad40  0001ad40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad44  0800ad44  0001ad44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800ad48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  200001dc  0800af24  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  0800af24  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011600  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002541  00000000  00000000  00031848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e8  00000000  00000000  00033d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e22  00000000  00000000  00034f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000036f5  00000000  00000000  00035d9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000147bb  00000000  00000000  0003948f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009eff3  00000000  00000000  0004dc4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000615c  00000000  00000000  000ecc40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000f2d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001dc 	.word	0x200001dc
 8000204:	00000000 	.word	0x00000000
 8000208:	0800a88c 	.word	0x0800a88c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e0 	.word	0x200001e0
 8000224:	0800a88c 	.word	0x0800a88c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_d2lz>:
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	4605      	mov	r5, r0
 8000c44:	460c      	mov	r4, r1
 8000c46:	2200      	movs	r2, #0
 8000c48:	2300      	movs	r3, #0
 8000c4a:	4628      	mov	r0, r5
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	f7ff ff21 	bl	8000a94 <__aeabi_dcmplt>
 8000c52:	b928      	cbnz	r0, 8000c60 <__aeabi_d2lz+0x20>
 8000c54:	4628      	mov	r0, r5
 8000c56:	4621      	mov	r1, r4
 8000c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c5c:	f000 b80a 	b.w	8000c74 <__aeabi_d2ulz>
 8000c60:	4628      	mov	r0, r5
 8000c62:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c66:	f000 f805 	bl	8000c74 <__aeabi_d2ulz>
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	bd38      	pop	{r3, r4, r5, pc}
 8000c72:	bf00      	nop

08000c74 <__aeabi_d2ulz>:
 8000c74:	b5d0      	push	{r4, r6, r7, lr}
 8000c76:	2200      	movs	r2, #0
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <__aeabi_d2ulz+0x34>)
 8000c7a:	4606      	mov	r6, r0
 8000c7c:	460f      	mov	r7, r1
 8000c7e:	f7ff fc97 	bl	80005b0 <__aeabi_dmul>
 8000c82:	f7ff ff6d 	bl	8000b60 <__aeabi_d2uiz>
 8000c86:	4604      	mov	r4, r0
 8000c88:	f7ff fc18 	bl	80004bc <__aeabi_ui2d>
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <__aeabi_d2ulz+0x38>)
 8000c90:	f7ff fc8e 	bl	80005b0 <__aeabi_dmul>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4630      	mov	r0, r6
 8000c9a:	4639      	mov	r1, r7
 8000c9c:	f7ff fad0 	bl	8000240 <__aeabi_dsub>
 8000ca0:	f7ff ff5e 	bl	8000b60 <__aeabi_d2uiz>
 8000ca4:	4621      	mov	r1, r4
 8000ca6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca8:	3df00000 	.word	0x3df00000
 8000cac:	41f00000 	.word	0x41f00000

08000cb0 <BMP180_Init>:

/**
 * @brief Initializes the BMP180 temperature/pressure sensor.
 * @param hi2c User I2C handle pointer.
 */
void BMP180_Init(I2C_HandleTypeDef *hi2c) {
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	_bmp180_ui2c = hi2c;
 8000cb8:	4a03      	ldr	r2, [pc, #12]	; (8000cc8 <BMP180_Init+0x18>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6013      	str	r3, [r2, #0]
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	200001f8 	.word	0x200001f8

08000ccc <BMP180_SetOversampling>:
/**
 * @param oss Enum, oversampling setting.
 * @note Available resolutions: BMP180_LOW, BMP180_STANDARD, BMP180_HIGH, BMP180_ULTRA.
 * @note Refer to section 3.3.1 of datasheet.
 */
void BMP180_SetOversampling(BMP180_OSS oss) {
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
	_bmp180_oss = oss;
 8000cd6:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <BMP180_SetOversampling+0x1c>)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	7013      	strb	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000212 	.word	0x20000212

08000cec <BMP180_UpdateCalibrationData>:

/**
 * @brief Updates calibration data.
 * @note Must be called once before main loop.
 */
void BMP180_UpdateCalibrationData(void) {
 8000cec:	b598      	push	{r3, r4, r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	_bmp180_eeprom.BMP180_AC1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC1]);
 8000cf0:	23aa      	movs	r3, #170	; 0xaa
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f8dc 	bl	8000eb0 <BMP180_ReadReg>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	021b      	lsls	r3, r3, #8
 8000cfc:	b21c      	sxth	r4, r3
 8000cfe:	23ab      	movs	r3, #171	; 0xab
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 f8d5 	bl	8000eb0 <BMP180_ReadReg>
 8000d06:	4603      	mov	r3, r0
 8000d08:	b21b      	sxth	r3, r3
 8000d0a:	4323      	orrs	r3, r4
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	4b58      	ldr	r3, [pc, #352]	; (8000e70 <BMP180_UpdateCalibrationData+0x184>)
 8000d10:	801a      	strh	r2, [r3, #0]
	_bmp180_eeprom.BMP180_AC2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC2]);
 8000d12:	23ac      	movs	r3, #172	; 0xac
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 f8cb 	bl	8000eb0 <BMP180_ReadReg>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	021b      	lsls	r3, r3, #8
 8000d1e:	b21c      	sxth	r4, r3
 8000d20:	23ad      	movs	r3, #173	; 0xad
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f8c4 	bl	8000eb0 <BMP180_ReadReg>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	b21b      	sxth	r3, r3
 8000d2c:	4323      	orrs	r3, r4
 8000d2e:	b21a      	sxth	r2, r3
 8000d30:	4b4f      	ldr	r3, [pc, #316]	; (8000e70 <BMP180_UpdateCalibrationData+0x184>)
 8000d32:	805a      	strh	r2, [r3, #2]
	_bmp180_eeprom.BMP180_AC3 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC3]);
 8000d34:	23ae      	movs	r3, #174	; 0xae
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f8ba 	bl	8000eb0 <BMP180_ReadReg>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	021b      	lsls	r3, r3, #8
 8000d40:	b21c      	sxth	r4, r3
 8000d42:	23af      	movs	r3, #175	; 0xaf
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 f8b3 	bl	8000eb0 <BMP180_ReadReg>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	b21b      	sxth	r3, r3
 8000d4e:	4323      	orrs	r3, r4
 8000d50:	b21a      	sxth	r2, r3
 8000d52:	4b47      	ldr	r3, [pc, #284]	; (8000e70 <BMP180_UpdateCalibrationData+0x184>)
 8000d54:	809a      	strh	r2, [r3, #4]
	_bmp180_eeprom.BMP180_AC4 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC4]);
 8000d56:	23b0      	movs	r3, #176	; 0xb0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 f8a9 	bl	8000eb0 <BMP180_ReadReg>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	021b      	lsls	r3, r3, #8
 8000d62:	b21c      	sxth	r4, r3
 8000d64:	23b1      	movs	r3, #177	; 0xb1
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f8a2 	bl	8000eb0 <BMP180_ReadReg>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	b21b      	sxth	r3, r3
 8000d70:	4323      	orrs	r3, r4
 8000d72:	b21b      	sxth	r3, r3
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	4b3e      	ldr	r3, [pc, #248]	; (8000e70 <BMP180_UpdateCalibrationData+0x184>)
 8000d78:	80da      	strh	r2, [r3, #6]
	_bmp180_eeprom.BMP180_AC5 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC5]);
 8000d7a:	23b2      	movs	r3, #178	; 0xb2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 f897 	bl	8000eb0 <BMP180_ReadReg>
 8000d82:	4603      	mov	r3, r0
 8000d84:	021b      	lsls	r3, r3, #8
 8000d86:	b21c      	sxth	r4, r3
 8000d88:	23b3      	movs	r3, #179	; 0xb3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f890 	bl	8000eb0 <BMP180_ReadReg>
 8000d90:	4603      	mov	r3, r0
 8000d92:	b21b      	sxth	r3, r3
 8000d94:	4323      	orrs	r3, r4
 8000d96:	b21b      	sxth	r3, r3
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	4b35      	ldr	r3, [pc, #212]	; (8000e70 <BMP180_UpdateCalibrationData+0x184>)
 8000d9c:	811a      	strh	r2, [r3, #8]
	_bmp180_eeprom.BMP180_AC6 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC6]);
 8000d9e:	23b4      	movs	r3, #180	; 0xb4
 8000da0:	4618      	mov	r0, r3
 8000da2:	f000 f885 	bl	8000eb0 <BMP180_ReadReg>
 8000da6:	4603      	mov	r3, r0
 8000da8:	021b      	lsls	r3, r3, #8
 8000daa:	b21c      	sxth	r4, r3
 8000dac:	23b5      	movs	r3, #181	; 0xb5
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f87e 	bl	8000eb0 <BMP180_ReadReg>
 8000db4:	4603      	mov	r3, r0
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	4323      	orrs	r3, r4
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <BMP180_UpdateCalibrationData+0x184>)
 8000dc0:	815a      	strh	r2, [r3, #10]
	_bmp180_eeprom.BMP180_B1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B1]);
 8000dc2:	23b6      	movs	r3, #182	; 0xb6
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 f873 	bl	8000eb0 <BMP180_ReadReg>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	021b      	lsls	r3, r3, #8
 8000dce:	b21c      	sxth	r4, r3
 8000dd0:	23b7      	movs	r3, #183	; 0xb7
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 f86c 	bl	8000eb0 <BMP180_ReadReg>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	b21b      	sxth	r3, r3
 8000ddc:	4323      	orrs	r3, r4
 8000dde:	b21a      	sxth	r2, r3
 8000de0:	4b23      	ldr	r3, [pc, #140]	; (8000e70 <BMP180_UpdateCalibrationData+0x184>)
 8000de2:	819a      	strh	r2, [r3, #12]
	_bmp180_eeprom.BMP180_B2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B2]);
 8000de4:	23b8      	movs	r3, #184	; 0xb8
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f862 	bl	8000eb0 <BMP180_ReadReg>
 8000dec:	4603      	mov	r3, r0
 8000dee:	021b      	lsls	r3, r3, #8
 8000df0:	b21c      	sxth	r4, r3
 8000df2:	23b9      	movs	r3, #185	; 0xb9
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 f85b 	bl	8000eb0 <BMP180_ReadReg>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	b21b      	sxth	r3, r3
 8000dfe:	4323      	orrs	r3, r4
 8000e00:	b21a      	sxth	r2, r3
 8000e02:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <BMP180_UpdateCalibrationData+0x184>)
 8000e04:	81da      	strh	r2, [r3, #14]
	_bmp180_eeprom.BMP180_MB = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MB]);
 8000e06:	23ba      	movs	r3, #186	; 0xba
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 f851 	bl	8000eb0 <BMP180_ReadReg>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	021b      	lsls	r3, r3, #8
 8000e12:	b21c      	sxth	r4, r3
 8000e14:	23bb      	movs	r3, #187	; 0xbb
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 f84a 	bl	8000eb0 <BMP180_ReadReg>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	4323      	orrs	r3, r4
 8000e22:	b21a      	sxth	r2, r3
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <BMP180_UpdateCalibrationData+0x184>)
 8000e26:	821a      	strh	r2, [r3, #16]
	_bmp180_eeprom.BMP180_MC = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MC]);
 8000e28:	23bc      	movs	r3, #188	; 0xbc
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 f840 	bl	8000eb0 <BMP180_ReadReg>
 8000e30:	4603      	mov	r3, r0
 8000e32:	021b      	lsls	r3, r3, #8
 8000e34:	b21c      	sxth	r4, r3
 8000e36:	23bd      	movs	r3, #189	; 0xbd
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 f839 	bl	8000eb0 <BMP180_ReadReg>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	4323      	orrs	r3, r4
 8000e44:	b21a      	sxth	r2, r3
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <BMP180_UpdateCalibrationData+0x184>)
 8000e48:	825a      	strh	r2, [r3, #18]
	_bmp180_eeprom.BMP180_MD = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MD]);
 8000e4a:	23be      	movs	r3, #190	; 0xbe
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 f82f 	bl	8000eb0 <BMP180_ReadReg>
 8000e52:	4603      	mov	r3, r0
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	b21c      	sxth	r4, r3
 8000e58:	23bf      	movs	r3, #191	; 0xbf
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f828 	bl	8000eb0 <BMP180_ReadReg>
 8000e60:	4603      	mov	r3, r0
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	4323      	orrs	r3, r4
 8000e66:	b21a      	sxth	r2, r3
 8000e68:	4b01      	ldr	r3, [pc, #4]	; (8000e70 <BMP180_UpdateCalibrationData+0x184>)
 8000e6a:	829a      	strh	r2, [r3, #20]
}
 8000e6c:	bf00      	nop
 8000e6e:	bd98      	pop	{r3, r4, r7, pc}
 8000e70:	200001fc 	.word	0x200001fc

08000e74 <BMP180_WriteReg>:
/**
 * @brief Writes to a specific register.
 * @param reg Address of register to write to.
 * @param cmd Byte to write.
 */
void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af02      	add	r7, sp, #8
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	460a      	mov	r2, r1
 8000e7e:	71fb      	strb	r3, [r7, #7]
 8000e80:	4613      	mov	r3, r2
 8000e82:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	733b      	strb	r3, [r7, #12]
 8000e88:	79bb      	ldrb	r3, [r7, #6]
 8000e8a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <BMP180_WriteReg+0x38>)
 8000e8e:	6818      	ldr	r0, [r3, #0]
 8000e90:	f107 020c 	add.w	r2, r7, #12
 8000e94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	21ee      	movs	r1, #238	; 0xee
 8000e9e:	f002 f833 	bl	8002f08 <HAL_I2C_Master_Transmit>
}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200001f8 	.word	0x200001f8

08000eb0 <BMP180_ReadReg>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
uint8_t BMP180_ReadReg(uint8_t reg) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af02      	add	r7, sp, #8
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 8000eba:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <BMP180_ReadReg+0x40>)
 8000ebc:	6818      	ldr	r0, [r3, #0]
 8000ebe:	1dfa      	adds	r2, r7, #7
 8000ec0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	21ee      	movs	r1, #238	; 0xee
 8000eca:	f002 f81d 	bl	8002f08 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 8000ece:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <BMP180_ReadReg+0x40>)
 8000ed0:	6818      	ldr	r0, [r3, #0]
 8000ed2:	f107 020f 	add.w	r2, r7, #15
 8000ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2301      	movs	r3, #1
 8000ede:	21ee      	movs	r1, #238	; 0xee
 8000ee0:	f002 f910 	bl	8003104 <HAL_I2C_Master_Receive>
	return result;
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200001f8 	.word	0x200001f8

08000ef4 <BMP180_GetRawTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in 0.1 (1/10) degrees Celsius.
 */
int32_t BMP180_GetRawTemperature(void) {
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 8000efa:	232e      	movs	r3, #46	; 0x2e
 8000efc:	4619      	mov	r1, r3
 8000efe:	20f4      	movs	r0, #244	; 0xf4
 8000f00:	f7ff ffb8 	bl	8000e74 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 8000f04:	2305      	movs	r3, #5
 8000f06:	4618      	mov	r0, r3
 8000f08:	f001 fbec 	bl	80026e4 <HAL_Delay>
	int32_t ut = (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 8000f0c:	20f6      	movs	r0, #246	; 0xf6
 8000f0e:	f7ff ffcf 	bl	8000eb0 <BMP180_ReadReg>
 8000f12:	4603      	mov	r3, r0
 8000f14:	021c      	lsls	r4, r3, #8
 8000f16:	20f7      	movs	r0, #247	; 0xf7
 8000f18:	f7ff ffca 	bl	8000eb0 <BMP180_ReadReg>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	4323      	orrs	r3, r4
 8000f20:	60fb      	str	r3, [r7, #12]
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <BMP180_GetRawTemperature+0x84>)
 8000f24:	895b      	ldrh	r3, [r3, #10]
 8000f26:	461a      	mov	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	1a9b      	subs	r3, r3, r2
 8000f2c:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <BMP180_GetRawTemperature+0x84>)
 8000f2e:	8912      	ldrh	r2, [r2, #8]
 8000f30:	fb02 f303 	mul.w	r3, r2, r3
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	da02      	bge.n	8000f3e <BMP180_GetRawTemperature+0x4a>
 8000f38:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8000f3c:	337f      	adds	r3, #127	; 0x7f
 8000f3e:	13db      	asrs	r3, r3, #15
 8000f40:	60bb      	str	r3, [r7, #8]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 8000f42:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <BMP180_GetRawTemperature+0x84>)
 8000f44:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000f48:	02da      	lsls	r2, r3, #11
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <BMP180_GetRawTemperature+0x84>)
 8000f4c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000f50:	4619      	mov	r1, r3
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	440b      	add	r3, r1
 8000f56:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f5a:	607b      	str	r3, [r7, #4]
	int32_t b5 = x1 + x2;
 8000f5c:	68ba      	ldr	r2, [r7, #8]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	603b      	str	r3, [r7, #0]
	return (b5 + 8) / (1 << 4);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	3308      	adds	r3, #8
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	da00      	bge.n	8000f6e <BMP180_GetRawTemperature+0x7a>
 8000f6c:	330f      	adds	r3, #15
 8000f6e:	111b      	asrs	r3, r3, #4
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd90      	pop	{r4, r7, pc}
 8000f78:	200001fc 	.word	0x200001fc

08000f7c <BMP180_GetPressure>:

/**
 * @brief Measures and calculates pressure.
 * @return Pressure in Pascal(Pa).
 */
int32_t BMP180_GetPressure(void) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08c      	sub	sp, #48	; 0x30
 8000f80:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 8000f82:	232e      	movs	r3, #46	; 0x2e
 8000f84:	4619      	mov	r1, r3
 8000f86:	20f4      	movs	r0, #244	; 0xf4
 8000f88:	f7ff ff74 	bl	8000e74 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 8000f8c:	2305      	movs	r3, #5
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f001 fba8 	bl	80026e4 <HAL_Delay>
	int32_t ut = BMP180_GetUT();
 8000f94:	f000 f902 	bl	800119c <BMP180_GetUT>
 8000f98:	62b8      	str	r0, [r7, #40]	; 0x28
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_PRES[_bmp180_oss]);
 8000f9a:	4b7b      	ldr	r3, [pc, #492]	; (8001188 <BMP180_GetPressure+0x20c>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4b7a      	ldr	r3, [pc, #488]	; (800118c <BMP180_GetPressure+0x210>)
 8000fa2:	5c9b      	ldrb	r3, [r3, r2]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	20f4      	movs	r0, #244	; 0xf4
 8000fa8:	f7ff ff64 	bl	8000e74 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_PRES[_bmp180_oss]);
 8000fac:	4b76      	ldr	r3, [pc, #472]	; (8001188 <BMP180_GetPressure+0x20c>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b77      	ldr	r3, [pc, #476]	; (8001190 <BMP180_GetPressure+0x214>)
 8000fb4:	5c9b      	ldrb	r3, [r3, r2]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 fb94 	bl	80026e4 <HAL_Delay>
	int32_t up = BMP180_GetUP();
 8000fbc:	f000 f8fc 	bl	80011b8 <BMP180_GetUP>
 8000fc0:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 8000fc2:	4b74      	ldr	r3, [pc, #464]	; (8001194 <BMP180_GetPressure+0x218>)
 8000fc4:	895b      	ldrh	r3, [r3, #10]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fca:	1a9b      	subs	r3, r3, r2
 8000fcc:	4a71      	ldr	r2, [pc, #452]	; (8001194 <BMP180_GetPressure+0x218>)
 8000fce:	8912      	ldrh	r2, [r2, #8]
 8000fd0:	fb02 f303 	mul.w	r3, r2, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	da02      	bge.n	8000fde <BMP180_GetPressure+0x62>
 8000fd8:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8000fdc:	337f      	adds	r3, #127	; 0x7f
 8000fde:	13db      	asrs	r3, r3, #15
 8000fe0:	623b      	str	r3, [r7, #32]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 8000fe2:	4b6c      	ldr	r3, [pc, #432]	; (8001194 <BMP180_GetPressure+0x218>)
 8000fe4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000fe8:	02da      	lsls	r2, r3, #11
 8000fea:	4b6a      	ldr	r3, [pc, #424]	; (8001194 <BMP180_GetPressure+0x218>)
 8000fec:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	6a3b      	ldr	r3, [r7, #32]
 8000ff4:	440b      	add	r3, r1
 8000ff6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ffa:	61fb      	str	r3, [r7, #28]
	int32_t b5 = x1 + x2;
 8000ffc:	6a3a      	ldr	r2, [r7, #32]
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	4413      	add	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
	int32_t b6 = b5 - 4000;
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800100a:	617b      	str	r3, [r7, #20]
	x1 = (_bmp180_eeprom.BMP180_B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 800100c:	4b61      	ldr	r3, [pc, #388]	; (8001194 <BMP180_GetPressure+0x218>)
 800100e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001012:	461a      	mov	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fb03 f303 	mul.w	r3, r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	da01      	bge.n	8001022 <BMP180_GetPressure+0xa6>
 800101e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001022:	131b      	asrs	r3, r3, #12
 8001024:	fb02 f303 	mul.w	r3, r2, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	da01      	bge.n	8001030 <BMP180_GetPressure+0xb4>
 800102c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001030:	12db      	asrs	r3, r3, #11
 8001032:	623b      	str	r3, [r7, #32]
	x2 = _bmp180_eeprom.BMP180_AC2 * b6 / (1 << 11);
 8001034:	4b57      	ldr	r3, [pc, #348]	; (8001194 <BMP180_GetPressure+0x218>)
 8001036:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800103a:	461a      	mov	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fb02 f303 	mul.w	r3, r2, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	da01      	bge.n	800104a <BMP180_GetPressure+0xce>
 8001046:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800104a:	12db      	asrs	r3, r3, #11
 800104c:	61fb      	str	r3, [r7, #28]
	int32_t x3 = x1 + x2;
 800104e:	6a3a      	ldr	r2, [r7, #32]
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	4413      	add	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
	int32_t b3 = (((_bmp180_eeprom.BMP180_AC1 * 4 + x3) << _bmp180_oss) + 2) / 4;
 8001056:	4b4f      	ldr	r3, [pc, #316]	; (8001194 <BMP180_GetPressure+0x218>)
 8001058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800105c:	009a      	lsls	r2, r3, #2
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4413      	add	r3, r2
 8001062:	4a49      	ldr	r2, [pc, #292]	; (8001188 <BMP180_GetPressure+0x20c>)
 8001064:	7812      	ldrb	r2, [r2, #0]
 8001066:	4093      	lsls	r3, r2
 8001068:	3302      	adds	r3, #2
 800106a:	2b00      	cmp	r3, #0
 800106c:	da00      	bge.n	8001070 <BMP180_GetPressure+0xf4>
 800106e:	3303      	adds	r3, #3
 8001070:	109b      	asrs	r3, r3, #2
 8001072:	60fb      	str	r3, [r7, #12]
	x1 = _bmp180_eeprom.BMP180_AC3 * b6 / (1 << 13);
 8001074:	4b47      	ldr	r3, [pc, #284]	; (8001194 <BMP180_GetPressure+0x218>)
 8001076:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800107a:	461a      	mov	r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fb02 f303 	mul.w	r3, r2, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	da02      	bge.n	800108c <BMP180_GetPressure+0x110>
 8001086:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800108a:	331f      	adds	r3, #31
 800108c:	135b      	asrs	r3, r3, #13
 800108e:	623b      	str	r3, [r7, #32]
	x2 = (_bmp180_eeprom.BMP180_B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 8001090:	4b40      	ldr	r3, [pc, #256]	; (8001194 <BMP180_GetPressure+0x218>)
 8001092:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001096:	461a      	mov	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fb03 f303 	mul.w	r3, r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	da01      	bge.n	80010a6 <BMP180_GetPressure+0x12a>
 80010a2:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80010a6:	131b      	asrs	r3, r3, #12
 80010a8:	fb02 f303 	mul.w	r3, r2, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	da02      	bge.n	80010b6 <BMP180_GetPressure+0x13a>
 80010b0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80010b4:	33ff      	adds	r3, #255	; 0xff
 80010b6:	141b      	asrs	r3, r3, #16
 80010b8:	61fb      	str	r3, [r7, #28]
	x3 = ((x1 + x2) + 2) / 4;
 80010ba:	6a3a      	ldr	r2, [r7, #32]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	4413      	add	r3, r2
 80010c0:	3302      	adds	r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	da00      	bge.n	80010c8 <BMP180_GetPressure+0x14c>
 80010c6:	3303      	adds	r3, #3
 80010c8:	109b      	asrs	r3, r3, #2
 80010ca:	613b      	str	r3, [r7, #16]
	uint32_t b4 = _bmp180_eeprom.BMP180_AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 80010cc:	4b31      	ldr	r3, [pc, #196]	; (8001194 <BMP180_GetPressure+0x218>)
 80010ce:	88db      	ldrh	r3, [r3, #6]
 80010d0:	461a      	mov	r2, r3
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80010d8:	fb02 f303 	mul.w	r3, r2, r3
 80010dc:	0bdb      	lsrs	r3, r3, #15
 80010de:	60bb      	str	r3, [r7, #8]
	uint32_t b7 = ((uint32_t) up - b3) * (50000 >> _bmp180_oss);
 80010e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	4a28      	ldr	r2, [pc, #160]	; (8001188 <BMP180_GetPressure+0x20c>)
 80010e8:	7812      	ldrb	r2, [r2, #0]
 80010ea:	4611      	mov	r1, r2
 80010ec:	f24c 3250 	movw	r2, #50000	; 0xc350
 80010f0:	410a      	asrs	r2, r1
 80010f2:	fb02 f303 	mul.w	r3, r2, r3
 80010f6:	607b      	str	r3, [r7, #4]
	int32_t p;
	if (b7 < 0x80000000)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	db06      	blt.n	800110c <BMP180_GetPressure+0x190>
		p = (b7 * 2) / b4;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	005a      	lsls	r2, r3, #1
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	fbb2 f3f3 	udiv	r3, r2, r3
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
 800110a:	e005      	b.n	8001118 <BMP180_GetPressure+0x19c>
	else
		p = (b7 / b4) * 2;
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	fbb2 f3f3 	udiv	r3, r2, r3
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
	x1 = (p / (1 << 8)) * (p / (1 << 8));
 8001118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111a:	2b00      	cmp	r3, #0
 800111c:	da00      	bge.n	8001120 <BMP180_GetPressure+0x1a4>
 800111e:	33ff      	adds	r3, #255	; 0xff
 8001120:	121b      	asrs	r3, r3, #8
 8001122:	461a      	mov	r2, r3
 8001124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001126:	2b00      	cmp	r3, #0
 8001128:	da00      	bge.n	800112c <BMP180_GetPressure+0x1b0>
 800112a:	33ff      	adds	r3, #255	; 0xff
 800112c:	121b      	asrs	r3, r3, #8
 800112e:	fb02 f303 	mul.w	r3, r2, r3
 8001132:	623b      	str	r3, [r7, #32]
	x1 = (x1 * 3038) / (1 << 16);
 8001134:	6a3b      	ldr	r3, [r7, #32]
 8001136:	f640 32de 	movw	r2, #3038	; 0xbde
 800113a:	fb02 f303 	mul.w	r3, r2, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	da02      	bge.n	8001148 <BMP180_GetPressure+0x1cc>
 8001142:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001146:	33ff      	adds	r3, #255	; 0xff
 8001148:	141b      	asrs	r3, r3, #16
 800114a:	623b      	str	r3, [r7, #32]
	x2 = (-7357 * p) / (1 << 16);
 800114c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800114e:	4a12      	ldr	r2, [pc, #72]	; (8001198 <BMP180_GetPressure+0x21c>)
 8001150:	fb02 f303 	mul.w	r3, r2, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	da02      	bge.n	800115e <BMP180_GetPressure+0x1e2>
 8001158:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800115c:	33ff      	adds	r3, #255	; 0xff
 800115e:	141b      	asrs	r3, r3, #16
 8001160:	61fb      	str	r3, [r7, #28]
	p = p + (x1 + x2 + 3791) / (1 << 4);
 8001162:	6a3a      	ldr	r2, [r7, #32]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	4413      	add	r3, r2
 8001168:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800116c:	2b00      	cmp	r3, #0
 800116e:	da00      	bge.n	8001172 <BMP180_GetPressure+0x1f6>
 8001170:	330f      	adds	r3, #15
 8001172:	111b      	asrs	r3, r3, #4
 8001174:	461a      	mov	r2, r3
 8001176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001178:	4413      	add	r3, r2
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
	return p;
 800117c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800117e:	4618      	mov	r0, r3
 8001180:	3730      	adds	r7, #48	; 0x30
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000212 	.word	0x20000212
 800118c:	0800a8e4 	.word	0x0800a8e4
 8001190:	0800a8e8 	.word	0x0800a8e8
 8001194:	200001fc 	.word	0x200001fc
 8001198:	ffffe343 	.word	0xffffe343

0800119c <BMP180_GetUT>:

int32_t BMP180_GetUT(void){
 800119c:	b598      	push	{r3, r4, r7, lr}
 800119e:	af00      	add	r7, sp, #0
	return (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 80011a0:	20f6      	movs	r0, #246	; 0xf6
 80011a2:	f7ff fe85 	bl	8000eb0 <BMP180_ReadReg>
 80011a6:	4603      	mov	r3, r0
 80011a8:	021c      	lsls	r4, r3, #8
 80011aa:	20f7      	movs	r0, #247	; 0xf7
 80011ac:	f7ff fe80 	bl	8000eb0 <BMP180_ReadReg>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4323      	orrs	r3, r4
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	bd98      	pop	{r3, r4, r7, pc}

080011b8 <BMP180_GetUP>:

int32_t BMP180_GetUP(void){
 80011b8:	b598      	push	{r3, r4, r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	return ((BMP180_ReadReg(BMP180_MSB_REG) << 16) | (BMP180_ReadReg(BMP180_LSB_REG) << 8) | BMP180_ReadReg(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 80011bc:	20f6      	movs	r0, #246	; 0xf6
 80011be:	f7ff fe77 	bl	8000eb0 <BMP180_ReadReg>
 80011c2:	4603      	mov	r3, r0
 80011c4:	041c      	lsls	r4, r3, #16
 80011c6:	20f7      	movs	r0, #247	; 0xf7
 80011c8:	f7ff fe72 	bl	8000eb0 <BMP180_ReadReg>
 80011cc:	4603      	mov	r3, r0
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	431c      	orrs	r4, r3
 80011d2:	20f8      	movs	r0, #248	; 0xf8
 80011d4:	f7ff fe6c 	bl	8000eb0 <BMP180_ReadReg>
 80011d8:	4603      	mov	r3, r0
 80011da:	ea44 0203 	orr.w	r2, r4, r3
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <BMP180_GetUP+0x38>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	f1c3 0308 	rsb	r3, r3, #8
 80011e6:	fa42 f303 	asr.w	r3, r2, r3
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	bd98      	pop	{r3, r4, r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000212 	.word	0x20000212

080011f4 <NRF24_Init>:
static void NRF24_Read_Buffer(nrf24 *node, uint8_t reg, uint8_t *data, uint16_t len);
static void NRF24_Send_Cmd(nrf24 *node, uint8_t cmd);
static void NRF24_Reset(nrf24 *node, uint8_t reg);

void NRF24_Init(nrf24 *node)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	NRF24_CE_Disable(node);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 fa55 	bl	80016ac <NRF24_CE_Disable>
	NRF24_Write_Reg(node, CONFIG, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 fa80 	bl	800170c <NRF24_Write_Reg>
	node->crc = NO_CRC;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	77da      	strb	r2, [r3, #31]
	NRF24_Write_Reg(node, EN_AA, 0x00);
 8001212:	2200      	movs	r2, #0
 8001214:	2101      	movs	r1, #1
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 fa78 	bl	800170c <NRF24_Write_Reg>
	NRF24_Write_Reg(node, EN_RXADDR, 0x00);
 800121c:	2200      	movs	r2, #0
 800121e:	2102      	movs	r1, #2
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 fa73 	bl	800170c <NRF24_Write_Reg>
	NRF24_Write_Reg(node, SETUP_AW, 0x03);
 8001226:	2203      	movs	r2, #3
 8001228:	2103      	movs	r1, #3
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 fa6e 	bl	800170c <NRF24_Write_Reg>
	NRF24_Write_Reg(node, SETUP_RETR, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	2104      	movs	r1, #4
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 fa69 	bl	800170c <NRF24_Write_Reg>
	NRF24_Set_DataRate(node, _250KBS);
 800123a:	2100      	movs	r1, #0
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 f813 	bl	8001268 <NRF24_Set_DataRate>
	NRF24_Set_PALevel(node, HIGH);
 8001242:	2103      	movs	r1, #3
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 f85b 	bl	8001300 <NRF24_Set_PALevel>
	NRF24_Set_Channel(node, DEFAULT_CHANNEL);
 800124a:	2164      	movs	r1, #100	; 0x64
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 f8af 	bl	80013b0 <NRF24_Set_Channel>
	NRF24_Set_Mode(node, STANDBY);
 8001252:	2101      	movs	r1, #1
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 f8c1 	bl	80013dc <NRF24_Set_Mode>
	NRF24_CE_Enable(node);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 fa16 	bl	800168c <NRF24_CE_Enable>
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <NRF24_Set_DataRate>:

void NRF24_Set_DataRate(nrf24 *node, dat_rate _bitRate)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	70fb      	strb	r3, [r7, #3]
	NRF24_CE_Disable(node);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 fa19 	bl	80016ac <NRF24_CE_Disable>
	uint8_t config = NRF24_Read_Reg(node, RF_SETUP);
 800127a:	2106      	movs	r1, #6
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f000 faac 	bl	80017da <NRF24_Read_Reg>
 8001282:	4603      	mov	r3, r0
 8001284:	73fb      	strb	r3, [r7, #15]

	switch (_bitRate)
 8001286:	78fb      	ldrb	r3, [r7, #3]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d01e      	beq.n	80012ca <NRF24_Set_DataRate+0x62>
 800128c:	2b02      	cmp	r3, #2
 800128e:	dc28      	bgt.n	80012e2 <NRF24_Set_DataRate+0x7a>
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <NRF24_Set_DataRate+0x32>
 8001294:	2b01      	cmp	r3, #1
 8001296:	d00c      	beq.n	80012b2 <NRF24_Set_DataRate+0x4a>
			config |= (1 << 3);
			node->bitRate = _2MBS;
			break;

		default:
			break;
 8001298:	e023      	b.n	80012e2 <NRF24_Set_DataRate+0x7a>
			config |= (1 << 5);
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	f043 0320 	orr.w	r3, r3, #32
 80012a0:	73fb      	strb	r3, [r7, #15]
			config &=~(1 << 3);
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	f023 0308 	bic.w	r3, r3, #8
 80012a8:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _250KBS;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	775a      	strb	r2, [r3, #29]
			break;
 80012b0:	e018      	b.n	80012e4 <NRF24_Set_DataRate+0x7c>
			config &=~(1 << 5);
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	f023 0320 	bic.w	r3, r3, #32
 80012b8:	73fb      	strb	r3, [r7, #15]
			config &=~(1 << 3);
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	f023 0308 	bic.w	r3, r3, #8
 80012c0:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _1MBS;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2201      	movs	r2, #1
 80012c6:	775a      	strb	r2, [r3, #29]
			break;
 80012c8:	e00c      	b.n	80012e4 <NRF24_Set_DataRate+0x7c>
			config &=~(1 << 5);
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	f023 0320 	bic.w	r3, r3, #32
 80012d0:	73fb      	strb	r3, [r7, #15]
			config |= (1 << 3);
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	f043 0308 	orr.w	r3, r3, #8
 80012d8:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _2MBS;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2202      	movs	r2, #2
 80012de:	775a      	strb	r2, [r3, #29]
			break;
 80012e0:	e000      	b.n	80012e4 <NRF24_Set_DataRate+0x7c>
			break;
 80012e2:	bf00      	nop
	}
	NRF24_Write_Reg(node, RF_SETUP, config);
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	461a      	mov	r2, r3
 80012e8:	2106      	movs	r1, #6
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 fa0e 	bl	800170c <NRF24_Write_Reg>
	NRF24_CE_Enable(node);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f000 f9cb 	bl	800168c <NRF24_CE_Enable>
}
 80012f6:	bf00      	nop
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <NRF24_Set_PALevel>:

void NRF24_Set_PALevel(nrf24 *node, p_level pwr)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	70fb      	strb	r3, [r7, #3]
	NRF24_CE_Disable(node);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 f9cd 	bl	80016ac <NRF24_CE_Disable>
	uint8_t config = NRF24_Read_Reg(node, RF_SETUP);
 8001312:	2106      	movs	r1, #6
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 fa60 	bl	80017da <NRF24_Read_Reg>
 800131a:	4603      	mov	r3, r0
 800131c:	73fb      	strb	r3, [r7, #15]

	switch (pwr) {
 800131e:	78fb      	ldrb	r3, [r7, #3]
 8001320:	2b03      	cmp	r3, #3
 8001322:	d837      	bhi.n	8001394 <NRF24_Set_PALevel+0x94>
 8001324:	a201      	add	r2, pc, #4	; (adr r2, 800132c <NRF24_Set_PALevel+0x2c>)
 8001326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132a:	bf00      	nop
 800132c:	0800133d 	.word	0x0800133d
 8001330:	08001355 	.word	0x08001355
 8001334:	0800136d 	.word	0x0800136d
 8001338:	08001385 	.word	0x08001385
		case VERY_LOW:
			config &=~(1 << 2);
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	f023 0304 	bic.w	r3, r3, #4
 8001342:	73fb      	strb	r3, [r7, #15]
			config &=~(1 << 1);
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	f023 0302 	bic.w	r3, r3, #2
 800134a:	73fb      	strb	r3, [r7, #15]
			node->pa = VERY_LOW;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	771a      	strb	r2, [r3, #28]
			break;
 8001352:	e020      	b.n	8001396 <NRF24_Set_PALevel+0x96>

		case LOW:
			config &=~(1 << 2);
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	f023 0304 	bic.w	r3, r3, #4
 800135a:	73fb      	strb	r3, [r7, #15]
			config |= (1 << 1);
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	f043 0302 	orr.w	r3, r3, #2
 8001362:	73fb      	strb	r3, [r7, #15]
			node->pa = LOW;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	771a      	strb	r2, [r3, #28]
			break;
 800136a:	e014      	b.n	8001396 <NRF24_Set_PALevel+0x96>

		case MID:
			config |= (1 << 2);
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	f043 0304 	orr.w	r3, r3, #4
 8001372:	73fb      	strb	r3, [r7, #15]
			config &=~(1 << 1);
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	f023 0302 	bic.w	r3, r3, #2
 800137a:	73fb      	strb	r3, [r7, #15]
			node->pa = MID;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2202      	movs	r2, #2
 8001380:	771a      	strb	r2, [r3, #28]
			break;
 8001382:	e008      	b.n	8001396 <NRF24_Set_PALevel+0x96>

		case HIGH:
			config |= (1 << 2) | (1 << 1);
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	f043 0306 	orr.w	r3, r3, #6
 800138a:	73fb      	strb	r3, [r7, #15]
			node->pa = HIGH;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2203      	movs	r2, #3
 8001390:	771a      	strb	r2, [r3, #28]
			break;
 8001392:	e000      	b.n	8001396 <NRF24_Set_PALevel+0x96>

		default:
			break;
 8001394:	bf00      	nop
	}
	NRF24_Write_Reg(node, RF_SETUP, config);
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	461a      	mov	r2, r3
 800139a:	2106      	movs	r1, #6
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 f9b5 	bl	800170c <NRF24_Write_Reg>
	NRF24_CE_Enable(node);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 f972 	bl	800168c <NRF24_CE_Enable>
}
 80013a8:	bf00      	nop
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <NRF24_Set_Channel>:

void NRF24_Set_Channel(nrf24 *node, uint8_t channel)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
	NRF24_CE_Disable(node);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 f975 	bl	80016ac <NRF24_CE_Disable>
	NRF24_Write_Reg(node, RF_CH, channel);
 80013c2:	78fb      	ldrb	r3, [r7, #3]
 80013c4:	461a      	mov	r2, r3
 80013c6:	2105      	movs	r1, #5
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 f99f 	bl	800170c <NRF24_Write_Reg>
	NRF24_CE_Enable(node);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f95c 	bl	800168c <NRF24_CE_Enable>
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <NRF24_Set_Mode>:

void NRF24_Set_Mode(nrf24 *node, mode_nrf _mode)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	70fb      	strb	r3, [r7, #3]
	uint8_t config = NRF24_Read_Reg(node, CONFIG);
 80013e8:	2100      	movs	r1, #0
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 f9f5 	bl	80017da <NRF24_Read_Reg>
 80013f0:	4603      	mov	r3, r0
 80013f2:	73fb      	strb	r3, [r7, #15]

	switch (_mode)
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	d837      	bhi.n	800146a <NRF24_Set_Mode+0x8e>
 80013fa:	a201      	add	r2, pc, #4	; (adr r2, 8001400 <NRF24_Set_Mode+0x24>)
 80013fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001400:	08001411 	.word	0x08001411
 8001404:	08001421 	.word	0x08001421
 8001408:	08001437 	.word	0x08001437
 800140c:	08001455 	.word	0x08001455
	{
		case PWR_DOWN:
			config &=~(1 << 1);
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	f023 0302 	bic.w	r3, r3, #2
 8001416:	73fb      	strb	r3, [r7, #15]
			node->mode = PWR_DOWN;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	779a      	strb	r2, [r3, #30]
			break;
 800141e:	e025      	b.n	800146c <NRF24_Set_Mode+0x90>

		case STANDBY:
			NRF24_CE_Disable(node);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 f943 	bl	80016ac <NRF24_CE_Disable>
			config |= (1 << 1);
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	73fb      	strb	r3, [r7, #15]
			node->mode = STANDBY;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2201      	movs	r2, #1
 8001432:	779a      	strb	r2, [r3, #30]
			break;
 8001434:	e01a      	b.n	800146c <NRF24_Set_Mode+0x90>

		case TX_MODE:
			NRF24_CE_Enable(node);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 f928 	bl	800168c <NRF24_CE_Enable>
			config |= (1 << 1);
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	f043 0302 	orr.w	r3, r3, #2
 8001442:	73fb      	strb	r3, [r7, #15]
			config &=~(1 << 0);
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	f023 0301 	bic.w	r3, r3, #1
 800144a:	73fb      	strb	r3, [r7, #15]
			node->mode = TX_MODE;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2202      	movs	r2, #2
 8001450:	779a      	strb	r2, [r3, #30]
			break;
 8001452:	e00b      	b.n	800146c <NRF24_Set_Mode+0x90>

		case RX_MODE:
			NRF24_CE_Enable(node);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 f919 	bl	800168c <NRF24_CE_Enable>
			config |= (1 << 1) | (1 << 0);
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	f043 0303 	orr.w	r3, r3, #3
 8001460:	73fb      	strb	r3, [r7, #15]
			node->mode = RX_MODE;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2203      	movs	r2, #3
 8001466:	779a      	strb	r2, [r3, #30]
			break;
 8001468:	e000      	b.n	800146c <NRF24_Set_Mode+0x90>

		default:
			break;
 800146a:	bf00      	nop
	}
	NRF24_Write_Reg(node, CONFIG, config);
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	461a      	mov	r2, r3
 8001470:	2100      	movs	r1, #0
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 f94a 	bl	800170c <NRF24_Write_Reg>
}
 8001478:	bf00      	nop
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <NRF24_Set_RxPipe>:
	}
	return (0);
}

void NRF24_Set_RxPipe(nrf24 *node, uint8_t *addr, uint8_t pipe, uint8_t payload)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	4611      	mov	r1, r2
 800148c:	461a      	mov	r2, r3
 800148e:	460b      	mov	r3, r1
 8001490:	71fb      	strb	r3, [r7, #7]
 8001492:	4613      	mov	r3, r2
 8001494:	71bb      	strb	r3, [r7, #6]
	NRF24_CE_Disable(node);
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f000 f908 	bl	80016ac <NRF24_CE_Disable>
	NRF24_Reset(node, STATUS);
 800149c:	2107      	movs	r1, #7
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f000 f9ea 	bl	8001878 <NRF24_Reset>
	uint8_t en_rxaddr = NRF24_Read_Reg(node, EN_RXADDR);
 80014a4:	2102      	movs	r1, #2
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f000 f997 	bl	80017da <NRF24_Read_Reg>
 80014ac:	4603      	mov	r3, r0
 80014ae:	75fb      	strb	r3, [r7, #23]
	en_rxaddr |= (1 << pipe);
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	2201      	movs	r2, #1
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	b25a      	sxtb	r2, r3
 80014ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014be:	4313      	orrs	r3, r2
 80014c0:	b25b      	sxtb	r3, r3
 80014c2:	75fb      	strb	r3, [r7, #23]
	NRF24_Write_Reg(node, EN_RXADDR, en_rxaddr);
 80014c4:	7dfb      	ldrb	r3, [r7, #23]
 80014c6:	461a      	mov	r2, r3
 80014c8:	2102      	movs	r1, #2
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f000 f91e 	bl	800170c <NRF24_Write_Reg>

	switch(pipe)
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	2b05      	cmp	r3, #5
 80014d4:	d860      	bhi.n	8001598 <NRF24_Set_RxPipe+0x118>
 80014d6:	a201      	add	r2, pc, #4	; (adr r2, 80014dc <NRF24_Set_RxPipe+0x5c>)
 80014d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014dc:	080014f5 	.word	0x080014f5
 80014e0:	0800150f 	.word	0x0800150f
 80014e4:	08001529 	.word	0x08001529
 80014e8:	08001545 	.word	0x08001545
 80014ec:	08001561 	.word	0x08001561
 80014f0:	0800157d 	.word	0x0800157d
	{
		case 0:
			NRF24_Write_Buffer(node, RX_ADDR_P0, addr, 5);
 80014f4:	2305      	movs	r3, #5
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	210a      	movs	r1, #10
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f000 f931 	bl	8001762 <NRF24_Write_Buffer>
			NRF24_Write_Reg(node, RX_PW_P0, payload);
 8001500:	79bb      	ldrb	r3, [r7, #6]
 8001502:	461a      	mov	r2, r3
 8001504:	2111      	movs	r1, #17
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 f900 	bl	800170c <NRF24_Write_Reg>
			break;
 800150c:	e045      	b.n	800159a <NRF24_Set_RxPipe+0x11a>

		case 1:
			NRF24_Write_Buffer(node, RX_ADDR_P1, addr, 5);
 800150e:	2305      	movs	r3, #5
 8001510:	68ba      	ldr	r2, [r7, #8]
 8001512:	210b      	movs	r1, #11
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f000 f924 	bl	8001762 <NRF24_Write_Buffer>
			NRF24_Write_Reg(node, RX_PW_P1, payload);
 800151a:	79bb      	ldrb	r3, [r7, #6]
 800151c:	461a      	mov	r2, r3
 800151e:	2112      	movs	r1, #18
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f000 f8f3 	bl	800170c <NRF24_Write_Reg>
			break;
 8001526:	e038      	b.n	800159a <NRF24_Set_RxPipe+0x11a>

		case 2:
			NRF24_Write_Reg(node, RX_ADDR_P2, addr[0]);
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	210c      	movs	r1, #12
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f000 f8eb 	bl	800170c <NRF24_Write_Reg>
			NRF24_Write_Reg(node, RX_PW_P2, payload);
 8001536:	79bb      	ldrb	r3, [r7, #6]
 8001538:	461a      	mov	r2, r3
 800153a:	2113      	movs	r1, #19
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f000 f8e5 	bl	800170c <NRF24_Write_Reg>
			break;
 8001542:	e02a      	b.n	800159a <NRF24_Set_RxPipe+0x11a>

		case 3:
			NRF24_Write_Reg(node, RX_ADDR_P3, addr[0]);
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	210d      	movs	r1, #13
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f000 f8dd 	bl	800170c <NRF24_Write_Reg>
			NRF24_Write_Reg(node, RX_PW_P3, payload);
 8001552:	79bb      	ldrb	r3, [r7, #6]
 8001554:	461a      	mov	r2, r3
 8001556:	2114      	movs	r1, #20
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f000 f8d7 	bl	800170c <NRF24_Write_Reg>
			break;
 800155e:	e01c      	b.n	800159a <NRF24_Set_RxPipe+0x11a>

		case 4:
			NRF24_Write_Reg(node, RX_ADDR_P4, addr[0]);
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	210e      	movs	r1, #14
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f000 f8cf 	bl	800170c <NRF24_Write_Reg>
			NRF24_Write_Reg(node, RX_PW_P4, payload);
 800156e:	79bb      	ldrb	r3, [r7, #6]
 8001570:	461a      	mov	r2, r3
 8001572:	2115      	movs	r1, #21
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f000 f8c9 	bl	800170c <NRF24_Write_Reg>
			break;
 800157a:	e00e      	b.n	800159a <NRF24_Set_RxPipe+0x11a>

		case 5:
			NRF24_Write_Reg(node, RX_ADDR_P5, addr[0]);
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	210f      	movs	r1, #15
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f000 f8c1 	bl	800170c <NRF24_Write_Reg>
			NRF24_Write_Reg(node, RX_PW_P5, payload);
 800158a:	79bb      	ldrb	r3, [r7, #6]
 800158c:	461a      	mov	r2, r3
 800158e:	2116      	movs	r1, #22
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f000 f8bb 	bl	800170c <NRF24_Write_Reg>
			break;
 8001596:	e000      	b.n	800159a <NRF24_Set_RxPipe+0x11a>

		default:
			break;
 8001598:	bf00      	nop
	}
	NRF24_CE_Enable(node);
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f000 f876 	bl	800168c <NRF24_CE_Enable>
}
 80015a0:	bf00      	nop
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <NRF24_Available>:

uint8_t NRF24_Available(nrf24 *node, uint8_t pipenum)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	70fb      	strb	r3, [r7, #3]
	uint8_t status = NRF24_Read_Reg(node, STATUS);
 80015b4:	2107      	movs	r1, #7
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f90f 	bl	80017da <NRF24_Read_Reg>
 80015bc:	4603      	mov	r3, r0
 80015be:	73fb      	strb	r3, [r7, #15]
	if((status - 64 == 0) && pipenum == 0)
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	2b40      	cmp	r3, #64	; 0x40
 80015c4:	d109      	bne.n	80015da <NRF24_Available+0x32>
 80015c6:	78fb      	ldrb	r3, [r7, #3]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d106      	bne.n	80015da <NRF24_Available+0x32>
	{
		NRF24_Write_Reg(node, STATUS, (1 << 6));
 80015cc:	2240      	movs	r2, #64	; 0x40
 80015ce:	2107      	movs	r1, #7
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f000 f89b 	bl	800170c <NRF24_Write_Reg>
		return 1;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e012      	b.n	8001600 <NRF24_Available+0x58>
	}
	else if((status & (1 << 6)) && (status & (pipenum << 1)))
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00c      	beq.n	80015fe <NRF24_Available+0x56>
 80015e4:	7bfa      	ldrb	r2, [r7, #15]
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d006      	beq.n	80015fe <NRF24_Available+0x56>
	{
		NRF24_Write_Reg(node, STATUS, (1 << 6));
 80015f0:	2240      	movs	r2, #64	; 0x40
 80015f2:	2107      	movs	r1, #7
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 f889 	bl	800170c <NRF24_Write_Reg>
		return 1;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <NRF24_Available+0x58>
	}
	return 0;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <NRF24_Receive>:

void NRF24_Receive(nrf24 *node, uint8_t *data, uint8_t len)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	4613      	mov	r3, r2
 8001614:	71fb      	strb	r3, [r7, #7]
	uint8_t cmdtosend = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	75fb      	strb	r3, [r7, #23]

	NRF24_CSN_Enable(node);
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 f856 	bl	80016cc <NRF24_CSN_Enable>
	cmdtosend = R_RX_PAYLOAD;
 8001620:	2361      	movs	r3, #97	; 0x61
 8001622:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(node->hSPIx, &cmdtosend, 1, 100);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6998      	ldr	r0, [r3, #24]
 8001628:	f107 0117 	add.w	r1, r7, #23
 800162c:	2364      	movs	r3, #100	; 0x64
 800162e:	2201      	movs	r2, #1
 8001630:	f002 ffee 	bl	8004610 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8001634:	bf00      	nop
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	4618      	mov	r0, r3
 800163c:	f003 fbf3 	bl	8004e26 <HAL_SPI_GetState>
 8001640:	4603      	mov	r3, r0
 8001642:	2b01      	cmp	r3, #1
 8001644:	d1f7      	bne.n	8001636 <NRF24_Receive+0x2e>
	HAL_SPI_Receive(node->hSPIx, data, len, NRF_RX_TIMEOUT);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6998      	ldr	r0, [r3, #24]
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	b29a      	uxth	r2, r3
 800164e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001652:	68b9      	ldr	r1, [r7, #8]
 8001654:	f003 f91f 	bl	8004896 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8001658:	bf00      	nop
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	4618      	mov	r0, r3
 8001660:	f003 fbe1 	bl	8004e26 <HAL_SPI_GetState>
 8001664:	4603      	mov	r3, r0
 8001666:	2b01      	cmp	r3, #1
 8001668:	d1f7      	bne.n	800165a <NRF24_Receive+0x52>
	NRF24_CSN_Disable(node);
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f000 f83e 	bl	80016ec <NRF24_CSN_Disable>
	HAL_Delay(1);
 8001670:	2001      	movs	r0, #1
 8001672:	f001 f837 	bl	80026e4 <HAL_Delay>
	cmdtosend = FLUSH_RX;
 8001676:	23e2      	movs	r3, #226	; 0xe2
 8001678:	75fb      	strb	r3, [r7, #23]
	NRF24_Send_Cmd(node, cmdtosend);
 800167a:	7dfb      	ldrb	r3, [r7, #23]
 800167c:	4619      	mov	r1, r3
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f000 f8d8 	bl	8001834 <NRF24_Send_Cmd>
}
 8001684:	bf00      	nop
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <NRF24_CE_Enable>:
	for (int i = 29; i < 38; i++)
		*(data + i) = NRF24_Read_Reg(node, i - 12);
}

static void NRF24_CE_Enable(nrf24 *node)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_SET);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6898      	ldr	r0, [r3, #8]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	899b      	ldrh	r3, [r3, #12]
 800169c:	2201      	movs	r2, #1
 800169e:	4619      	mov	r1, r3
 80016a0:	f001 fabc 	bl	8002c1c <HAL_GPIO_WritePin>
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <NRF24_CE_Disable>:

static void NRF24_CE_Disable(nrf24 *node)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_RESET);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6898      	ldr	r0, [r3, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	899b      	ldrh	r3, [r3, #12]
 80016bc:	2200      	movs	r2, #0
 80016be:	4619      	mov	r1, r3
 80016c0:	f001 faac 	bl	8002c1c <HAL_GPIO_WritePin>
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <NRF24_CSN_Enable>:

static void NRF24_CSN_Enable(nrf24 *node)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_RESET);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6818      	ldr	r0, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	889b      	ldrh	r3, [r3, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	4619      	mov	r1, r3
 80016e0:	f001 fa9c 	bl	8002c1c <HAL_GPIO_WritePin>
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <NRF24_CSN_Disable>:

static void NRF24_CSN_Disable(nrf24 *node)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_SET);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	889b      	ldrh	r3, [r3, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	4619      	mov	r1, r3
 8001700:	f001 fa8c 	bl	8002c1c <HAL_GPIO_WritePin>
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <NRF24_Write_Reg>:

static void NRF24_Write_Reg(nrf24 *node, uint8_t reg, uint8_t data)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	70fb      	strb	r3, [r7, #3]
 8001718:	4613      	mov	r3, r2
 800171a:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	f043 0320 	orr.w	r3, r3, #32
 8001722:	b2db      	uxtb	r3, r3
 8001724:	733b      	strb	r3, [r7, #12]
	buf[1] = data;
 8001726:	78bb      	ldrb	r3, [r7, #2]
 8001728:	737b      	strb	r3, [r7, #13]
	NRF24_CSN_Enable(node);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ffce 	bl	80016cc <NRF24_CSN_Enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 2, NRF_TX_TIMEOUT);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6998      	ldr	r0, [r3, #24]
 8001734:	f107 010c 	add.w	r1, r7, #12
 8001738:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800173c:	2202      	movs	r2, #2
 800173e:	f002 ff67 	bl	8004610 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8001742:	bf00      	nop
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4618      	mov	r0, r3
 800174a:	f003 fb6c 	bl	8004e26 <HAL_SPI_GetState>
 800174e:	4603      	mov	r3, r0
 8001750:	2b01      	cmp	r3, #1
 8001752:	d1f7      	bne.n	8001744 <NRF24_Write_Reg+0x38>
	NRF24_CSN_Disable(node);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ffc9 	bl	80016ec <NRF24_CSN_Disable>
}
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <NRF24_Write_Buffer>:

static void NRF24_Write_Buffer(nrf24 *node, uint8_t reg, uint8_t *data, uint16_t len)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b086      	sub	sp, #24
 8001766:	af00      	add	r7, sp, #0
 8001768:	60f8      	str	r0, [r7, #12]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	461a      	mov	r2, r3
 800176e:	460b      	mov	r3, r1
 8001770:	72fb      	strb	r3, [r7, #11]
 8001772:	4613      	mov	r3, r2
 8001774:	813b      	strh	r3, [r7, #8]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 8001776:	7afb      	ldrb	r3, [r7, #11]
 8001778:	f043 0320 	orr.w	r3, r3, #32
 800177c:	b2db      	uxtb	r3, r3
 800177e:	753b      	strb	r3, [r7, #20]
	NRF24_CSN_Enable(node);
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f7ff ffa3 	bl	80016cc <NRF24_CSN_Enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 1, NRF_TX_TIMEOUT);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6998      	ldr	r0, [r3, #24]
 800178a:	f107 0114 	add.w	r1, r7, #20
 800178e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001792:	2201      	movs	r2, #1
 8001794:	f002 ff3c 	bl	8004610 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8001798:	bf00      	nop
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	4618      	mov	r0, r3
 80017a0:	f003 fb41 	bl	8004e26 <HAL_SPI_GetState>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d1f7      	bne.n	800179a <NRF24_Write_Buffer+0x38>
	HAL_SPI_Transmit(node->hSPIx, data, len, NRF_TX_TIMEOUT);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6998      	ldr	r0, [r3, #24]
 80017ae:	893a      	ldrh	r2, [r7, #8]
 80017b0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	f002 ff2b 	bl	8004610 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 80017ba:	bf00      	nop
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f003 fb30 	bl	8004e26 <HAL_SPI_GetState>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d1f7      	bne.n	80017bc <NRF24_Write_Buffer+0x5a>
	NRF24_CSN_Disable(node);
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f7ff ff8d 	bl	80016ec <NRF24_CSN_Disable>
}
 80017d2:	bf00      	nop
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <NRF24_Read_Reg>:

static uint8_t NRF24_Read_Reg(nrf24 *node, uint8_t reg)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b084      	sub	sp, #16
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	460b      	mov	r3, r1
 80017e4:	70fb      	strb	r3, [r7, #3]
	uint8_t data = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	73fb      	strb	r3, [r7, #15]
	NRF24_CSN_Enable(node);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ff6e 	bl	80016cc <NRF24_CSN_Enable>
	HAL_SPI_Transmit(node->hSPIx, &reg, 1, NRF_TX_TIMEOUT);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6998      	ldr	r0, [r3, #24]
 80017f4:	1cf9      	adds	r1, r7, #3
 80017f6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80017fa:	2201      	movs	r2, #1
 80017fc:	f002 ff08 	bl	8004610 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8001800:	bf00      	nop
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	4618      	mov	r0, r3
 8001808:	f003 fb0d 	bl	8004e26 <HAL_SPI_GetState>
 800180c:	4603      	mov	r3, r0
 800180e:	2b01      	cmp	r3, #1
 8001810:	d1f7      	bne.n	8001802 <NRF24_Read_Reg+0x28>
	HAL_SPI_Receive(node->hSPIx, &data, 1, NRF_RX_TIMEOUT);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6998      	ldr	r0, [r3, #24]
 8001816:	f107 010f 	add.w	r1, r7, #15
 800181a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800181e:	2201      	movs	r2, #1
 8001820:	f003 f839 	bl	8004896 <HAL_SPI_Receive>
	NRF24_CSN_Disable(node);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ff61 	bl	80016ec <NRF24_CSN_Disable>
	return data;
 800182a:	7bfb      	ldrb	r3, [r7, #15]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <NRF24_Send_Cmd>:
	HAL_SPI_Receive(node->hSPIx, data, len, NRF_RX_TIMEOUT);
	NRF24_CSN_Disable(node);
}

static void NRF24_Send_Cmd(nrf24 *node, uint8_t cmd)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	70fb      	strb	r3, [r7, #3]
	NRF24_CSN_Enable(node);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ff43 	bl	80016cc <NRF24_CSN_Enable>
	HAL_SPI_Transmit(node->hSPIx, &cmd, 1, NRF_TX_TIMEOUT);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6998      	ldr	r0, [r3, #24]
 800184a:	1cf9      	adds	r1, r7, #3
 800184c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001850:	2201      	movs	r2, #1
 8001852:	f002 fedd 	bl	8004610 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8001856:	bf00      	nop
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	4618      	mov	r0, r3
 800185e:	f003 fae2 	bl	8004e26 <HAL_SPI_GetState>
 8001862:	4603      	mov	r3, r0
 8001864:	2b01      	cmp	r3, #1
 8001866:	d1f7      	bne.n	8001858 <NRF24_Send_Cmd+0x24>
	NRF24_CSN_Disable(node);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ff3f 	bl	80016ec <NRF24_CSN_Disable>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <NRF24_Reset>:

static void NRF24_Reset(nrf24 *node, uint8_t reg)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	70fb      	strb	r3, [r7, #3]
	if(reg == STATUS)
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	2b07      	cmp	r3, #7
 8001888:	d105      	bne.n	8001896 <NRF24_Reset+0x1e>
	{
		NRF24_Write_Reg(node, STATUS, 0x00);
 800188a:	2200      	movs	r2, #0
 800188c:	2107      	movs	r1, #7
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ff3c 	bl	800170c <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P5, 0);
		NRF24_Write_Reg(node, FIFO_STATUS, 0x11);
		NRF24_Write_Reg(node, DYNPD, 0);
		NRF24_Write_Reg(node, FEATURE, 0);
	}
}
 8001894:	e0a8      	b.n	80019e8 <NRF24_Reset+0x170>
	else if(reg == FIFO_STATUS)
 8001896:	78fb      	ldrb	r3, [r7, #3]
 8001898:	2b17      	cmp	r3, #23
 800189a:	d105      	bne.n	80018a8 <NRF24_Reset+0x30>
		NRF24_Write_Reg(node, FIFO_STATUS, 0x11);
 800189c:	2211      	movs	r2, #17
 800189e:	2117      	movs	r1, #23
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff ff33 	bl	800170c <NRF24_Write_Reg>
}
 80018a6:	e09f      	b.n	80019e8 <NRF24_Reset+0x170>
		NRF24_Write_Reg(node, CONFIG, 0x08);
 80018a8:	2208      	movs	r2, #8
 80018aa:	2100      	movs	r1, #0
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff2d 	bl	800170c <NRF24_Write_Reg>
		NRF24_Write_Reg(node, EN_AA, 0x3F);
 80018b2:	223f      	movs	r2, #63	; 0x3f
 80018b4:	2101      	movs	r1, #1
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ff28 	bl	800170c <NRF24_Write_Reg>
		NRF24_Write_Reg(node, EN_RXADDR, 0x03);
 80018bc:	2203      	movs	r2, #3
 80018be:	2102      	movs	r1, #2
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff23 	bl	800170c <NRF24_Write_Reg>
		NRF24_Write_Reg(node, SETUP_AW, 0x03);
 80018c6:	2203      	movs	r2, #3
 80018c8:	2103      	movs	r1, #3
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff ff1e 	bl	800170c <NRF24_Write_Reg>
		NRF24_Write_Reg(node, SETUP_RETR, 0x03);
 80018d0:	2203      	movs	r2, #3
 80018d2:	2104      	movs	r1, #4
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ff19 	bl	800170c <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RF_CH, 0x02);
 80018da:	2202      	movs	r2, #2
 80018dc:	2105      	movs	r1, #5
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ff14 	bl	800170c <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RF_SETUP, 0x0E);
 80018e4:	220e      	movs	r2, #14
 80018e6:	2106      	movs	r1, #6
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ff0f 	bl	800170c <NRF24_Write_Reg>
		NRF24_Write_Reg(node, STATUS, 0x00);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2107      	movs	r1, #7
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ff0a 	bl	800170c <NRF24_Write_Reg>
		NRF24_Write_Reg(node, OBSERVE_TX, 0x00);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2108      	movs	r1, #8
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ff05 	bl	800170c <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RPD, 0x00);
 8001902:	2200      	movs	r2, #0
 8001904:	2109      	movs	r1, #9
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ff00 	bl	800170c <NRF24_Write_Reg>
		uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800190c:	4a38      	ldr	r2, [pc, #224]	; (80019f0 <NRF24_Reset+0x178>)
 800190e:	f107 0318 	add.w	r3, r7, #24
 8001912:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001916:	6018      	str	r0, [r3, #0]
 8001918:	3304      	adds	r3, #4
 800191a:	7019      	strb	r1, [r3, #0]
		NRF24_Write_Buffer(node, RX_ADDR_P0, rx_addr_p0_def, 5);
 800191c:	f107 0218 	add.w	r2, r7, #24
 8001920:	2305      	movs	r3, #5
 8001922:	210a      	movs	r1, #10
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ff1c 	bl	8001762 <NRF24_Write_Buffer>
		uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 800192a:	4a32      	ldr	r2, [pc, #200]	; (80019f4 <NRF24_Reset+0x17c>)
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001934:	6018      	str	r0, [r3, #0]
 8001936:	3304      	adds	r3, #4
 8001938:	7019      	strb	r1, [r3, #0]
		NRF24_Write_Buffer(node, RX_ADDR_P1, rx_addr_p1_def, 5);
 800193a:	f107 0210 	add.w	r2, r7, #16
 800193e:	2305      	movs	r3, #5
 8001940:	210b      	movs	r1, #11
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff ff0d 	bl	8001762 <NRF24_Write_Buffer>
		NRF24_Write_Reg(node, RX_ADDR_P2, 0xC3);
 8001948:	22c3      	movs	r2, #195	; 0xc3
 800194a:	210c      	movs	r1, #12
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff fedd 	bl	800170c <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_ADDR_P3, 0xC4);
 8001952:	22c4      	movs	r2, #196	; 0xc4
 8001954:	210d      	movs	r1, #13
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff fed8 	bl	800170c <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_ADDR_P4, 0xC5);
 800195c:	22c5      	movs	r2, #197	; 0xc5
 800195e:	210e      	movs	r1, #14
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff fed3 	bl	800170c <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_ADDR_P5, 0xC6);
 8001966:	22c6      	movs	r2, #198	; 0xc6
 8001968:	210f      	movs	r1, #15
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff fece 	bl	800170c <NRF24_Write_Reg>
		uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001970:	4a1f      	ldr	r2, [pc, #124]	; (80019f0 <NRF24_Reset+0x178>)
 8001972:	f107 0308 	add.w	r3, r7, #8
 8001976:	e892 0003 	ldmia.w	r2, {r0, r1}
 800197a:	6018      	str	r0, [r3, #0]
 800197c:	3304      	adds	r3, #4
 800197e:	7019      	strb	r1, [r3, #0]
		NRF24_Write_Buffer(node, TX_ADDR, tx_addr_def, 5);
 8001980:	f107 0208 	add.w	r2, r7, #8
 8001984:	2305      	movs	r3, #5
 8001986:	2110      	movs	r1, #16
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff feea 	bl	8001762 <NRF24_Write_Buffer>
		NRF24_Write_Reg(node, RX_PW_P0, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2111      	movs	r1, #17
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff feba 	bl	800170c <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P1, 0);
 8001998:	2200      	movs	r2, #0
 800199a:	2112      	movs	r1, #18
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff feb5 	bl	800170c <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P2, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2113      	movs	r1, #19
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff feb0 	bl	800170c <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P3, 0);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2114      	movs	r1, #20
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff feab 	bl	800170c <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P4, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2115      	movs	r1, #21
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff fea6 	bl	800170c <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P5, 0);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2116      	movs	r1, #22
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff fea1 	bl	800170c <NRF24_Write_Reg>
		NRF24_Write_Reg(node, FIFO_STATUS, 0x11);
 80019ca:	2211      	movs	r2, #17
 80019cc:	2117      	movs	r1, #23
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff fe9c 	bl	800170c <NRF24_Write_Reg>
		NRF24_Write_Reg(node, DYNPD, 0);
 80019d4:	2200      	movs	r2, #0
 80019d6:	211c      	movs	r1, #28
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff fe97 	bl	800170c <NRF24_Write_Reg>
		NRF24_Write_Reg(node, FEATURE, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	211d      	movs	r1, #29
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff fe92 	bl	800170c <NRF24_Write_Reg>
}
 80019e8:	bf00      	nop
 80019ea:	3720      	adds	r7, #32
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	0800a8a8 	.word	0x0800a8a8
 80019f4:	0800a8b0 	.word	0x0800a8b0

080019f8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b0aa      	sub	sp, #168	; 0xa8
 80019fc:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80019fe:	f000 fe0f 	bl	8002620 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a02:	f000 f9a9 	bl	8001d58 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a06:	f000 fafb 	bl	8002000 <MX_GPIO_Init>
	MX_SPI1_Init();
 8001a0a:	f000 fa19 	bl	8001e40 <MX_SPI1_Init>
	MX_TIM2_Init();
 8001a0e:	f000 fa4d 	bl	8001eac <MX_TIM2_Init>
	MX_I2C1_Init();
 8001a12:	f000 f9e7 	bl	8001de4 <MX_I2C1_Init>
	MX_UART4_Init();
 8001a16:	f000 fac9 	bl	8001fac <MX_UART4_Init>
	/* USER CODE BEGIN 2 */
	//		HAL_GPIO_WritePin(IN_Relay_GPIO_Port, IN_Relay_Pin, 1);
	nrfRx.CE_port = NRF_CE_GPIO_Port;
 8001a1a:	4ba7      	ldr	r3, [pc, #668]	; (8001cb8 <main+0x2c0>)
 8001a1c:	4aa7      	ldr	r2, [pc, #668]	; (8001cbc <main+0x2c4>)
 8001a1e:	609a      	str	r2, [r3, #8]
	nrfRx.CE_pin = NRF_CE_Pin;
 8001a20:	4ba5      	ldr	r3, [pc, #660]	; (8001cb8 <main+0x2c0>)
 8001a22:	2208      	movs	r2, #8
 8001a24:	819a      	strh	r2, [r3, #12]
	nrfRx.CSN_port = NRF_CSN_GPIO_Port;
 8001a26:	4ba4      	ldr	r3, [pc, #656]	; (8001cb8 <main+0x2c0>)
 8001a28:	4aa4      	ldr	r2, [pc, #656]	; (8001cbc <main+0x2c4>)
 8001a2a:	601a      	str	r2, [r3, #0]
	nrfRx.CSN_pin = NRF_CSN_Pin;
 8001a2c:	4ba2      	ldr	r3, [pc, #648]	; (8001cb8 <main+0x2c0>)
 8001a2e:	2210      	movs	r2, #16
 8001a30:	809a      	strh	r2, [r3, #4]
	nrfRx.IRQ_port = NRF_IRQ_GPIO_Port;
 8001a32:	4ba1      	ldr	r3, [pc, #644]	; (8001cb8 <main+0x2c0>)
 8001a34:	4aa1      	ldr	r2, [pc, #644]	; (8001cbc <main+0x2c4>)
 8001a36:	611a      	str	r2, [r3, #16]
	nrfRx.IRQ_pin = NRF_IRQ_Pin;
 8001a38:	4b9f      	ldr	r3, [pc, #636]	; (8001cb8 <main+0x2c0>)
 8001a3a:	2204      	movs	r2, #4
 8001a3c:	829a      	strh	r2, [r3, #20]
	nrfRx.hSPIx = &hspi1;
 8001a3e:	4b9e      	ldr	r3, [pc, #632]	; (8001cb8 <main+0x2c0>)
 8001a40:	4a9f      	ldr	r2, [pc, #636]	; (8001cc0 <main+0x2c8>)
 8001a42:	619a      	str	r2, [r3, #24]
	NRF24_Init(&nrfRx);
 8001a44:	489c      	ldr	r0, [pc, #624]	; (8001cb8 <main+0x2c0>)
 8001a46:	f7ff fbd5 	bl	80011f4 <NRF24_Init>
	NRF24_Set_DataRate(&nrfRx, _250KBS);
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	489a      	ldr	r0, [pc, #616]	; (8001cb8 <main+0x2c0>)
 8001a4e:	f7ff fc0b 	bl	8001268 <NRF24_Set_DataRate>
	NRF24_Set_PALevel(&nrfRx, HIGH);
 8001a52:	2103      	movs	r1, #3
 8001a54:	4898      	ldr	r0, [pc, #608]	; (8001cb8 <main+0x2c0>)
 8001a56:	f7ff fc53 	bl	8001300 <NRF24_Set_PALevel>
	NRF24_Set_RxPipe(&nrfRx, rxAddr, 0, SIZE_RX_BUF);
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	4999      	ldr	r1, [pc, #612]	; (8001cc4 <main+0x2cc>)
 8001a60:	4895      	ldr	r0, [pc, #596]	; (8001cb8 <main+0x2c0>)
 8001a62:	f7ff fd0d 	bl	8001480 <NRF24_Set_RxPipe>
	NRF24_Set_Mode(&nrfRx, RX_MODE);
 8001a66:	2103      	movs	r1, #3
 8001a68:	4893      	ldr	r0, [pc, #588]	; (8001cb8 <main+0x2c0>)
 8001a6a:	f7ff fcb7 	bl	80013dc <NRF24_Set_Mode>

	rx_data[0] = 0;
 8001a6e:	4b96      	ldr	r3, [pc, #600]	; (8001cc8 <main+0x2d0>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
	rx_data[1] = 0;
 8001a74:	4b94      	ldr	r3, [pc, #592]	; (8001cc8 <main+0x2d0>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	705a      	strb	r2, [r3, #1]
	rx_data[2] = 0;
 8001a7a:	4b93      	ldr	r3, [pc, #588]	; (8001cc8 <main+0x2d0>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	709a      	strb	r2, [r3, #2]
	rx_data[3] = 0;
 8001a80:	4b91      	ldr	r3, [pc, #580]	; (8001cc8 <main+0x2d0>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	70da      	strb	r2, [r3, #3]

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001a86:	2100      	movs	r1, #0
 8001a88:	4890      	ldr	r0, [pc, #576]	; (8001ccc <main+0x2d4>)
 8001a8a:	f003 fb79 	bl	8005180 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001a8e:	4b8f      	ldr	r3, [pc, #572]	; (8001ccc <main+0x2d4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2200      	movs	r2, #0
 8001a94:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001a96:	2104      	movs	r1, #4
 8001a98:	488c      	ldr	r0, [pc, #560]	; (8001ccc <main+0x2d4>)
 8001a9a:	f003 fb71 	bl	8005180 <HAL_TIM_PWM_Start>

	/* Initializes BMP180 sensor and oversampling settings. */
	BMP180_Init(&hi2c1);
 8001a9e:	488c      	ldr	r0, [pc, #560]	; (8001cd0 <main+0x2d8>)
 8001aa0:	f7ff f906 	bl	8000cb0 <BMP180_Init>
	BMP180_SetOversampling(BMP180_ULTRA);
 8001aa4:	2003      	movs	r0, #3
 8001aa6:	f7ff f911 	bl	8000ccc <BMP180_SetOversampling>
	/* Update calibration data. Must be called once before entering main loop. */
	BMP180_UpdateCalibrationData();
 8001aaa:	f7ff f91f 	bl	8000cec <BMP180_UpdateCalibrationData>
//		sprintf(data, "Temp: %.2f\nPres: %.2f\nAlt: %.2f\n", Temperature, Pressure, Altitude);
//		sprintf(data, "Temperature: %d\nHumidity: %d\n", temperature, humidity);
//		HAL_UART_Transmit(&huart4, (uint8_t*) data, sizeof(data), 100);
//		HAL_Delay(1000);
		/* Reads temperature. */
		int32_t temperature = BMP180_GetRawTemperature();
 8001aae:	f7ff fa21 	bl	8000ef4 <BMP180_GetRawTemperature>
 8001ab2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
		/* If you want a floating point number instead, you can call: */
		//float temperature = BMP180_GetTemperature();
		/* Reads pressure. */
		int32_t pressure = BMP180_GetPressure();
 8001ab6:	f7ff fa61 	bl	8000f7c <BMP180_GetPressure>
 8001aba:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
		char buffer[100];
		sprintf(buffer, "Temperature: %d.%d deg C\nPressure: %d Pa\n",
 8001abe:	4638      	mov	r0, r7
 8001ac0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001aca:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001ace:	4981      	ldr	r1, [pc, #516]	; (8001cd4 <main+0x2dc>)
 8001ad0:	f005 fa54 	bl	8006f7c <siprintf>
				(int) temperature, (int) temperature, (int) pressure);
		HAL_UART_Transmit(&huart4, buffer, strlen(buffer), 1000);
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fba6 	bl	8000228 <strlen>
 8001adc:	4603      	mov	r3, r0
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	4639      	mov	r1, r7
 8001ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae6:	487c      	ldr	r0, [pc, #496]	; (8001cd8 <main+0x2e0>)
 8001ae8:	f004 f99a 	bl	8005e20 <HAL_UART_Transmit>

		if (NRF24_Available(&nrfRx, 0) == 1) {
 8001aec:	2100      	movs	r1, #0
 8001aee:	4872      	ldr	r0, [pc, #456]	; (8001cb8 <main+0x2c0>)
 8001af0:	f7ff fd5a 	bl	80015a8 <NRF24_Available>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	f040 8118 	bne.w	8001d2c <main+0x334>
			NRF24_Receive(&nrfRx, rx_data, SIZE_RX_BUF);
 8001afc:	2204      	movs	r2, #4
 8001afe:	4972      	ldr	r1, [pc, #456]	; (8001cc8 <main+0x2d0>)
 8001b00:	486d      	ldr	r0, [pc, #436]	; (8001cb8 <main+0x2c0>)
 8001b02:	f7ff fd81 	bl	8001608 <NRF24_Receive>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001b06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b0a:	486c      	ldr	r0, [pc, #432]	; (8001cbc <main+0x2c4>)
 8001b0c:	f001 f89e 	bl	8002c4c <HAL_GPIO_TogglePin>

			if (rx_data[0] == 1) {
 8001b10:	4b6d      	ldr	r3, [pc, #436]	; (8001cc8 <main+0x2d0>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d130      	bne.n	8001b7a <main+0x182>
//				đi thẳng
				HAL_GPIO_WritePin(IN_1_GPIO_Port, IN_1_Pin, GPIO_PIN_SET);
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2110      	movs	r1, #16
 8001b1c:	486f      	ldr	r0, [pc, #444]	; (8001cdc <main+0x2e4>)
 8001b1e:	f001 f87d 	bl	8002c1c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_2_GPIO_Port, IN_2_Pin, GPIO_PIN_RESET);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2120      	movs	r1, #32
 8001b26:	486d      	ldr	r0, [pc, #436]	; (8001cdc <main+0x2e4>)
 8001b28:	f001 f878 	bl	8002c1c <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8001b2c:	4b67      	ldr	r3, [pc, #412]	; (8001ccc <main+0x2d4>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b34:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);
 8001b36:	200a      	movs	r0, #10
 8001b38:	f000 fdd4 	bl	80026e4 <HAL_Delay>
				HAL_GPIO_WritePin(IN_3_GPIO_Port, IN_3_Pin, GPIO_PIN_SET);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	2101      	movs	r1, #1
 8001b40:	4867      	ldr	r0, [pc, #412]	; (8001ce0 <main+0x2e8>)
 8001b42:	f001 f86b 	bl	8002c1c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_4_GPIO_Port, IN_4_Pin, GPIO_PIN_RESET);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2102      	movs	r1, #2
 8001b4a:	4865      	ldr	r0, [pc, #404]	; (8001ce0 <main+0x2e8>)
 8001b4c:	f001 f866 	bl	8002c1c <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8001b50:	4b5e      	ldr	r3, [pc, #376]	; (8001ccc <main+0x2d4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b58:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);
 8001b5a:	200a      	movs	r0, #10
 8001b5c:	f000 fdc2 	bl	80026e4 <HAL_Delay>
				rx_data[0] = 0;
 8001b60:	4b59      	ldr	r3, [pc, #356]	; (8001cc8 <main+0x2d0>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]
				rx_data[1] = 0;
 8001b66:	4b58      	ldr	r3, [pc, #352]	; (8001cc8 <main+0x2d0>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	705a      	strb	r2, [r3, #1]
				rx_data[2] = 0;
 8001b6c:	4b56      	ldr	r3, [pc, #344]	; (8001cc8 <main+0x2d0>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	709a      	strb	r2, [r3, #2]
				rx_data[3] = 0;
 8001b72:	4b55      	ldr	r3, [pc, #340]	; (8001cc8 <main+0x2d0>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	70da      	strb	r2, [r3, #3]
 8001b78:	e0d8      	b.n	8001d2c <main+0x334>
			} else if (rx_data[1] == 1) {
 8001b7a:	4b53      	ldr	r3, [pc, #332]	; (8001cc8 <main+0x2d0>)
 8001b7c:	785b      	ldrb	r3, [r3, #1]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d130      	bne.n	8001be4 <main+0x1ec>
//				đi lùi
				HAL_GPIO_WritePin(IN_1_GPIO_Port, IN_1_Pin, GPIO_PIN_RESET);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2110      	movs	r1, #16
 8001b86:	4855      	ldr	r0, [pc, #340]	; (8001cdc <main+0x2e4>)
 8001b88:	f001 f848 	bl	8002c1c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_2_GPIO_Port, IN_2_Pin, GPIO_PIN_SET);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	2120      	movs	r1, #32
 8001b90:	4852      	ldr	r0, [pc, #328]	; (8001cdc <main+0x2e4>)
 8001b92:	f001 f843 	bl	8002c1c <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8001b96:	4b4d      	ldr	r3, [pc, #308]	; (8001ccc <main+0x2d4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b9e:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);
 8001ba0:	200a      	movs	r0, #10
 8001ba2:	f000 fd9f 	bl	80026e4 <HAL_Delay>
				HAL_GPIO_WritePin(IN_3_GPIO_Port, IN_3_Pin, GPIO_PIN_RESET);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2101      	movs	r1, #1
 8001baa:	484d      	ldr	r0, [pc, #308]	; (8001ce0 <main+0x2e8>)
 8001bac:	f001 f836 	bl	8002c1c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_4_GPIO_Port, IN_4_Pin, GPIO_PIN_SET);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	2102      	movs	r1, #2
 8001bb4:	484a      	ldr	r0, [pc, #296]	; (8001ce0 <main+0x2e8>)
 8001bb6:	f001 f831 	bl	8002c1c <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8001bba:	4b44      	ldr	r3, [pc, #272]	; (8001ccc <main+0x2d4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bc2:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);
 8001bc4:	200a      	movs	r0, #10
 8001bc6:	f000 fd8d 	bl	80026e4 <HAL_Delay>
				rx_data[0] = 0;
 8001bca:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <main+0x2d0>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]
				rx_data[1] = 0;
 8001bd0:	4b3d      	ldr	r3, [pc, #244]	; (8001cc8 <main+0x2d0>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	705a      	strb	r2, [r3, #1]
				rx_data[2] = 0;
 8001bd6:	4b3c      	ldr	r3, [pc, #240]	; (8001cc8 <main+0x2d0>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	709a      	strb	r2, [r3, #2]
				rx_data[3] = 0;
 8001bdc:	4b3a      	ldr	r3, [pc, #232]	; (8001cc8 <main+0x2d0>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	70da      	strb	r2, [r3, #3]
 8001be2:	e0a3      	b.n	8001d2c <main+0x334>

			} else if (rx_data[2] == 1) {
 8001be4:	4b38      	ldr	r3, [pc, #224]	; (8001cc8 <main+0x2d0>)
 8001be6:	789b      	ldrb	r3, [r3, #2]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d130      	bne.n	8001c4e <main+0x256>
				//				đi phải
				HAL_GPIO_WritePin(IN_1_GPIO_Port, IN_1_Pin, GPIO_PIN_RESET);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2110      	movs	r1, #16
 8001bf0:	483a      	ldr	r0, [pc, #232]	; (8001cdc <main+0x2e4>)
 8001bf2:	f001 f813 	bl	8002c1c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_2_GPIO_Port, IN_2_Pin, GPIO_PIN_SET);
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	2120      	movs	r1, #32
 8001bfa:	4838      	ldr	r0, [pc, #224]	; (8001cdc <main+0x2e4>)
 8001bfc:	f001 f80e 	bl	8002c1c <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8001c00:	4b32      	ldr	r3, [pc, #200]	; (8001ccc <main+0x2d4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c08:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);
 8001c0a:	200a      	movs	r0, #10
 8001c0c:	f000 fd6a 	bl	80026e4 <HAL_Delay>
				HAL_GPIO_WritePin(IN_3_GPIO_Port, IN_3_Pin, GPIO_PIN_SET);
 8001c10:	2201      	movs	r2, #1
 8001c12:	2101      	movs	r1, #1
 8001c14:	4832      	ldr	r0, [pc, #200]	; (8001ce0 <main+0x2e8>)
 8001c16:	f001 f801 	bl	8002c1c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_4_GPIO_Port, IN_4_Pin, GPIO_PIN_RESET);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2102      	movs	r1, #2
 8001c1e:	4830      	ldr	r0, [pc, #192]	; (8001ce0 <main+0x2e8>)
 8001c20:	f000 fffc 	bl	8002c1c <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8001c24:	4b29      	ldr	r3, [pc, #164]	; (8001ccc <main+0x2d4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c2c:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);
 8001c2e:	200a      	movs	r0, #10
 8001c30:	f000 fd58 	bl	80026e4 <HAL_Delay>
				rx_data[0] = 0;
 8001c34:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <main+0x2d0>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
				rx_data[1] = 0;
 8001c3a:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <main+0x2d0>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	705a      	strb	r2, [r3, #1]
				rx_data[2] = 0;
 8001c40:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <main+0x2d0>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	709a      	strb	r2, [r3, #2]
				rx_data[3] = 0;
 8001c46:	4b20      	ldr	r3, [pc, #128]	; (8001cc8 <main+0x2d0>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	70da      	strb	r2, [r3, #3]
 8001c4c:	e06e      	b.n	8001d2c <main+0x334>

			} else if (rx_data[3] == 1) {
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <main+0x2d0>)
 8001c50:	78db      	ldrb	r3, [r3, #3]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d146      	bne.n	8001ce4 <main+0x2ec>
				//				đi trái
				HAL_GPIO_WritePin(IN_1_GPIO_Port, IN_1_Pin, GPIO_PIN_SET);
 8001c56:	2201      	movs	r2, #1
 8001c58:	2110      	movs	r1, #16
 8001c5a:	4820      	ldr	r0, [pc, #128]	; (8001cdc <main+0x2e4>)
 8001c5c:	f000 ffde 	bl	8002c1c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_2_GPIO_Port, IN_2_Pin, GPIO_PIN_RESET);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2120      	movs	r1, #32
 8001c64:	481d      	ldr	r0, [pc, #116]	; (8001cdc <main+0x2e4>)
 8001c66:	f000 ffd9 	bl	8002c1c <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8001c6a:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <main+0x2d4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c72:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);
 8001c74:	200a      	movs	r0, #10
 8001c76:	f000 fd35 	bl	80026e4 <HAL_Delay>
				HAL_GPIO_WritePin(IN_3_GPIO_Port, IN_3_Pin, GPIO_PIN_RESET);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	4818      	ldr	r0, [pc, #96]	; (8001ce0 <main+0x2e8>)
 8001c80:	f000 ffcc 	bl	8002c1c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_4_GPIO_Port, IN_4_Pin, GPIO_PIN_SET);
 8001c84:	2201      	movs	r2, #1
 8001c86:	2102      	movs	r1, #2
 8001c88:	4815      	ldr	r0, [pc, #84]	; (8001ce0 <main+0x2e8>)
 8001c8a:	f000 ffc7 	bl	8002c1c <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <main+0x2d4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c96:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);
 8001c98:	200a      	movs	r0, #10
 8001c9a:	f000 fd23 	bl	80026e4 <HAL_Delay>
				rx_data[0] = 0;
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <main+0x2d0>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
				rx_data[1] = 0;
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <main+0x2d0>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	705a      	strb	r2, [r3, #1]
				rx_data[2] = 0;
 8001caa:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <main+0x2d0>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	709a      	strb	r2, [r3, #2]
				rx_data[3] = 0;
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <main+0x2d0>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	70da      	strb	r2, [r3, #3]
 8001cb6:	e039      	b.n	8001d2c <main+0x334>
 8001cb8:	20000214 	.word	0x20000214
 8001cbc:	40010800 	.word	0x40010800
 8001cc0:	2000028c 	.word	0x2000028c
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	20000234 	.word	0x20000234
 8001ccc:	200002e4 	.word	0x200002e4
 8001cd0:	20000238 	.word	0x20000238
 8001cd4:	0800a8b8 	.word	0x0800a8b8
 8001cd8:	2000032c 	.word	0x2000032c
 8001cdc:	40011000 	.word	0x40011000
 8001ce0:	40010c00 	.word	0x40010c00

			} else {
				HAL_GPIO_WritePin(IN_1_GPIO_Port, IN_1_Pin, GPIO_PIN_RESET);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2110      	movs	r1, #16
 8001ce8:	4817      	ldr	r0, [pc, #92]	; (8001d48 <main+0x350>)
 8001cea:	f000 ff97 	bl	8002c1c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_2_GPIO_Port, IN_2_Pin, GPIO_PIN_RESET);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2120      	movs	r1, #32
 8001cf2:	4815      	ldr	r0, [pc, #84]	; (8001d48 <main+0x350>)
 8001cf4:	f000 ff92 	bl	8002c1c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_3_GPIO_Port, IN_3_Pin, GPIO_PIN_RESET);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	4813      	ldr	r0, [pc, #76]	; (8001d4c <main+0x354>)
 8001cfe:	f000 ff8d 	bl	8002c1c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN_4_GPIO_Port, IN_4_Pin, GPIO_PIN_RESET);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2102      	movs	r1, #2
 8001d06:	4811      	ldr	r0, [pc, #68]	; (8001d4c <main+0x354>)
 8001d08:	f000 ff88 	bl	8002c1c <HAL_GPIO_WritePin>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4810      	ldr	r0, [pc, #64]	; (8001d50 <main+0x358>)
 8001d10:	f003 faf0 	bl	80052f4 <HAL_TIM_PWM_Stop>
				rx_data[0] = 0;
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <main+0x35c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	701a      	strb	r2, [r3, #0]
				rx_data[1] = 0;
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <main+0x35c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	705a      	strb	r2, [r3, #1]
				rx_data[2] = 0;
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <main+0x35c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	709a      	strb	r2, [r3, #2]
				rx_data[3] = 0;
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <main+0x35c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	70da      	strb	r2, [r3, #3]
			}
		}
		rx_data[0] = 0;
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <main+0x35c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	701a      	strb	r2, [r3, #0]
		rx_data[1] = 0;
 8001d32:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <main+0x35c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	705a      	strb	r2, [r3, #1]
		rx_data[2] = 0;
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <main+0x35c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	709a      	strb	r2, [r3, #2]
		rx_data[3] = 0;
 8001d3e:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <main+0x35c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	70da      	strb	r2, [r3, #3]
	while (1) {
 8001d44:	e6b3      	b.n	8001aae <main+0xb6>
 8001d46:	bf00      	nop
 8001d48:	40011000 	.word	0x40011000
 8001d4c:	40010c00 	.word	0x40010c00
 8001d50:	200002e4 	.word	0x200002e4
 8001d54:	20000234 	.word	0x20000234

08001d58 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b090      	sub	sp, #64	; 0x40
 8001d5c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001d5e:	f107 0318 	add.w	r3, r7, #24
 8001d62:	2228      	movs	r2, #40	; 0x28
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f005 f96b 	bl	8007042 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	60da      	str	r2, [r3, #12]
 8001d78:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d82:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d84:	2300      	movs	r3, #0
 8001d86:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d94:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d96:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001d9c:	f107 0318 	add.w	r3, r7, #24
 8001da0:	4618      	mov	r0, r3
 8001da2:	f001 ffa1 	bl	8003ce8 <HAL_RCC_OscConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <SystemClock_Config+0x58>
		Error_Handler();
 8001dac:	f000 f9cc 	bl	8002148 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001db0:	230f      	movs	r3, #15
 8001db2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001db4:	2302      	movs	r3, #2
 8001db6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dc0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	2102      	movs	r1, #2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f002 fa0e 	bl	80041ec <HAL_RCC_ClockConfig>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <SystemClock_Config+0x82>
		Error_Handler();
 8001dd6:	f000 f9b7 	bl	8002148 <Error_Handler>
	}
}
 8001dda:	bf00      	nop
 8001ddc:	3740      	adds	r7, #64	; 0x40
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001de8:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <MX_I2C1_Init+0x50>)
 8001dea:	4a13      	ldr	r2, [pc, #76]	; (8001e38 <MX_I2C1_Init+0x54>)
 8001dec:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001dee:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <MX_I2C1_Init+0x50>)
 8001df0:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <MX_I2C1_Init+0x58>)
 8001df2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001df4:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <MX_I2C1_Init+0x50>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <MX_I2C1_Init+0x50>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <MX_I2C1_Init+0x50>)
 8001e02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e06:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e08:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <MX_I2C1_Init+0x50>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <MX_I2C1_Init+0x50>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e14:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <MX_I2C1_Init+0x50>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <MX_I2C1_Init+0x50>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001e20:	4804      	ldr	r0, [pc, #16]	; (8001e34 <MX_I2C1_Init+0x50>)
 8001e22:	f000 ff2d 	bl	8002c80 <HAL_I2C_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001e2c:	f000 f98c 	bl	8002148 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000238 	.word	0x20000238
 8001e38:	40005400 	.word	0x40005400
 8001e3c:	000186a0 	.word	0x000186a0

08001e40 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001e44:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <MX_SPI1_Init+0x64>)
 8001e46:	4a18      	ldr	r2, [pc, #96]	; (8001ea8 <MX_SPI1_Init+0x68>)
 8001e48:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e4a:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <MX_SPI1_Init+0x64>)
 8001e4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e50:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e52:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <MX_SPI1_Init+0x64>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <MX_SPI1_Init+0x64>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e5e:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <MX_SPI1_Init+0x64>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <MX_SPI1_Init+0x64>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <MX_SPI1_Init+0x64>)
 8001e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e70:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e72:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <MX_SPI1_Init+0x64>)
 8001e74:	2218      	movs	r2, #24
 8001e76:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e78:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <MX_SPI1_Init+0x64>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e7e:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <MX_SPI1_Init+0x64>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e84:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <MX_SPI1_Init+0x64>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <MX_SPI1_Init+0x64>)
 8001e8c:	220a      	movs	r2, #10
 8001e8e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001e90:	4804      	ldr	r0, [pc, #16]	; (8001ea4 <MX_SPI1_Init+0x64>)
 8001e92:	f002 fb39 	bl	8004508 <HAL_SPI_Init>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001e9c:	f000 f954 	bl	8002148 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	2000028c 	.word	0x2000028c
 8001ea8:	40013000 	.word	0x40013000

08001eac <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08e      	sub	sp, #56	; 0x38
 8001eb0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001eb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001ec0:	f107 0320 	add.w	r3, r7, #32
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
 8001ed8:	615a      	str	r2, [r3, #20]
 8001eda:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001edc:	4b32      	ldr	r3, [pc, #200]	; (8001fa8 <MX_TIM2_Init+0xfc>)
 8001ede:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ee2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72;
 8001ee4:	4b30      	ldr	r3, [pc, #192]	; (8001fa8 <MX_TIM2_Init+0xfc>)
 8001ee6:	2248      	movs	r2, #72	; 0x48
 8001ee8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eea:	4b2f      	ldr	r3, [pc, #188]	; (8001fa8 <MX_TIM2_Init+0xfc>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 8001ef0:	4b2d      	ldr	r3, [pc, #180]	; (8001fa8 <MX_TIM2_Init+0xfc>)
 8001ef2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ef6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef8:	4b2b      	ldr	r3, [pc, #172]	; (8001fa8 <MX_TIM2_Init+0xfc>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001efe:	4b2a      	ldr	r3, [pc, #168]	; (8001fa8 <MX_TIM2_Init+0xfc>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001f04:	4828      	ldr	r0, [pc, #160]	; (8001fa8 <MX_TIM2_Init+0xfc>)
 8001f06:	f003 f893 	bl	8005030 <HAL_TIM_Base_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM2_Init+0x68>
		Error_Handler();
 8001f10:	f000 f91a 	bl	8002148 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4821      	ldr	r0, [pc, #132]	; (8001fa8 <MX_TIM2_Init+0xfc>)
 8001f22:	f003 fb19 	bl	8005558 <HAL_TIM_ConfigClockSource>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM2_Init+0x84>
		Error_Handler();
 8001f2c:	f000 f90c 	bl	8002148 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001f30:	481d      	ldr	r0, [pc, #116]	; (8001fa8 <MX_TIM2_Init+0xfc>)
 8001f32:	f003 f8cc 	bl	80050ce <HAL_TIM_PWM_Init>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM2_Init+0x94>
		Error_Handler();
 8001f3c:	f000 f904 	bl	8002148 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f40:	2300      	movs	r3, #0
 8001f42:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001f48:	f107 0320 	add.w	r3, r7, #32
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4816      	ldr	r0, [pc, #88]	; (8001fa8 <MX_TIM2_Init+0xfc>)
 8001f50:	f003 feaa 	bl	8005ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8001f5a:	f000 f8f5 	bl	8002148 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f5e:	2360      	movs	r3, #96	; 0x60
 8001f60:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8001f6e:	1d3b      	adds	r3, r7, #4
 8001f70:	2200      	movs	r2, #0
 8001f72:	4619      	mov	r1, r3
 8001f74:	480c      	ldr	r0, [pc, #48]	; (8001fa8 <MX_TIM2_Init+0xfc>)
 8001f76:	f003 fa2d 	bl	80053d4 <HAL_TIM_PWM_ConfigChannel>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8001f80:	f000 f8e2 	bl	8002148 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	2204      	movs	r2, #4
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4807      	ldr	r0, [pc, #28]	; (8001fa8 <MX_TIM2_Init+0xfc>)
 8001f8c:	f003 fa22 	bl	80053d4 <HAL_TIM_PWM_ConfigChannel>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_TIM2_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 8001f96:	f000 f8d7 	bl	8002148 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001f9a:	4803      	ldr	r0, [pc, #12]	; (8001fa8 <MX_TIM2_Init+0xfc>)
 8001f9c:	f000 f9b0 	bl	8002300 <HAL_TIM_MspPostInit>

}
 8001fa0:	bf00      	nop
 8001fa2:	3738      	adds	r7, #56	; 0x38
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	200002e4 	.word	0x200002e4

08001fac <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <MX_UART4_Init+0x4c>)
 8001fb2:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <MX_UART4_Init+0x50>)
 8001fb4:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <MX_UART4_Init+0x4c>)
 8001fb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fbc:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <MX_UART4_Init+0x4c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <MX_UART4_Init+0x4c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8001fca:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <MX_UART4_Init+0x4c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8001fd0:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <MX_UART4_Init+0x4c>)
 8001fd2:	220c      	movs	r2, #12
 8001fd4:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fd6:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <MX_UART4_Init+0x4c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <MX_UART4_Init+0x4c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8001fe2:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <MX_UART4_Init+0x4c>)
 8001fe4:	f003 fecc 	bl	8005d80 <HAL_UART_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_UART4_Init+0x46>
		Error_Handler();
 8001fee:	f000 f8ab 	bl	8002148 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	2000032c 	.word	0x2000032c
 8001ffc:	40004c00 	.word	0x40004c00

08002000 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002006:	f107 0310 	add.w	r3, r7, #16
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002014:	4b47      	ldr	r3, [pc, #284]	; (8002134 <MX_GPIO_Init+0x134>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	4a46      	ldr	r2, [pc, #280]	; (8002134 <MX_GPIO_Init+0x134>)
 800201a:	f043 0320 	orr.w	r3, r3, #32
 800201e:	6193      	str	r3, [r2, #24]
 8002020:	4b44      	ldr	r3, [pc, #272]	; (8002134 <MX_GPIO_Init+0x134>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f003 0320 	and.w	r3, r3, #32
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800202c:	4b41      	ldr	r3, [pc, #260]	; (8002134 <MX_GPIO_Init+0x134>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	4a40      	ldr	r2, [pc, #256]	; (8002134 <MX_GPIO_Init+0x134>)
 8002032:	f043 0304 	orr.w	r3, r3, #4
 8002036:	6193      	str	r3, [r2, #24]
 8002038:	4b3e      	ldr	r3, [pc, #248]	; (8002134 <MX_GPIO_Init+0x134>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002044:	4b3b      	ldr	r3, [pc, #236]	; (8002134 <MX_GPIO_Init+0x134>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	4a3a      	ldr	r2, [pc, #232]	; (8002134 <MX_GPIO_Init+0x134>)
 800204a:	f043 0310 	orr.w	r3, r3, #16
 800204e:	6193      	str	r3, [r2, #24]
 8002050:	4b38      	ldr	r3, [pc, #224]	; (8002134 <MX_GPIO_Init+0x134>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	f003 0310 	and.w	r3, r3, #16
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800205c:	4b35      	ldr	r3, [pc, #212]	; (8002134 <MX_GPIO_Init+0x134>)
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	4a34      	ldr	r2, [pc, #208]	; (8002134 <MX_GPIO_Init+0x134>)
 8002062:	f043 0308 	orr.w	r3, r3, #8
 8002066:	6193      	str	r3, [r2, #24]
 8002068:	4b32      	ldr	r3, [pc, #200]	; (8002134 <MX_GPIO_Init+0x134>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	603b      	str	r3, [r7, #0]
 8002072:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, NRF_CE_Pin | NRF_CSN_Pin | LED_Pin | IN_Relay_Pin,
 8002074:	2200      	movs	r2, #0
 8002076:	f241 1118 	movw	r1, #4376	; 0x1118
 800207a:	482f      	ldr	r0, [pc, #188]	; (8002138 <MX_GPIO_Init+0x138>)
 800207c:	f000 fdce 	bl	8002c1c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, IN_1_Pin | IN_2_Pin, GPIO_PIN_SET);
 8002080:	2201      	movs	r2, #1
 8002082:	2130      	movs	r1, #48	; 0x30
 8002084:	482d      	ldr	r0, [pc, #180]	; (800213c <MX_GPIO_Init+0x13c>)
 8002086:	f000 fdc9 	bl	8002c1c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, IN_3_Pin | IN_4_Pin, GPIO_PIN_SET);
 800208a:	2201      	movs	r2, #1
 800208c:	2103      	movs	r1, #3
 800208e:	482c      	ldr	r0, [pc, #176]	; (8002140 <MX_GPIO_Init+0x140>)
 8002090:	f000 fdc4 	bl	8002c1c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8002094:	2201      	movs	r2, #1
 8002096:	2104      	movs	r1, #4
 8002098:	482a      	ldr	r0, [pc, #168]	; (8002144 <MX_GPIO_Init+0x144>)
 800209a:	f000 fdbf 	bl	8002c1c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : NRF_IRQ_Pin Sensor_Pin */
	GPIO_InitStruct.Pin = NRF_IRQ_Pin | Sensor_Pin;
 800209e:	f640 0304 	movw	r3, #2052	; 0x804
 80020a2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ac:	f107 0310 	add.w	r3, r7, #16
 80020b0:	4619      	mov	r1, r3
 80020b2:	4821      	ldr	r0, [pc, #132]	; (8002138 <MX_GPIO_Init+0x138>)
 80020b4:	f000 fc1e 	bl	80028f4 <HAL_GPIO_Init>

	/*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin LED_Pin IN_Relay_Pin */
	GPIO_InitStruct.Pin = NRF_CE_Pin | NRF_CSN_Pin | LED_Pin | IN_Relay_Pin;
 80020b8:	f241 1318 	movw	r3, #4376	; 0x1118
 80020bc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020be:	2301      	movs	r3, #1
 80020c0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2302      	movs	r3, #2
 80020c8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ca:	f107 0310 	add.w	r3, r7, #16
 80020ce:	4619      	mov	r1, r3
 80020d0:	4819      	ldr	r0, [pc, #100]	; (8002138 <MX_GPIO_Init+0x138>)
 80020d2:	f000 fc0f 	bl	80028f4 <HAL_GPIO_Init>

	/*Configure GPIO pins : IN_1_Pin IN_2_Pin */
	GPIO_InitStruct.Pin = IN_1_Pin | IN_2_Pin;
 80020d6:	2330      	movs	r3, #48	; 0x30
 80020d8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020da:	2301      	movs	r3, #1
 80020dc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	2302      	movs	r3, #2
 80020e4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e6:	f107 0310 	add.w	r3, r7, #16
 80020ea:	4619      	mov	r1, r3
 80020ec:	4813      	ldr	r0, [pc, #76]	; (800213c <MX_GPIO_Init+0x13c>)
 80020ee:	f000 fc01 	bl	80028f4 <HAL_GPIO_Init>

	/*Configure GPIO pins : IN_3_Pin IN_4_Pin */
	GPIO_InitStruct.Pin = IN_3_Pin | IN_4_Pin;
 80020f2:	2303      	movs	r3, #3
 80020f4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f6:	2301      	movs	r3, #1
 80020f8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fe:	2302      	movs	r3, #2
 8002100:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002102:	f107 0310 	add.w	r3, r7, #16
 8002106:	4619      	mov	r1, r3
 8002108:	480d      	ldr	r0, [pc, #52]	; (8002140 <MX_GPIO_Init+0x140>)
 800210a:	f000 fbf3 	bl	80028f4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_1_Pin */
	GPIO_InitStruct.Pin = LED_1_Pin;
 800210e:	2304      	movs	r3, #4
 8002110:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002112:	2301      	movs	r3, #1
 8002114:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211a:	2302      	movs	r3, #2
 800211c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 800211e:	f107 0310 	add.w	r3, r7, #16
 8002122:	4619      	mov	r1, r3
 8002124:	4807      	ldr	r0, [pc, #28]	; (8002144 <MX_GPIO_Init+0x144>)
 8002126:	f000 fbe5 	bl	80028f4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800212a:	bf00      	nop
 800212c:	3720      	adds	r7, #32
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
 8002138:	40010800 	.word	0x40010800
 800213c:	40011000 	.word	0x40011000
 8002140:	40010c00 	.word	0x40010c00
 8002144:	40011400 	.word	0x40011400

08002148 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800214c:	b672      	cpsid	i
}
 800214e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002150:	e7fe      	b.n	8002150 <Error_Handler+0x8>
	...

08002154 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <HAL_MspInit+0x5c>)
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	4a14      	ldr	r2, [pc, #80]	; (80021b0 <HAL_MspInit+0x5c>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6193      	str	r3, [r2, #24]
 8002166:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <HAL_MspInit+0x5c>)
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <HAL_MspInit+0x5c>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	4a0e      	ldr	r2, [pc, #56]	; (80021b0 <HAL_MspInit+0x5c>)
 8002178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800217c:	61d3      	str	r3, [r2, #28]
 800217e:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <HAL_MspInit+0x5c>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_MspInit+0x60>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <HAL_MspInit+0x60>)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021a6:	bf00      	nop
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40010000 	.word	0x40010000

080021b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 0310 	add.w	r3, r7, #16
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a15      	ldr	r2, [pc, #84]	; (8002228 <HAL_I2C_MspInit+0x70>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d123      	bne.n	8002220 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d8:	4b14      	ldr	r3, [pc, #80]	; (800222c <HAL_I2C_MspInit+0x74>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	4a13      	ldr	r2, [pc, #76]	; (800222c <HAL_I2C_MspInit+0x74>)
 80021de:	f043 0308 	orr.w	r3, r3, #8
 80021e2:	6193      	str	r3, [r2, #24]
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_I2C_MspInit+0x74>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021f0:	23c0      	movs	r3, #192	; 0xc0
 80021f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021f4:	2312      	movs	r3, #18
 80021f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021f8:	2303      	movs	r3, #3
 80021fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fc:	f107 0310 	add.w	r3, r7, #16
 8002200:	4619      	mov	r1, r3
 8002202:	480b      	ldr	r0, [pc, #44]	; (8002230 <HAL_I2C_MspInit+0x78>)
 8002204:	f000 fb76 	bl	80028f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <HAL_I2C_MspInit+0x74>)
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	4a07      	ldr	r2, [pc, #28]	; (800222c <HAL_I2C_MspInit+0x74>)
 800220e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002212:	61d3      	str	r3, [r2, #28]
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <HAL_I2C_MspInit+0x74>)
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002220:	bf00      	nop
 8002222:	3720      	adds	r7, #32
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40005400 	.word	0x40005400
 800222c:	40021000 	.word	0x40021000
 8002230:	40010c00 	.word	0x40010c00

08002234 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 0310 	add.w	r3, r7, #16
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a1b      	ldr	r2, [pc, #108]	; (80022bc <HAL_SPI_MspInit+0x88>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d12f      	bne.n	80022b4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002254:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <HAL_SPI_MspInit+0x8c>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	4a19      	ldr	r2, [pc, #100]	; (80022c0 <HAL_SPI_MspInit+0x8c>)
 800225a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800225e:	6193      	str	r3, [r2, #24]
 8002260:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <HAL_SPI_MspInit+0x8c>)
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226c:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <HAL_SPI_MspInit+0x8c>)
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	4a13      	ldr	r2, [pc, #76]	; (80022c0 <HAL_SPI_MspInit+0x8c>)
 8002272:	f043 0304 	orr.w	r3, r3, #4
 8002276:	6193      	str	r3, [r2, #24]
 8002278:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <HAL_SPI_MspInit+0x8c>)
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002284:	23a0      	movs	r3, #160	; 0xa0
 8002286:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800228c:	2303      	movs	r3, #3
 800228e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002290:	f107 0310 	add.w	r3, r7, #16
 8002294:	4619      	mov	r1, r3
 8002296:	480b      	ldr	r0, [pc, #44]	; (80022c4 <HAL_SPI_MspInit+0x90>)
 8002298:	f000 fb2c 	bl	80028f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800229c:	2340      	movs	r3, #64	; 0x40
 800229e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a8:	f107 0310 	add.w	r3, r7, #16
 80022ac:	4619      	mov	r1, r3
 80022ae:	4805      	ldr	r0, [pc, #20]	; (80022c4 <HAL_SPI_MspInit+0x90>)
 80022b0:	f000 fb20 	bl	80028f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022b4:	bf00      	nop
 80022b6:	3720      	adds	r7, #32
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40013000 	.word	0x40013000
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40010800 	.word	0x40010800

080022c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d8:	d10b      	bne.n	80022f2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022da:	4b08      	ldr	r3, [pc, #32]	; (80022fc <HAL_TIM_Base_MspInit+0x34>)
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	4a07      	ldr	r2, [pc, #28]	; (80022fc <HAL_TIM_Base_MspInit+0x34>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	61d3      	str	r3, [r2, #28]
 80022e6:	4b05      	ldr	r3, [pc, #20]	; (80022fc <HAL_TIM_Base_MspInit+0x34>)
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80022f2:	bf00      	nop
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr
 80022fc:	40021000 	.word	0x40021000

08002300 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	f107 0310 	add.w	r3, r7, #16
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231e:	d117      	bne.n	8002350 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002320:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <HAL_TIM_MspPostInit+0x58>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	4a0c      	ldr	r2, [pc, #48]	; (8002358 <HAL_TIM_MspPostInit+0x58>)
 8002326:	f043 0304 	orr.w	r3, r3, #4
 800232a:	6193      	str	r3, [r2, #24]
 800232c:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <HAL_TIM_MspPostInit+0x58>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002338:	2303      	movs	r3, #3
 800233a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233c:	2302      	movs	r3, #2
 800233e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002340:	2302      	movs	r3, #2
 8002342:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002344:	f107 0310 	add.w	r3, r7, #16
 8002348:	4619      	mov	r1, r3
 800234a:	4804      	ldr	r0, [pc, #16]	; (800235c <HAL_TIM_MspPostInit+0x5c>)
 800234c:	f000 fad2 	bl	80028f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002350:	bf00      	nop
 8002352:	3720      	adds	r7, #32
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021000 	.word	0x40021000
 800235c:	40010800 	.word	0x40010800

08002360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 0310 	add.w	r3, r7, #16
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a1c      	ldr	r2, [pc, #112]	; (80023ec <HAL_UART_MspInit+0x8c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d131      	bne.n	80023e4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002380:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <HAL_UART_MspInit+0x90>)
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	4a1a      	ldr	r2, [pc, #104]	; (80023f0 <HAL_UART_MspInit+0x90>)
 8002386:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800238a:	61d3      	str	r3, [r2, #28]
 800238c:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <HAL_UART_MspInit+0x90>)
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002398:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <HAL_UART_MspInit+0x90>)
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	4a14      	ldr	r2, [pc, #80]	; (80023f0 <HAL_UART_MspInit+0x90>)
 800239e:	f043 0310 	orr.w	r3, r3, #16
 80023a2:	6193      	str	r3, [r2, #24]
 80023a4:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <HAL_UART_MspInit+0x90>)
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	f003 0310 	and.w	r3, r3, #16
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b6:	2302      	movs	r3, #2
 80023b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ba:	2303      	movs	r3, #3
 80023bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023be:	f107 0310 	add.w	r3, r7, #16
 80023c2:	4619      	mov	r1, r3
 80023c4:	480b      	ldr	r0, [pc, #44]	; (80023f4 <HAL_UART_MspInit+0x94>)
 80023c6:	f000 fa95 	bl	80028f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80023ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d8:	f107 0310 	add.w	r3, r7, #16
 80023dc:	4619      	mov	r1, r3
 80023de:	4805      	ldr	r0, [pc, #20]	; (80023f4 <HAL_UART_MspInit+0x94>)
 80023e0:	f000 fa88 	bl	80028f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80023e4:	bf00      	nop
 80023e6:	3720      	adds	r7, #32
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40004c00 	.word	0x40004c00
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40011000 	.word	0x40011000

080023f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023fc:	e7fe      	b.n	80023fc <NMI_Handler+0x4>

080023fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002402:	e7fe      	b.n	8002402 <HardFault_Handler+0x4>

08002404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002408:	e7fe      	b.n	8002408 <MemManage_Handler+0x4>

0800240a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800240e:	e7fe      	b.n	800240e <BusFault_Handler+0x4>

08002410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002414:	e7fe      	b.n	8002414 <UsageFault_Handler+0x4>

08002416 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr

08002422 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr

0800242e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr

0800243a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800243e:	f000 f935 	bl	80026ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}

08002446 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0
  return 1;
 800244a:	2301      	movs	r3, #1
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <_kill>:

int _kill(int pid, int sig)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800245e:	f004 fe43 	bl	80070e8 <__errno>
 8002462:	4603      	mov	r3, r0
 8002464:	2216      	movs	r2, #22
 8002466:	601a      	str	r2, [r3, #0]
  return -1;
 8002468:	f04f 33ff 	mov.w	r3, #4294967295
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <_exit>:

void _exit (int status)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800247c:	f04f 31ff 	mov.w	r1, #4294967295
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff ffe7 	bl	8002454 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002486:	e7fe      	b.n	8002486 <_exit+0x12>

08002488 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	e00a      	b.n	80024b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800249a:	f3af 8000 	nop.w
 800249e:	4601      	mov	r1, r0
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	60ba      	str	r2, [r7, #8]
 80024a6:	b2ca      	uxtb	r2, r1
 80024a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	3301      	adds	r3, #1
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	dbf0      	blt.n	800249a <_read+0x12>
  }

  return len;
 80024b8:	687b      	ldr	r3, [r7, #4]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b086      	sub	sp, #24
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	60f8      	str	r0, [r7, #12]
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	e009      	b.n	80024e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	60ba      	str	r2, [r7, #8]
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	3301      	adds	r3, #1
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	dbf1      	blt.n	80024d4 <_write+0x12>
  }
  return len;
 80024f0:	687b      	ldr	r3, [r7, #4]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <_close>:

int _close(int file)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002502:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002506:	4618      	mov	r0, r3
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002520:	605a      	str	r2, [r3, #4]
  return 0;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr

0800252e <_isatty>:

int _isatty(int file)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002536:	2301      	movs	r3, #1
}
 8002538:	4618      	mov	r0, r3
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr

08002542 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002542:	b480      	push	{r7}
 8002544:	b085      	sub	sp, #20
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr
	...

0800255c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002564:	4a14      	ldr	r2, [pc, #80]	; (80025b8 <_sbrk+0x5c>)
 8002566:	4b15      	ldr	r3, [pc, #84]	; (80025bc <_sbrk+0x60>)
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002570:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <_sbrk+0x64>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d102      	bne.n	800257e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <_sbrk+0x64>)
 800257a:	4a12      	ldr	r2, [pc, #72]	; (80025c4 <_sbrk+0x68>)
 800257c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <_sbrk+0x64>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	429a      	cmp	r2, r3
 800258a:	d207      	bcs.n	800259c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800258c:	f004 fdac 	bl	80070e8 <__errno>
 8002590:	4603      	mov	r3, r0
 8002592:	220c      	movs	r2, #12
 8002594:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002596:	f04f 33ff 	mov.w	r3, #4294967295
 800259a:	e009      	b.n	80025b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800259c:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <_sbrk+0x64>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025a2:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <_sbrk+0x64>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4413      	add	r3, r2
 80025aa:	4a05      	ldr	r2, [pc, #20]	; (80025c0 <_sbrk+0x64>)
 80025ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ae:	68fb      	ldr	r3, [r7, #12]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	2000c000 	.word	0x2000c000
 80025bc:	00000400 	.word	0x00000400
 80025c0:	20000374 	.word	0x20000374
 80025c4:	200004c8 	.word	0x200004c8

080025c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025d4:	f7ff fff8 	bl	80025c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025d8:	480b      	ldr	r0, [pc, #44]	; (8002608 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80025da:	490c      	ldr	r1, [pc, #48]	; (800260c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80025dc:	4a0c      	ldr	r2, [pc, #48]	; (8002610 <LoopFillZerobss+0x16>)
  movs r3, #0
 80025de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025e0:	e002      	b.n	80025e8 <LoopCopyDataInit>

080025e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025e6:	3304      	adds	r3, #4

080025e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025ec:	d3f9      	bcc.n	80025e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ee:	4a09      	ldr	r2, [pc, #36]	; (8002614 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80025f0:	4c09      	ldr	r4, [pc, #36]	; (8002618 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025f4:	e001      	b.n	80025fa <LoopFillZerobss>

080025f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025f8:	3204      	adds	r2, #4

080025fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025fc:	d3fb      	bcc.n	80025f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025fe:	f004 fd79 	bl	80070f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002602:	f7ff f9f9 	bl	80019f8 <main>
  bx lr
 8002606:	4770      	bx	lr
  ldr r0, =_sdata
 8002608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800260c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002610:	0800ad48 	.word	0x0800ad48
  ldr r2, =_sbss
 8002614:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002618:	200004c8 	.word	0x200004c8

0800261c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800261c:	e7fe      	b.n	800261c <ADC1_2_IRQHandler>
	...

08002620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002624:	4b08      	ldr	r3, [pc, #32]	; (8002648 <HAL_Init+0x28>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a07      	ldr	r2, [pc, #28]	; (8002648 <HAL_Init+0x28>)
 800262a:	f043 0310 	orr.w	r3, r3, #16
 800262e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002630:	2003      	movs	r0, #3
 8002632:	f000 f92b 	bl	800288c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002636:	200f      	movs	r0, #15
 8002638:	f000 f808 	bl	800264c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800263c:	f7ff fd8a 	bl	8002154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40022000 	.word	0x40022000

0800264c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002654:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_InitTick+0x54>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <HAL_InitTick+0x58>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	4619      	mov	r1, r3
 800265e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002662:	fbb3 f3f1 	udiv	r3, r3, r1
 8002666:	fbb2 f3f3 	udiv	r3, r2, r3
 800266a:	4618      	mov	r0, r3
 800266c:	f000 f935 	bl	80028da <HAL_SYSTICK_Config>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e00e      	b.n	8002698 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b0f      	cmp	r3, #15
 800267e:	d80a      	bhi.n	8002696 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002680:	2200      	movs	r2, #0
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	f04f 30ff 	mov.w	r0, #4294967295
 8002688:	f000 f90b 	bl	80028a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800268c:	4a06      	ldr	r2, [pc, #24]	; (80026a8 <HAL_InitTick+0x5c>)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	e000      	b.n	8002698 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
}
 8002698:	4618      	mov	r0, r3
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20000008 	.word	0x20000008
 80026a4:	20000010 	.word	0x20000010
 80026a8:	2000000c 	.word	0x2000000c

080026ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <HAL_IncTick+0x1c>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	4b05      	ldr	r3, [pc, #20]	; (80026cc <HAL_IncTick+0x20>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4413      	add	r3, r2
 80026bc:	4a03      	ldr	r2, [pc, #12]	; (80026cc <HAL_IncTick+0x20>)
 80026be:	6013      	str	r3, [r2, #0]
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr
 80026c8:	20000010 	.word	0x20000010
 80026cc:	20000378 	.word	0x20000378

080026d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return uwTick;
 80026d4:	4b02      	ldr	r3, [pc, #8]	; (80026e0 <HAL_GetTick+0x10>)
 80026d6:	681b      	ldr	r3, [r3, #0]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	20000378 	.word	0x20000378

080026e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026ec:	f7ff fff0 	bl	80026d0 <HAL_GetTick>
 80026f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fc:	d005      	beq.n	800270a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_Delay+0x44>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4413      	add	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800270a:	bf00      	nop
 800270c:	f7ff ffe0 	bl	80026d0 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	429a      	cmp	r2, r3
 800271a:	d8f7      	bhi.n	800270c <HAL_Delay+0x28>
  {
  }
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000010 	.word	0x20000010

0800272c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002748:	4013      	ands	r3, r2
 800274a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800275c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275e:	4a04      	ldr	r2, [pc, #16]	; (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	60d3      	str	r3, [r2, #12]
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <__NVIC_GetPriorityGrouping+0x18>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	f003 0307 	and.w	r3, r3, #7
}
 8002782:	4618      	mov	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	6039      	str	r1, [r7, #0]
 800279a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	db0a      	blt.n	80027ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	490c      	ldr	r1, [pc, #48]	; (80027dc <__NVIC_SetPriority+0x4c>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	0112      	lsls	r2, r2, #4
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	440b      	add	r3, r1
 80027b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b8:	e00a      	b.n	80027d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4908      	ldr	r1, [pc, #32]	; (80027e0 <__NVIC_SetPriority+0x50>)
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	3b04      	subs	r3, #4
 80027c8:	0112      	lsls	r2, r2, #4
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	440b      	add	r3, r1
 80027ce:	761a      	strb	r2, [r3, #24]
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000e100 	.word	0xe000e100
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b089      	sub	sp, #36	; 0x24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f1c3 0307 	rsb	r3, r3, #7
 80027fe:	2b04      	cmp	r3, #4
 8002800:	bf28      	it	cs
 8002802:	2304      	movcs	r3, #4
 8002804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3304      	adds	r3, #4
 800280a:	2b06      	cmp	r3, #6
 800280c:	d902      	bls.n	8002814 <NVIC_EncodePriority+0x30>
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3b03      	subs	r3, #3
 8002812:	e000      	b.n	8002816 <NVIC_EncodePriority+0x32>
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002818:	f04f 32ff 	mov.w	r2, #4294967295
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43da      	mvns	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	401a      	ands	r2, r3
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800282c:	f04f 31ff 	mov.w	r1, #4294967295
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	fa01 f303 	lsl.w	r3, r1, r3
 8002836:	43d9      	mvns	r1, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	4313      	orrs	r3, r2
         );
}
 800283e:	4618      	mov	r0, r3
 8002840:	3724      	adds	r7, #36	; 0x24
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr

08002848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3b01      	subs	r3, #1
 8002854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002858:	d301      	bcc.n	800285e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800285a:	2301      	movs	r3, #1
 800285c:	e00f      	b.n	800287e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800285e:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <SysTick_Config+0x40>)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3b01      	subs	r3, #1
 8002864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002866:	210f      	movs	r1, #15
 8002868:	f04f 30ff 	mov.w	r0, #4294967295
 800286c:	f7ff ff90 	bl	8002790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <SysTick_Config+0x40>)
 8002872:	2200      	movs	r2, #0
 8002874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002876:	4b04      	ldr	r3, [pc, #16]	; (8002888 <SysTick_Config+0x40>)
 8002878:	2207      	movs	r2, #7
 800287a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	e000e010 	.word	0xe000e010

0800288c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff ff49 	bl	800272c <__NVIC_SetPriorityGrouping>
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b086      	sub	sp, #24
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4603      	mov	r3, r0
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028b4:	f7ff ff5e 	bl	8002774 <__NVIC_GetPriorityGrouping>
 80028b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	6978      	ldr	r0, [r7, #20]
 80028c0:	f7ff ff90 	bl	80027e4 <NVIC_EncodePriority>
 80028c4:	4602      	mov	r2, r0
 80028c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff5f 	bl	8002790 <__NVIC_SetPriority>
}
 80028d2:	bf00      	nop
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff ffb0 	bl	8002848 <SysTick_Config>
 80028e8:	4603      	mov	r3, r0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b08b      	sub	sp, #44	; 0x2c
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028fe:	2300      	movs	r3, #0
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002902:	2300      	movs	r3, #0
 8002904:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002906:	e179      	b.n	8002bfc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002908:	2201      	movs	r2, #1
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	429a      	cmp	r2, r3
 8002922:	f040 8168 	bne.w	8002bf6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4a96      	ldr	r2, [pc, #600]	; (8002b84 <HAL_GPIO_Init+0x290>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d05e      	beq.n	80029ee <HAL_GPIO_Init+0xfa>
 8002930:	4a94      	ldr	r2, [pc, #592]	; (8002b84 <HAL_GPIO_Init+0x290>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d875      	bhi.n	8002a22 <HAL_GPIO_Init+0x12e>
 8002936:	4a94      	ldr	r2, [pc, #592]	; (8002b88 <HAL_GPIO_Init+0x294>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d058      	beq.n	80029ee <HAL_GPIO_Init+0xfa>
 800293c:	4a92      	ldr	r2, [pc, #584]	; (8002b88 <HAL_GPIO_Init+0x294>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d86f      	bhi.n	8002a22 <HAL_GPIO_Init+0x12e>
 8002942:	4a92      	ldr	r2, [pc, #584]	; (8002b8c <HAL_GPIO_Init+0x298>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d052      	beq.n	80029ee <HAL_GPIO_Init+0xfa>
 8002948:	4a90      	ldr	r2, [pc, #576]	; (8002b8c <HAL_GPIO_Init+0x298>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d869      	bhi.n	8002a22 <HAL_GPIO_Init+0x12e>
 800294e:	4a90      	ldr	r2, [pc, #576]	; (8002b90 <HAL_GPIO_Init+0x29c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d04c      	beq.n	80029ee <HAL_GPIO_Init+0xfa>
 8002954:	4a8e      	ldr	r2, [pc, #568]	; (8002b90 <HAL_GPIO_Init+0x29c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d863      	bhi.n	8002a22 <HAL_GPIO_Init+0x12e>
 800295a:	4a8e      	ldr	r2, [pc, #568]	; (8002b94 <HAL_GPIO_Init+0x2a0>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d046      	beq.n	80029ee <HAL_GPIO_Init+0xfa>
 8002960:	4a8c      	ldr	r2, [pc, #560]	; (8002b94 <HAL_GPIO_Init+0x2a0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d85d      	bhi.n	8002a22 <HAL_GPIO_Init+0x12e>
 8002966:	2b12      	cmp	r3, #18
 8002968:	d82a      	bhi.n	80029c0 <HAL_GPIO_Init+0xcc>
 800296a:	2b12      	cmp	r3, #18
 800296c:	d859      	bhi.n	8002a22 <HAL_GPIO_Init+0x12e>
 800296e:	a201      	add	r2, pc, #4	; (adr r2, 8002974 <HAL_GPIO_Init+0x80>)
 8002970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002974:	080029ef 	.word	0x080029ef
 8002978:	080029c9 	.word	0x080029c9
 800297c:	080029db 	.word	0x080029db
 8002980:	08002a1d 	.word	0x08002a1d
 8002984:	08002a23 	.word	0x08002a23
 8002988:	08002a23 	.word	0x08002a23
 800298c:	08002a23 	.word	0x08002a23
 8002990:	08002a23 	.word	0x08002a23
 8002994:	08002a23 	.word	0x08002a23
 8002998:	08002a23 	.word	0x08002a23
 800299c:	08002a23 	.word	0x08002a23
 80029a0:	08002a23 	.word	0x08002a23
 80029a4:	08002a23 	.word	0x08002a23
 80029a8:	08002a23 	.word	0x08002a23
 80029ac:	08002a23 	.word	0x08002a23
 80029b0:	08002a23 	.word	0x08002a23
 80029b4:	08002a23 	.word	0x08002a23
 80029b8:	080029d1 	.word	0x080029d1
 80029bc:	080029e5 	.word	0x080029e5
 80029c0:	4a75      	ldr	r2, [pc, #468]	; (8002b98 <HAL_GPIO_Init+0x2a4>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d013      	beq.n	80029ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029c6:	e02c      	b.n	8002a22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	623b      	str	r3, [r7, #32]
          break;
 80029ce:	e029      	b.n	8002a24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	3304      	adds	r3, #4
 80029d6:	623b      	str	r3, [r7, #32]
          break;
 80029d8:	e024      	b.n	8002a24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	3308      	adds	r3, #8
 80029e0:	623b      	str	r3, [r7, #32]
          break;
 80029e2:	e01f      	b.n	8002a24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	330c      	adds	r3, #12
 80029ea:	623b      	str	r3, [r7, #32]
          break;
 80029ec:	e01a      	b.n	8002a24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d102      	bne.n	80029fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029f6:	2304      	movs	r3, #4
 80029f8:	623b      	str	r3, [r7, #32]
          break;
 80029fa:	e013      	b.n	8002a24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d105      	bne.n	8002a10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a04:	2308      	movs	r3, #8
 8002a06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69fa      	ldr	r2, [r7, #28]
 8002a0c:	611a      	str	r2, [r3, #16]
          break;
 8002a0e:	e009      	b.n	8002a24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a10:	2308      	movs	r3, #8
 8002a12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69fa      	ldr	r2, [r7, #28]
 8002a18:	615a      	str	r2, [r3, #20]
          break;
 8002a1a:	e003      	b.n	8002a24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	623b      	str	r3, [r7, #32]
          break;
 8002a20:	e000      	b.n	8002a24 <HAL_GPIO_Init+0x130>
          break;
 8002a22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	2bff      	cmp	r3, #255	; 0xff
 8002a28:	d801      	bhi.n	8002a2e <HAL_GPIO_Init+0x13a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	e001      	b.n	8002a32 <HAL_GPIO_Init+0x13e>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3304      	adds	r3, #4
 8002a32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	2bff      	cmp	r3, #255	; 0xff
 8002a38:	d802      	bhi.n	8002a40 <HAL_GPIO_Init+0x14c>
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	e002      	b.n	8002a46 <HAL_GPIO_Init+0x152>
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	3b08      	subs	r3, #8
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	210f      	movs	r1, #15
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	fa01 f303 	lsl.w	r3, r1, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	401a      	ands	r2, r3
 8002a58:	6a39      	ldr	r1, [r7, #32]
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a60:	431a      	orrs	r2, r3
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 80c1 	beq.w	8002bf6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a74:	4b49      	ldr	r3, [pc, #292]	; (8002b9c <HAL_GPIO_Init+0x2a8>)
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	4a48      	ldr	r2, [pc, #288]	; (8002b9c <HAL_GPIO_Init+0x2a8>)
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	6193      	str	r3, [r2, #24]
 8002a80:	4b46      	ldr	r3, [pc, #280]	; (8002b9c <HAL_GPIO_Init+0x2a8>)
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a8c:	4a44      	ldr	r2, [pc, #272]	; (8002ba0 <HAL_GPIO_Init+0x2ac>)
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	089b      	lsrs	r3, r3, #2
 8002a92:	3302      	adds	r3, #2
 8002a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	220f      	movs	r2, #15
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4013      	ands	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a3c      	ldr	r2, [pc, #240]	; (8002ba4 <HAL_GPIO_Init+0x2b0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d01f      	beq.n	8002af8 <HAL_GPIO_Init+0x204>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a3b      	ldr	r2, [pc, #236]	; (8002ba8 <HAL_GPIO_Init+0x2b4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d019      	beq.n	8002af4 <HAL_GPIO_Init+0x200>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a3a      	ldr	r2, [pc, #232]	; (8002bac <HAL_GPIO_Init+0x2b8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d013      	beq.n	8002af0 <HAL_GPIO_Init+0x1fc>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a39      	ldr	r2, [pc, #228]	; (8002bb0 <HAL_GPIO_Init+0x2bc>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d00d      	beq.n	8002aec <HAL_GPIO_Init+0x1f8>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a38      	ldr	r2, [pc, #224]	; (8002bb4 <HAL_GPIO_Init+0x2c0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d007      	beq.n	8002ae8 <HAL_GPIO_Init+0x1f4>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a37      	ldr	r2, [pc, #220]	; (8002bb8 <HAL_GPIO_Init+0x2c4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d101      	bne.n	8002ae4 <HAL_GPIO_Init+0x1f0>
 8002ae0:	2305      	movs	r3, #5
 8002ae2:	e00a      	b.n	8002afa <HAL_GPIO_Init+0x206>
 8002ae4:	2306      	movs	r3, #6
 8002ae6:	e008      	b.n	8002afa <HAL_GPIO_Init+0x206>
 8002ae8:	2304      	movs	r3, #4
 8002aea:	e006      	b.n	8002afa <HAL_GPIO_Init+0x206>
 8002aec:	2303      	movs	r3, #3
 8002aee:	e004      	b.n	8002afa <HAL_GPIO_Init+0x206>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e002      	b.n	8002afa <HAL_GPIO_Init+0x206>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <HAL_GPIO_Init+0x206>
 8002af8:	2300      	movs	r3, #0
 8002afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afc:	f002 0203 	and.w	r2, r2, #3
 8002b00:	0092      	lsls	r2, r2, #2
 8002b02:	4093      	lsls	r3, r2
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b0a:	4925      	ldr	r1, [pc, #148]	; (8002ba0 <HAL_GPIO_Init+0x2ac>)
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	089b      	lsrs	r3, r3, #2
 8002b10:	3302      	adds	r3, #2
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d006      	beq.n	8002b32 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b24:	4b25      	ldr	r3, [pc, #148]	; (8002bbc <HAL_GPIO_Init+0x2c8>)
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	4924      	ldr	r1, [pc, #144]	; (8002bbc <HAL_GPIO_Init+0x2c8>)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	608b      	str	r3, [r1, #8]
 8002b30:	e006      	b.n	8002b40 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b32:	4b22      	ldr	r3, [pc, #136]	; (8002bbc <HAL_GPIO_Init+0x2c8>)
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	4920      	ldr	r1, [pc, #128]	; (8002bbc <HAL_GPIO_Init+0x2c8>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d006      	beq.n	8002b5a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b4c:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <HAL_GPIO_Init+0x2c8>)
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	491a      	ldr	r1, [pc, #104]	; (8002bbc <HAL_GPIO_Init+0x2c8>)
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60cb      	str	r3, [r1, #12]
 8002b58:	e006      	b.n	8002b68 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b5a:	4b18      	ldr	r3, [pc, #96]	; (8002bbc <HAL_GPIO_Init+0x2c8>)
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	43db      	mvns	r3, r3
 8002b62:	4916      	ldr	r1, [pc, #88]	; (8002bbc <HAL_GPIO_Init+0x2c8>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d025      	beq.n	8002bc0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b74:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <HAL_GPIO_Init+0x2c8>)
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	4910      	ldr	r1, [pc, #64]	; (8002bbc <HAL_GPIO_Init+0x2c8>)
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	604b      	str	r3, [r1, #4]
 8002b80:	e025      	b.n	8002bce <HAL_GPIO_Init+0x2da>
 8002b82:	bf00      	nop
 8002b84:	10320000 	.word	0x10320000
 8002b88:	10310000 	.word	0x10310000
 8002b8c:	10220000 	.word	0x10220000
 8002b90:	10210000 	.word	0x10210000
 8002b94:	10120000 	.word	0x10120000
 8002b98:	10110000 	.word	0x10110000
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	40010000 	.word	0x40010000
 8002ba4:	40010800 	.word	0x40010800
 8002ba8:	40010c00 	.word	0x40010c00
 8002bac:	40011000 	.word	0x40011000
 8002bb0:	40011400 	.word	0x40011400
 8002bb4:	40011800 	.word	0x40011800
 8002bb8:	40011c00 	.word	0x40011c00
 8002bbc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bc0:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <HAL_GPIO_Init+0x324>)
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	4913      	ldr	r1, [pc, #76]	; (8002c18 <HAL_GPIO_Init+0x324>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d006      	beq.n	8002be8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002bda:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <HAL_GPIO_Init+0x324>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	490e      	ldr	r1, [pc, #56]	; (8002c18 <HAL_GPIO_Init+0x324>)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]
 8002be6:	e006      	b.n	8002bf6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_GPIO_Init+0x324>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	4909      	ldr	r1, [pc, #36]	; (8002c18 <HAL_GPIO_Init+0x324>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	fa22 f303 	lsr.w	r3, r2, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f47f ae7e 	bne.w	8002908 <HAL_GPIO_Init+0x14>
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	372c      	adds	r7, #44	; 0x2c
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	40010400 	.word	0x40010400

08002c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	807b      	strh	r3, [r7, #2]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c2c:	787b      	ldrb	r3, [r7, #1]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c32:	887a      	ldrh	r2, [r7, #2]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c38:	e003      	b.n	8002c42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c3a:	887b      	ldrh	r3, [r7, #2]
 8002c3c:	041a      	lsls	r2, r3, #16
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	611a      	str	r2, [r3, #16]
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c5e:	887a      	ldrh	r2, [r7, #2]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4013      	ands	r3, r2
 8002c64:	041a      	lsls	r2, r3, #16
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	43d9      	mvns	r1, r3
 8002c6a:	887b      	ldrh	r3, [r7, #2]
 8002c6c:	400b      	ands	r3, r1
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	611a      	str	r2, [r3, #16]
}
 8002c74:	bf00      	nop
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr
	...

08002c80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e12b      	b.n	8002eea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d106      	bne.n	8002cac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff fa86 	bl	80021b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2224      	movs	r2, #36	; 0x24
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0201 	bic.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ce2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ce4:	f001 fbca 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 8002ce8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	4a81      	ldr	r2, [pc, #516]	; (8002ef4 <HAL_I2C_Init+0x274>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d807      	bhi.n	8002d04 <HAL_I2C_Init+0x84>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4a80      	ldr	r2, [pc, #512]	; (8002ef8 <HAL_I2C_Init+0x278>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	bf94      	ite	ls
 8002cfc:	2301      	movls	r3, #1
 8002cfe:	2300      	movhi	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	e006      	b.n	8002d12 <HAL_I2C_Init+0x92>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4a7d      	ldr	r2, [pc, #500]	; (8002efc <HAL_I2C_Init+0x27c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	bf94      	ite	ls
 8002d0c:	2301      	movls	r3, #1
 8002d0e:	2300      	movhi	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e0e7      	b.n	8002eea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4a78      	ldr	r2, [pc, #480]	; (8002f00 <HAL_I2C_Init+0x280>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	0c9b      	lsrs	r3, r3, #18
 8002d24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	4a6a      	ldr	r2, [pc, #424]	; (8002ef4 <HAL_I2C_Init+0x274>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d802      	bhi.n	8002d54 <HAL_I2C_Init+0xd4>
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	3301      	adds	r3, #1
 8002d52:	e009      	b.n	8002d68 <HAL_I2C_Init+0xe8>
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d5a:	fb02 f303 	mul.w	r3, r2, r3
 8002d5e:	4a69      	ldr	r2, [pc, #420]	; (8002f04 <HAL_I2C_Init+0x284>)
 8002d60:	fba2 2303 	umull	r2, r3, r2, r3
 8002d64:	099b      	lsrs	r3, r3, #6
 8002d66:	3301      	adds	r3, #1
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	430b      	orrs	r3, r1
 8002d6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	495c      	ldr	r1, [pc, #368]	; (8002ef4 <HAL_I2C_Init+0x274>)
 8002d84:	428b      	cmp	r3, r1
 8002d86:	d819      	bhi.n	8002dbc <HAL_I2C_Init+0x13c>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1e59      	subs	r1, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d96:	1c59      	adds	r1, r3, #1
 8002d98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d9c:	400b      	ands	r3, r1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <HAL_I2C_Init+0x138>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1e59      	subs	r1, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	fbb1 f3f3 	udiv	r3, r1, r3
 8002db0:	3301      	adds	r3, #1
 8002db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db6:	e051      	b.n	8002e5c <HAL_I2C_Init+0x1dc>
 8002db8:	2304      	movs	r3, #4
 8002dba:	e04f      	b.n	8002e5c <HAL_I2C_Init+0x1dc>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d111      	bne.n	8002de8 <HAL_I2C_Init+0x168>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1e58      	subs	r0, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6859      	ldr	r1, [r3, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	440b      	add	r3, r1
 8002dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf0c      	ite	eq
 8002de0:	2301      	moveq	r3, #1
 8002de2:	2300      	movne	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	e012      	b.n	8002e0e <HAL_I2C_Init+0x18e>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	1e58      	subs	r0, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6859      	ldr	r1, [r3, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	0099      	lsls	r1, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dfe:	3301      	adds	r3, #1
 8002e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	bf0c      	ite	eq
 8002e08:	2301      	moveq	r3, #1
 8002e0a:	2300      	movne	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_Init+0x196>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e022      	b.n	8002e5c <HAL_I2C_Init+0x1dc>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10e      	bne.n	8002e3c <HAL_I2C_Init+0x1bc>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	1e58      	subs	r0, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6859      	ldr	r1, [r3, #4]
 8002e26:	460b      	mov	r3, r1
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	440b      	add	r3, r1
 8002e2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e30:	3301      	adds	r3, #1
 8002e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e3a:	e00f      	b.n	8002e5c <HAL_I2C_Init+0x1dc>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1e58      	subs	r0, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6859      	ldr	r1, [r3, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	0099      	lsls	r1, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e52:	3301      	adds	r3, #1
 8002e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	6809      	ldr	r1, [r1, #0]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69da      	ldr	r2, [r3, #28]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6911      	ldr	r1, [r2, #16]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68d2      	ldr	r2, [r2, #12]
 8002e96:	4311      	orrs	r1, r2
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	000186a0 	.word	0x000186a0
 8002ef8:	001e847f 	.word	0x001e847f
 8002efc:	003d08ff 	.word	0x003d08ff
 8002f00:	431bde83 	.word	0x431bde83
 8002f04:	10624dd3 	.word	0x10624dd3

08002f08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af02      	add	r7, sp, #8
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	607a      	str	r2, [r7, #4]
 8002f12:	461a      	mov	r2, r3
 8002f14:	460b      	mov	r3, r1
 8002f16:	817b      	strh	r3, [r7, #10]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f1c:	f7ff fbd8 	bl	80026d0 <HAL_GetTick>
 8002f20:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b20      	cmp	r3, #32
 8002f2c:	f040 80e0 	bne.w	80030f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	2319      	movs	r3, #25
 8002f36:	2201      	movs	r2, #1
 8002f38:	4970      	ldr	r1, [pc, #448]	; (80030fc <HAL_I2C_Master_Transmit+0x1f4>)
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 fc9e 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f46:	2302      	movs	r3, #2
 8002f48:	e0d3      	b.n	80030f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_I2C_Master_Transmit+0x50>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e0cc      	b.n	80030f2 <HAL_I2C_Master_Transmit+0x1ea>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d007      	beq.n	8002f7e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0201 	orr.w	r2, r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2221      	movs	r2, #33	; 0x21
 8002f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2210      	movs	r2, #16
 8002f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	893a      	ldrh	r2, [r7, #8]
 8002fae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4a50      	ldr	r2, [pc, #320]	; (8003100 <HAL_I2C_Master_Transmit+0x1f8>)
 8002fbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fc0:	8979      	ldrh	r1, [r7, #10]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	6a3a      	ldr	r2, [r7, #32]
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 fb08 	bl	80035dc <I2C_MasterRequestWrite>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e08d      	b.n	80030f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002fec:	e066      	b.n	80030bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	6a39      	ldr	r1, [r7, #32]
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 fd5c 	bl	8003ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00d      	beq.n	800301a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	2b04      	cmp	r3, #4
 8003004:	d107      	bne.n	8003016 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003014:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e06b      	b.n	80030f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	781a      	ldrb	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003042:	3b01      	subs	r3, #1
 8003044:	b29a      	uxth	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b04      	cmp	r3, #4
 8003056:	d11b      	bne.n	8003090 <HAL_I2C_Master_Transmit+0x188>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305c:	2b00      	cmp	r3, #0
 800305e:	d017      	beq.n	8003090 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	781a      	ldrb	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307a:	b29b      	uxth	r3, r3
 800307c:	3b01      	subs	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	6a39      	ldr	r1, [r7, #32]
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 fd53 	bl	8003b40 <I2C_WaitOnBTFFlagUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00d      	beq.n	80030bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d107      	bne.n	80030b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e01a      	b.n	80030f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d194      	bne.n	8002fee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	e000      	b.n	80030f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030f0:	2302      	movs	r3, #2
  }
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	00100002 	.word	0x00100002
 8003100:	ffff0000 	.word	0xffff0000

08003104 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08c      	sub	sp, #48	; 0x30
 8003108:	af02      	add	r7, sp, #8
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	607a      	str	r2, [r7, #4]
 800310e:	461a      	mov	r2, r3
 8003110:	460b      	mov	r3, r1
 8003112:	817b      	strh	r3, [r7, #10]
 8003114:	4613      	mov	r3, r2
 8003116:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800311c:	f7ff fad8 	bl	80026d0 <HAL_GetTick>
 8003120:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b20      	cmp	r3, #32
 800312c:	f040 824b 	bne.w	80035c6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	2319      	movs	r3, #25
 8003136:	2201      	movs	r2, #1
 8003138:	497f      	ldr	r1, [pc, #508]	; (8003338 <HAL_I2C_Master_Receive+0x234>)
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fb9e 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003146:	2302      	movs	r3, #2
 8003148:	e23e      	b.n	80035c8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <HAL_I2C_Master_Receive+0x54>
 8003154:	2302      	movs	r3, #2
 8003156:	e237      	b.n	80035c8 <HAL_I2C_Master_Receive+0x4c4>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b01      	cmp	r3, #1
 800316c:	d007      	beq.n	800317e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f042 0201 	orr.w	r2, r2, #1
 800317c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800318c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2222      	movs	r2, #34	; 0x22
 8003192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2210      	movs	r2, #16
 800319a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	893a      	ldrh	r2, [r7, #8]
 80031ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4a5f      	ldr	r2, [pc, #380]	; (800333c <HAL_I2C_Master_Receive+0x238>)
 80031be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031c0:	8979      	ldrh	r1, [r7, #10]
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 fa8a 	bl	80036e0 <I2C_MasterRequestRead>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e1f8      	b.n	80035c8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d113      	bne.n	8003206 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031de:	2300      	movs	r3, #0
 80031e0:	61fb      	str	r3, [r7, #28]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	61fb      	str	r3, [r7, #28]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	61fb      	str	r3, [r7, #28]
 80031f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	e1cc      	b.n	80035a0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320a:	2b01      	cmp	r3, #1
 800320c:	d11e      	bne.n	800324c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800321c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800321e:	b672      	cpsid	i
}
 8003220:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003222:	2300      	movs	r3, #0
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	61bb      	str	r3, [r7, #24]
 8003236:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003246:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003248:	b662      	cpsie	i
}
 800324a:	e035      	b.n	80032b8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003250:	2b02      	cmp	r3, #2
 8003252:	d11e      	bne.n	8003292 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003262:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003264:	b672      	cpsid	i
}
 8003266:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800328c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800328e:	b662      	cpsie	i
}
 8003290:	e012      	b.n	80032b8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a2:	2300      	movs	r3, #0
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80032b8:	e172      	b.n	80035a0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032be:	2b03      	cmp	r3, #3
 80032c0:	f200 811f 	bhi.w	8003502 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d123      	bne.n	8003314 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 fc7d 	bl	8003bd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e173      	b.n	80035c8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691a      	ldr	r2, [r3, #16]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003308:	b29b      	uxth	r3, r3
 800330a:	3b01      	subs	r3, #1
 800330c:	b29a      	uxth	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003312:	e145      	b.n	80035a0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003318:	2b02      	cmp	r3, #2
 800331a:	d152      	bne.n	80033c2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003322:	2200      	movs	r2, #0
 8003324:	4906      	ldr	r1, [pc, #24]	; (8003340 <HAL_I2C_Master_Receive+0x23c>)
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 faa8 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d008      	beq.n	8003344 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e148      	b.n	80035c8 <HAL_I2C_Master_Receive+0x4c4>
 8003336:	bf00      	nop
 8003338:	00100002 	.word	0x00100002
 800333c:	ffff0000 	.word	0xffff0000
 8003340:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003344:	b672      	cpsid	i
}
 8003346:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003356:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003374:	3b01      	subs	r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003380:	b29b      	uxth	r3, r3
 8003382:	3b01      	subs	r3, #1
 8003384:	b29a      	uxth	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800338a:	b662      	cpsie	i
}
 800338c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033c0:	e0ee      	b.n	80035a0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c8:	2200      	movs	r2, #0
 80033ca:	4981      	ldr	r1, [pc, #516]	; (80035d0 <HAL_I2C_Master_Receive+0x4cc>)
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 fa55 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0f5      	b.n	80035c8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80033ec:	b672      	cpsid	i
}
 80033ee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	691a      	ldr	r2, [r3, #16]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340c:	3b01      	subs	r3, #1
 800340e:	b29a      	uxth	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003418:	b29b      	uxth	r3, r3
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003422:	4b6c      	ldr	r3, [pc, #432]	; (80035d4 <HAL_I2C_Master_Receive+0x4d0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	08db      	lsrs	r3, r3, #3
 8003428:	4a6b      	ldr	r2, [pc, #428]	; (80035d8 <HAL_I2C_Master_Receive+0x4d4>)
 800342a:	fba2 2303 	umull	r2, r3, r2, r3
 800342e:	0a1a      	lsrs	r2, r3, #8
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	00da      	lsls	r2, r3, #3
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	3b01      	subs	r3, #1
 8003440:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d118      	bne.n	800347a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2220      	movs	r2, #32
 8003452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f043 0220 	orr.w	r2, r3, #32
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800346a:	b662      	cpsie	i
}
 800346c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e0a6      	b.n	80035c8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b04      	cmp	r3, #4
 8003486:	d1d9      	bne.n	800343c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003496:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691a      	ldr	r2, [r3, #16]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80034ca:	b662      	cpsie	i
}
 80034cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003500:	e04e      	b.n	80035a0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003504:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 fb62 	bl	8003bd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e058      	b.n	80035c8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003532:	3b01      	subs	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353e:	b29b      	uxth	r3, r3
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b04      	cmp	r3, #4
 8003554:	d124      	bne.n	80035a0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355a:	2b03      	cmp	r3, #3
 800355c:	d107      	bne.n	800356e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800356c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358a:	3b01      	subs	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f47f ae88 	bne.w	80032ba <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	e000      	b.n	80035c8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80035c6:	2302      	movs	r3, #2
  }
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3728      	adds	r7, #40	; 0x28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	00010004 	.word	0x00010004
 80035d4:	20000008 	.word	0x20000008
 80035d8:	14f8b589 	.word	0x14f8b589

080035dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	607a      	str	r2, [r7, #4]
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	460b      	mov	r3, r1
 80035ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d006      	beq.n	8003606 <I2C_MasterRequestWrite+0x2a>
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d003      	beq.n	8003606 <I2C_MasterRequestWrite+0x2a>
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003604:	d108      	bne.n	8003618 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	e00b      	b.n	8003630 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	2b12      	cmp	r3, #18
 800361e:	d107      	bne.n	8003630 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800362e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f91d 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00d      	beq.n	8003664 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003656:	d103      	bne.n	8003660 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800365e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e035      	b.n	80036d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800366c:	d108      	bne.n	8003680 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800366e:	897b      	ldrh	r3, [r7, #10]
 8003670:	b2db      	uxtb	r3, r3
 8003672:	461a      	mov	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800367c:	611a      	str	r2, [r3, #16]
 800367e:	e01b      	b.n	80036b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003680:	897b      	ldrh	r3, [r7, #10]
 8003682:	11db      	asrs	r3, r3, #7
 8003684:	b2db      	uxtb	r3, r3
 8003686:	f003 0306 	and.w	r3, r3, #6
 800368a:	b2db      	uxtb	r3, r3
 800368c:	f063 030f 	orn	r3, r3, #15
 8003690:	b2da      	uxtb	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	490e      	ldr	r1, [pc, #56]	; (80036d8 <I2C_MasterRequestWrite+0xfc>)
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f966 	bl	8003970 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e010      	b.n	80036d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036ae:	897b      	ldrh	r3, [r7, #10]
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	4907      	ldr	r1, [pc, #28]	; (80036dc <I2C_MasterRequestWrite+0x100>)
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 f956 	bl	8003970 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	00010008 	.word	0x00010008
 80036dc:	00010002 	.word	0x00010002

080036e0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af02      	add	r7, sp, #8
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	607a      	str	r2, [r7, #4]
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	460b      	mov	r3, r1
 80036ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003704:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2b08      	cmp	r3, #8
 800370a:	d006      	beq.n	800371a <I2C_MasterRequestRead+0x3a>
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d003      	beq.n	800371a <I2C_MasterRequestRead+0x3a>
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003718:	d108      	bne.n	800372c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	e00b      	b.n	8003744 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	2b11      	cmp	r3, #17
 8003732:	d107      	bne.n	8003744 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003742:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f893 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00d      	beq.n	8003778 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800376a:	d103      	bne.n	8003774 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003772:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e079      	b.n	800386c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003780:	d108      	bne.n	8003794 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003782:	897b      	ldrh	r3, [r7, #10]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	f043 0301 	orr.w	r3, r3, #1
 800378a:	b2da      	uxtb	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	611a      	str	r2, [r3, #16]
 8003792:	e05f      	b.n	8003854 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003794:	897b      	ldrh	r3, [r7, #10]
 8003796:	11db      	asrs	r3, r3, #7
 8003798:	b2db      	uxtb	r3, r3
 800379a:	f003 0306 	and.w	r3, r3, #6
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	f063 030f 	orn	r3, r3, #15
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	4930      	ldr	r1, [pc, #192]	; (8003874 <I2C_MasterRequestRead+0x194>)
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 f8dc 	bl	8003970 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e054      	b.n	800386c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037c2:	897b      	ldrh	r3, [r7, #10]
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	4929      	ldr	r1, [pc, #164]	; (8003878 <I2C_MasterRequestRead+0x198>)
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 f8cc 	bl	8003970 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e044      	b.n	800386c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e2:	2300      	movs	r3, #0
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003806:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f831 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00d      	beq.n	800383c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800382e:	d103      	bne.n	8003838 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003836:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e017      	b.n	800386c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800383c:	897b      	ldrh	r3, [r7, #10]
 800383e:	11db      	asrs	r3, r3, #7
 8003840:	b2db      	uxtb	r3, r3
 8003842:	f003 0306 	and.w	r3, r3, #6
 8003846:	b2db      	uxtb	r3, r3
 8003848:	f063 030e 	orn	r3, r3, #14
 800384c:	b2da      	uxtb	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	4907      	ldr	r1, [pc, #28]	; (8003878 <I2C_MasterRequestRead+0x198>)
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f888 	bl	8003970 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	00010008 	.word	0x00010008
 8003878:	00010002 	.word	0x00010002

0800387c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	603b      	str	r3, [r7, #0]
 8003888:	4613      	mov	r3, r2
 800388a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800388c:	e048      	b.n	8003920 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003894:	d044      	beq.n	8003920 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003896:	f7fe ff1b 	bl	80026d0 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d302      	bcc.n	80038ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d139      	bne.n	8003920 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	0c1b      	lsrs	r3, r3, #16
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d10d      	bne.n	80038d2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	43da      	mvns	r2, r3
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	4013      	ands	r3, r2
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	461a      	mov	r2, r3
 80038d0:	e00c      	b.n	80038ec <I2C_WaitOnFlagUntilTimeout+0x70>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	43da      	mvns	r2, r3
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	4013      	ands	r3, r2
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	bf0c      	ite	eq
 80038e4:	2301      	moveq	r3, #1
 80038e6:	2300      	movne	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	461a      	mov	r2, r3
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d116      	bne.n	8003920 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	f043 0220 	orr.w	r2, r3, #32
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e023      	b.n	8003968 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	0c1b      	lsrs	r3, r3, #16
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b01      	cmp	r3, #1
 8003928:	d10d      	bne.n	8003946 <I2C_WaitOnFlagUntilTimeout+0xca>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	43da      	mvns	r2, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	4013      	ands	r3, r2
 8003936:	b29b      	uxth	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	bf0c      	ite	eq
 800393c:	2301      	moveq	r3, #1
 800393e:	2300      	movne	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	461a      	mov	r2, r3
 8003944:	e00c      	b.n	8003960 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	43da      	mvns	r2, r3
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	4013      	ands	r3, r2
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	bf0c      	ite	eq
 8003958:	2301      	moveq	r3, #1
 800395a:	2300      	movne	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	461a      	mov	r2, r3
 8003960:	79fb      	ldrb	r3, [r7, #7]
 8003962:	429a      	cmp	r2, r3
 8003964:	d093      	beq.n	800388e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800397e:	e071      	b.n	8003a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800398e:	d123      	bne.n	80039d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800399e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	f043 0204 	orr.w	r2, r3, #4
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e067      	b.n	8003aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039de:	d041      	beq.n	8003a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e0:	f7fe fe76 	bl	80026d0 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d302      	bcc.n	80039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d136      	bne.n	8003a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	0c1b      	lsrs	r3, r3, #16
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d10c      	bne.n	8003a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	43da      	mvns	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	bf14      	ite	ne
 8003a12:	2301      	movne	r3, #1
 8003a14:	2300      	moveq	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	e00b      	b.n	8003a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	43da      	mvns	r2, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	4013      	ands	r3, r2
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bf14      	ite	ne
 8003a2c:	2301      	movne	r3, #1
 8003a2e:	2300      	moveq	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d016      	beq.n	8003a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	f043 0220 	orr.w	r2, r3, #32
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e021      	b.n	8003aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	0c1b      	lsrs	r3, r3, #16
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d10c      	bne.n	8003a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	43da      	mvns	r2, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	bf14      	ite	ne
 8003a80:	2301      	movne	r3, #1
 8003a82:	2300      	moveq	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	e00b      	b.n	8003aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	43da      	mvns	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4013      	ands	r3, r2
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	bf14      	ite	ne
 8003a9a:	2301      	movne	r3, #1
 8003a9c:	2300      	moveq	r3, #0
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f47f af6d 	bne.w	8003980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003abc:	e034      	b.n	8003b28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 f8e3 	bl	8003c8a <I2C_IsAcknowledgeFailed>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e034      	b.n	8003b38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad4:	d028      	beq.n	8003b28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad6:	f7fe fdfb 	bl	80026d0 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d302      	bcc.n	8003aec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d11d      	bne.n	8003b28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af6:	2b80      	cmp	r3, #128	; 0x80
 8003af8:	d016      	beq.n	8003b28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	f043 0220 	orr.w	r2, r3, #32
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e007      	b.n	8003b38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b32:	2b80      	cmp	r3, #128	; 0x80
 8003b34:	d1c3      	bne.n	8003abe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b4c:	e034      	b.n	8003bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f89b 	bl	8003c8a <I2C_IsAcknowledgeFailed>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e034      	b.n	8003bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b64:	d028      	beq.n	8003bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b66:	f7fe fdb3 	bl	80026d0 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d302      	bcc.n	8003b7c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d11d      	bne.n	8003bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d016      	beq.n	8003bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	f043 0220 	orr.w	r2, r3, #32
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e007      	b.n	8003bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d1c3      	bne.n	8003b4e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bdc:	e049      	b.n	8003c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	f003 0310 	and.w	r3, r3, #16
 8003be8:	2b10      	cmp	r3, #16
 8003bea:	d119      	bne.n	8003c20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f06f 0210 	mvn.w	r2, #16
 8003bf4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e030      	b.n	8003c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c20:	f7fe fd56 	bl	80026d0 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d302      	bcc.n	8003c36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d11d      	bne.n	8003c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c40:	2b40      	cmp	r3, #64	; 0x40
 8003c42:	d016      	beq.n	8003c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f043 0220 	orr.w	r2, r3, #32
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e007      	b.n	8003c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7c:	2b40      	cmp	r3, #64	; 0x40
 8003c7e:	d1ae      	bne.n	8003bde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca0:	d11b      	bne.n	8003cda <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003caa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	f043 0204 	orr.w	r2, r3, #4
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr
	...

08003ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e272      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 8087 	beq.w	8003e16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d08:	4b92      	ldr	r3, [pc, #584]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 030c 	and.w	r3, r3, #12
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d00c      	beq.n	8003d2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d14:	4b8f      	ldr	r3, [pc, #572]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 030c 	and.w	r3, r3, #12
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d112      	bne.n	8003d46 <HAL_RCC_OscConfig+0x5e>
 8003d20:	4b8c      	ldr	r3, [pc, #560]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2c:	d10b      	bne.n	8003d46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2e:	4b89      	ldr	r3, [pc, #548]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d06c      	beq.n	8003e14 <HAL_RCC_OscConfig+0x12c>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d168      	bne.n	8003e14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e24c      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d4e:	d106      	bne.n	8003d5e <HAL_RCC_OscConfig+0x76>
 8003d50:	4b80      	ldr	r3, [pc, #512]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a7f      	ldr	r2, [pc, #508]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	e02e      	b.n	8003dbc <HAL_RCC_OscConfig+0xd4>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCC_OscConfig+0x98>
 8003d66:	4b7b      	ldr	r3, [pc, #492]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a7a      	ldr	r2, [pc, #488]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	4b78      	ldr	r3, [pc, #480]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a77      	ldr	r2, [pc, #476]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e01d      	b.n	8003dbc <HAL_RCC_OscConfig+0xd4>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCC_OscConfig+0xbc>
 8003d8a:	4b72      	ldr	r3, [pc, #456]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a71      	ldr	r2, [pc, #452]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	4b6f      	ldr	r3, [pc, #444]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a6e      	ldr	r2, [pc, #440]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	e00b      	b.n	8003dbc <HAL_RCC_OscConfig+0xd4>
 8003da4:	4b6b      	ldr	r3, [pc, #428]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a6a      	ldr	r2, [pc, #424]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	4b68      	ldr	r3, [pc, #416]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a67      	ldr	r2, [pc, #412]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d013      	beq.n	8003dec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc4:	f7fe fc84 	bl	80026d0 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dcc:	f7fe fc80 	bl	80026d0 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b64      	cmp	r3, #100	; 0x64
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e200      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dde:	4b5d      	ldr	r3, [pc, #372]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCC_OscConfig+0xe4>
 8003dea:	e014      	b.n	8003e16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dec:	f7fe fc70 	bl	80026d0 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003df4:	f7fe fc6c 	bl	80026d0 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b64      	cmp	r3, #100	; 0x64
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e1ec      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e06:	4b53      	ldr	r3, [pc, #332]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0x10c>
 8003e12:	e000      	b.n	8003e16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d063      	beq.n	8003eea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e22:	4b4c      	ldr	r3, [pc, #304]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00b      	beq.n	8003e46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e2e:	4b49      	ldr	r3, [pc, #292]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d11c      	bne.n	8003e74 <HAL_RCC_OscConfig+0x18c>
 8003e3a:	4b46      	ldr	r3, [pc, #280]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d116      	bne.n	8003e74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e46:	4b43      	ldr	r3, [pc, #268]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d005      	beq.n	8003e5e <HAL_RCC_OscConfig+0x176>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d001      	beq.n	8003e5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e1c0      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5e:	4b3d      	ldr	r3, [pc, #244]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4939      	ldr	r1, [pc, #228]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e72:	e03a      	b.n	8003eea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d020      	beq.n	8003ebe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e7c:	4b36      	ldr	r3, [pc, #216]	; (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e82:	f7fe fc25 	bl	80026d0 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e8a:	f7fe fc21 	bl	80026d0 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e1a1      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9c:	4b2d      	ldr	r3, [pc, #180]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0f0      	beq.n	8003e8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea8:	4b2a      	ldr	r3, [pc, #168]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4927      	ldr	r1, [pc, #156]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	600b      	str	r3, [r1, #0]
 8003ebc:	e015      	b.n	8003eea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ebe:	4b26      	ldr	r3, [pc, #152]	; (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec4:	f7fe fc04 	bl	80026d0 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ecc:	f7fe fc00 	bl	80026d0 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e180      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ede:	4b1d      	ldr	r3, [pc, #116]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d03a      	beq.n	8003f6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d019      	beq.n	8003f32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efe:	4b17      	ldr	r3, [pc, #92]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f04:	f7fe fbe4 	bl	80026d0 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f0c:	f7fe fbe0 	bl	80026d0 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e160      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f2a:	2001      	movs	r0, #1
 8003f2c:	f000 face 	bl	80044cc <RCC_Delay>
 8003f30:	e01c      	b.n	8003f6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f32:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f38:	f7fe fbca 	bl	80026d0 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f3e:	e00f      	b.n	8003f60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f40:	f7fe fbc6 	bl	80026d0 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d908      	bls.n	8003f60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e146      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
 8003f52:	bf00      	nop
 8003f54:	40021000 	.word	0x40021000
 8003f58:	42420000 	.word	0x42420000
 8003f5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f60:	4b92      	ldr	r3, [pc, #584]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e9      	bne.n	8003f40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80a6 	beq.w	80040c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f7e:	4b8b      	ldr	r3, [pc, #556]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10d      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f8a:	4b88      	ldr	r3, [pc, #544]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	4a87      	ldr	r2, [pc, #540]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f94:	61d3      	str	r3, [r2, #28]
 8003f96:	4b85      	ldr	r3, [pc, #532]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa6:	4b82      	ldr	r3, [pc, #520]	; (80041b0 <HAL_RCC_OscConfig+0x4c8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d118      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fb2:	4b7f      	ldr	r3, [pc, #508]	; (80041b0 <HAL_RCC_OscConfig+0x4c8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a7e      	ldr	r2, [pc, #504]	; (80041b0 <HAL_RCC_OscConfig+0x4c8>)
 8003fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fbe:	f7fe fb87 	bl	80026d0 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc6:	f7fe fb83 	bl	80026d0 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b64      	cmp	r3, #100	; 0x64
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e103      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd8:	4b75      	ldr	r3, [pc, #468]	; (80041b0 <HAL_RCC_OscConfig+0x4c8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0f0      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d106      	bne.n	8003ffa <HAL_RCC_OscConfig+0x312>
 8003fec:	4b6f      	ldr	r3, [pc, #444]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	4a6e      	ldr	r2, [pc, #440]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003ff2:	f043 0301 	orr.w	r3, r3, #1
 8003ff6:	6213      	str	r3, [r2, #32]
 8003ff8:	e02d      	b.n	8004056 <HAL_RCC_OscConfig+0x36e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10c      	bne.n	800401c <HAL_RCC_OscConfig+0x334>
 8004002:	4b6a      	ldr	r3, [pc, #424]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	4a69      	ldr	r2, [pc, #420]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004008:	f023 0301 	bic.w	r3, r3, #1
 800400c:	6213      	str	r3, [r2, #32]
 800400e:	4b67      	ldr	r3, [pc, #412]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	4a66      	ldr	r2, [pc, #408]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004014:	f023 0304 	bic.w	r3, r3, #4
 8004018:	6213      	str	r3, [r2, #32]
 800401a:	e01c      	b.n	8004056 <HAL_RCC_OscConfig+0x36e>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	2b05      	cmp	r3, #5
 8004022:	d10c      	bne.n	800403e <HAL_RCC_OscConfig+0x356>
 8004024:	4b61      	ldr	r3, [pc, #388]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	4a60      	ldr	r2, [pc, #384]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 800402a:	f043 0304 	orr.w	r3, r3, #4
 800402e:	6213      	str	r3, [r2, #32]
 8004030:	4b5e      	ldr	r3, [pc, #376]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	4a5d      	ldr	r2, [pc, #372]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	6213      	str	r3, [r2, #32]
 800403c:	e00b      	b.n	8004056 <HAL_RCC_OscConfig+0x36e>
 800403e:	4b5b      	ldr	r3, [pc, #364]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	4a5a      	ldr	r2, [pc, #360]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004044:	f023 0301 	bic.w	r3, r3, #1
 8004048:	6213      	str	r3, [r2, #32]
 800404a:	4b58      	ldr	r3, [pc, #352]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	4a57      	ldr	r2, [pc, #348]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004050:	f023 0304 	bic.w	r3, r3, #4
 8004054:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d015      	beq.n	800408a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800405e:	f7fe fb37 	bl	80026d0 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004064:	e00a      	b.n	800407c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004066:	f7fe fb33 	bl	80026d0 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	f241 3288 	movw	r2, #5000	; 0x1388
 8004074:	4293      	cmp	r3, r2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e0b1      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407c:	4b4b      	ldr	r3, [pc, #300]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0ee      	beq.n	8004066 <HAL_RCC_OscConfig+0x37e>
 8004088:	e014      	b.n	80040b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800408a:	f7fe fb21 	bl	80026d0 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004090:	e00a      	b.n	80040a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004092:	f7fe fb1d 	bl	80026d0 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e09b      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a8:	4b40      	ldr	r3, [pc, #256]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1ee      	bne.n	8004092 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040b4:	7dfb      	ldrb	r3, [r7, #23]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d105      	bne.n	80040c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ba:	4b3c      	ldr	r3, [pc, #240]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	4a3b      	ldr	r2, [pc, #236]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 80040c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 8087 	beq.w	80041de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040d0:	4b36      	ldr	r3, [pc, #216]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 030c 	and.w	r3, r3, #12
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d061      	beq.n	80041a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d146      	bne.n	8004172 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e4:	4b33      	ldr	r3, [pc, #204]	; (80041b4 <HAL_RCC_OscConfig+0x4cc>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ea:	f7fe faf1 	bl	80026d0 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f2:	f7fe faed 	bl	80026d0 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e06d      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004104:	4b29      	ldr	r3, [pc, #164]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1f0      	bne.n	80040f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004118:	d108      	bne.n	800412c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800411a:	4b24      	ldr	r3, [pc, #144]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	4921      	ldr	r1, [pc, #132]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004128:	4313      	orrs	r3, r2
 800412a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800412c:	4b1f      	ldr	r3, [pc, #124]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a19      	ldr	r1, [r3, #32]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	430b      	orrs	r3, r1
 800413e:	491b      	ldr	r1, [pc, #108]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004140:	4313      	orrs	r3, r2
 8004142:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004144:	4b1b      	ldr	r3, [pc, #108]	; (80041b4 <HAL_RCC_OscConfig+0x4cc>)
 8004146:	2201      	movs	r2, #1
 8004148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414a:	f7fe fac1 	bl	80026d0 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004152:	f7fe fabd 	bl	80026d0 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e03d      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004164:	4b11      	ldr	r3, [pc, #68]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0f0      	beq.n	8004152 <HAL_RCC_OscConfig+0x46a>
 8004170:	e035      	b.n	80041de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004172:	4b10      	ldr	r3, [pc, #64]	; (80041b4 <HAL_RCC_OscConfig+0x4cc>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004178:	f7fe faaa 	bl	80026d0 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004180:	f7fe faa6 	bl	80026d0 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e026      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004192:	4b06      	ldr	r3, [pc, #24]	; (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0x498>
 800419e:	e01e      	b.n	80041de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d107      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e019      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
 80041ac:	40021000 	.word	0x40021000
 80041b0:	40007000 	.word	0x40007000
 80041b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041b8:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <HAL_RCC_OscConfig+0x500>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d106      	bne.n	80041da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d001      	beq.n	80041de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40021000 	.word	0x40021000

080041ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0d0      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004200:	4b6a      	ldr	r3, [pc, #424]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d910      	bls.n	8004230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420e:	4b67      	ldr	r3, [pc, #412]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f023 0207 	bic.w	r2, r3, #7
 8004216:	4965      	ldr	r1, [pc, #404]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	4313      	orrs	r3, r2
 800421c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800421e:	4b63      	ldr	r3, [pc, #396]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d001      	beq.n	8004230 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0b8      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d020      	beq.n	800427e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d005      	beq.n	8004254 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004248:	4b59      	ldr	r3, [pc, #356]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4a58      	ldr	r2, [pc, #352]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800424e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004252:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0308 	and.w	r3, r3, #8
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004260:	4b53      	ldr	r3, [pc, #332]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	4a52      	ldr	r2, [pc, #328]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004266:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800426a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800426c:	4b50      	ldr	r3, [pc, #320]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	494d      	ldr	r1, [pc, #308]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800427a:	4313      	orrs	r3, r2
 800427c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d040      	beq.n	800430c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d107      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004292:	4b47      	ldr	r3, [pc, #284]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d115      	bne.n	80042ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e07f      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d107      	bne.n	80042ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042aa:	4b41      	ldr	r3, [pc, #260]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d109      	bne.n	80042ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e073      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ba:	4b3d      	ldr	r3, [pc, #244]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e06b      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ca:	4b39      	ldr	r3, [pc, #228]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f023 0203 	bic.w	r2, r3, #3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	4936      	ldr	r1, [pc, #216]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042dc:	f7fe f9f8 	bl	80026d0 <HAL_GetTick>
 80042e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e2:	e00a      	b.n	80042fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e4:	f7fe f9f4 	bl	80026d0 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e053      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fa:	4b2d      	ldr	r3, [pc, #180]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f003 020c 	and.w	r2, r3, #12
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	429a      	cmp	r2, r3
 800430a:	d1eb      	bne.n	80042e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800430c:	4b27      	ldr	r3, [pc, #156]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d210      	bcs.n	800433c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431a:	4b24      	ldr	r3, [pc, #144]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f023 0207 	bic.w	r2, r3, #7
 8004322:	4922      	ldr	r1, [pc, #136]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	4313      	orrs	r3, r2
 8004328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800432a:	4b20      	ldr	r3, [pc, #128]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d001      	beq.n	800433c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e032      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b00      	cmp	r3, #0
 8004346:	d008      	beq.n	800435a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004348:	4b19      	ldr	r3, [pc, #100]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	4916      	ldr	r1, [pc, #88]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004356:	4313      	orrs	r3, r2
 8004358:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d009      	beq.n	800437a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004366:	4b12      	ldr	r3, [pc, #72]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	490e      	ldr	r1, [pc, #56]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004376:	4313      	orrs	r3, r2
 8004378:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800437a:	f000 f821 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 800437e:	4602      	mov	r2, r0
 8004380:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	091b      	lsrs	r3, r3, #4
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	490a      	ldr	r1, [pc, #40]	; (80043b4 <HAL_RCC_ClockConfig+0x1c8>)
 800438c:	5ccb      	ldrb	r3, [r1, r3]
 800438e:	fa22 f303 	lsr.w	r3, r2, r3
 8004392:	4a09      	ldr	r2, [pc, #36]	; (80043b8 <HAL_RCC_ClockConfig+0x1cc>)
 8004394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004396:	4b09      	ldr	r3, [pc, #36]	; (80043bc <HAL_RCC_ClockConfig+0x1d0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f7fe f956 	bl	800264c <HAL_InitTick>

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40022000 	.word	0x40022000
 80043b0:	40021000 	.word	0x40021000
 80043b4:	0800a8ec 	.word	0x0800a8ec
 80043b8:	20000008 	.word	0x20000008
 80043bc:	2000000c 	.word	0x2000000c

080043c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	2300      	movs	r3, #0
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	2300      	movs	r3, #0
 80043d0:	617b      	str	r3, [r7, #20]
 80043d2:	2300      	movs	r3, #0
 80043d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043da:	4b1e      	ldr	r3, [pc, #120]	; (8004454 <HAL_RCC_GetSysClockFreq+0x94>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f003 030c 	and.w	r3, r3, #12
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d002      	beq.n	80043f0 <HAL_RCC_GetSysClockFreq+0x30>
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d003      	beq.n	80043f6 <HAL_RCC_GetSysClockFreq+0x36>
 80043ee:	e027      	b.n	8004440 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043f0:	4b19      	ldr	r3, [pc, #100]	; (8004458 <HAL_RCC_GetSysClockFreq+0x98>)
 80043f2:	613b      	str	r3, [r7, #16]
      break;
 80043f4:	e027      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	0c9b      	lsrs	r3, r3, #18
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	4a17      	ldr	r2, [pc, #92]	; (800445c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004400:	5cd3      	ldrb	r3, [r2, r3]
 8004402:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d010      	beq.n	8004430 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800440e:	4b11      	ldr	r3, [pc, #68]	; (8004454 <HAL_RCC_GetSysClockFreq+0x94>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	0c5b      	lsrs	r3, r3, #17
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	4a11      	ldr	r2, [pc, #68]	; (8004460 <HAL_RCC_GetSysClockFreq+0xa0>)
 800441a:	5cd3      	ldrb	r3, [r2, r3]
 800441c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a0d      	ldr	r2, [pc, #52]	; (8004458 <HAL_RCC_GetSysClockFreq+0x98>)
 8004422:	fb03 f202 	mul.w	r2, r3, r2
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	fbb2 f3f3 	udiv	r3, r2, r3
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	e004      	b.n	800443a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a0c      	ldr	r2, [pc, #48]	; (8004464 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004434:	fb02 f303 	mul.w	r3, r2, r3
 8004438:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	613b      	str	r3, [r7, #16]
      break;
 800443e:	e002      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004440:	4b05      	ldr	r3, [pc, #20]	; (8004458 <HAL_RCC_GetSysClockFreq+0x98>)
 8004442:	613b      	str	r3, [r7, #16]
      break;
 8004444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004446:	693b      	ldr	r3, [r7, #16]
}
 8004448:	4618      	mov	r0, r3
 800444a:	371c      	adds	r7, #28
 800444c:	46bd      	mov	sp, r7
 800444e:	bc80      	pop	{r7}
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40021000 	.word	0x40021000
 8004458:	007a1200 	.word	0x007a1200
 800445c:	0800a904 	.word	0x0800a904
 8004460:	0800a914 	.word	0x0800a914
 8004464:	003d0900 	.word	0x003d0900

08004468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800446c:	4b02      	ldr	r3, [pc, #8]	; (8004478 <HAL_RCC_GetHCLKFreq+0x10>)
 800446e:	681b      	ldr	r3, [r3, #0]
}
 8004470:	4618      	mov	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	bc80      	pop	{r7}
 8004476:	4770      	bx	lr
 8004478:	20000008 	.word	0x20000008

0800447c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004480:	f7ff fff2 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 8004484:	4602      	mov	r2, r0
 8004486:	4b05      	ldr	r3, [pc, #20]	; (800449c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	0a1b      	lsrs	r3, r3, #8
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	4903      	ldr	r1, [pc, #12]	; (80044a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004492:	5ccb      	ldrb	r3, [r1, r3]
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004498:	4618      	mov	r0, r3
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40021000 	.word	0x40021000
 80044a0:	0800a8fc 	.word	0x0800a8fc

080044a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044a8:	f7ff ffde 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 80044ac:	4602      	mov	r2, r0
 80044ae:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	0adb      	lsrs	r3, r3, #11
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	4903      	ldr	r1, [pc, #12]	; (80044c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ba:	5ccb      	ldrb	r3, [r1, r3]
 80044bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40021000 	.word	0x40021000
 80044c8:	0800a8fc 	.word	0x0800a8fc

080044cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80044d4:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <RCC_Delay+0x34>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a0a      	ldr	r2, [pc, #40]	; (8004504 <RCC_Delay+0x38>)
 80044da:	fba2 2303 	umull	r2, r3, r2, r3
 80044de:	0a5b      	lsrs	r3, r3, #9
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	fb02 f303 	mul.w	r3, r2, r3
 80044e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80044e8:	bf00      	nop
  }
  while (Delay --);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1e5a      	subs	r2, r3, #1
 80044ee:	60fa      	str	r2, [r7, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1f9      	bne.n	80044e8 <RCC_Delay+0x1c>
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr
 8004500:	20000008 	.word	0x20000008
 8004504:	10624dd3 	.word	0x10624dd3

08004508 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e076      	b.n	8004608 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	2b00      	cmp	r3, #0
 8004520:	d108      	bne.n	8004534 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800452a:	d009      	beq.n	8004540 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	61da      	str	r2, [r3, #28]
 8004532:	e005      	b.n	8004540 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fd fe6a 	bl	8002234 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004576:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004588:	431a      	orrs	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045b0:	431a      	orrs	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c4:	ea42 0103 	orr.w	r1, r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	0c1a      	lsrs	r2, r3, #16
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f002 0204 	and.w	r2, r2, #4
 80045e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69da      	ldr	r2, [r3, #28]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b088      	sub	sp, #32
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	603b      	str	r3, [r7, #0]
 800461c:	4613      	mov	r3, r2
 800461e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004620:	2300      	movs	r3, #0
 8004622:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800462a:	2b01      	cmp	r3, #1
 800462c:	d101      	bne.n	8004632 <HAL_SPI_Transmit+0x22>
 800462e:	2302      	movs	r3, #2
 8004630:	e12d      	b.n	800488e <HAL_SPI_Transmit+0x27e>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800463a:	f7fe f849 	bl	80026d0 <HAL_GetTick>
 800463e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004640:	88fb      	ldrh	r3, [r7, #6]
 8004642:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b01      	cmp	r3, #1
 800464e:	d002      	beq.n	8004656 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004650:	2302      	movs	r3, #2
 8004652:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004654:	e116      	b.n	8004884 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <HAL_SPI_Transmit+0x52>
 800465c:	88fb      	ldrh	r3, [r7, #6]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d102      	bne.n	8004668 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004666:	e10d      	b.n	8004884 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2203      	movs	r2, #3
 800466c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	88fa      	ldrh	r2, [r7, #6]
 8004680:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	88fa      	ldrh	r2, [r7, #6]
 8004686:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ae:	d10f      	bne.n	80046d0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046da:	2b40      	cmp	r3, #64	; 0x40
 80046dc:	d007      	beq.n	80046ee <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046f6:	d14f      	bne.n	8004798 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <HAL_SPI_Transmit+0xf6>
 8004700:	8afb      	ldrh	r3, [r7, #22]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d142      	bne.n	800478c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	881a      	ldrh	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004716:	1c9a      	adds	r2, r3, #2
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004720:	b29b      	uxth	r3, r3
 8004722:	3b01      	subs	r3, #1
 8004724:	b29a      	uxth	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800472a:	e02f      	b.n	800478c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b02      	cmp	r3, #2
 8004738:	d112      	bne.n	8004760 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	881a      	ldrh	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	1c9a      	adds	r2, r3, #2
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	86da      	strh	r2, [r3, #54]	; 0x36
 800475e:	e015      	b.n	800478c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004760:	f7fd ffb6 	bl	80026d0 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d803      	bhi.n	8004778 <HAL_SPI_Transmit+0x168>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004776:	d102      	bne.n	800477e <HAL_SPI_Transmit+0x16e>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800478a:	e07b      	b.n	8004884 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1ca      	bne.n	800472c <HAL_SPI_Transmit+0x11c>
 8004796:	e050      	b.n	800483a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <HAL_SPI_Transmit+0x196>
 80047a0:	8afb      	ldrh	r3, [r7, #22]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d144      	bne.n	8004830 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	330c      	adds	r3, #12
 80047b0:	7812      	ldrb	r2, [r2, #0]
 80047b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80047cc:	e030      	b.n	8004830 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d113      	bne.n	8004804 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	330c      	adds	r3, #12
 80047e6:	7812      	ldrb	r2, [r2, #0]
 80047e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	1c5a      	adds	r2, r3, #1
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	86da      	strh	r2, [r3, #54]	; 0x36
 8004802:	e015      	b.n	8004830 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004804:	f7fd ff64 	bl	80026d0 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d803      	bhi.n	800481c <HAL_SPI_Transmit+0x20c>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481a:	d102      	bne.n	8004822 <HAL_SPI_Transmit+0x212>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d106      	bne.n	8004830 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800482e:	e029      	b.n	8004884 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004834:	b29b      	uxth	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1c9      	bne.n	80047ce <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	6839      	ldr	r1, [r7, #0]
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 fbd8 	bl	8004ff4 <SPI_EndRxTxTransaction>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2220      	movs	r2, #32
 800484e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10a      	bne.n	800486e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004858:	2300      	movs	r3, #0
 800485a:	613b      	str	r3, [r7, #16]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	613b      	str	r3, [r7, #16]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	613b      	str	r3, [r7, #16]
 800486c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	77fb      	strb	r3, [r7, #31]
 800487a:	e003      	b.n	8004884 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800488c:	7ffb      	ldrb	r3, [r7, #31]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3720      	adds	r7, #32
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b088      	sub	sp, #32
 800489a:	af02      	add	r7, sp, #8
 800489c:	60f8      	str	r0, [r7, #12]
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	603b      	str	r3, [r7, #0]
 80048a2:	4613      	mov	r3, r2
 80048a4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d002      	beq.n	80048bc <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80048b6:	2302      	movs	r3, #2
 80048b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80048ba:	e0fb      	b.n	8004ab4 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048c4:	d112      	bne.n	80048ec <HAL_SPI_Receive+0x56>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10e      	bne.n	80048ec <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2204      	movs	r2, #4
 80048d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80048d6:	88fa      	ldrh	r2, [r7, #6]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	4613      	mov	r3, r2
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	68b9      	ldr	r1, [r7, #8]
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 f8ef 	bl	8004ac6 <HAL_SPI_TransmitReceive>
 80048e8:	4603      	mov	r3, r0
 80048ea:	e0e8      	b.n	8004abe <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <HAL_SPI_Receive+0x64>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e0e1      	b.n	8004abe <HAL_SPI_Receive+0x228>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004902:	f7fd fee5 	bl	80026d0 <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <HAL_SPI_Receive+0x7e>
 800490e:	88fb      	ldrh	r3, [r7, #6]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d102      	bne.n	800491a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004918:	e0cc      	b.n	8004ab4 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2204      	movs	r2, #4
 800491e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	88fa      	ldrh	r2, [r7, #6]
 8004932:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	88fa      	ldrh	r2, [r7, #6]
 8004938:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004960:	d10f      	bne.n	8004982 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004970:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004980:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498c:	2b40      	cmp	r3, #64	; 0x40
 800498e:	d007      	beq.n	80049a0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800499e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d16a      	bne.n	8004a7e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80049a8:	e032      	b.n	8004a10 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d115      	bne.n	80049e4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f103 020c 	add.w	r2, r3, #12
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c4:	7812      	ldrb	r2, [r2, #0]
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d8:	b29b      	uxth	r3, r3
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049e2:	e015      	b.n	8004a10 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049e4:	f7fd fe74 	bl	80026d0 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d803      	bhi.n	80049fc <HAL_SPI_Receive+0x166>
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fa:	d102      	bne.n	8004a02 <HAL_SPI_Receive+0x16c>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004a0e:	e051      	b.n	8004ab4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1c7      	bne.n	80049aa <HAL_SPI_Receive+0x114>
 8004a1a:	e035      	b.n	8004a88 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d113      	bne.n	8004a52 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68da      	ldr	r2, [r3, #12]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a34:	b292      	uxth	r2, r2
 8004a36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3c:	1c9a      	adds	r2, r3, #2
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a50:	e015      	b.n	8004a7e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a52:	f7fd fe3d 	bl	80026d0 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d803      	bhi.n	8004a6a <HAL_SPI_Receive+0x1d4>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a68:	d102      	bne.n	8004a70 <HAL_SPI_Receive+0x1da>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d106      	bne.n	8004a7e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004a7c:	e01a      	b.n	8004ab4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1c9      	bne.n	8004a1c <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	6839      	ldr	r1, [r7, #0]
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 fa5f 	bl	8004f50 <SPI_EndRxTransaction>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	75fb      	strb	r3, [r7, #23]
 8004aaa:	e003      	b.n	8004ab4 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3718      	adds	r7, #24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b08c      	sub	sp, #48	; 0x30
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	60f8      	str	r0, [r7, #12]
 8004ace:	60b9      	str	r1, [r7, #8]
 8004ad0:	607a      	str	r2, [r7, #4]
 8004ad2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d101      	bne.n	8004aec <HAL_SPI_TransmitReceive+0x26>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	e198      	b.n	8004e1e <HAL_SPI_TransmitReceive+0x358>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004af4:	f7fd fdec 	bl	80026d0 <HAL_GetTick>
 8004af8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004b0a:	887b      	ldrh	r3, [r7, #2]
 8004b0c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d00f      	beq.n	8004b36 <HAL_SPI_TransmitReceive+0x70>
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b1c:	d107      	bne.n	8004b2e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d103      	bne.n	8004b2e <HAL_SPI_TransmitReceive+0x68>
 8004b26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d003      	beq.n	8004b36 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004b2e:	2302      	movs	r3, #2
 8004b30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b34:	e16d      	b.n	8004e12 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <HAL_SPI_TransmitReceive+0x82>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <HAL_SPI_TransmitReceive+0x82>
 8004b42:	887b      	ldrh	r3, [r7, #2]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d103      	bne.n	8004b50 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b4e:	e160      	b.n	8004e12 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d003      	beq.n	8004b64 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2205      	movs	r2, #5
 8004b60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	887a      	ldrh	r2, [r7, #2]
 8004b74:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	887a      	ldrh	r2, [r7, #2]
 8004b7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	887a      	ldrh	r2, [r7, #2]
 8004b86:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	887a      	ldrh	r2, [r7, #2]
 8004b8c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba4:	2b40      	cmp	r3, #64	; 0x40
 8004ba6:	d007      	beq.n	8004bb8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bc0:	d17c      	bne.n	8004cbc <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <HAL_SPI_TransmitReceive+0x10a>
 8004bca:	8b7b      	ldrh	r3, [r7, #26]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d16a      	bne.n	8004ca6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd4:	881a      	ldrh	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be0:	1c9a      	adds	r2, r3, #2
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bf4:	e057      	b.n	8004ca6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d11b      	bne.n	8004c3c <HAL_SPI_TransmitReceive+0x176>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d016      	beq.n	8004c3c <HAL_SPI_TransmitReceive+0x176>
 8004c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d113      	bne.n	8004c3c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c18:	881a      	ldrh	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c24:	1c9a      	adds	r2, r3, #2
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d119      	bne.n	8004c7e <HAL_SPI_TransmitReceive+0x1b8>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d014      	beq.n	8004c7e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5e:	b292      	uxth	r2, r2
 8004c60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c66:	1c9a      	adds	r2, r3, #2
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	3b01      	subs	r3, #1
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c7e:	f7fd fd27 	bl	80026d0 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d80b      	bhi.n	8004ca6 <HAL_SPI_TransmitReceive+0x1e0>
 8004c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c94:	d007      	beq.n	8004ca6 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004ca4:	e0b5      	b.n	8004e12 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1a2      	bne.n	8004bf6 <HAL_SPI_TransmitReceive+0x130>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d19d      	bne.n	8004bf6 <HAL_SPI_TransmitReceive+0x130>
 8004cba:	e080      	b.n	8004dbe <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <HAL_SPI_TransmitReceive+0x204>
 8004cc4:	8b7b      	ldrh	r3, [r7, #26]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d16f      	bne.n	8004daa <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	330c      	adds	r3, #12
 8004cd4:	7812      	ldrb	r2, [r2, #0]
 8004cd6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cf0:	e05b      	b.n	8004daa <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d11c      	bne.n	8004d3a <HAL_SPI_TransmitReceive+0x274>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d017      	beq.n	8004d3a <HAL_SPI_TransmitReceive+0x274>
 8004d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d114      	bne.n	8004d3a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	330c      	adds	r3, #12
 8004d1a:	7812      	ldrb	r2, [r2, #0]
 8004d1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d36:	2300      	movs	r3, #0
 8004d38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d119      	bne.n	8004d7c <HAL_SPI_TransmitReceive+0x2b6>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d014      	beq.n	8004d7c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	b2d2      	uxtb	r2, r2
 8004d5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d7c:	f7fd fca8 	bl	80026d0 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d803      	bhi.n	8004d94 <HAL_SPI_TransmitReceive+0x2ce>
 8004d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d92:	d102      	bne.n	8004d9a <HAL_SPI_TransmitReceive+0x2d4>
 8004d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d107      	bne.n	8004daa <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004da8:	e033      	b.n	8004e12 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d19e      	bne.n	8004cf2 <HAL_SPI_TransmitReceive+0x22c>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d199      	bne.n	8004cf2 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 f916 	bl	8004ff4 <SPI_EndRxTxTransaction>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d006      	beq.n	8004ddc <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004dda:	e01a      	b.n	8004e12 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10a      	bne.n	8004dfa <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004de4:	2300      	movs	r3, #0
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e08:	e003      	b.n	8004e12 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3730      	adds	r7, #48	; 0x30
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e34:	b2db      	uxtb	r3, r3
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bc80      	pop	{r7}
 8004e3e:	4770      	bx	lr

08004e40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b088      	sub	sp, #32
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	603b      	str	r3, [r7, #0]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e50:	f7fd fc3e 	bl	80026d0 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e58:	1a9b      	subs	r3, r3, r2
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e60:	f7fd fc36 	bl	80026d0 <HAL_GetTick>
 8004e64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e66:	4b39      	ldr	r3, [pc, #228]	; (8004f4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	015b      	lsls	r3, r3, #5
 8004e6c:	0d1b      	lsrs	r3, r3, #20
 8004e6e:	69fa      	ldr	r2, [r7, #28]
 8004e70:	fb02 f303 	mul.w	r3, r2, r3
 8004e74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e76:	e054      	b.n	8004f22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7e:	d050      	beq.n	8004f22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e80:	f7fd fc26 	bl	80026d0 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	69fa      	ldr	r2, [r7, #28]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d902      	bls.n	8004e96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d13d      	bne.n	8004f12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ea4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eae:	d111      	bne.n	8004ed4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb8:	d004      	beq.n	8004ec4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec2:	d107      	bne.n	8004ed4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ed2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004edc:	d10f      	bne.n	8004efe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004efc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e017      	b.n	8004f42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	bf0c      	ite	eq
 8004f32:	2301      	moveq	r3, #1
 8004f34:	2300      	movne	r3, #0
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	461a      	mov	r2, r3
 8004f3a:	79fb      	ldrb	r3, [r7, #7]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d19b      	bne.n	8004e78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3720      	adds	r7, #32
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	20000008 	.word	0x20000008

08004f50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af02      	add	r7, sp, #8
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f64:	d111      	bne.n	8004f8a <SPI_EndRxTransaction+0x3a>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f6e:	d004      	beq.n	8004f7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f78:	d107      	bne.n	8004f8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f88:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f92:	d117      	bne.n	8004fc4 <SPI_EndRxTransaction+0x74>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f9c:	d112      	bne.n	8004fc4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f7ff ff49 	bl	8004e40 <SPI_WaitFlagStateUntilTimeout>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d01a      	beq.n	8004fea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb8:	f043 0220 	orr.w	r2, r3, #32
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e013      	b.n	8004fec <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2180      	movs	r1, #128	; 0x80
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f7ff ff36 	bl	8004e40 <SPI_WaitFlagStateUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d007      	beq.n	8004fea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fde:	f043 0220 	orr.w	r2, r3, #32
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e000      	b.n	8004fec <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af02      	add	r7, sp, #8
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2200      	movs	r2, #0
 8005008:	2180      	movs	r1, #128	; 0x80
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f7ff ff18 	bl	8004e40 <SPI_WaitFlagStateUntilTimeout>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d007      	beq.n	8005026 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501a:	f043 0220 	orr.w	r2, r3, #32
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e000      	b.n	8005028 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e041      	b.n	80050c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7fd f936 	bl	80022c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3304      	adds	r3, #4
 800506c:	4619      	mov	r1, r3
 800506e:	4610      	mov	r0, r2
 8005070:	f000 fb3a 	bl	80056e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b082      	sub	sp, #8
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e041      	b.n	8005164 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d106      	bne.n	80050fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f839 	bl	800516c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2202      	movs	r2, #2
 80050fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	3304      	adds	r3, #4
 800510a:	4619      	mov	r1, r3
 800510c:	4610      	mov	r0, r2
 800510e:	f000 faeb 	bl	80056e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	bc80      	pop	{r7}
 800517c:	4770      	bx	lr
	...

08005180 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d109      	bne.n	80051a4 <HAL_TIM_PWM_Start+0x24>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b01      	cmp	r3, #1
 800519a:	bf14      	ite	ne
 800519c:	2301      	movne	r3, #1
 800519e:	2300      	moveq	r3, #0
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	e022      	b.n	80051ea <HAL_TIM_PWM_Start+0x6a>
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d109      	bne.n	80051be <HAL_TIM_PWM_Start+0x3e>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	bf14      	ite	ne
 80051b6:	2301      	movne	r3, #1
 80051b8:	2300      	moveq	r3, #0
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	e015      	b.n	80051ea <HAL_TIM_PWM_Start+0x6a>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d109      	bne.n	80051d8 <HAL_TIM_PWM_Start+0x58>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	bf14      	ite	ne
 80051d0:	2301      	movne	r3, #1
 80051d2:	2300      	moveq	r3, #0
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	e008      	b.n	80051ea <HAL_TIM_PWM_Start+0x6a>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	bf14      	ite	ne
 80051e4:	2301      	movne	r3, #1
 80051e6:	2300      	moveq	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e072      	b.n	80052d8 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d104      	bne.n	8005202 <HAL_TIM_PWM_Start+0x82>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005200:	e013      	b.n	800522a <HAL_TIM_PWM_Start+0xaa>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b04      	cmp	r3, #4
 8005206:	d104      	bne.n	8005212 <HAL_TIM_PWM_Start+0x92>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005210:	e00b      	b.n	800522a <HAL_TIM_PWM_Start+0xaa>
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b08      	cmp	r3, #8
 8005216:	d104      	bne.n	8005222 <HAL_TIM_PWM_Start+0xa2>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005220:	e003      	b.n	800522a <HAL_TIM_PWM_Start+0xaa>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2202      	movs	r2, #2
 8005226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2201      	movs	r2, #1
 8005230:	6839      	ldr	r1, [r7, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fd14 	bl	8005c60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a28      	ldr	r2, [pc, #160]	; (80052e0 <HAL_TIM_PWM_Start+0x160>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d004      	beq.n	800524c <HAL_TIM_PWM_Start+0xcc>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a27      	ldr	r2, [pc, #156]	; (80052e4 <HAL_TIM_PWM_Start+0x164>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d101      	bne.n	8005250 <HAL_TIM_PWM_Start+0xd0>
 800524c:	2301      	movs	r3, #1
 800524e:	e000      	b.n	8005252 <HAL_TIM_PWM_Start+0xd2>
 8005250:	2300      	movs	r3, #0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d007      	beq.n	8005266 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005264:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a1d      	ldr	r2, [pc, #116]	; (80052e0 <HAL_TIM_PWM_Start+0x160>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d018      	beq.n	80052a2 <HAL_TIM_PWM_Start+0x122>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a1b      	ldr	r2, [pc, #108]	; (80052e4 <HAL_TIM_PWM_Start+0x164>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d013      	beq.n	80052a2 <HAL_TIM_PWM_Start+0x122>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005282:	d00e      	beq.n	80052a2 <HAL_TIM_PWM_Start+0x122>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a17      	ldr	r2, [pc, #92]	; (80052e8 <HAL_TIM_PWM_Start+0x168>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d009      	beq.n	80052a2 <HAL_TIM_PWM_Start+0x122>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a16      	ldr	r2, [pc, #88]	; (80052ec <HAL_TIM_PWM_Start+0x16c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d004      	beq.n	80052a2 <HAL_TIM_PWM_Start+0x122>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a14      	ldr	r2, [pc, #80]	; (80052f0 <HAL_TIM_PWM_Start+0x170>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d111      	bne.n	80052c6 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2b06      	cmp	r3, #6
 80052b2:	d010      	beq.n	80052d6 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0201 	orr.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c4:	e007      	b.n	80052d6 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f042 0201 	orr.w	r2, r2, #1
 80052d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40012c00 	.word	0x40012c00
 80052e4:	40013400 	.word	0x40013400
 80052e8:	40000400 	.word	0x40000400
 80052ec:	40000800 	.word	0x40000800
 80052f0:	40000c00 	.word	0x40000c00

080052f4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2200      	movs	r2, #0
 8005304:	6839      	ldr	r1, [r7, #0]
 8005306:	4618      	mov	r0, r3
 8005308:	f000 fcaa 	bl	8005c60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a2e      	ldr	r2, [pc, #184]	; (80053cc <HAL_TIM_PWM_Stop+0xd8>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d004      	beq.n	8005320 <HAL_TIM_PWM_Stop+0x2c>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a2d      	ldr	r2, [pc, #180]	; (80053d0 <HAL_TIM_PWM_Stop+0xdc>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d101      	bne.n	8005324 <HAL_TIM_PWM_Stop+0x30>
 8005320:	2301      	movs	r3, #1
 8005322:	e000      	b.n	8005326 <HAL_TIM_PWM_Stop+0x32>
 8005324:	2300      	movs	r3, #0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d017      	beq.n	800535a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6a1a      	ldr	r2, [r3, #32]
 8005330:	f241 1311 	movw	r3, #4369	; 0x1111
 8005334:	4013      	ands	r3, r2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10f      	bne.n	800535a <HAL_TIM_PWM_Stop+0x66>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6a1a      	ldr	r2, [r3, #32]
 8005340:	f240 4344 	movw	r3, #1092	; 0x444
 8005344:	4013      	ands	r3, r2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d107      	bne.n	800535a <HAL_TIM_PWM_Stop+0x66>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005358:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6a1a      	ldr	r2, [r3, #32]
 8005360:	f241 1311 	movw	r3, #4369	; 0x1111
 8005364:	4013      	ands	r3, r2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10f      	bne.n	800538a <HAL_TIM_PWM_Stop+0x96>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6a1a      	ldr	r2, [r3, #32]
 8005370:	f240 4344 	movw	r3, #1092	; 0x444
 8005374:	4013      	ands	r3, r2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d107      	bne.n	800538a <HAL_TIM_PWM_Stop+0x96>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0201 	bic.w	r2, r2, #1
 8005388:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d104      	bne.n	800539a <HAL_TIM_PWM_Stop+0xa6>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005398:	e013      	b.n	80053c2 <HAL_TIM_PWM_Stop+0xce>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b04      	cmp	r3, #4
 800539e:	d104      	bne.n	80053aa <HAL_TIM_PWM_Stop+0xb6>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053a8:	e00b      	b.n	80053c2 <HAL_TIM_PWM_Stop+0xce>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d104      	bne.n	80053ba <HAL_TIM_PWM_Stop+0xc6>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053b8:	e003      	b.n	80053c2 <HAL_TIM_PWM_Stop+0xce>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40012c00 	.word	0x40012c00
 80053d0:	40013400 	.word	0x40013400

080053d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053e0:	2300      	movs	r3, #0
 80053e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d101      	bne.n	80053f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053ee:	2302      	movs	r3, #2
 80053f0:	e0ae      	b.n	8005550 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b0c      	cmp	r3, #12
 80053fe:	f200 809f 	bhi.w	8005540 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005402:	a201      	add	r2, pc, #4	; (adr r2, 8005408 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005408:	0800543d 	.word	0x0800543d
 800540c:	08005541 	.word	0x08005541
 8005410:	08005541 	.word	0x08005541
 8005414:	08005541 	.word	0x08005541
 8005418:	0800547d 	.word	0x0800547d
 800541c:	08005541 	.word	0x08005541
 8005420:	08005541 	.word	0x08005541
 8005424:	08005541 	.word	0x08005541
 8005428:	080054bf 	.word	0x080054bf
 800542c:	08005541 	.word	0x08005541
 8005430:	08005541 	.word	0x08005541
 8005434:	08005541 	.word	0x08005541
 8005438:	080054ff 	.word	0x080054ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68b9      	ldr	r1, [r7, #8]
 8005442:	4618      	mov	r0, r3
 8005444:	f000 f9ca 	bl	80057dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699a      	ldr	r2, [r3, #24]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0208 	orr.w	r2, r2, #8
 8005456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699a      	ldr	r2, [r3, #24]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0204 	bic.w	r2, r2, #4
 8005466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6999      	ldr	r1, [r3, #24]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	691a      	ldr	r2, [r3, #16]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	619a      	str	r2, [r3, #24]
      break;
 800547a:	e064      	b.n	8005546 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fa1a 	bl	80058bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699a      	ldr	r2, [r3, #24]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699a      	ldr	r2, [r3, #24]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6999      	ldr	r1, [r3, #24]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	021a      	lsls	r2, r3, #8
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	619a      	str	r2, [r3, #24]
      break;
 80054bc:	e043      	b.n	8005546 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68b9      	ldr	r1, [r7, #8]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 fa6d 	bl	80059a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69da      	ldr	r2, [r3, #28]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f042 0208 	orr.w	r2, r2, #8
 80054d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69da      	ldr	r2, [r3, #28]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0204 	bic.w	r2, r2, #4
 80054e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69d9      	ldr	r1, [r3, #28]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	691a      	ldr	r2, [r3, #16]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	61da      	str	r2, [r3, #28]
      break;
 80054fc:	e023      	b.n	8005546 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68b9      	ldr	r1, [r7, #8]
 8005504:	4618      	mov	r0, r3
 8005506:	f000 fac1 	bl	8005a8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	69da      	ldr	r2, [r3, #28]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69da      	ldr	r2, [r3, #28]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	69d9      	ldr	r1, [r3, #28]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	021a      	lsls	r2, r3, #8
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	61da      	str	r2, [r3, #28]
      break;
 800553e:	e002      	b.n	8005546 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	75fb      	strb	r3, [r7, #23]
      break;
 8005544:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800554e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3718      	adds	r7, #24
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005562:	2300      	movs	r3, #0
 8005564:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800556c:	2b01      	cmp	r3, #1
 800556e:	d101      	bne.n	8005574 <HAL_TIM_ConfigClockSource+0x1c>
 8005570:	2302      	movs	r3, #2
 8005572:	e0b4      	b.n	80056de <HAL_TIM_ConfigClockSource+0x186>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800559a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ac:	d03e      	beq.n	800562c <HAL_TIM_ConfigClockSource+0xd4>
 80055ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055b2:	f200 8087 	bhi.w	80056c4 <HAL_TIM_ConfigClockSource+0x16c>
 80055b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ba:	f000 8086 	beq.w	80056ca <HAL_TIM_ConfigClockSource+0x172>
 80055be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c2:	d87f      	bhi.n	80056c4 <HAL_TIM_ConfigClockSource+0x16c>
 80055c4:	2b70      	cmp	r3, #112	; 0x70
 80055c6:	d01a      	beq.n	80055fe <HAL_TIM_ConfigClockSource+0xa6>
 80055c8:	2b70      	cmp	r3, #112	; 0x70
 80055ca:	d87b      	bhi.n	80056c4 <HAL_TIM_ConfigClockSource+0x16c>
 80055cc:	2b60      	cmp	r3, #96	; 0x60
 80055ce:	d050      	beq.n	8005672 <HAL_TIM_ConfigClockSource+0x11a>
 80055d0:	2b60      	cmp	r3, #96	; 0x60
 80055d2:	d877      	bhi.n	80056c4 <HAL_TIM_ConfigClockSource+0x16c>
 80055d4:	2b50      	cmp	r3, #80	; 0x50
 80055d6:	d03c      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0xfa>
 80055d8:	2b50      	cmp	r3, #80	; 0x50
 80055da:	d873      	bhi.n	80056c4 <HAL_TIM_ConfigClockSource+0x16c>
 80055dc:	2b40      	cmp	r3, #64	; 0x40
 80055de:	d058      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x13a>
 80055e0:	2b40      	cmp	r3, #64	; 0x40
 80055e2:	d86f      	bhi.n	80056c4 <HAL_TIM_ConfigClockSource+0x16c>
 80055e4:	2b30      	cmp	r3, #48	; 0x30
 80055e6:	d064      	beq.n	80056b2 <HAL_TIM_ConfigClockSource+0x15a>
 80055e8:	2b30      	cmp	r3, #48	; 0x30
 80055ea:	d86b      	bhi.n	80056c4 <HAL_TIM_ConfigClockSource+0x16c>
 80055ec:	2b20      	cmp	r3, #32
 80055ee:	d060      	beq.n	80056b2 <HAL_TIM_ConfigClockSource+0x15a>
 80055f0:	2b20      	cmp	r3, #32
 80055f2:	d867      	bhi.n	80056c4 <HAL_TIM_ConfigClockSource+0x16c>
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d05c      	beq.n	80056b2 <HAL_TIM_ConfigClockSource+0x15a>
 80055f8:	2b10      	cmp	r3, #16
 80055fa:	d05a      	beq.n	80056b2 <HAL_TIM_ConfigClockSource+0x15a>
 80055fc:	e062      	b.n	80056c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800560e:	f000 fb08 	bl	8005c22 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005620:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	609a      	str	r2, [r3, #8]
      break;
 800562a:	e04f      	b.n	80056cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800563c:	f000 faf1 	bl	8005c22 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689a      	ldr	r2, [r3, #8]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800564e:	609a      	str	r2, [r3, #8]
      break;
 8005650:	e03c      	b.n	80056cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800565e:	461a      	mov	r2, r3
 8005660:	f000 fa68 	bl	8005b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2150      	movs	r1, #80	; 0x50
 800566a:	4618      	mov	r0, r3
 800566c:	f000 fabf 	bl	8005bee <TIM_ITRx_SetConfig>
      break;
 8005670:	e02c      	b.n	80056cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800567e:	461a      	mov	r2, r3
 8005680:	f000 fa86 	bl	8005b90 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2160      	movs	r1, #96	; 0x60
 800568a:	4618      	mov	r0, r3
 800568c:	f000 faaf 	bl	8005bee <TIM_ITRx_SetConfig>
      break;
 8005690:	e01c      	b.n	80056cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800569e:	461a      	mov	r2, r3
 80056a0:	f000 fa48 	bl	8005b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2140      	movs	r1, #64	; 0x40
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 fa9f 	bl	8005bee <TIM_ITRx_SetConfig>
      break;
 80056b0:	e00c      	b.n	80056cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4619      	mov	r1, r3
 80056bc:	4610      	mov	r0, r2
 80056be:	f000 fa96 	bl	8005bee <TIM_ITRx_SetConfig>
      break;
 80056c2:	e003      	b.n	80056cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	73fb      	strb	r3, [r7, #15]
      break;
 80056c8:	e000      	b.n	80056cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
	...

080056e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a33      	ldr	r2, [pc, #204]	; (80057c8 <TIM_Base_SetConfig+0xe0>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d013      	beq.n	8005728 <TIM_Base_SetConfig+0x40>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a32      	ldr	r2, [pc, #200]	; (80057cc <TIM_Base_SetConfig+0xe4>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d00f      	beq.n	8005728 <TIM_Base_SetConfig+0x40>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800570e:	d00b      	beq.n	8005728 <TIM_Base_SetConfig+0x40>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a2f      	ldr	r2, [pc, #188]	; (80057d0 <TIM_Base_SetConfig+0xe8>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d007      	beq.n	8005728 <TIM_Base_SetConfig+0x40>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a2e      	ldr	r2, [pc, #184]	; (80057d4 <TIM_Base_SetConfig+0xec>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d003      	beq.n	8005728 <TIM_Base_SetConfig+0x40>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a2d      	ldr	r2, [pc, #180]	; (80057d8 <TIM_Base_SetConfig+0xf0>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d108      	bne.n	800573a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	4313      	orrs	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a22      	ldr	r2, [pc, #136]	; (80057c8 <TIM_Base_SetConfig+0xe0>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d013      	beq.n	800576a <TIM_Base_SetConfig+0x82>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a21      	ldr	r2, [pc, #132]	; (80057cc <TIM_Base_SetConfig+0xe4>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d00f      	beq.n	800576a <TIM_Base_SetConfig+0x82>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005750:	d00b      	beq.n	800576a <TIM_Base_SetConfig+0x82>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a1e      	ldr	r2, [pc, #120]	; (80057d0 <TIM_Base_SetConfig+0xe8>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d007      	beq.n	800576a <TIM_Base_SetConfig+0x82>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a1d      	ldr	r2, [pc, #116]	; (80057d4 <TIM_Base_SetConfig+0xec>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d003      	beq.n	800576a <TIM_Base_SetConfig+0x82>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a1c      	ldr	r2, [pc, #112]	; (80057d8 <TIM_Base_SetConfig+0xf0>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d108      	bne.n	800577c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	4313      	orrs	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a09      	ldr	r2, [pc, #36]	; (80057c8 <TIM_Base_SetConfig+0xe0>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d003      	beq.n	80057b0 <TIM_Base_SetConfig+0xc8>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a08      	ldr	r2, [pc, #32]	; (80057cc <TIM_Base_SetConfig+0xe4>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d103      	bne.n	80057b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	691a      	ldr	r2, [r3, #16]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	615a      	str	r2, [r3, #20]
}
 80057be:	bf00      	nop
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bc80      	pop	{r7}
 80057c6:	4770      	bx	lr
 80057c8:	40012c00 	.word	0x40012c00
 80057cc:	40013400 	.word	0x40013400
 80057d0:	40000400 	.word	0x40000400
 80057d4:	40000800 	.word	0x40000800
 80057d8:	40000c00 	.word	0x40000c00

080057dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	f023 0201 	bic.w	r2, r3, #1
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f023 0303 	bic.w	r3, r3, #3
 8005812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	4313      	orrs	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f023 0302 	bic.w	r3, r3, #2
 8005824:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	4313      	orrs	r3, r2
 800582e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a20      	ldr	r2, [pc, #128]	; (80058b4 <TIM_OC1_SetConfig+0xd8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d003      	beq.n	8005840 <TIM_OC1_SetConfig+0x64>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a1f      	ldr	r2, [pc, #124]	; (80058b8 <TIM_OC1_SetConfig+0xdc>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d10c      	bne.n	800585a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f023 0308 	bic.w	r3, r3, #8
 8005846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	4313      	orrs	r3, r2
 8005850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f023 0304 	bic.w	r3, r3, #4
 8005858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a15      	ldr	r2, [pc, #84]	; (80058b4 <TIM_OC1_SetConfig+0xd8>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d003      	beq.n	800586a <TIM_OC1_SetConfig+0x8e>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a14      	ldr	r2, [pc, #80]	; (80058b8 <TIM_OC1_SetConfig+0xdc>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d111      	bne.n	800588e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005870:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005878:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	4313      	orrs	r3, r2
 8005882:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	4313      	orrs	r3, r2
 800588c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	621a      	str	r2, [r3, #32]
}
 80058a8:	bf00      	nop
 80058aa:	371c      	adds	r7, #28
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bc80      	pop	{r7}
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	40012c00 	.word	0x40012c00
 80058b8:	40013400 	.word	0x40013400

080058bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058bc:	b480      	push	{r7}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	f023 0210 	bic.w	r2, r3, #16
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	021b      	lsls	r3, r3, #8
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f023 0320 	bic.w	r3, r3, #32
 8005906:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	011b      	lsls	r3, r3, #4
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	4313      	orrs	r3, r2
 8005912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a21      	ldr	r2, [pc, #132]	; (800599c <TIM_OC2_SetConfig+0xe0>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d003      	beq.n	8005924 <TIM_OC2_SetConfig+0x68>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a20      	ldr	r2, [pc, #128]	; (80059a0 <TIM_OC2_SetConfig+0xe4>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d10d      	bne.n	8005940 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800592a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	011b      	lsls	r3, r3, #4
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	4313      	orrs	r3, r2
 8005936:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800593e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a16      	ldr	r2, [pc, #88]	; (800599c <TIM_OC2_SetConfig+0xe0>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d003      	beq.n	8005950 <TIM_OC2_SetConfig+0x94>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a15      	ldr	r2, [pc, #84]	; (80059a0 <TIM_OC2_SetConfig+0xe4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d113      	bne.n	8005978 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005956:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800595e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	4313      	orrs	r3, r2
 800596a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	4313      	orrs	r3, r2
 8005976:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	621a      	str	r2, [r3, #32]
}
 8005992:	bf00      	nop
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	bc80      	pop	{r7}
 800599a:	4770      	bx	lr
 800599c:	40012c00 	.word	0x40012c00
 80059a0:	40013400 	.word	0x40013400

080059a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f023 0303 	bic.w	r3, r3, #3
 80059da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	021b      	lsls	r3, r3, #8
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a21      	ldr	r2, [pc, #132]	; (8005a84 <TIM_OC3_SetConfig+0xe0>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d003      	beq.n	8005a0a <TIM_OC3_SetConfig+0x66>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a20      	ldr	r2, [pc, #128]	; (8005a88 <TIM_OC3_SetConfig+0xe4>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d10d      	bne.n	8005a26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	021b      	lsls	r3, r3, #8
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a16      	ldr	r2, [pc, #88]	; (8005a84 <TIM_OC3_SetConfig+0xe0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d003      	beq.n	8005a36 <TIM_OC3_SetConfig+0x92>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a15      	ldr	r2, [pc, #84]	; (8005a88 <TIM_OC3_SetConfig+0xe4>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d113      	bne.n	8005a5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	011b      	lsls	r3, r3, #4
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	621a      	str	r2, [r3, #32]
}
 8005a78:	bf00      	nop
 8005a7a:	371c      	adds	r7, #28
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bc80      	pop	{r7}
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	40012c00 	.word	0x40012c00
 8005a88:	40013400 	.word	0x40013400

08005a8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b087      	sub	sp, #28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	021b      	lsls	r3, r3, #8
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ad6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	031b      	lsls	r3, r3, #12
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a11      	ldr	r2, [pc, #68]	; (8005b2c <TIM_OC4_SetConfig+0xa0>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d003      	beq.n	8005af4 <TIM_OC4_SetConfig+0x68>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a10      	ldr	r2, [pc, #64]	; (8005b30 <TIM_OC4_SetConfig+0xa4>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d109      	bne.n	8005b08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005afa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	019b      	lsls	r3, r3, #6
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	621a      	str	r2, [r3, #32]
}
 8005b22:	bf00      	nop
 8005b24:	371c      	adds	r7, #28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bc80      	pop	{r7}
 8005b2a:	4770      	bx	lr
 8005b2c:	40012c00 	.word	0x40012c00
 8005b30:	40013400 	.word	0x40013400

08005b34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	f023 0201 	bic.w	r2, r3, #1
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	011b      	lsls	r3, r3, #4
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f023 030a 	bic.w	r3, r3, #10
 8005b70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	621a      	str	r2, [r3, #32]
}
 8005b86:	bf00      	nop
 8005b88:	371c      	adds	r7, #28
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bc80      	pop	{r7}
 8005b8e:	4770      	bx	lr

08005b90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	f023 0210 	bic.w	r2, r3, #16
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	031b      	lsls	r3, r3, #12
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bcc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	011b      	lsls	r3, r3, #4
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	621a      	str	r2, [r3, #32]
}
 8005be4:	bf00      	nop
 8005be6:	371c      	adds	r7, #28
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bc80      	pop	{r7}
 8005bec:	4770      	bx	lr

08005bee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b085      	sub	sp, #20
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f043 0307 	orr.w	r3, r3, #7
 8005c10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	609a      	str	r2, [r3, #8]
}
 8005c18:	bf00      	nop
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bc80      	pop	{r7}
 8005c20:	4770      	bx	lr

08005c22 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b087      	sub	sp, #28
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	60f8      	str	r0, [r7, #12]
 8005c2a:	60b9      	str	r1, [r7, #8]
 8005c2c:	607a      	str	r2, [r7, #4]
 8005c2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c3c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	021a      	lsls	r2, r3, #8
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	431a      	orrs	r2, r3
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	609a      	str	r2, [r3, #8]
}
 8005c56:	bf00      	nop
 8005c58:	371c      	adds	r7, #28
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bc80      	pop	{r7}
 8005c5e:	4770      	bx	lr

08005c60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f003 031f 	and.w	r3, r3, #31
 8005c72:	2201      	movs	r2, #1
 8005c74:	fa02 f303 	lsl.w	r3, r2, r3
 8005c78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6a1a      	ldr	r2, [r3, #32]
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	43db      	mvns	r3, r3
 8005c82:	401a      	ands	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6a1a      	ldr	r2, [r3, #32]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f003 031f 	and.w	r3, r3, #31
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	fa01 f303 	lsl.w	r3, r1, r3
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	621a      	str	r2, [r3, #32]
}
 8005c9e:	bf00      	nop
 8005ca0:	371c      	adds	r7, #28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bc80      	pop	{r7}
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e050      	b.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a1b      	ldr	r2, [pc, #108]	; (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d018      	beq.n	8005d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a19      	ldr	r2, [pc, #100]	; (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d013      	beq.n	8005d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d16:	d00e      	beq.n	8005d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a15      	ldr	r2, [pc, #84]	; (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d009      	beq.n	8005d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a14      	ldr	r2, [pc, #80]	; (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d004      	beq.n	8005d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a12      	ldr	r2, [pc, #72]	; (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d10c      	bne.n	8005d50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bc80      	pop	{r7}
 8005d6a:	4770      	bx	lr
 8005d6c:	40012c00 	.word	0x40012c00
 8005d70:	40013400 	.word	0x40013400
 8005d74:	40000400 	.word	0x40000400
 8005d78:	40000800 	.word	0x40000800
 8005d7c:	40000c00 	.word	0x40000c00

08005d80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e042      	b.n	8005e18 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d106      	bne.n	8005dac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7fc fada 	bl	8002360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2224      	movs	r2, #36	; 0x24
 8005db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68da      	ldr	r2, [r3, #12]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f91d 	bl	8006004 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	691a      	ldr	r2, [r3, #16]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	695a      	ldr	r2, [r3, #20]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005de8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005df8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2220      	movs	r2, #32
 8005e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2220      	movs	r2, #32
 8005e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08a      	sub	sp, #40	; 0x28
 8005e24:	af02      	add	r7, sp, #8
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	603b      	str	r3, [r7, #0]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	d16d      	bne.n	8005f1c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <HAL_UART_Transmit+0x2c>
 8005e46:	88fb      	ldrh	r3, [r7, #6]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e066      	b.n	8005f1e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2221      	movs	r2, #33	; 0x21
 8005e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e5e:	f7fc fc37 	bl	80026d0 <HAL_GetTick>
 8005e62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	88fa      	ldrh	r2, [r7, #6]
 8005e68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	88fa      	ldrh	r2, [r7, #6]
 8005e6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e78:	d108      	bne.n	8005e8c <HAL_UART_Transmit+0x6c>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d104      	bne.n	8005e8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005e82:	2300      	movs	r3, #0
 8005e84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	61bb      	str	r3, [r7, #24]
 8005e8a:	e003      	b.n	8005e94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e90:	2300      	movs	r3, #0
 8005e92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e94:	e02a      	b.n	8005eec <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	2180      	movs	r1, #128	; 0x80
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 f840 	bl	8005f26 <UART_WaitOnFlagUntilTimeout>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e036      	b.n	8005f1e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10b      	bne.n	8005ece <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ec4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	3302      	adds	r3, #2
 8005eca:	61bb      	str	r3, [r7, #24]
 8005ecc:	e007      	b.n	8005ede <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	781a      	ldrb	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	3301      	adds	r3, #1
 8005edc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1cf      	bne.n	8005e96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2200      	movs	r2, #0
 8005efe:	2140      	movs	r1, #64	; 0x40
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 f810 	bl	8005f26 <UART_WaitOnFlagUntilTimeout>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e006      	b.n	8005f1e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2220      	movs	r2, #32
 8005f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	e000      	b.n	8005f1e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005f1c:	2302      	movs	r3, #2
  }
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3720      	adds	r7, #32
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b090      	sub	sp, #64	; 0x40
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	60f8      	str	r0, [r7, #12]
 8005f2e:	60b9      	str	r1, [r7, #8]
 8005f30:	603b      	str	r3, [r7, #0]
 8005f32:	4613      	mov	r3, r2
 8005f34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f36:	e050      	b.n	8005fda <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3e:	d04c      	beq.n	8005fda <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d007      	beq.n	8005f56 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f46:	f7fc fbc3 	bl	80026d0 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d241      	bcs.n	8005fda <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	330c      	adds	r3, #12
 8005f5c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f60:	e853 3f00 	ldrex	r3, [r3]
 8005f64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	330c      	adds	r3, #12
 8005f74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f76:	637a      	str	r2, [r7, #52]	; 0x34
 8005f78:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f7e:	e841 2300 	strex	r3, r2, [r1]
 8005f82:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1e5      	bne.n	8005f56 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3314      	adds	r3, #20
 8005f90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	e853 3f00 	ldrex	r3, [r3]
 8005f98:	613b      	str	r3, [r7, #16]
   return(result);
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f023 0301 	bic.w	r3, r3, #1
 8005fa0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	3314      	adds	r3, #20
 8005fa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005faa:	623a      	str	r2, [r7, #32]
 8005fac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fae:	69f9      	ldr	r1, [r7, #28]
 8005fb0:	6a3a      	ldr	r2, [r7, #32]
 8005fb2:	e841 2300 	strex	r3, r2, [r1]
 8005fb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1e5      	bne.n	8005f8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2220      	movs	r2, #32
 8005fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e00f      	b.n	8005ffa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	bf0c      	ite	eq
 8005fea:	2301      	moveq	r3, #1
 8005fec:	2300      	movne	r3, #0
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	79fb      	ldrb	r3, [r7, #7]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d09f      	beq.n	8005f38 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3740      	adds	r7, #64	; 0x40
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
	...

08006004 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68da      	ldr	r2, [r3, #12]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	689a      	ldr	r2, [r3, #8]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	4313      	orrs	r3, r2
 8006032:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800603e:	f023 030c 	bic.w	r3, r3, #12
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	6812      	ldr	r2, [r2, #0]
 8006046:	68b9      	ldr	r1, [r7, #8]
 8006048:	430b      	orrs	r3, r1
 800604a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	699a      	ldr	r2, [r3, #24]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a2c      	ldr	r2, [pc, #176]	; (8006118 <UART_SetConfig+0x114>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d103      	bne.n	8006074 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800606c:	f7fe fa1a 	bl	80044a4 <HAL_RCC_GetPCLK2Freq>
 8006070:	60f8      	str	r0, [r7, #12]
 8006072:	e002      	b.n	800607a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006074:	f7fe fa02 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 8006078:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	4613      	mov	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	009a      	lsls	r2, r3, #2
 8006084:	441a      	add	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006090:	4a22      	ldr	r2, [pc, #136]	; (800611c <UART_SetConfig+0x118>)
 8006092:	fba2 2303 	umull	r2, r3, r2, r3
 8006096:	095b      	lsrs	r3, r3, #5
 8006098:	0119      	lsls	r1, r3, #4
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	4613      	mov	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	009a      	lsls	r2, r3, #2
 80060a4:	441a      	add	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80060b0:	4b1a      	ldr	r3, [pc, #104]	; (800611c <UART_SetConfig+0x118>)
 80060b2:	fba3 0302 	umull	r0, r3, r3, r2
 80060b6:	095b      	lsrs	r3, r3, #5
 80060b8:	2064      	movs	r0, #100	; 0x64
 80060ba:	fb00 f303 	mul.w	r3, r0, r3
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	011b      	lsls	r3, r3, #4
 80060c2:	3332      	adds	r3, #50	; 0x32
 80060c4:	4a15      	ldr	r2, [pc, #84]	; (800611c <UART_SetConfig+0x118>)
 80060c6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ca:	095b      	lsrs	r3, r3, #5
 80060cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060d0:	4419      	add	r1, r3
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	4613      	mov	r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4413      	add	r3, r2
 80060da:	009a      	lsls	r2, r3, #2
 80060dc:	441a      	add	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80060e8:	4b0c      	ldr	r3, [pc, #48]	; (800611c <UART_SetConfig+0x118>)
 80060ea:	fba3 0302 	umull	r0, r3, r3, r2
 80060ee:	095b      	lsrs	r3, r3, #5
 80060f0:	2064      	movs	r0, #100	; 0x64
 80060f2:	fb00 f303 	mul.w	r3, r0, r3
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	011b      	lsls	r3, r3, #4
 80060fa:	3332      	adds	r3, #50	; 0x32
 80060fc:	4a07      	ldr	r2, [pc, #28]	; (800611c <UART_SetConfig+0x118>)
 80060fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006102:	095b      	lsrs	r3, r3, #5
 8006104:	f003 020f 	and.w	r2, r3, #15
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	440a      	add	r2, r1
 800610e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006110:	bf00      	nop
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	40013800 	.word	0x40013800
 800611c:	51eb851f 	.word	0x51eb851f

08006120 <__cvt>:
 8006120:	2b00      	cmp	r3, #0
 8006122:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006126:	461f      	mov	r7, r3
 8006128:	bfbb      	ittet	lt
 800612a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800612e:	461f      	movlt	r7, r3
 8006130:	2300      	movge	r3, #0
 8006132:	232d      	movlt	r3, #45	; 0x2d
 8006134:	b088      	sub	sp, #32
 8006136:	4614      	mov	r4, r2
 8006138:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800613a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800613c:	7013      	strb	r3, [r2, #0]
 800613e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006140:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006144:	f023 0820 	bic.w	r8, r3, #32
 8006148:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800614c:	d005      	beq.n	800615a <__cvt+0x3a>
 800614e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006152:	d100      	bne.n	8006156 <__cvt+0x36>
 8006154:	3501      	adds	r5, #1
 8006156:	2302      	movs	r3, #2
 8006158:	e000      	b.n	800615c <__cvt+0x3c>
 800615a:	2303      	movs	r3, #3
 800615c:	aa07      	add	r2, sp, #28
 800615e:	9204      	str	r2, [sp, #16]
 8006160:	aa06      	add	r2, sp, #24
 8006162:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006166:	e9cd 3500 	strd	r3, r5, [sp]
 800616a:	4622      	mov	r2, r4
 800616c:	463b      	mov	r3, r7
 800616e:	f001 f887 	bl	8007280 <_dtoa_r>
 8006172:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006176:	4606      	mov	r6, r0
 8006178:	d102      	bne.n	8006180 <__cvt+0x60>
 800617a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800617c:	07db      	lsls	r3, r3, #31
 800617e:	d522      	bpl.n	80061c6 <__cvt+0xa6>
 8006180:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006184:	eb06 0905 	add.w	r9, r6, r5
 8006188:	d110      	bne.n	80061ac <__cvt+0x8c>
 800618a:	7833      	ldrb	r3, [r6, #0]
 800618c:	2b30      	cmp	r3, #48	; 0x30
 800618e:	d10a      	bne.n	80061a6 <__cvt+0x86>
 8006190:	2200      	movs	r2, #0
 8006192:	2300      	movs	r3, #0
 8006194:	4620      	mov	r0, r4
 8006196:	4639      	mov	r1, r7
 8006198:	f7fa fc72 	bl	8000a80 <__aeabi_dcmpeq>
 800619c:	b918      	cbnz	r0, 80061a6 <__cvt+0x86>
 800619e:	f1c5 0501 	rsb	r5, r5, #1
 80061a2:	f8ca 5000 	str.w	r5, [sl]
 80061a6:	f8da 3000 	ldr.w	r3, [sl]
 80061aa:	4499      	add	r9, r3
 80061ac:	2200      	movs	r2, #0
 80061ae:	2300      	movs	r3, #0
 80061b0:	4620      	mov	r0, r4
 80061b2:	4639      	mov	r1, r7
 80061b4:	f7fa fc64 	bl	8000a80 <__aeabi_dcmpeq>
 80061b8:	b108      	cbz	r0, 80061be <__cvt+0x9e>
 80061ba:	f8cd 901c 	str.w	r9, [sp, #28]
 80061be:	2230      	movs	r2, #48	; 0x30
 80061c0:	9b07      	ldr	r3, [sp, #28]
 80061c2:	454b      	cmp	r3, r9
 80061c4:	d307      	bcc.n	80061d6 <__cvt+0xb6>
 80061c6:	4630      	mov	r0, r6
 80061c8:	9b07      	ldr	r3, [sp, #28]
 80061ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80061cc:	1b9b      	subs	r3, r3, r6
 80061ce:	6013      	str	r3, [r2, #0]
 80061d0:	b008      	add	sp, #32
 80061d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d6:	1c59      	adds	r1, r3, #1
 80061d8:	9107      	str	r1, [sp, #28]
 80061da:	701a      	strb	r2, [r3, #0]
 80061dc:	e7f0      	b.n	80061c0 <__cvt+0xa0>

080061de <__exponent>:
 80061de:	4603      	mov	r3, r0
 80061e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061e2:	2900      	cmp	r1, #0
 80061e4:	f803 2b02 	strb.w	r2, [r3], #2
 80061e8:	bfb6      	itet	lt
 80061ea:	222d      	movlt	r2, #45	; 0x2d
 80061ec:	222b      	movge	r2, #43	; 0x2b
 80061ee:	4249      	neglt	r1, r1
 80061f0:	2909      	cmp	r1, #9
 80061f2:	7042      	strb	r2, [r0, #1]
 80061f4:	dd2a      	ble.n	800624c <__exponent+0x6e>
 80061f6:	f10d 0207 	add.w	r2, sp, #7
 80061fa:	4617      	mov	r7, r2
 80061fc:	260a      	movs	r6, #10
 80061fe:	fb91 f5f6 	sdiv	r5, r1, r6
 8006202:	4694      	mov	ip, r2
 8006204:	fb06 1415 	mls	r4, r6, r5, r1
 8006208:	3430      	adds	r4, #48	; 0x30
 800620a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800620e:	460c      	mov	r4, r1
 8006210:	2c63      	cmp	r4, #99	; 0x63
 8006212:	4629      	mov	r1, r5
 8006214:	f102 32ff 	add.w	r2, r2, #4294967295
 8006218:	dcf1      	bgt.n	80061fe <__exponent+0x20>
 800621a:	3130      	adds	r1, #48	; 0x30
 800621c:	f1ac 0402 	sub.w	r4, ip, #2
 8006220:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006224:	4622      	mov	r2, r4
 8006226:	1c41      	adds	r1, r0, #1
 8006228:	42ba      	cmp	r2, r7
 800622a:	d30a      	bcc.n	8006242 <__exponent+0x64>
 800622c:	f10d 0209 	add.w	r2, sp, #9
 8006230:	eba2 020c 	sub.w	r2, r2, ip
 8006234:	42bc      	cmp	r4, r7
 8006236:	bf88      	it	hi
 8006238:	2200      	movhi	r2, #0
 800623a:	4413      	add	r3, r2
 800623c:	1a18      	subs	r0, r3, r0
 800623e:	b003      	add	sp, #12
 8006240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006242:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006246:	f801 5f01 	strb.w	r5, [r1, #1]!
 800624a:	e7ed      	b.n	8006228 <__exponent+0x4a>
 800624c:	2330      	movs	r3, #48	; 0x30
 800624e:	3130      	adds	r1, #48	; 0x30
 8006250:	7083      	strb	r3, [r0, #2]
 8006252:	70c1      	strb	r1, [r0, #3]
 8006254:	1d03      	adds	r3, r0, #4
 8006256:	e7f1      	b.n	800623c <__exponent+0x5e>

08006258 <_printf_float>:
 8006258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800625c:	b091      	sub	sp, #68	; 0x44
 800625e:	460c      	mov	r4, r1
 8006260:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006264:	4616      	mov	r6, r2
 8006266:	461f      	mov	r7, r3
 8006268:	4605      	mov	r5, r0
 800626a:	f000 fef3 	bl	8007054 <_localeconv_r>
 800626e:	6803      	ldr	r3, [r0, #0]
 8006270:	4618      	mov	r0, r3
 8006272:	9309      	str	r3, [sp, #36]	; 0x24
 8006274:	f7f9 ffd8 	bl	8000228 <strlen>
 8006278:	2300      	movs	r3, #0
 800627a:	930e      	str	r3, [sp, #56]	; 0x38
 800627c:	f8d8 3000 	ldr.w	r3, [r8]
 8006280:	900a      	str	r0, [sp, #40]	; 0x28
 8006282:	3307      	adds	r3, #7
 8006284:	f023 0307 	bic.w	r3, r3, #7
 8006288:	f103 0208 	add.w	r2, r3, #8
 800628c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006290:	f8d4 b000 	ldr.w	fp, [r4]
 8006294:	f8c8 2000 	str.w	r2, [r8]
 8006298:	e9d3 a800 	ldrd	sl, r8, [r3]
 800629c:	4652      	mov	r2, sl
 800629e:	4643      	mov	r3, r8
 80062a0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80062a4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80062a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80062aa:	f04f 32ff 	mov.w	r2, #4294967295
 80062ae:	4650      	mov	r0, sl
 80062b0:	4b9c      	ldr	r3, [pc, #624]	; (8006524 <_printf_float+0x2cc>)
 80062b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062b4:	f7fa fc16 	bl	8000ae4 <__aeabi_dcmpun>
 80062b8:	bb70      	cbnz	r0, 8006318 <_printf_float+0xc0>
 80062ba:	f04f 32ff 	mov.w	r2, #4294967295
 80062be:	4650      	mov	r0, sl
 80062c0:	4b98      	ldr	r3, [pc, #608]	; (8006524 <_printf_float+0x2cc>)
 80062c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062c4:	f7fa fbf0 	bl	8000aa8 <__aeabi_dcmple>
 80062c8:	bb30      	cbnz	r0, 8006318 <_printf_float+0xc0>
 80062ca:	2200      	movs	r2, #0
 80062cc:	2300      	movs	r3, #0
 80062ce:	4650      	mov	r0, sl
 80062d0:	4641      	mov	r1, r8
 80062d2:	f7fa fbdf 	bl	8000a94 <__aeabi_dcmplt>
 80062d6:	b110      	cbz	r0, 80062de <_printf_float+0x86>
 80062d8:	232d      	movs	r3, #45	; 0x2d
 80062da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062de:	4a92      	ldr	r2, [pc, #584]	; (8006528 <_printf_float+0x2d0>)
 80062e0:	4b92      	ldr	r3, [pc, #584]	; (800652c <_printf_float+0x2d4>)
 80062e2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80062e6:	bf94      	ite	ls
 80062e8:	4690      	movls	r8, r2
 80062ea:	4698      	movhi	r8, r3
 80062ec:	2303      	movs	r3, #3
 80062ee:	f04f 0a00 	mov.w	sl, #0
 80062f2:	6123      	str	r3, [r4, #16]
 80062f4:	f02b 0304 	bic.w	r3, fp, #4
 80062f8:	6023      	str	r3, [r4, #0]
 80062fa:	4633      	mov	r3, r6
 80062fc:	4621      	mov	r1, r4
 80062fe:	4628      	mov	r0, r5
 8006300:	9700      	str	r7, [sp, #0]
 8006302:	aa0f      	add	r2, sp, #60	; 0x3c
 8006304:	f000 f9d6 	bl	80066b4 <_printf_common>
 8006308:	3001      	adds	r0, #1
 800630a:	f040 8090 	bne.w	800642e <_printf_float+0x1d6>
 800630e:	f04f 30ff 	mov.w	r0, #4294967295
 8006312:	b011      	add	sp, #68	; 0x44
 8006314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006318:	4652      	mov	r2, sl
 800631a:	4643      	mov	r3, r8
 800631c:	4650      	mov	r0, sl
 800631e:	4641      	mov	r1, r8
 8006320:	f7fa fbe0 	bl	8000ae4 <__aeabi_dcmpun>
 8006324:	b148      	cbz	r0, 800633a <_printf_float+0xe2>
 8006326:	f1b8 0f00 	cmp.w	r8, #0
 800632a:	bfb8      	it	lt
 800632c:	232d      	movlt	r3, #45	; 0x2d
 800632e:	4a80      	ldr	r2, [pc, #512]	; (8006530 <_printf_float+0x2d8>)
 8006330:	bfb8      	it	lt
 8006332:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006336:	4b7f      	ldr	r3, [pc, #508]	; (8006534 <_printf_float+0x2dc>)
 8006338:	e7d3      	b.n	80062e2 <_printf_float+0x8a>
 800633a:	6863      	ldr	r3, [r4, #4]
 800633c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006340:	1c5a      	adds	r2, r3, #1
 8006342:	d142      	bne.n	80063ca <_printf_float+0x172>
 8006344:	2306      	movs	r3, #6
 8006346:	6063      	str	r3, [r4, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	9206      	str	r2, [sp, #24]
 800634c:	aa0e      	add	r2, sp, #56	; 0x38
 800634e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006352:	aa0d      	add	r2, sp, #52	; 0x34
 8006354:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006358:	9203      	str	r2, [sp, #12]
 800635a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800635e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006362:	6023      	str	r3, [r4, #0]
 8006364:	6863      	ldr	r3, [r4, #4]
 8006366:	4652      	mov	r2, sl
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	4628      	mov	r0, r5
 800636c:	4643      	mov	r3, r8
 800636e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006370:	f7ff fed6 	bl	8006120 <__cvt>
 8006374:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006376:	4680      	mov	r8, r0
 8006378:	2947      	cmp	r1, #71	; 0x47
 800637a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800637c:	d108      	bne.n	8006390 <_printf_float+0x138>
 800637e:	1cc8      	adds	r0, r1, #3
 8006380:	db02      	blt.n	8006388 <_printf_float+0x130>
 8006382:	6863      	ldr	r3, [r4, #4]
 8006384:	4299      	cmp	r1, r3
 8006386:	dd40      	ble.n	800640a <_printf_float+0x1b2>
 8006388:	f1a9 0902 	sub.w	r9, r9, #2
 800638c:	fa5f f989 	uxtb.w	r9, r9
 8006390:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006394:	d81f      	bhi.n	80063d6 <_printf_float+0x17e>
 8006396:	464a      	mov	r2, r9
 8006398:	3901      	subs	r1, #1
 800639a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800639e:	910d      	str	r1, [sp, #52]	; 0x34
 80063a0:	f7ff ff1d 	bl	80061de <__exponent>
 80063a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063a6:	4682      	mov	sl, r0
 80063a8:	1813      	adds	r3, r2, r0
 80063aa:	2a01      	cmp	r2, #1
 80063ac:	6123      	str	r3, [r4, #16]
 80063ae:	dc02      	bgt.n	80063b6 <_printf_float+0x15e>
 80063b0:	6822      	ldr	r2, [r4, #0]
 80063b2:	07d2      	lsls	r2, r2, #31
 80063b4:	d501      	bpl.n	80063ba <_printf_float+0x162>
 80063b6:	3301      	adds	r3, #1
 80063b8:	6123      	str	r3, [r4, #16]
 80063ba:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d09b      	beq.n	80062fa <_printf_float+0xa2>
 80063c2:	232d      	movs	r3, #45	; 0x2d
 80063c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063c8:	e797      	b.n	80062fa <_printf_float+0xa2>
 80063ca:	2947      	cmp	r1, #71	; 0x47
 80063cc:	d1bc      	bne.n	8006348 <_printf_float+0xf0>
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1ba      	bne.n	8006348 <_printf_float+0xf0>
 80063d2:	2301      	movs	r3, #1
 80063d4:	e7b7      	b.n	8006346 <_printf_float+0xee>
 80063d6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80063da:	d118      	bne.n	800640e <_printf_float+0x1b6>
 80063dc:	2900      	cmp	r1, #0
 80063de:	6863      	ldr	r3, [r4, #4]
 80063e0:	dd0b      	ble.n	80063fa <_printf_float+0x1a2>
 80063e2:	6121      	str	r1, [r4, #16]
 80063e4:	b913      	cbnz	r3, 80063ec <_printf_float+0x194>
 80063e6:	6822      	ldr	r2, [r4, #0]
 80063e8:	07d0      	lsls	r0, r2, #31
 80063ea:	d502      	bpl.n	80063f2 <_printf_float+0x19a>
 80063ec:	3301      	adds	r3, #1
 80063ee:	440b      	add	r3, r1
 80063f0:	6123      	str	r3, [r4, #16]
 80063f2:	f04f 0a00 	mov.w	sl, #0
 80063f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80063f8:	e7df      	b.n	80063ba <_printf_float+0x162>
 80063fa:	b913      	cbnz	r3, 8006402 <_printf_float+0x1aa>
 80063fc:	6822      	ldr	r2, [r4, #0]
 80063fe:	07d2      	lsls	r2, r2, #31
 8006400:	d501      	bpl.n	8006406 <_printf_float+0x1ae>
 8006402:	3302      	adds	r3, #2
 8006404:	e7f4      	b.n	80063f0 <_printf_float+0x198>
 8006406:	2301      	movs	r3, #1
 8006408:	e7f2      	b.n	80063f0 <_printf_float+0x198>
 800640a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800640e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006410:	4299      	cmp	r1, r3
 8006412:	db05      	blt.n	8006420 <_printf_float+0x1c8>
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	6121      	str	r1, [r4, #16]
 8006418:	07d8      	lsls	r0, r3, #31
 800641a:	d5ea      	bpl.n	80063f2 <_printf_float+0x19a>
 800641c:	1c4b      	adds	r3, r1, #1
 800641e:	e7e7      	b.n	80063f0 <_printf_float+0x198>
 8006420:	2900      	cmp	r1, #0
 8006422:	bfcc      	ite	gt
 8006424:	2201      	movgt	r2, #1
 8006426:	f1c1 0202 	rsble	r2, r1, #2
 800642a:	4413      	add	r3, r2
 800642c:	e7e0      	b.n	80063f0 <_printf_float+0x198>
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	055a      	lsls	r2, r3, #21
 8006432:	d407      	bmi.n	8006444 <_printf_float+0x1ec>
 8006434:	6923      	ldr	r3, [r4, #16]
 8006436:	4642      	mov	r2, r8
 8006438:	4631      	mov	r1, r6
 800643a:	4628      	mov	r0, r5
 800643c:	47b8      	blx	r7
 800643e:	3001      	adds	r0, #1
 8006440:	d12b      	bne.n	800649a <_printf_float+0x242>
 8006442:	e764      	b.n	800630e <_printf_float+0xb6>
 8006444:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006448:	f240 80dd 	bls.w	8006606 <_printf_float+0x3ae>
 800644c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006450:	2200      	movs	r2, #0
 8006452:	2300      	movs	r3, #0
 8006454:	f7fa fb14 	bl	8000a80 <__aeabi_dcmpeq>
 8006458:	2800      	cmp	r0, #0
 800645a:	d033      	beq.n	80064c4 <_printf_float+0x26c>
 800645c:	2301      	movs	r3, #1
 800645e:	4631      	mov	r1, r6
 8006460:	4628      	mov	r0, r5
 8006462:	4a35      	ldr	r2, [pc, #212]	; (8006538 <_printf_float+0x2e0>)
 8006464:	47b8      	blx	r7
 8006466:	3001      	adds	r0, #1
 8006468:	f43f af51 	beq.w	800630e <_printf_float+0xb6>
 800646c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006470:	429a      	cmp	r2, r3
 8006472:	db02      	blt.n	800647a <_printf_float+0x222>
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	07d8      	lsls	r0, r3, #31
 8006478:	d50f      	bpl.n	800649a <_printf_float+0x242>
 800647a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800647e:	4631      	mov	r1, r6
 8006480:	4628      	mov	r0, r5
 8006482:	47b8      	blx	r7
 8006484:	3001      	adds	r0, #1
 8006486:	f43f af42 	beq.w	800630e <_printf_float+0xb6>
 800648a:	f04f 0800 	mov.w	r8, #0
 800648e:	f104 091a 	add.w	r9, r4, #26
 8006492:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006494:	3b01      	subs	r3, #1
 8006496:	4543      	cmp	r3, r8
 8006498:	dc09      	bgt.n	80064ae <_printf_float+0x256>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	079b      	lsls	r3, r3, #30
 800649e:	f100 8104 	bmi.w	80066aa <_printf_float+0x452>
 80064a2:	68e0      	ldr	r0, [r4, #12]
 80064a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064a6:	4298      	cmp	r0, r3
 80064a8:	bfb8      	it	lt
 80064aa:	4618      	movlt	r0, r3
 80064ac:	e731      	b.n	8006312 <_printf_float+0xba>
 80064ae:	2301      	movs	r3, #1
 80064b0:	464a      	mov	r2, r9
 80064b2:	4631      	mov	r1, r6
 80064b4:	4628      	mov	r0, r5
 80064b6:	47b8      	blx	r7
 80064b8:	3001      	adds	r0, #1
 80064ba:	f43f af28 	beq.w	800630e <_printf_float+0xb6>
 80064be:	f108 0801 	add.w	r8, r8, #1
 80064c2:	e7e6      	b.n	8006492 <_printf_float+0x23a>
 80064c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	dc38      	bgt.n	800653c <_printf_float+0x2e4>
 80064ca:	2301      	movs	r3, #1
 80064cc:	4631      	mov	r1, r6
 80064ce:	4628      	mov	r0, r5
 80064d0:	4a19      	ldr	r2, [pc, #100]	; (8006538 <_printf_float+0x2e0>)
 80064d2:	47b8      	blx	r7
 80064d4:	3001      	adds	r0, #1
 80064d6:	f43f af1a 	beq.w	800630e <_printf_float+0xb6>
 80064da:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80064de:	4313      	orrs	r3, r2
 80064e0:	d102      	bne.n	80064e8 <_printf_float+0x290>
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	07d9      	lsls	r1, r3, #31
 80064e6:	d5d8      	bpl.n	800649a <_printf_float+0x242>
 80064e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064ec:	4631      	mov	r1, r6
 80064ee:	4628      	mov	r0, r5
 80064f0:	47b8      	blx	r7
 80064f2:	3001      	adds	r0, #1
 80064f4:	f43f af0b 	beq.w	800630e <_printf_float+0xb6>
 80064f8:	f04f 0900 	mov.w	r9, #0
 80064fc:	f104 0a1a 	add.w	sl, r4, #26
 8006500:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006502:	425b      	negs	r3, r3
 8006504:	454b      	cmp	r3, r9
 8006506:	dc01      	bgt.n	800650c <_printf_float+0x2b4>
 8006508:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800650a:	e794      	b.n	8006436 <_printf_float+0x1de>
 800650c:	2301      	movs	r3, #1
 800650e:	4652      	mov	r2, sl
 8006510:	4631      	mov	r1, r6
 8006512:	4628      	mov	r0, r5
 8006514:	47b8      	blx	r7
 8006516:	3001      	adds	r0, #1
 8006518:	f43f aef9 	beq.w	800630e <_printf_float+0xb6>
 800651c:	f109 0901 	add.w	r9, r9, #1
 8006520:	e7ee      	b.n	8006500 <_printf_float+0x2a8>
 8006522:	bf00      	nop
 8006524:	7fefffff 	.word	0x7fefffff
 8006528:	0800a916 	.word	0x0800a916
 800652c:	0800a91a 	.word	0x0800a91a
 8006530:	0800a91e 	.word	0x0800a91e
 8006534:	0800a922 	.word	0x0800a922
 8006538:	0800a926 	.word	0x0800a926
 800653c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800653e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006540:	429a      	cmp	r2, r3
 8006542:	bfa8      	it	ge
 8006544:	461a      	movge	r2, r3
 8006546:	2a00      	cmp	r2, #0
 8006548:	4691      	mov	r9, r2
 800654a:	dc37      	bgt.n	80065bc <_printf_float+0x364>
 800654c:	f04f 0b00 	mov.w	fp, #0
 8006550:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006554:	f104 021a 	add.w	r2, r4, #26
 8006558:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800655c:	ebaa 0309 	sub.w	r3, sl, r9
 8006560:	455b      	cmp	r3, fp
 8006562:	dc33      	bgt.n	80065cc <_printf_float+0x374>
 8006564:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006568:	429a      	cmp	r2, r3
 800656a:	db3b      	blt.n	80065e4 <_printf_float+0x38c>
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	07da      	lsls	r2, r3, #31
 8006570:	d438      	bmi.n	80065e4 <_printf_float+0x38c>
 8006572:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006576:	eba2 0903 	sub.w	r9, r2, r3
 800657a:	eba2 020a 	sub.w	r2, r2, sl
 800657e:	4591      	cmp	r9, r2
 8006580:	bfa8      	it	ge
 8006582:	4691      	movge	r9, r2
 8006584:	f1b9 0f00 	cmp.w	r9, #0
 8006588:	dc34      	bgt.n	80065f4 <_printf_float+0x39c>
 800658a:	f04f 0800 	mov.w	r8, #0
 800658e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006592:	f104 0a1a 	add.w	sl, r4, #26
 8006596:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800659a:	1a9b      	subs	r3, r3, r2
 800659c:	eba3 0309 	sub.w	r3, r3, r9
 80065a0:	4543      	cmp	r3, r8
 80065a2:	f77f af7a 	ble.w	800649a <_printf_float+0x242>
 80065a6:	2301      	movs	r3, #1
 80065a8:	4652      	mov	r2, sl
 80065aa:	4631      	mov	r1, r6
 80065ac:	4628      	mov	r0, r5
 80065ae:	47b8      	blx	r7
 80065b0:	3001      	adds	r0, #1
 80065b2:	f43f aeac 	beq.w	800630e <_printf_float+0xb6>
 80065b6:	f108 0801 	add.w	r8, r8, #1
 80065ba:	e7ec      	b.n	8006596 <_printf_float+0x33e>
 80065bc:	4613      	mov	r3, r2
 80065be:	4631      	mov	r1, r6
 80065c0:	4642      	mov	r2, r8
 80065c2:	4628      	mov	r0, r5
 80065c4:	47b8      	blx	r7
 80065c6:	3001      	adds	r0, #1
 80065c8:	d1c0      	bne.n	800654c <_printf_float+0x2f4>
 80065ca:	e6a0      	b.n	800630e <_printf_float+0xb6>
 80065cc:	2301      	movs	r3, #1
 80065ce:	4631      	mov	r1, r6
 80065d0:	4628      	mov	r0, r5
 80065d2:	920b      	str	r2, [sp, #44]	; 0x2c
 80065d4:	47b8      	blx	r7
 80065d6:	3001      	adds	r0, #1
 80065d8:	f43f ae99 	beq.w	800630e <_printf_float+0xb6>
 80065dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80065de:	f10b 0b01 	add.w	fp, fp, #1
 80065e2:	e7b9      	b.n	8006558 <_printf_float+0x300>
 80065e4:	4631      	mov	r1, r6
 80065e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065ea:	4628      	mov	r0, r5
 80065ec:	47b8      	blx	r7
 80065ee:	3001      	adds	r0, #1
 80065f0:	d1bf      	bne.n	8006572 <_printf_float+0x31a>
 80065f2:	e68c      	b.n	800630e <_printf_float+0xb6>
 80065f4:	464b      	mov	r3, r9
 80065f6:	4631      	mov	r1, r6
 80065f8:	4628      	mov	r0, r5
 80065fa:	eb08 020a 	add.w	r2, r8, sl
 80065fe:	47b8      	blx	r7
 8006600:	3001      	adds	r0, #1
 8006602:	d1c2      	bne.n	800658a <_printf_float+0x332>
 8006604:	e683      	b.n	800630e <_printf_float+0xb6>
 8006606:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006608:	2a01      	cmp	r2, #1
 800660a:	dc01      	bgt.n	8006610 <_printf_float+0x3b8>
 800660c:	07db      	lsls	r3, r3, #31
 800660e:	d539      	bpl.n	8006684 <_printf_float+0x42c>
 8006610:	2301      	movs	r3, #1
 8006612:	4642      	mov	r2, r8
 8006614:	4631      	mov	r1, r6
 8006616:	4628      	mov	r0, r5
 8006618:	47b8      	blx	r7
 800661a:	3001      	adds	r0, #1
 800661c:	f43f ae77 	beq.w	800630e <_printf_float+0xb6>
 8006620:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006624:	4631      	mov	r1, r6
 8006626:	4628      	mov	r0, r5
 8006628:	47b8      	blx	r7
 800662a:	3001      	adds	r0, #1
 800662c:	f43f ae6f 	beq.w	800630e <_printf_float+0xb6>
 8006630:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006634:	2200      	movs	r2, #0
 8006636:	2300      	movs	r3, #0
 8006638:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800663c:	f7fa fa20 	bl	8000a80 <__aeabi_dcmpeq>
 8006640:	b9d8      	cbnz	r0, 800667a <_printf_float+0x422>
 8006642:	f109 33ff 	add.w	r3, r9, #4294967295
 8006646:	f108 0201 	add.w	r2, r8, #1
 800664a:	4631      	mov	r1, r6
 800664c:	4628      	mov	r0, r5
 800664e:	47b8      	blx	r7
 8006650:	3001      	adds	r0, #1
 8006652:	d10e      	bne.n	8006672 <_printf_float+0x41a>
 8006654:	e65b      	b.n	800630e <_printf_float+0xb6>
 8006656:	2301      	movs	r3, #1
 8006658:	464a      	mov	r2, r9
 800665a:	4631      	mov	r1, r6
 800665c:	4628      	mov	r0, r5
 800665e:	47b8      	blx	r7
 8006660:	3001      	adds	r0, #1
 8006662:	f43f ae54 	beq.w	800630e <_printf_float+0xb6>
 8006666:	f108 0801 	add.w	r8, r8, #1
 800666a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800666c:	3b01      	subs	r3, #1
 800666e:	4543      	cmp	r3, r8
 8006670:	dcf1      	bgt.n	8006656 <_printf_float+0x3fe>
 8006672:	4653      	mov	r3, sl
 8006674:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006678:	e6de      	b.n	8006438 <_printf_float+0x1e0>
 800667a:	f04f 0800 	mov.w	r8, #0
 800667e:	f104 091a 	add.w	r9, r4, #26
 8006682:	e7f2      	b.n	800666a <_printf_float+0x412>
 8006684:	2301      	movs	r3, #1
 8006686:	4642      	mov	r2, r8
 8006688:	e7df      	b.n	800664a <_printf_float+0x3f2>
 800668a:	2301      	movs	r3, #1
 800668c:	464a      	mov	r2, r9
 800668e:	4631      	mov	r1, r6
 8006690:	4628      	mov	r0, r5
 8006692:	47b8      	blx	r7
 8006694:	3001      	adds	r0, #1
 8006696:	f43f ae3a 	beq.w	800630e <_printf_float+0xb6>
 800669a:	f108 0801 	add.w	r8, r8, #1
 800669e:	68e3      	ldr	r3, [r4, #12]
 80066a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80066a2:	1a5b      	subs	r3, r3, r1
 80066a4:	4543      	cmp	r3, r8
 80066a6:	dcf0      	bgt.n	800668a <_printf_float+0x432>
 80066a8:	e6fb      	b.n	80064a2 <_printf_float+0x24a>
 80066aa:	f04f 0800 	mov.w	r8, #0
 80066ae:	f104 0919 	add.w	r9, r4, #25
 80066b2:	e7f4      	b.n	800669e <_printf_float+0x446>

080066b4 <_printf_common>:
 80066b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066b8:	4616      	mov	r6, r2
 80066ba:	4699      	mov	r9, r3
 80066bc:	688a      	ldr	r2, [r1, #8]
 80066be:	690b      	ldr	r3, [r1, #16]
 80066c0:	4607      	mov	r7, r0
 80066c2:	4293      	cmp	r3, r2
 80066c4:	bfb8      	it	lt
 80066c6:	4613      	movlt	r3, r2
 80066c8:	6033      	str	r3, [r6, #0]
 80066ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066ce:	460c      	mov	r4, r1
 80066d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066d4:	b10a      	cbz	r2, 80066da <_printf_common+0x26>
 80066d6:	3301      	adds	r3, #1
 80066d8:	6033      	str	r3, [r6, #0]
 80066da:	6823      	ldr	r3, [r4, #0]
 80066dc:	0699      	lsls	r1, r3, #26
 80066de:	bf42      	ittt	mi
 80066e0:	6833      	ldrmi	r3, [r6, #0]
 80066e2:	3302      	addmi	r3, #2
 80066e4:	6033      	strmi	r3, [r6, #0]
 80066e6:	6825      	ldr	r5, [r4, #0]
 80066e8:	f015 0506 	ands.w	r5, r5, #6
 80066ec:	d106      	bne.n	80066fc <_printf_common+0x48>
 80066ee:	f104 0a19 	add.w	sl, r4, #25
 80066f2:	68e3      	ldr	r3, [r4, #12]
 80066f4:	6832      	ldr	r2, [r6, #0]
 80066f6:	1a9b      	subs	r3, r3, r2
 80066f8:	42ab      	cmp	r3, r5
 80066fa:	dc2b      	bgt.n	8006754 <_printf_common+0xa0>
 80066fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006700:	1e13      	subs	r3, r2, #0
 8006702:	6822      	ldr	r2, [r4, #0]
 8006704:	bf18      	it	ne
 8006706:	2301      	movne	r3, #1
 8006708:	0692      	lsls	r2, r2, #26
 800670a:	d430      	bmi.n	800676e <_printf_common+0xba>
 800670c:	4649      	mov	r1, r9
 800670e:	4638      	mov	r0, r7
 8006710:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006714:	47c0      	blx	r8
 8006716:	3001      	adds	r0, #1
 8006718:	d023      	beq.n	8006762 <_printf_common+0xae>
 800671a:	6823      	ldr	r3, [r4, #0]
 800671c:	6922      	ldr	r2, [r4, #16]
 800671e:	f003 0306 	and.w	r3, r3, #6
 8006722:	2b04      	cmp	r3, #4
 8006724:	bf14      	ite	ne
 8006726:	2500      	movne	r5, #0
 8006728:	6833      	ldreq	r3, [r6, #0]
 800672a:	f04f 0600 	mov.w	r6, #0
 800672e:	bf08      	it	eq
 8006730:	68e5      	ldreq	r5, [r4, #12]
 8006732:	f104 041a 	add.w	r4, r4, #26
 8006736:	bf08      	it	eq
 8006738:	1aed      	subeq	r5, r5, r3
 800673a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800673e:	bf08      	it	eq
 8006740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006744:	4293      	cmp	r3, r2
 8006746:	bfc4      	itt	gt
 8006748:	1a9b      	subgt	r3, r3, r2
 800674a:	18ed      	addgt	r5, r5, r3
 800674c:	42b5      	cmp	r5, r6
 800674e:	d11a      	bne.n	8006786 <_printf_common+0xd2>
 8006750:	2000      	movs	r0, #0
 8006752:	e008      	b.n	8006766 <_printf_common+0xb2>
 8006754:	2301      	movs	r3, #1
 8006756:	4652      	mov	r2, sl
 8006758:	4649      	mov	r1, r9
 800675a:	4638      	mov	r0, r7
 800675c:	47c0      	blx	r8
 800675e:	3001      	adds	r0, #1
 8006760:	d103      	bne.n	800676a <_printf_common+0xb6>
 8006762:	f04f 30ff 	mov.w	r0, #4294967295
 8006766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800676a:	3501      	adds	r5, #1
 800676c:	e7c1      	b.n	80066f2 <_printf_common+0x3e>
 800676e:	2030      	movs	r0, #48	; 0x30
 8006770:	18e1      	adds	r1, r4, r3
 8006772:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800677c:	4422      	add	r2, r4
 800677e:	3302      	adds	r3, #2
 8006780:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006784:	e7c2      	b.n	800670c <_printf_common+0x58>
 8006786:	2301      	movs	r3, #1
 8006788:	4622      	mov	r2, r4
 800678a:	4649      	mov	r1, r9
 800678c:	4638      	mov	r0, r7
 800678e:	47c0      	blx	r8
 8006790:	3001      	adds	r0, #1
 8006792:	d0e6      	beq.n	8006762 <_printf_common+0xae>
 8006794:	3601      	adds	r6, #1
 8006796:	e7d9      	b.n	800674c <_printf_common+0x98>

08006798 <_printf_i>:
 8006798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800679c:	7e0f      	ldrb	r7, [r1, #24]
 800679e:	4691      	mov	r9, r2
 80067a0:	2f78      	cmp	r7, #120	; 0x78
 80067a2:	4680      	mov	r8, r0
 80067a4:	460c      	mov	r4, r1
 80067a6:	469a      	mov	sl, r3
 80067a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067ae:	d807      	bhi.n	80067c0 <_printf_i+0x28>
 80067b0:	2f62      	cmp	r7, #98	; 0x62
 80067b2:	d80a      	bhi.n	80067ca <_printf_i+0x32>
 80067b4:	2f00      	cmp	r7, #0
 80067b6:	f000 80d5 	beq.w	8006964 <_printf_i+0x1cc>
 80067ba:	2f58      	cmp	r7, #88	; 0x58
 80067bc:	f000 80c1 	beq.w	8006942 <_printf_i+0x1aa>
 80067c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067c8:	e03a      	b.n	8006840 <_printf_i+0xa8>
 80067ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067ce:	2b15      	cmp	r3, #21
 80067d0:	d8f6      	bhi.n	80067c0 <_printf_i+0x28>
 80067d2:	a101      	add	r1, pc, #4	; (adr r1, 80067d8 <_printf_i+0x40>)
 80067d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067d8:	08006831 	.word	0x08006831
 80067dc:	08006845 	.word	0x08006845
 80067e0:	080067c1 	.word	0x080067c1
 80067e4:	080067c1 	.word	0x080067c1
 80067e8:	080067c1 	.word	0x080067c1
 80067ec:	080067c1 	.word	0x080067c1
 80067f0:	08006845 	.word	0x08006845
 80067f4:	080067c1 	.word	0x080067c1
 80067f8:	080067c1 	.word	0x080067c1
 80067fc:	080067c1 	.word	0x080067c1
 8006800:	080067c1 	.word	0x080067c1
 8006804:	0800694b 	.word	0x0800694b
 8006808:	08006871 	.word	0x08006871
 800680c:	08006905 	.word	0x08006905
 8006810:	080067c1 	.word	0x080067c1
 8006814:	080067c1 	.word	0x080067c1
 8006818:	0800696d 	.word	0x0800696d
 800681c:	080067c1 	.word	0x080067c1
 8006820:	08006871 	.word	0x08006871
 8006824:	080067c1 	.word	0x080067c1
 8006828:	080067c1 	.word	0x080067c1
 800682c:	0800690d 	.word	0x0800690d
 8006830:	682b      	ldr	r3, [r5, #0]
 8006832:	1d1a      	adds	r2, r3, #4
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	602a      	str	r2, [r5, #0]
 8006838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800683c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006840:	2301      	movs	r3, #1
 8006842:	e0a0      	b.n	8006986 <_printf_i+0x1ee>
 8006844:	6820      	ldr	r0, [r4, #0]
 8006846:	682b      	ldr	r3, [r5, #0]
 8006848:	0607      	lsls	r7, r0, #24
 800684a:	f103 0104 	add.w	r1, r3, #4
 800684e:	6029      	str	r1, [r5, #0]
 8006850:	d501      	bpl.n	8006856 <_printf_i+0xbe>
 8006852:	681e      	ldr	r6, [r3, #0]
 8006854:	e003      	b.n	800685e <_printf_i+0xc6>
 8006856:	0646      	lsls	r6, r0, #25
 8006858:	d5fb      	bpl.n	8006852 <_printf_i+0xba>
 800685a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800685e:	2e00      	cmp	r6, #0
 8006860:	da03      	bge.n	800686a <_printf_i+0xd2>
 8006862:	232d      	movs	r3, #45	; 0x2d
 8006864:	4276      	negs	r6, r6
 8006866:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800686a:	230a      	movs	r3, #10
 800686c:	4859      	ldr	r0, [pc, #356]	; (80069d4 <_printf_i+0x23c>)
 800686e:	e012      	b.n	8006896 <_printf_i+0xfe>
 8006870:	682b      	ldr	r3, [r5, #0]
 8006872:	6820      	ldr	r0, [r4, #0]
 8006874:	1d19      	adds	r1, r3, #4
 8006876:	6029      	str	r1, [r5, #0]
 8006878:	0605      	lsls	r5, r0, #24
 800687a:	d501      	bpl.n	8006880 <_printf_i+0xe8>
 800687c:	681e      	ldr	r6, [r3, #0]
 800687e:	e002      	b.n	8006886 <_printf_i+0xee>
 8006880:	0641      	lsls	r1, r0, #25
 8006882:	d5fb      	bpl.n	800687c <_printf_i+0xe4>
 8006884:	881e      	ldrh	r6, [r3, #0]
 8006886:	2f6f      	cmp	r7, #111	; 0x6f
 8006888:	bf0c      	ite	eq
 800688a:	2308      	moveq	r3, #8
 800688c:	230a      	movne	r3, #10
 800688e:	4851      	ldr	r0, [pc, #324]	; (80069d4 <_printf_i+0x23c>)
 8006890:	2100      	movs	r1, #0
 8006892:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006896:	6865      	ldr	r5, [r4, #4]
 8006898:	2d00      	cmp	r5, #0
 800689a:	bfa8      	it	ge
 800689c:	6821      	ldrge	r1, [r4, #0]
 800689e:	60a5      	str	r5, [r4, #8]
 80068a0:	bfa4      	itt	ge
 80068a2:	f021 0104 	bicge.w	r1, r1, #4
 80068a6:	6021      	strge	r1, [r4, #0]
 80068a8:	b90e      	cbnz	r6, 80068ae <_printf_i+0x116>
 80068aa:	2d00      	cmp	r5, #0
 80068ac:	d04b      	beq.n	8006946 <_printf_i+0x1ae>
 80068ae:	4615      	mov	r5, r2
 80068b0:	fbb6 f1f3 	udiv	r1, r6, r3
 80068b4:	fb03 6711 	mls	r7, r3, r1, r6
 80068b8:	5dc7      	ldrb	r7, [r0, r7]
 80068ba:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068be:	4637      	mov	r7, r6
 80068c0:	42bb      	cmp	r3, r7
 80068c2:	460e      	mov	r6, r1
 80068c4:	d9f4      	bls.n	80068b0 <_printf_i+0x118>
 80068c6:	2b08      	cmp	r3, #8
 80068c8:	d10b      	bne.n	80068e2 <_printf_i+0x14a>
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	07de      	lsls	r6, r3, #31
 80068ce:	d508      	bpl.n	80068e2 <_printf_i+0x14a>
 80068d0:	6923      	ldr	r3, [r4, #16]
 80068d2:	6861      	ldr	r1, [r4, #4]
 80068d4:	4299      	cmp	r1, r3
 80068d6:	bfde      	ittt	le
 80068d8:	2330      	movle	r3, #48	; 0x30
 80068da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068e2:	1b52      	subs	r2, r2, r5
 80068e4:	6122      	str	r2, [r4, #16]
 80068e6:	464b      	mov	r3, r9
 80068e8:	4621      	mov	r1, r4
 80068ea:	4640      	mov	r0, r8
 80068ec:	f8cd a000 	str.w	sl, [sp]
 80068f0:	aa03      	add	r2, sp, #12
 80068f2:	f7ff fedf 	bl	80066b4 <_printf_common>
 80068f6:	3001      	adds	r0, #1
 80068f8:	d14a      	bne.n	8006990 <_printf_i+0x1f8>
 80068fa:	f04f 30ff 	mov.w	r0, #4294967295
 80068fe:	b004      	add	sp, #16
 8006900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006904:	6823      	ldr	r3, [r4, #0]
 8006906:	f043 0320 	orr.w	r3, r3, #32
 800690a:	6023      	str	r3, [r4, #0]
 800690c:	2778      	movs	r7, #120	; 0x78
 800690e:	4832      	ldr	r0, [pc, #200]	; (80069d8 <_printf_i+0x240>)
 8006910:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006914:	6823      	ldr	r3, [r4, #0]
 8006916:	6829      	ldr	r1, [r5, #0]
 8006918:	061f      	lsls	r7, r3, #24
 800691a:	f851 6b04 	ldr.w	r6, [r1], #4
 800691e:	d402      	bmi.n	8006926 <_printf_i+0x18e>
 8006920:	065f      	lsls	r7, r3, #25
 8006922:	bf48      	it	mi
 8006924:	b2b6      	uxthmi	r6, r6
 8006926:	07df      	lsls	r7, r3, #31
 8006928:	bf48      	it	mi
 800692a:	f043 0320 	orrmi.w	r3, r3, #32
 800692e:	6029      	str	r1, [r5, #0]
 8006930:	bf48      	it	mi
 8006932:	6023      	strmi	r3, [r4, #0]
 8006934:	b91e      	cbnz	r6, 800693e <_printf_i+0x1a6>
 8006936:	6823      	ldr	r3, [r4, #0]
 8006938:	f023 0320 	bic.w	r3, r3, #32
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	2310      	movs	r3, #16
 8006940:	e7a6      	b.n	8006890 <_printf_i+0xf8>
 8006942:	4824      	ldr	r0, [pc, #144]	; (80069d4 <_printf_i+0x23c>)
 8006944:	e7e4      	b.n	8006910 <_printf_i+0x178>
 8006946:	4615      	mov	r5, r2
 8006948:	e7bd      	b.n	80068c6 <_printf_i+0x12e>
 800694a:	682b      	ldr	r3, [r5, #0]
 800694c:	6826      	ldr	r6, [r4, #0]
 800694e:	1d18      	adds	r0, r3, #4
 8006950:	6961      	ldr	r1, [r4, #20]
 8006952:	6028      	str	r0, [r5, #0]
 8006954:	0635      	lsls	r5, r6, #24
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	d501      	bpl.n	800695e <_printf_i+0x1c6>
 800695a:	6019      	str	r1, [r3, #0]
 800695c:	e002      	b.n	8006964 <_printf_i+0x1cc>
 800695e:	0670      	lsls	r0, r6, #25
 8006960:	d5fb      	bpl.n	800695a <_printf_i+0x1c2>
 8006962:	8019      	strh	r1, [r3, #0]
 8006964:	2300      	movs	r3, #0
 8006966:	4615      	mov	r5, r2
 8006968:	6123      	str	r3, [r4, #16]
 800696a:	e7bc      	b.n	80068e6 <_printf_i+0x14e>
 800696c:	682b      	ldr	r3, [r5, #0]
 800696e:	2100      	movs	r1, #0
 8006970:	1d1a      	adds	r2, r3, #4
 8006972:	602a      	str	r2, [r5, #0]
 8006974:	681d      	ldr	r5, [r3, #0]
 8006976:	6862      	ldr	r2, [r4, #4]
 8006978:	4628      	mov	r0, r5
 800697a:	f000 fbe2 	bl	8007142 <memchr>
 800697e:	b108      	cbz	r0, 8006984 <_printf_i+0x1ec>
 8006980:	1b40      	subs	r0, r0, r5
 8006982:	6060      	str	r0, [r4, #4]
 8006984:	6863      	ldr	r3, [r4, #4]
 8006986:	6123      	str	r3, [r4, #16]
 8006988:	2300      	movs	r3, #0
 800698a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800698e:	e7aa      	b.n	80068e6 <_printf_i+0x14e>
 8006990:	462a      	mov	r2, r5
 8006992:	4649      	mov	r1, r9
 8006994:	4640      	mov	r0, r8
 8006996:	6923      	ldr	r3, [r4, #16]
 8006998:	47d0      	blx	sl
 800699a:	3001      	adds	r0, #1
 800699c:	d0ad      	beq.n	80068fa <_printf_i+0x162>
 800699e:	6823      	ldr	r3, [r4, #0]
 80069a0:	079b      	lsls	r3, r3, #30
 80069a2:	d413      	bmi.n	80069cc <_printf_i+0x234>
 80069a4:	68e0      	ldr	r0, [r4, #12]
 80069a6:	9b03      	ldr	r3, [sp, #12]
 80069a8:	4298      	cmp	r0, r3
 80069aa:	bfb8      	it	lt
 80069ac:	4618      	movlt	r0, r3
 80069ae:	e7a6      	b.n	80068fe <_printf_i+0x166>
 80069b0:	2301      	movs	r3, #1
 80069b2:	4632      	mov	r2, r6
 80069b4:	4649      	mov	r1, r9
 80069b6:	4640      	mov	r0, r8
 80069b8:	47d0      	blx	sl
 80069ba:	3001      	adds	r0, #1
 80069bc:	d09d      	beq.n	80068fa <_printf_i+0x162>
 80069be:	3501      	adds	r5, #1
 80069c0:	68e3      	ldr	r3, [r4, #12]
 80069c2:	9903      	ldr	r1, [sp, #12]
 80069c4:	1a5b      	subs	r3, r3, r1
 80069c6:	42ab      	cmp	r3, r5
 80069c8:	dcf2      	bgt.n	80069b0 <_printf_i+0x218>
 80069ca:	e7eb      	b.n	80069a4 <_printf_i+0x20c>
 80069cc:	2500      	movs	r5, #0
 80069ce:	f104 0619 	add.w	r6, r4, #25
 80069d2:	e7f5      	b.n	80069c0 <_printf_i+0x228>
 80069d4:	0800a928 	.word	0x0800a928
 80069d8:	0800a939 	.word	0x0800a939

080069dc <_scanf_float>:
 80069dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e0:	b087      	sub	sp, #28
 80069e2:	9303      	str	r3, [sp, #12]
 80069e4:	688b      	ldr	r3, [r1, #8]
 80069e6:	4617      	mov	r7, r2
 80069e8:	1e5a      	subs	r2, r3, #1
 80069ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80069ee:	bf85      	ittet	hi
 80069f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80069f4:	195b      	addhi	r3, r3, r5
 80069f6:	2300      	movls	r3, #0
 80069f8:	9302      	strhi	r3, [sp, #8]
 80069fa:	bf88      	it	hi
 80069fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006a00:	468b      	mov	fp, r1
 8006a02:	f04f 0500 	mov.w	r5, #0
 8006a06:	bf8c      	ite	hi
 8006a08:	608b      	strhi	r3, [r1, #8]
 8006a0a:	9302      	strls	r3, [sp, #8]
 8006a0c:	680b      	ldr	r3, [r1, #0]
 8006a0e:	4680      	mov	r8, r0
 8006a10:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006a14:	f84b 3b1c 	str.w	r3, [fp], #28
 8006a18:	460c      	mov	r4, r1
 8006a1a:	465e      	mov	r6, fp
 8006a1c:	46aa      	mov	sl, r5
 8006a1e:	46a9      	mov	r9, r5
 8006a20:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006a24:	9501      	str	r5, [sp, #4]
 8006a26:	68a2      	ldr	r2, [r4, #8]
 8006a28:	b152      	cbz	r2, 8006a40 <_scanf_float+0x64>
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	2b4e      	cmp	r3, #78	; 0x4e
 8006a30:	d864      	bhi.n	8006afc <_scanf_float+0x120>
 8006a32:	2b40      	cmp	r3, #64	; 0x40
 8006a34:	d83c      	bhi.n	8006ab0 <_scanf_float+0xd4>
 8006a36:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006a3a:	b2c8      	uxtb	r0, r1
 8006a3c:	280e      	cmp	r0, #14
 8006a3e:	d93a      	bls.n	8006ab6 <_scanf_float+0xda>
 8006a40:	f1b9 0f00 	cmp.w	r9, #0
 8006a44:	d003      	beq.n	8006a4e <_scanf_float+0x72>
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a4c:	6023      	str	r3, [r4, #0]
 8006a4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a52:	f1ba 0f01 	cmp.w	sl, #1
 8006a56:	f200 8113 	bhi.w	8006c80 <_scanf_float+0x2a4>
 8006a5a:	455e      	cmp	r6, fp
 8006a5c:	f200 8105 	bhi.w	8006c6a <_scanf_float+0x28e>
 8006a60:	2501      	movs	r5, #1
 8006a62:	4628      	mov	r0, r5
 8006a64:	b007      	add	sp, #28
 8006a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a6a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006a6e:	2a0d      	cmp	r2, #13
 8006a70:	d8e6      	bhi.n	8006a40 <_scanf_float+0x64>
 8006a72:	a101      	add	r1, pc, #4	; (adr r1, 8006a78 <_scanf_float+0x9c>)
 8006a74:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006a78:	08006bb7 	.word	0x08006bb7
 8006a7c:	08006a41 	.word	0x08006a41
 8006a80:	08006a41 	.word	0x08006a41
 8006a84:	08006a41 	.word	0x08006a41
 8006a88:	08006c17 	.word	0x08006c17
 8006a8c:	08006bef 	.word	0x08006bef
 8006a90:	08006a41 	.word	0x08006a41
 8006a94:	08006a41 	.word	0x08006a41
 8006a98:	08006bc5 	.word	0x08006bc5
 8006a9c:	08006a41 	.word	0x08006a41
 8006aa0:	08006a41 	.word	0x08006a41
 8006aa4:	08006a41 	.word	0x08006a41
 8006aa8:	08006a41 	.word	0x08006a41
 8006aac:	08006b7d 	.word	0x08006b7d
 8006ab0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006ab4:	e7db      	b.n	8006a6e <_scanf_float+0x92>
 8006ab6:	290e      	cmp	r1, #14
 8006ab8:	d8c2      	bhi.n	8006a40 <_scanf_float+0x64>
 8006aba:	a001      	add	r0, pc, #4	; (adr r0, 8006ac0 <_scanf_float+0xe4>)
 8006abc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006ac0:	08006b6f 	.word	0x08006b6f
 8006ac4:	08006a41 	.word	0x08006a41
 8006ac8:	08006b6f 	.word	0x08006b6f
 8006acc:	08006c03 	.word	0x08006c03
 8006ad0:	08006a41 	.word	0x08006a41
 8006ad4:	08006b1d 	.word	0x08006b1d
 8006ad8:	08006b59 	.word	0x08006b59
 8006adc:	08006b59 	.word	0x08006b59
 8006ae0:	08006b59 	.word	0x08006b59
 8006ae4:	08006b59 	.word	0x08006b59
 8006ae8:	08006b59 	.word	0x08006b59
 8006aec:	08006b59 	.word	0x08006b59
 8006af0:	08006b59 	.word	0x08006b59
 8006af4:	08006b59 	.word	0x08006b59
 8006af8:	08006b59 	.word	0x08006b59
 8006afc:	2b6e      	cmp	r3, #110	; 0x6e
 8006afe:	d809      	bhi.n	8006b14 <_scanf_float+0x138>
 8006b00:	2b60      	cmp	r3, #96	; 0x60
 8006b02:	d8b2      	bhi.n	8006a6a <_scanf_float+0x8e>
 8006b04:	2b54      	cmp	r3, #84	; 0x54
 8006b06:	d077      	beq.n	8006bf8 <_scanf_float+0x21c>
 8006b08:	2b59      	cmp	r3, #89	; 0x59
 8006b0a:	d199      	bne.n	8006a40 <_scanf_float+0x64>
 8006b0c:	2d07      	cmp	r5, #7
 8006b0e:	d197      	bne.n	8006a40 <_scanf_float+0x64>
 8006b10:	2508      	movs	r5, #8
 8006b12:	e029      	b.n	8006b68 <_scanf_float+0x18c>
 8006b14:	2b74      	cmp	r3, #116	; 0x74
 8006b16:	d06f      	beq.n	8006bf8 <_scanf_float+0x21c>
 8006b18:	2b79      	cmp	r3, #121	; 0x79
 8006b1a:	e7f6      	b.n	8006b0a <_scanf_float+0x12e>
 8006b1c:	6821      	ldr	r1, [r4, #0]
 8006b1e:	05c8      	lsls	r0, r1, #23
 8006b20:	d51a      	bpl.n	8006b58 <_scanf_float+0x17c>
 8006b22:	9b02      	ldr	r3, [sp, #8]
 8006b24:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006b28:	6021      	str	r1, [r4, #0]
 8006b2a:	f109 0901 	add.w	r9, r9, #1
 8006b2e:	b11b      	cbz	r3, 8006b38 <_scanf_float+0x15c>
 8006b30:	3b01      	subs	r3, #1
 8006b32:	3201      	adds	r2, #1
 8006b34:	9302      	str	r3, [sp, #8]
 8006b36:	60a2      	str	r2, [r4, #8]
 8006b38:	68a3      	ldr	r3, [r4, #8]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	60a3      	str	r3, [r4, #8]
 8006b3e:	6923      	ldr	r3, [r4, #16]
 8006b40:	3301      	adds	r3, #1
 8006b42:	6123      	str	r3, [r4, #16]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	3b01      	subs	r3, #1
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	607b      	str	r3, [r7, #4]
 8006b4c:	f340 8084 	ble.w	8006c58 <_scanf_float+0x27c>
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	3301      	adds	r3, #1
 8006b54:	603b      	str	r3, [r7, #0]
 8006b56:	e766      	b.n	8006a26 <_scanf_float+0x4a>
 8006b58:	eb1a 0f05 	cmn.w	sl, r5
 8006b5c:	f47f af70 	bne.w	8006a40 <_scanf_float+0x64>
 8006b60:	6822      	ldr	r2, [r4, #0]
 8006b62:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006b66:	6022      	str	r2, [r4, #0]
 8006b68:	f806 3b01 	strb.w	r3, [r6], #1
 8006b6c:	e7e4      	b.n	8006b38 <_scanf_float+0x15c>
 8006b6e:	6822      	ldr	r2, [r4, #0]
 8006b70:	0610      	lsls	r0, r2, #24
 8006b72:	f57f af65 	bpl.w	8006a40 <_scanf_float+0x64>
 8006b76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b7a:	e7f4      	b.n	8006b66 <_scanf_float+0x18a>
 8006b7c:	f1ba 0f00 	cmp.w	sl, #0
 8006b80:	d10e      	bne.n	8006ba0 <_scanf_float+0x1c4>
 8006b82:	f1b9 0f00 	cmp.w	r9, #0
 8006b86:	d10e      	bne.n	8006ba6 <_scanf_float+0x1ca>
 8006b88:	6822      	ldr	r2, [r4, #0]
 8006b8a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006b8e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006b92:	d108      	bne.n	8006ba6 <_scanf_float+0x1ca>
 8006b94:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b98:	f04f 0a01 	mov.w	sl, #1
 8006b9c:	6022      	str	r2, [r4, #0]
 8006b9e:	e7e3      	b.n	8006b68 <_scanf_float+0x18c>
 8006ba0:	f1ba 0f02 	cmp.w	sl, #2
 8006ba4:	d055      	beq.n	8006c52 <_scanf_float+0x276>
 8006ba6:	2d01      	cmp	r5, #1
 8006ba8:	d002      	beq.n	8006bb0 <_scanf_float+0x1d4>
 8006baa:	2d04      	cmp	r5, #4
 8006bac:	f47f af48 	bne.w	8006a40 <_scanf_float+0x64>
 8006bb0:	3501      	adds	r5, #1
 8006bb2:	b2ed      	uxtb	r5, r5
 8006bb4:	e7d8      	b.n	8006b68 <_scanf_float+0x18c>
 8006bb6:	f1ba 0f01 	cmp.w	sl, #1
 8006bba:	f47f af41 	bne.w	8006a40 <_scanf_float+0x64>
 8006bbe:	f04f 0a02 	mov.w	sl, #2
 8006bc2:	e7d1      	b.n	8006b68 <_scanf_float+0x18c>
 8006bc4:	b97d      	cbnz	r5, 8006be6 <_scanf_float+0x20a>
 8006bc6:	f1b9 0f00 	cmp.w	r9, #0
 8006bca:	f47f af3c 	bne.w	8006a46 <_scanf_float+0x6a>
 8006bce:	6822      	ldr	r2, [r4, #0]
 8006bd0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006bd4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006bd8:	f47f af39 	bne.w	8006a4e <_scanf_float+0x72>
 8006bdc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006be0:	2501      	movs	r5, #1
 8006be2:	6022      	str	r2, [r4, #0]
 8006be4:	e7c0      	b.n	8006b68 <_scanf_float+0x18c>
 8006be6:	2d03      	cmp	r5, #3
 8006be8:	d0e2      	beq.n	8006bb0 <_scanf_float+0x1d4>
 8006bea:	2d05      	cmp	r5, #5
 8006bec:	e7de      	b.n	8006bac <_scanf_float+0x1d0>
 8006bee:	2d02      	cmp	r5, #2
 8006bf0:	f47f af26 	bne.w	8006a40 <_scanf_float+0x64>
 8006bf4:	2503      	movs	r5, #3
 8006bf6:	e7b7      	b.n	8006b68 <_scanf_float+0x18c>
 8006bf8:	2d06      	cmp	r5, #6
 8006bfa:	f47f af21 	bne.w	8006a40 <_scanf_float+0x64>
 8006bfe:	2507      	movs	r5, #7
 8006c00:	e7b2      	b.n	8006b68 <_scanf_float+0x18c>
 8006c02:	6822      	ldr	r2, [r4, #0]
 8006c04:	0591      	lsls	r1, r2, #22
 8006c06:	f57f af1b 	bpl.w	8006a40 <_scanf_float+0x64>
 8006c0a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006c0e:	6022      	str	r2, [r4, #0]
 8006c10:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c14:	e7a8      	b.n	8006b68 <_scanf_float+0x18c>
 8006c16:	6822      	ldr	r2, [r4, #0]
 8006c18:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006c1c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006c20:	d006      	beq.n	8006c30 <_scanf_float+0x254>
 8006c22:	0550      	lsls	r0, r2, #21
 8006c24:	f57f af0c 	bpl.w	8006a40 <_scanf_float+0x64>
 8006c28:	f1b9 0f00 	cmp.w	r9, #0
 8006c2c:	f43f af0f 	beq.w	8006a4e <_scanf_float+0x72>
 8006c30:	0591      	lsls	r1, r2, #22
 8006c32:	bf58      	it	pl
 8006c34:	9901      	ldrpl	r1, [sp, #4]
 8006c36:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c3a:	bf58      	it	pl
 8006c3c:	eba9 0101 	subpl.w	r1, r9, r1
 8006c40:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006c44:	f04f 0900 	mov.w	r9, #0
 8006c48:	bf58      	it	pl
 8006c4a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006c4e:	6022      	str	r2, [r4, #0]
 8006c50:	e78a      	b.n	8006b68 <_scanf_float+0x18c>
 8006c52:	f04f 0a03 	mov.w	sl, #3
 8006c56:	e787      	b.n	8006b68 <_scanf_float+0x18c>
 8006c58:	4639      	mov	r1, r7
 8006c5a:	4640      	mov	r0, r8
 8006c5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006c60:	4798      	blx	r3
 8006c62:	2800      	cmp	r0, #0
 8006c64:	f43f aedf 	beq.w	8006a26 <_scanf_float+0x4a>
 8006c68:	e6ea      	b.n	8006a40 <_scanf_float+0x64>
 8006c6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c6e:	463a      	mov	r2, r7
 8006c70:	4640      	mov	r0, r8
 8006c72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c76:	4798      	blx	r3
 8006c78:	6923      	ldr	r3, [r4, #16]
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	6123      	str	r3, [r4, #16]
 8006c7e:	e6ec      	b.n	8006a5a <_scanf_float+0x7e>
 8006c80:	1e6b      	subs	r3, r5, #1
 8006c82:	2b06      	cmp	r3, #6
 8006c84:	d825      	bhi.n	8006cd2 <_scanf_float+0x2f6>
 8006c86:	2d02      	cmp	r5, #2
 8006c88:	d836      	bhi.n	8006cf8 <_scanf_float+0x31c>
 8006c8a:	455e      	cmp	r6, fp
 8006c8c:	f67f aee8 	bls.w	8006a60 <_scanf_float+0x84>
 8006c90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c94:	463a      	mov	r2, r7
 8006c96:	4640      	mov	r0, r8
 8006c98:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c9c:	4798      	blx	r3
 8006c9e:	6923      	ldr	r3, [r4, #16]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	6123      	str	r3, [r4, #16]
 8006ca4:	e7f1      	b.n	8006c8a <_scanf_float+0x2ae>
 8006ca6:	9802      	ldr	r0, [sp, #8]
 8006ca8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006cb0:	463a      	mov	r2, r7
 8006cb2:	9002      	str	r0, [sp, #8]
 8006cb4:	4640      	mov	r0, r8
 8006cb6:	4798      	blx	r3
 8006cb8:	6923      	ldr	r3, [r4, #16]
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	6123      	str	r3, [r4, #16]
 8006cbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cc2:	fa5f fa8a 	uxtb.w	sl, sl
 8006cc6:	f1ba 0f02 	cmp.w	sl, #2
 8006cca:	d1ec      	bne.n	8006ca6 <_scanf_float+0x2ca>
 8006ccc:	3d03      	subs	r5, #3
 8006cce:	b2ed      	uxtb	r5, r5
 8006cd0:	1b76      	subs	r6, r6, r5
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	05da      	lsls	r2, r3, #23
 8006cd6:	d52f      	bpl.n	8006d38 <_scanf_float+0x35c>
 8006cd8:	055b      	lsls	r3, r3, #21
 8006cda:	d510      	bpl.n	8006cfe <_scanf_float+0x322>
 8006cdc:	455e      	cmp	r6, fp
 8006cde:	f67f aebf 	bls.w	8006a60 <_scanf_float+0x84>
 8006ce2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ce6:	463a      	mov	r2, r7
 8006ce8:	4640      	mov	r0, r8
 8006cea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006cee:	4798      	blx	r3
 8006cf0:	6923      	ldr	r3, [r4, #16]
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	6123      	str	r3, [r4, #16]
 8006cf6:	e7f1      	b.n	8006cdc <_scanf_float+0x300>
 8006cf8:	46aa      	mov	sl, r5
 8006cfa:	9602      	str	r6, [sp, #8]
 8006cfc:	e7df      	b.n	8006cbe <_scanf_float+0x2e2>
 8006cfe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006d02:	6923      	ldr	r3, [r4, #16]
 8006d04:	2965      	cmp	r1, #101	; 0x65
 8006d06:	f103 33ff 	add.w	r3, r3, #4294967295
 8006d0a:	f106 35ff 	add.w	r5, r6, #4294967295
 8006d0e:	6123      	str	r3, [r4, #16]
 8006d10:	d00c      	beq.n	8006d2c <_scanf_float+0x350>
 8006d12:	2945      	cmp	r1, #69	; 0x45
 8006d14:	d00a      	beq.n	8006d2c <_scanf_float+0x350>
 8006d16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d1a:	463a      	mov	r2, r7
 8006d1c:	4640      	mov	r0, r8
 8006d1e:	4798      	blx	r3
 8006d20:	6923      	ldr	r3, [r4, #16]
 8006d22:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	1eb5      	subs	r5, r6, #2
 8006d2a:	6123      	str	r3, [r4, #16]
 8006d2c:	463a      	mov	r2, r7
 8006d2e:	4640      	mov	r0, r8
 8006d30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d34:	4798      	blx	r3
 8006d36:	462e      	mov	r6, r5
 8006d38:	6825      	ldr	r5, [r4, #0]
 8006d3a:	f015 0510 	ands.w	r5, r5, #16
 8006d3e:	d155      	bne.n	8006dec <_scanf_float+0x410>
 8006d40:	7035      	strb	r5, [r6, #0]
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d4c:	d11d      	bne.n	8006d8a <_scanf_float+0x3ae>
 8006d4e:	9b01      	ldr	r3, [sp, #4]
 8006d50:	454b      	cmp	r3, r9
 8006d52:	eba3 0209 	sub.w	r2, r3, r9
 8006d56:	d125      	bne.n	8006da4 <_scanf_float+0x3c8>
 8006d58:	2200      	movs	r2, #0
 8006d5a:	4659      	mov	r1, fp
 8006d5c:	4640      	mov	r0, r8
 8006d5e:	f002 fc23 	bl	80095a8 <_strtod_r>
 8006d62:	9b03      	ldr	r3, [sp, #12]
 8006d64:	f8d4 c000 	ldr.w	ip, [r4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f01c 0f02 	tst.w	ip, #2
 8006d6e:	4606      	mov	r6, r0
 8006d70:	460f      	mov	r7, r1
 8006d72:	f103 0204 	add.w	r2, r3, #4
 8006d76:	d020      	beq.n	8006dba <_scanf_float+0x3de>
 8006d78:	9903      	ldr	r1, [sp, #12]
 8006d7a:	600a      	str	r2, [r1, #0]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	e9c3 6700 	strd	r6, r7, [r3]
 8006d82:	68e3      	ldr	r3, [r4, #12]
 8006d84:	3301      	adds	r3, #1
 8006d86:	60e3      	str	r3, [r4, #12]
 8006d88:	e66b      	b.n	8006a62 <_scanf_float+0x86>
 8006d8a:	9b04      	ldr	r3, [sp, #16]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d0e3      	beq.n	8006d58 <_scanf_float+0x37c>
 8006d90:	9905      	ldr	r1, [sp, #20]
 8006d92:	230a      	movs	r3, #10
 8006d94:	462a      	mov	r2, r5
 8006d96:	4640      	mov	r0, r8
 8006d98:	3101      	adds	r1, #1
 8006d9a:	f002 fc89 	bl	80096b0 <_strtol_r>
 8006d9e:	9b04      	ldr	r3, [sp, #16]
 8006da0:	9e05      	ldr	r6, [sp, #20]
 8006da2:	1ac2      	subs	r2, r0, r3
 8006da4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006da8:	429e      	cmp	r6, r3
 8006daa:	bf28      	it	cs
 8006dac:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006db0:	4630      	mov	r0, r6
 8006db2:	490f      	ldr	r1, [pc, #60]	; (8006df0 <_scanf_float+0x414>)
 8006db4:	f000 f8e2 	bl	8006f7c <siprintf>
 8006db8:	e7ce      	b.n	8006d58 <_scanf_float+0x37c>
 8006dba:	f01c 0f04 	tst.w	ip, #4
 8006dbe:	d1db      	bne.n	8006d78 <_scanf_float+0x39c>
 8006dc0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006dc4:	f8cc 2000 	str.w	r2, [ip]
 8006dc8:	f8d3 8000 	ldr.w	r8, [r3]
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	f7f9 fe88 	bl	8000ae4 <__aeabi_dcmpun>
 8006dd4:	b128      	cbz	r0, 8006de2 <_scanf_float+0x406>
 8006dd6:	4807      	ldr	r0, [pc, #28]	; (8006df4 <_scanf_float+0x418>)
 8006dd8:	f000 f9c2 	bl	8007160 <nanf>
 8006ddc:	f8c8 0000 	str.w	r0, [r8]
 8006de0:	e7cf      	b.n	8006d82 <_scanf_float+0x3a6>
 8006de2:	4630      	mov	r0, r6
 8006de4:	4639      	mov	r1, r7
 8006de6:	f7f9 fedb 	bl	8000ba0 <__aeabi_d2f>
 8006dea:	e7f7      	b.n	8006ddc <_scanf_float+0x400>
 8006dec:	2500      	movs	r5, #0
 8006dee:	e638      	b.n	8006a62 <_scanf_float+0x86>
 8006df0:	0800a94a 	.word	0x0800a94a
 8006df4:	0800acdd 	.word	0x0800acdd

08006df8 <std>:
 8006df8:	2300      	movs	r3, #0
 8006dfa:	b510      	push	{r4, lr}
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	e9c0 3300 	strd	r3, r3, [r0]
 8006e02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e06:	6083      	str	r3, [r0, #8]
 8006e08:	8181      	strh	r1, [r0, #12]
 8006e0a:	6643      	str	r3, [r0, #100]	; 0x64
 8006e0c:	81c2      	strh	r2, [r0, #14]
 8006e0e:	6183      	str	r3, [r0, #24]
 8006e10:	4619      	mov	r1, r3
 8006e12:	2208      	movs	r2, #8
 8006e14:	305c      	adds	r0, #92	; 0x5c
 8006e16:	f000 f914 	bl	8007042 <memset>
 8006e1a:	4b0d      	ldr	r3, [pc, #52]	; (8006e50 <std+0x58>)
 8006e1c:	6224      	str	r4, [r4, #32]
 8006e1e:	6263      	str	r3, [r4, #36]	; 0x24
 8006e20:	4b0c      	ldr	r3, [pc, #48]	; (8006e54 <std+0x5c>)
 8006e22:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e24:	4b0c      	ldr	r3, [pc, #48]	; (8006e58 <std+0x60>)
 8006e26:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e28:	4b0c      	ldr	r3, [pc, #48]	; (8006e5c <std+0x64>)
 8006e2a:	6323      	str	r3, [r4, #48]	; 0x30
 8006e2c:	4b0c      	ldr	r3, [pc, #48]	; (8006e60 <std+0x68>)
 8006e2e:	429c      	cmp	r4, r3
 8006e30:	d006      	beq.n	8006e40 <std+0x48>
 8006e32:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006e36:	4294      	cmp	r4, r2
 8006e38:	d002      	beq.n	8006e40 <std+0x48>
 8006e3a:	33d0      	adds	r3, #208	; 0xd0
 8006e3c:	429c      	cmp	r4, r3
 8006e3e:	d105      	bne.n	8006e4c <std+0x54>
 8006e40:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e48:	f000 b978 	b.w	800713c <__retarget_lock_init_recursive>
 8006e4c:	bd10      	pop	{r4, pc}
 8006e4e:	bf00      	nop
 8006e50:	08006fbd 	.word	0x08006fbd
 8006e54:	08006fdf 	.word	0x08006fdf
 8006e58:	08007017 	.word	0x08007017
 8006e5c:	0800703b 	.word	0x0800703b
 8006e60:	2000037c 	.word	0x2000037c

08006e64 <stdio_exit_handler>:
 8006e64:	4a02      	ldr	r2, [pc, #8]	; (8006e70 <stdio_exit_handler+0xc>)
 8006e66:	4903      	ldr	r1, [pc, #12]	; (8006e74 <stdio_exit_handler+0x10>)
 8006e68:	4803      	ldr	r0, [pc, #12]	; (8006e78 <stdio_exit_handler+0x14>)
 8006e6a:	f000 b869 	b.w	8006f40 <_fwalk_sglue>
 8006e6e:	bf00      	nop
 8006e70:	20000014 	.word	0x20000014
 8006e74:	08009a69 	.word	0x08009a69
 8006e78:	20000020 	.word	0x20000020

08006e7c <cleanup_stdio>:
 8006e7c:	6841      	ldr	r1, [r0, #4]
 8006e7e:	4b0c      	ldr	r3, [pc, #48]	; (8006eb0 <cleanup_stdio+0x34>)
 8006e80:	b510      	push	{r4, lr}
 8006e82:	4299      	cmp	r1, r3
 8006e84:	4604      	mov	r4, r0
 8006e86:	d001      	beq.n	8006e8c <cleanup_stdio+0x10>
 8006e88:	f002 fdee 	bl	8009a68 <_fflush_r>
 8006e8c:	68a1      	ldr	r1, [r4, #8]
 8006e8e:	4b09      	ldr	r3, [pc, #36]	; (8006eb4 <cleanup_stdio+0x38>)
 8006e90:	4299      	cmp	r1, r3
 8006e92:	d002      	beq.n	8006e9a <cleanup_stdio+0x1e>
 8006e94:	4620      	mov	r0, r4
 8006e96:	f002 fde7 	bl	8009a68 <_fflush_r>
 8006e9a:	68e1      	ldr	r1, [r4, #12]
 8006e9c:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <cleanup_stdio+0x3c>)
 8006e9e:	4299      	cmp	r1, r3
 8006ea0:	d004      	beq.n	8006eac <cleanup_stdio+0x30>
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ea8:	f002 bdde 	b.w	8009a68 <_fflush_r>
 8006eac:	bd10      	pop	{r4, pc}
 8006eae:	bf00      	nop
 8006eb0:	2000037c 	.word	0x2000037c
 8006eb4:	200003e4 	.word	0x200003e4
 8006eb8:	2000044c 	.word	0x2000044c

08006ebc <global_stdio_init.part.0>:
 8006ebc:	b510      	push	{r4, lr}
 8006ebe:	4b0b      	ldr	r3, [pc, #44]	; (8006eec <global_stdio_init.part.0+0x30>)
 8006ec0:	4c0b      	ldr	r4, [pc, #44]	; (8006ef0 <global_stdio_init.part.0+0x34>)
 8006ec2:	4a0c      	ldr	r2, [pc, #48]	; (8006ef4 <global_stdio_init.part.0+0x38>)
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	601a      	str	r2, [r3, #0]
 8006ec8:	2104      	movs	r1, #4
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f7ff ff94 	bl	8006df8 <std>
 8006ed0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	2109      	movs	r1, #9
 8006ed8:	f7ff ff8e 	bl	8006df8 <std>
 8006edc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006ee0:	2202      	movs	r2, #2
 8006ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ee6:	2112      	movs	r1, #18
 8006ee8:	f7ff bf86 	b.w	8006df8 <std>
 8006eec:	200004b4 	.word	0x200004b4
 8006ef0:	2000037c 	.word	0x2000037c
 8006ef4:	08006e65 	.word	0x08006e65

08006ef8 <__sfp_lock_acquire>:
 8006ef8:	4801      	ldr	r0, [pc, #4]	; (8006f00 <__sfp_lock_acquire+0x8>)
 8006efa:	f000 b920 	b.w	800713e <__retarget_lock_acquire_recursive>
 8006efe:	bf00      	nop
 8006f00:	200004bd 	.word	0x200004bd

08006f04 <__sfp_lock_release>:
 8006f04:	4801      	ldr	r0, [pc, #4]	; (8006f0c <__sfp_lock_release+0x8>)
 8006f06:	f000 b91b 	b.w	8007140 <__retarget_lock_release_recursive>
 8006f0a:	bf00      	nop
 8006f0c:	200004bd 	.word	0x200004bd

08006f10 <__sinit>:
 8006f10:	b510      	push	{r4, lr}
 8006f12:	4604      	mov	r4, r0
 8006f14:	f7ff fff0 	bl	8006ef8 <__sfp_lock_acquire>
 8006f18:	6a23      	ldr	r3, [r4, #32]
 8006f1a:	b11b      	cbz	r3, 8006f24 <__sinit+0x14>
 8006f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f20:	f7ff bff0 	b.w	8006f04 <__sfp_lock_release>
 8006f24:	4b04      	ldr	r3, [pc, #16]	; (8006f38 <__sinit+0x28>)
 8006f26:	6223      	str	r3, [r4, #32]
 8006f28:	4b04      	ldr	r3, [pc, #16]	; (8006f3c <__sinit+0x2c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1f5      	bne.n	8006f1c <__sinit+0xc>
 8006f30:	f7ff ffc4 	bl	8006ebc <global_stdio_init.part.0>
 8006f34:	e7f2      	b.n	8006f1c <__sinit+0xc>
 8006f36:	bf00      	nop
 8006f38:	08006e7d 	.word	0x08006e7d
 8006f3c:	200004b4 	.word	0x200004b4

08006f40 <_fwalk_sglue>:
 8006f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f44:	4607      	mov	r7, r0
 8006f46:	4688      	mov	r8, r1
 8006f48:	4614      	mov	r4, r2
 8006f4a:	2600      	movs	r6, #0
 8006f4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f50:	f1b9 0901 	subs.w	r9, r9, #1
 8006f54:	d505      	bpl.n	8006f62 <_fwalk_sglue+0x22>
 8006f56:	6824      	ldr	r4, [r4, #0]
 8006f58:	2c00      	cmp	r4, #0
 8006f5a:	d1f7      	bne.n	8006f4c <_fwalk_sglue+0xc>
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f62:	89ab      	ldrh	r3, [r5, #12]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d907      	bls.n	8006f78 <_fwalk_sglue+0x38>
 8006f68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	d003      	beq.n	8006f78 <_fwalk_sglue+0x38>
 8006f70:	4629      	mov	r1, r5
 8006f72:	4638      	mov	r0, r7
 8006f74:	47c0      	blx	r8
 8006f76:	4306      	orrs	r6, r0
 8006f78:	3568      	adds	r5, #104	; 0x68
 8006f7a:	e7e9      	b.n	8006f50 <_fwalk_sglue+0x10>

08006f7c <siprintf>:
 8006f7c:	b40e      	push	{r1, r2, r3}
 8006f7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f82:	b500      	push	{lr}
 8006f84:	b09c      	sub	sp, #112	; 0x70
 8006f86:	ab1d      	add	r3, sp, #116	; 0x74
 8006f88:	9002      	str	r0, [sp, #8]
 8006f8a:	9006      	str	r0, [sp, #24]
 8006f8c:	9107      	str	r1, [sp, #28]
 8006f8e:	9104      	str	r1, [sp, #16]
 8006f90:	4808      	ldr	r0, [pc, #32]	; (8006fb4 <siprintf+0x38>)
 8006f92:	4909      	ldr	r1, [pc, #36]	; (8006fb8 <siprintf+0x3c>)
 8006f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f98:	9105      	str	r1, [sp, #20]
 8006f9a:	6800      	ldr	r0, [r0, #0]
 8006f9c:	a902      	add	r1, sp, #8
 8006f9e:	9301      	str	r3, [sp, #4]
 8006fa0:	f002 fbe2 	bl	8009768 <_svfiprintf_r>
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	9b02      	ldr	r3, [sp, #8]
 8006fa8:	701a      	strb	r2, [r3, #0]
 8006faa:	b01c      	add	sp, #112	; 0x70
 8006fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fb0:	b003      	add	sp, #12
 8006fb2:	4770      	bx	lr
 8006fb4:	2000006c 	.word	0x2000006c
 8006fb8:	ffff0208 	.word	0xffff0208

08006fbc <__sread>:
 8006fbc:	b510      	push	{r4, lr}
 8006fbe:	460c      	mov	r4, r1
 8006fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fc4:	f000 f86c 	bl	80070a0 <_read_r>
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	bfab      	itete	ge
 8006fcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006fce:	89a3      	ldrhlt	r3, [r4, #12]
 8006fd0:	181b      	addge	r3, r3, r0
 8006fd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006fd6:	bfac      	ite	ge
 8006fd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006fda:	81a3      	strhlt	r3, [r4, #12]
 8006fdc:	bd10      	pop	{r4, pc}

08006fde <__swrite>:
 8006fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe2:	461f      	mov	r7, r3
 8006fe4:	898b      	ldrh	r3, [r1, #12]
 8006fe6:	4605      	mov	r5, r0
 8006fe8:	05db      	lsls	r3, r3, #23
 8006fea:	460c      	mov	r4, r1
 8006fec:	4616      	mov	r6, r2
 8006fee:	d505      	bpl.n	8006ffc <__swrite+0x1e>
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ff8:	f000 f840 	bl	800707c <_lseek_r>
 8006ffc:	89a3      	ldrh	r3, [r4, #12]
 8006ffe:	4632      	mov	r2, r6
 8007000:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007004:	81a3      	strh	r3, [r4, #12]
 8007006:	4628      	mov	r0, r5
 8007008:	463b      	mov	r3, r7
 800700a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800700e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007012:	f000 b857 	b.w	80070c4 <_write_r>

08007016 <__sseek>:
 8007016:	b510      	push	{r4, lr}
 8007018:	460c      	mov	r4, r1
 800701a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800701e:	f000 f82d 	bl	800707c <_lseek_r>
 8007022:	1c43      	adds	r3, r0, #1
 8007024:	89a3      	ldrh	r3, [r4, #12]
 8007026:	bf15      	itete	ne
 8007028:	6560      	strne	r0, [r4, #84]	; 0x54
 800702a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800702e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007032:	81a3      	strheq	r3, [r4, #12]
 8007034:	bf18      	it	ne
 8007036:	81a3      	strhne	r3, [r4, #12]
 8007038:	bd10      	pop	{r4, pc}

0800703a <__sclose>:
 800703a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800703e:	f000 b80d 	b.w	800705c <_close_r>

08007042 <memset>:
 8007042:	4603      	mov	r3, r0
 8007044:	4402      	add	r2, r0
 8007046:	4293      	cmp	r3, r2
 8007048:	d100      	bne.n	800704c <memset+0xa>
 800704a:	4770      	bx	lr
 800704c:	f803 1b01 	strb.w	r1, [r3], #1
 8007050:	e7f9      	b.n	8007046 <memset+0x4>
	...

08007054 <_localeconv_r>:
 8007054:	4800      	ldr	r0, [pc, #0]	; (8007058 <_localeconv_r+0x4>)
 8007056:	4770      	bx	lr
 8007058:	20000160 	.word	0x20000160

0800705c <_close_r>:
 800705c:	b538      	push	{r3, r4, r5, lr}
 800705e:	2300      	movs	r3, #0
 8007060:	4d05      	ldr	r5, [pc, #20]	; (8007078 <_close_r+0x1c>)
 8007062:	4604      	mov	r4, r0
 8007064:	4608      	mov	r0, r1
 8007066:	602b      	str	r3, [r5, #0]
 8007068:	f7fb fa47 	bl	80024fa <_close>
 800706c:	1c43      	adds	r3, r0, #1
 800706e:	d102      	bne.n	8007076 <_close_r+0x1a>
 8007070:	682b      	ldr	r3, [r5, #0]
 8007072:	b103      	cbz	r3, 8007076 <_close_r+0x1a>
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	bd38      	pop	{r3, r4, r5, pc}
 8007078:	200004b8 	.word	0x200004b8

0800707c <_lseek_r>:
 800707c:	b538      	push	{r3, r4, r5, lr}
 800707e:	4604      	mov	r4, r0
 8007080:	4608      	mov	r0, r1
 8007082:	4611      	mov	r1, r2
 8007084:	2200      	movs	r2, #0
 8007086:	4d05      	ldr	r5, [pc, #20]	; (800709c <_lseek_r+0x20>)
 8007088:	602a      	str	r2, [r5, #0]
 800708a:	461a      	mov	r2, r3
 800708c:	f7fb fa59 	bl	8002542 <_lseek>
 8007090:	1c43      	adds	r3, r0, #1
 8007092:	d102      	bne.n	800709a <_lseek_r+0x1e>
 8007094:	682b      	ldr	r3, [r5, #0]
 8007096:	b103      	cbz	r3, 800709a <_lseek_r+0x1e>
 8007098:	6023      	str	r3, [r4, #0]
 800709a:	bd38      	pop	{r3, r4, r5, pc}
 800709c:	200004b8 	.word	0x200004b8

080070a0 <_read_r>:
 80070a0:	b538      	push	{r3, r4, r5, lr}
 80070a2:	4604      	mov	r4, r0
 80070a4:	4608      	mov	r0, r1
 80070a6:	4611      	mov	r1, r2
 80070a8:	2200      	movs	r2, #0
 80070aa:	4d05      	ldr	r5, [pc, #20]	; (80070c0 <_read_r+0x20>)
 80070ac:	602a      	str	r2, [r5, #0]
 80070ae:	461a      	mov	r2, r3
 80070b0:	f7fb f9ea 	bl	8002488 <_read>
 80070b4:	1c43      	adds	r3, r0, #1
 80070b6:	d102      	bne.n	80070be <_read_r+0x1e>
 80070b8:	682b      	ldr	r3, [r5, #0]
 80070ba:	b103      	cbz	r3, 80070be <_read_r+0x1e>
 80070bc:	6023      	str	r3, [r4, #0]
 80070be:	bd38      	pop	{r3, r4, r5, pc}
 80070c0:	200004b8 	.word	0x200004b8

080070c4 <_write_r>:
 80070c4:	b538      	push	{r3, r4, r5, lr}
 80070c6:	4604      	mov	r4, r0
 80070c8:	4608      	mov	r0, r1
 80070ca:	4611      	mov	r1, r2
 80070cc:	2200      	movs	r2, #0
 80070ce:	4d05      	ldr	r5, [pc, #20]	; (80070e4 <_write_r+0x20>)
 80070d0:	602a      	str	r2, [r5, #0]
 80070d2:	461a      	mov	r2, r3
 80070d4:	f7fb f9f5 	bl	80024c2 <_write>
 80070d8:	1c43      	adds	r3, r0, #1
 80070da:	d102      	bne.n	80070e2 <_write_r+0x1e>
 80070dc:	682b      	ldr	r3, [r5, #0]
 80070de:	b103      	cbz	r3, 80070e2 <_write_r+0x1e>
 80070e0:	6023      	str	r3, [r4, #0]
 80070e2:	bd38      	pop	{r3, r4, r5, pc}
 80070e4:	200004b8 	.word	0x200004b8

080070e8 <__errno>:
 80070e8:	4b01      	ldr	r3, [pc, #4]	; (80070f0 <__errno+0x8>)
 80070ea:	6818      	ldr	r0, [r3, #0]
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	2000006c 	.word	0x2000006c

080070f4 <__libc_init_array>:
 80070f4:	b570      	push	{r4, r5, r6, lr}
 80070f6:	2600      	movs	r6, #0
 80070f8:	4d0c      	ldr	r5, [pc, #48]	; (800712c <__libc_init_array+0x38>)
 80070fa:	4c0d      	ldr	r4, [pc, #52]	; (8007130 <__libc_init_array+0x3c>)
 80070fc:	1b64      	subs	r4, r4, r5
 80070fe:	10a4      	asrs	r4, r4, #2
 8007100:	42a6      	cmp	r6, r4
 8007102:	d109      	bne.n	8007118 <__libc_init_array+0x24>
 8007104:	f003 fbc2 	bl	800a88c <_init>
 8007108:	2600      	movs	r6, #0
 800710a:	4d0a      	ldr	r5, [pc, #40]	; (8007134 <__libc_init_array+0x40>)
 800710c:	4c0a      	ldr	r4, [pc, #40]	; (8007138 <__libc_init_array+0x44>)
 800710e:	1b64      	subs	r4, r4, r5
 8007110:	10a4      	asrs	r4, r4, #2
 8007112:	42a6      	cmp	r6, r4
 8007114:	d105      	bne.n	8007122 <__libc_init_array+0x2e>
 8007116:	bd70      	pop	{r4, r5, r6, pc}
 8007118:	f855 3b04 	ldr.w	r3, [r5], #4
 800711c:	4798      	blx	r3
 800711e:	3601      	adds	r6, #1
 8007120:	e7ee      	b.n	8007100 <__libc_init_array+0xc>
 8007122:	f855 3b04 	ldr.w	r3, [r5], #4
 8007126:	4798      	blx	r3
 8007128:	3601      	adds	r6, #1
 800712a:	e7f2      	b.n	8007112 <__libc_init_array+0x1e>
 800712c:	0800ad40 	.word	0x0800ad40
 8007130:	0800ad40 	.word	0x0800ad40
 8007134:	0800ad40 	.word	0x0800ad40
 8007138:	0800ad44 	.word	0x0800ad44

0800713c <__retarget_lock_init_recursive>:
 800713c:	4770      	bx	lr

0800713e <__retarget_lock_acquire_recursive>:
 800713e:	4770      	bx	lr

08007140 <__retarget_lock_release_recursive>:
 8007140:	4770      	bx	lr

08007142 <memchr>:
 8007142:	4603      	mov	r3, r0
 8007144:	b510      	push	{r4, lr}
 8007146:	b2c9      	uxtb	r1, r1
 8007148:	4402      	add	r2, r0
 800714a:	4293      	cmp	r3, r2
 800714c:	4618      	mov	r0, r3
 800714e:	d101      	bne.n	8007154 <memchr+0x12>
 8007150:	2000      	movs	r0, #0
 8007152:	e003      	b.n	800715c <memchr+0x1a>
 8007154:	7804      	ldrb	r4, [r0, #0]
 8007156:	3301      	adds	r3, #1
 8007158:	428c      	cmp	r4, r1
 800715a:	d1f6      	bne.n	800714a <memchr+0x8>
 800715c:	bd10      	pop	{r4, pc}
	...

08007160 <nanf>:
 8007160:	4800      	ldr	r0, [pc, #0]	; (8007164 <nanf+0x4>)
 8007162:	4770      	bx	lr
 8007164:	7fc00000 	.word	0x7fc00000

08007168 <quorem>:
 8007168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716c:	6903      	ldr	r3, [r0, #16]
 800716e:	690c      	ldr	r4, [r1, #16]
 8007170:	4607      	mov	r7, r0
 8007172:	42a3      	cmp	r3, r4
 8007174:	db7f      	blt.n	8007276 <quorem+0x10e>
 8007176:	3c01      	subs	r4, #1
 8007178:	f100 0514 	add.w	r5, r0, #20
 800717c:	f101 0814 	add.w	r8, r1, #20
 8007180:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007184:	9301      	str	r3, [sp, #4]
 8007186:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800718a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800718e:	3301      	adds	r3, #1
 8007190:	429a      	cmp	r2, r3
 8007192:	fbb2 f6f3 	udiv	r6, r2, r3
 8007196:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800719a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800719e:	d331      	bcc.n	8007204 <quorem+0x9c>
 80071a0:	f04f 0e00 	mov.w	lr, #0
 80071a4:	4640      	mov	r0, r8
 80071a6:	46ac      	mov	ip, r5
 80071a8:	46f2      	mov	sl, lr
 80071aa:	f850 2b04 	ldr.w	r2, [r0], #4
 80071ae:	b293      	uxth	r3, r2
 80071b0:	fb06 e303 	mla	r3, r6, r3, lr
 80071b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80071b8:	0c1a      	lsrs	r2, r3, #16
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	fb06 220e 	mla	r2, r6, lr, r2
 80071c0:	ebaa 0303 	sub.w	r3, sl, r3
 80071c4:	f8dc a000 	ldr.w	sl, [ip]
 80071c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80071cc:	fa1f fa8a 	uxth.w	sl, sl
 80071d0:	4453      	add	r3, sl
 80071d2:	f8dc a000 	ldr.w	sl, [ip]
 80071d6:	b292      	uxth	r2, r2
 80071d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80071dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071e6:	4581      	cmp	r9, r0
 80071e8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80071ec:	f84c 3b04 	str.w	r3, [ip], #4
 80071f0:	d2db      	bcs.n	80071aa <quorem+0x42>
 80071f2:	f855 300b 	ldr.w	r3, [r5, fp]
 80071f6:	b92b      	cbnz	r3, 8007204 <quorem+0x9c>
 80071f8:	9b01      	ldr	r3, [sp, #4]
 80071fa:	3b04      	subs	r3, #4
 80071fc:	429d      	cmp	r5, r3
 80071fe:	461a      	mov	r2, r3
 8007200:	d32d      	bcc.n	800725e <quorem+0xf6>
 8007202:	613c      	str	r4, [r7, #16]
 8007204:	4638      	mov	r0, r7
 8007206:	f001 f9df 	bl	80085c8 <__mcmp>
 800720a:	2800      	cmp	r0, #0
 800720c:	db23      	blt.n	8007256 <quorem+0xee>
 800720e:	4629      	mov	r1, r5
 8007210:	2000      	movs	r0, #0
 8007212:	3601      	adds	r6, #1
 8007214:	f858 2b04 	ldr.w	r2, [r8], #4
 8007218:	f8d1 c000 	ldr.w	ip, [r1]
 800721c:	b293      	uxth	r3, r2
 800721e:	1ac3      	subs	r3, r0, r3
 8007220:	0c12      	lsrs	r2, r2, #16
 8007222:	fa1f f08c 	uxth.w	r0, ip
 8007226:	4403      	add	r3, r0
 8007228:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800722c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007230:	b29b      	uxth	r3, r3
 8007232:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007236:	45c1      	cmp	r9, r8
 8007238:	ea4f 4022 	mov.w	r0, r2, asr #16
 800723c:	f841 3b04 	str.w	r3, [r1], #4
 8007240:	d2e8      	bcs.n	8007214 <quorem+0xac>
 8007242:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007246:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800724a:	b922      	cbnz	r2, 8007256 <quorem+0xee>
 800724c:	3b04      	subs	r3, #4
 800724e:	429d      	cmp	r5, r3
 8007250:	461a      	mov	r2, r3
 8007252:	d30a      	bcc.n	800726a <quorem+0x102>
 8007254:	613c      	str	r4, [r7, #16]
 8007256:	4630      	mov	r0, r6
 8007258:	b003      	add	sp, #12
 800725a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800725e:	6812      	ldr	r2, [r2, #0]
 8007260:	3b04      	subs	r3, #4
 8007262:	2a00      	cmp	r2, #0
 8007264:	d1cd      	bne.n	8007202 <quorem+0x9a>
 8007266:	3c01      	subs	r4, #1
 8007268:	e7c8      	b.n	80071fc <quorem+0x94>
 800726a:	6812      	ldr	r2, [r2, #0]
 800726c:	3b04      	subs	r3, #4
 800726e:	2a00      	cmp	r2, #0
 8007270:	d1f0      	bne.n	8007254 <quorem+0xec>
 8007272:	3c01      	subs	r4, #1
 8007274:	e7eb      	b.n	800724e <quorem+0xe6>
 8007276:	2000      	movs	r0, #0
 8007278:	e7ee      	b.n	8007258 <quorem+0xf0>
 800727a:	0000      	movs	r0, r0
 800727c:	0000      	movs	r0, r0
	...

08007280 <_dtoa_r>:
 8007280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007284:	4616      	mov	r6, r2
 8007286:	461f      	mov	r7, r3
 8007288:	69c4      	ldr	r4, [r0, #28]
 800728a:	b099      	sub	sp, #100	; 0x64
 800728c:	4605      	mov	r5, r0
 800728e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007292:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007296:	b974      	cbnz	r4, 80072b6 <_dtoa_r+0x36>
 8007298:	2010      	movs	r0, #16
 800729a:	f000 fe1d 	bl	8007ed8 <malloc>
 800729e:	4602      	mov	r2, r0
 80072a0:	61e8      	str	r0, [r5, #28]
 80072a2:	b920      	cbnz	r0, 80072ae <_dtoa_r+0x2e>
 80072a4:	21ef      	movs	r1, #239	; 0xef
 80072a6:	4bac      	ldr	r3, [pc, #688]	; (8007558 <_dtoa_r+0x2d8>)
 80072a8:	48ac      	ldr	r0, [pc, #688]	; (800755c <_dtoa_r+0x2dc>)
 80072aa:	f002 fc55 	bl	8009b58 <__assert_func>
 80072ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072b2:	6004      	str	r4, [r0, #0]
 80072b4:	60c4      	str	r4, [r0, #12]
 80072b6:	69eb      	ldr	r3, [r5, #28]
 80072b8:	6819      	ldr	r1, [r3, #0]
 80072ba:	b151      	cbz	r1, 80072d2 <_dtoa_r+0x52>
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	2301      	movs	r3, #1
 80072c0:	4093      	lsls	r3, r2
 80072c2:	604a      	str	r2, [r1, #4]
 80072c4:	608b      	str	r3, [r1, #8]
 80072c6:	4628      	mov	r0, r5
 80072c8:	f000 fefa 	bl	80080c0 <_Bfree>
 80072cc:	2200      	movs	r2, #0
 80072ce:	69eb      	ldr	r3, [r5, #28]
 80072d0:	601a      	str	r2, [r3, #0]
 80072d2:	1e3b      	subs	r3, r7, #0
 80072d4:	bfaf      	iteee	ge
 80072d6:	2300      	movge	r3, #0
 80072d8:	2201      	movlt	r2, #1
 80072da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80072de:	9305      	strlt	r3, [sp, #20]
 80072e0:	bfa8      	it	ge
 80072e2:	f8c8 3000 	strge.w	r3, [r8]
 80072e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80072ea:	4b9d      	ldr	r3, [pc, #628]	; (8007560 <_dtoa_r+0x2e0>)
 80072ec:	bfb8      	it	lt
 80072ee:	f8c8 2000 	strlt.w	r2, [r8]
 80072f2:	ea33 0309 	bics.w	r3, r3, r9
 80072f6:	d119      	bne.n	800732c <_dtoa_r+0xac>
 80072f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80072fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80072fe:	6013      	str	r3, [r2, #0]
 8007300:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007304:	4333      	orrs	r3, r6
 8007306:	f000 8589 	beq.w	8007e1c <_dtoa_r+0xb9c>
 800730a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800730c:	b953      	cbnz	r3, 8007324 <_dtoa_r+0xa4>
 800730e:	4b95      	ldr	r3, [pc, #596]	; (8007564 <_dtoa_r+0x2e4>)
 8007310:	e023      	b.n	800735a <_dtoa_r+0xda>
 8007312:	4b95      	ldr	r3, [pc, #596]	; (8007568 <_dtoa_r+0x2e8>)
 8007314:	9303      	str	r3, [sp, #12]
 8007316:	3308      	adds	r3, #8
 8007318:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800731a:	6013      	str	r3, [r2, #0]
 800731c:	9803      	ldr	r0, [sp, #12]
 800731e:	b019      	add	sp, #100	; 0x64
 8007320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007324:	4b8f      	ldr	r3, [pc, #572]	; (8007564 <_dtoa_r+0x2e4>)
 8007326:	9303      	str	r3, [sp, #12]
 8007328:	3303      	adds	r3, #3
 800732a:	e7f5      	b.n	8007318 <_dtoa_r+0x98>
 800732c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007330:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007334:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007338:	2200      	movs	r2, #0
 800733a:	2300      	movs	r3, #0
 800733c:	f7f9 fba0 	bl	8000a80 <__aeabi_dcmpeq>
 8007340:	4680      	mov	r8, r0
 8007342:	b160      	cbz	r0, 800735e <_dtoa_r+0xde>
 8007344:	2301      	movs	r3, #1
 8007346:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007348:	6013      	str	r3, [r2, #0]
 800734a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 8562 	beq.w	8007e16 <_dtoa_r+0xb96>
 8007352:	4b86      	ldr	r3, [pc, #536]	; (800756c <_dtoa_r+0x2ec>)
 8007354:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007356:	6013      	str	r3, [r2, #0]
 8007358:	3b01      	subs	r3, #1
 800735a:	9303      	str	r3, [sp, #12]
 800735c:	e7de      	b.n	800731c <_dtoa_r+0x9c>
 800735e:	ab16      	add	r3, sp, #88	; 0x58
 8007360:	9301      	str	r3, [sp, #4]
 8007362:	ab17      	add	r3, sp, #92	; 0x5c
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	4628      	mov	r0, r5
 8007368:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800736c:	f001 fa3c 	bl	80087e8 <__d2b>
 8007370:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007374:	4682      	mov	sl, r0
 8007376:	2c00      	cmp	r4, #0
 8007378:	d07e      	beq.n	8007478 <_dtoa_r+0x1f8>
 800737a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800737e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007380:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007388:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800738c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007390:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007394:	4619      	mov	r1, r3
 8007396:	2200      	movs	r2, #0
 8007398:	4b75      	ldr	r3, [pc, #468]	; (8007570 <_dtoa_r+0x2f0>)
 800739a:	f7f8 ff51 	bl	8000240 <__aeabi_dsub>
 800739e:	a368      	add	r3, pc, #416	; (adr r3, 8007540 <_dtoa_r+0x2c0>)
 80073a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a4:	f7f9 f904 	bl	80005b0 <__aeabi_dmul>
 80073a8:	a367      	add	r3, pc, #412	; (adr r3, 8007548 <_dtoa_r+0x2c8>)
 80073aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ae:	f7f8 ff49 	bl	8000244 <__adddf3>
 80073b2:	4606      	mov	r6, r0
 80073b4:	4620      	mov	r0, r4
 80073b6:	460f      	mov	r7, r1
 80073b8:	f7f9 f890 	bl	80004dc <__aeabi_i2d>
 80073bc:	a364      	add	r3, pc, #400	; (adr r3, 8007550 <_dtoa_r+0x2d0>)
 80073be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c2:	f7f9 f8f5 	bl	80005b0 <__aeabi_dmul>
 80073c6:	4602      	mov	r2, r0
 80073c8:	460b      	mov	r3, r1
 80073ca:	4630      	mov	r0, r6
 80073cc:	4639      	mov	r1, r7
 80073ce:	f7f8 ff39 	bl	8000244 <__adddf3>
 80073d2:	4606      	mov	r6, r0
 80073d4:	460f      	mov	r7, r1
 80073d6:	f7f9 fb9b 	bl	8000b10 <__aeabi_d2iz>
 80073da:	2200      	movs	r2, #0
 80073dc:	4683      	mov	fp, r0
 80073de:	2300      	movs	r3, #0
 80073e0:	4630      	mov	r0, r6
 80073e2:	4639      	mov	r1, r7
 80073e4:	f7f9 fb56 	bl	8000a94 <__aeabi_dcmplt>
 80073e8:	b148      	cbz	r0, 80073fe <_dtoa_r+0x17e>
 80073ea:	4658      	mov	r0, fp
 80073ec:	f7f9 f876 	bl	80004dc <__aeabi_i2d>
 80073f0:	4632      	mov	r2, r6
 80073f2:	463b      	mov	r3, r7
 80073f4:	f7f9 fb44 	bl	8000a80 <__aeabi_dcmpeq>
 80073f8:	b908      	cbnz	r0, 80073fe <_dtoa_r+0x17e>
 80073fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80073fe:	f1bb 0f16 	cmp.w	fp, #22
 8007402:	d857      	bhi.n	80074b4 <_dtoa_r+0x234>
 8007404:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007408:	4b5a      	ldr	r3, [pc, #360]	; (8007574 <_dtoa_r+0x2f4>)
 800740a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800740e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007412:	f7f9 fb3f 	bl	8000a94 <__aeabi_dcmplt>
 8007416:	2800      	cmp	r0, #0
 8007418:	d04e      	beq.n	80074b8 <_dtoa_r+0x238>
 800741a:	2300      	movs	r3, #0
 800741c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007420:	930f      	str	r3, [sp, #60]	; 0x3c
 8007422:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007424:	1b1b      	subs	r3, r3, r4
 8007426:	1e5a      	subs	r2, r3, #1
 8007428:	bf46      	itte	mi
 800742a:	f1c3 0901 	rsbmi	r9, r3, #1
 800742e:	2300      	movmi	r3, #0
 8007430:	f04f 0900 	movpl.w	r9, #0
 8007434:	9209      	str	r2, [sp, #36]	; 0x24
 8007436:	bf48      	it	mi
 8007438:	9309      	strmi	r3, [sp, #36]	; 0x24
 800743a:	f1bb 0f00 	cmp.w	fp, #0
 800743e:	db3d      	blt.n	80074bc <_dtoa_r+0x23c>
 8007440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007442:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007446:	445b      	add	r3, fp
 8007448:	9309      	str	r3, [sp, #36]	; 0x24
 800744a:	2300      	movs	r3, #0
 800744c:	930a      	str	r3, [sp, #40]	; 0x28
 800744e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007450:	2b09      	cmp	r3, #9
 8007452:	d867      	bhi.n	8007524 <_dtoa_r+0x2a4>
 8007454:	2b05      	cmp	r3, #5
 8007456:	bfc4      	itt	gt
 8007458:	3b04      	subgt	r3, #4
 800745a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800745c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800745e:	bfc8      	it	gt
 8007460:	2400      	movgt	r4, #0
 8007462:	f1a3 0302 	sub.w	r3, r3, #2
 8007466:	bfd8      	it	le
 8007468:	2401      	movle	r4, #1
 800746a:	2b03      	cmp	r3, #3
 800746c:	f200 8086 	bhi.w	800757c <_dtoa_r+0x2fc>
 8007470:	e8df f003 	tbb	[pc, r3]
 8007474:	5637392c 	.word	0x5637392c
 8007478:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800747c:	441c      	add	r4, r3
 800747e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007482:	2b20      	cmp	r3, #32
 8007484:	bfc1      	itttt	gt
 8007486:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800748a:	fa09 f903 	lslgt.w	r9, r9, r3
 800748e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8007492:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007496:	bfd6      	itet	le
 8007498:	f1c3 0320 	rsble	r3, r3, #32
 800749c:	ea49 0003 	orrgt.w	r0, r9, r3
 80074a0:	fa06 f003 	lslle.w	r0, r6, r3
 80074a4:	f7f9 f80a 	bl	80004bc <__aeabi_ui2d>
 80074a8:	2201      	movs	r2, #1
 80074aa:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80074ae:	3c01      	subs	r4, #1
 80074b0:	9213      	str	r2, [sp, #76]	; 0x4c
 80074b2:	e76f      	b.n	8007394 <_dtoa_r+0x114>
 80074b4:	2301      	movs	r3, #1
 80074b6:	e7b3      	b.n	8007420 <_dtoa_r+0x1a0>
 80074b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80074ba:	e7b2      	b.n	8007422 <_dtoa_r+0x1a2>
 80074bc:	f1cb 0300 	rsb	r3, fp, #0
 80074c0:	930a      	str	r3, [sp, #40]	; 0x28
 80074c2:	2300      	movs	r3, #0
 80074c4:	eba9 090b 	sub.w	r9, r9, fp
 80074c8:	930e      	str	r3, [sp, #56]	; 0x38
 80074ca:	e7c0      	b.n	800744e <_dtoa_r+0x1ce>
 80074cc:	2300      	movs	r3, #0
 80074ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80074d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	dc55      	bgt.n	8007582 <_dtoa_r+0x302>
 80074d6:	2301      	movs	r3, #1
 80074d8:	461a      	mov	r2, r3
 80074da:	9306      	str	r3, [sp, #24]
 80074dc:	9308      	str	r3, [sp, #32]
 80074de:	9223      	str	r2, [sp, #140]	; 0x8c
 80074e0:	e00b      	b.n	80074fa <_dtoa_r+0x27a>
 80074e2:	2301      	movs	r3, #1
 80074e4:	e7f3      	b.n	80074ce <_dtoa_r+0x24e>
 80074e6:	2300      	movs	r3, #0
 80074e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80074ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074ec:	445b      	add	r3, fp
 80074ee:	9306      	str	r3, [sp, #24]
 80074f0:	3301      	adds	r3, #1
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	9308      	str	r3, [sp, #32]
 80074f6:	bfb8      	it	lt
 80074f8:	2301      	movlt	r3, #1
 80074fa:	2100      	movs	r1, #0
 80074fc:	2204      	movs	r2, #4
 80074fe:	69e8      	ldr	r0, [r5, #28]
 8007500:	f102 0614 	add.w	r6, r2, #20
 8007504:	429e      	cmp	r6, r3
 8007506:	d940      	bls.n	800758a <_dtoa_r+0x30a>
 8007508:	6041      	str	r1, [r0, #4]
 800750a:	4628      	mov	r0, r5
 800750c:	f000 fd98 	bl	8008040 <_Balloc>
 8007510:	9003      	str	r0, [sp, #12]
 8007512:	2800      	cmp	r0, #0
 8007514:	d13c      	bne.n	8007590 <_dtoa_r+0x310>
 8007516:	4602      	mov	r2, r0
 8007518:	f240 11af 	movw	r1, #431	; 0x1af
 800751c:	4b16      	ldr	r3, [pc, #88]	; (8007578 <_dtoa_r+0x2f8>)
 800751e:	e6c3      	b.n	80072a8 <_dtoa_r+0x28>
 8007520:	2301      	movs	r3, #1
 8007522:	e7e1      	b.n	80074e8 <_dtoa_r+0x268>
 8007524:	2401      	movs	r4, #1
 8007526:	2300      	movs	r3, #0
 8007528:	940b      	str	r4, [sp, #44]	; 0x2c
 800752a:	9322      	str	r3, [sp, #136]	; 0x88
 800752c:	f04f 33ff 	mov.w	r3, #4294967295
 8007530:	2200      	movs	r2, #0
 8007532:	9306      	str	r3, [sp, #24]
 8007534:	9308      	str	r3, [sp, #32]
 8007536:	2312      	movs	r3, #18
 8007538:	e7d1      	b.n	80074de <_dtoa_r+0x25e>
 800753a:	bf00      	nop
 800753c:	f3af 8000 	nop.w
 8007540:	636f4361 	.word	0x636f4361
 8007544:	3fd287a7 	.word	0x3fd287a7
 8007548:	8b60c8b3 	.word	0x8b60c8b3
 800754c:	3fc68a28 	.word	0x3fc68a28
 8007550:	509f79fb 	.word	0x509f79fb
 8007554:	3fd34413 	.word	0x3fd34413
 8007558:	0800a95c 	.word	0x0800a95c
 800755c:	0800a973 	.word	0x0800a973
 8007560:	7ff00000 	.word	0x7ff00000
 8007564:	0800a958 	.word	0x0800a958
 8007568:	0800a94f 	.word	0x0800a94f
 800756c:	0800a927 	.word	0x0800a927
 8007570:	3ff80000 	.word	0x3ff80000
 8007574:	0800aa60 	.word	0x0800aa60
 8007578:	0800a9cb 	.word	0x0800a9cb
 800757c:	2301      	movs	r3, #1
 800757e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007580:	e7d4      	b.n	800752c <_dtoa_r+0x2ac>
 8007582:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007584:	9306      	str	r3, [sp, #24]
 8007586:	9308      	str	r3, [sp, #32]
 8007588:	e7b7      	b.n	80074fa <_dtoa_r+0x27a>
 800758a:	3101      	adds	r1, #1
 800758c:	0052      	lsls	r2, r2, #1
 800758e:	e7b7      	b.n	8007500 <_dtoa_r+0x280>
 8007590:	69eb      	ldr	r3, [r5, #28]
 8007592:	9a03      	ldr	r2, [sp, #12]
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	9b08      	ldr	r3, [sp, #32]
 8007598:	2b0e      	cmp	r3, #14
 800759a:	f200 80a8 	bhi.w	80076ee <_dtoa_r+0x46e>
 800759e:	2c00      	cmp	r4, #0
 80075a0:	f000 80a5 	beq.w	80076ee <_dtoa_r+0x46e>
 80075a4:	f1bb 0f00 	cmp.w	fp, #0
 80075a8:	dd34      	ble.n	8007614 <_dtoa_r+0x394>
 80075aa:	4b9a      	ldr	r3, [pc, #616]	; (8007814 <_dtoa_r+0x594>)
 80075ac:	f00b 020f 	and.w	r2, fp, #15
 80075b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80075b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075bc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80075c0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80075c4:	d016      	beq.n	80075f4 <_dtoa_r+0x374>
 80075c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075ca:	4b93      	ldr	r3, [pc, #588]	; (8007818 <_dtoa_r+0x598>)
 80075cc:	2703      	movs	r7, #3
 80075ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075d2:	f7f9 f917 	bl	8000804 <__aeabi_ddiv>
 80075d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075da:	f004 040f 	and.w	r4, r4, #15
 80075de:	4e8e      	ldr	r6, [pc, #568]	; (8007818 <_dtoa_r+0x598>)
 80075e0:	b954      	cbnz	r4, 80075f8 <_dtoa_r+0x378>
 80075e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80075e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075ea:	f7f9 f90b 	bl	8000804 <__aeabi_ddiv>
 80075ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075f2:	e029      	b.n	8007648 <_dtoa_r+0x3c8>
 80075f4:	2702      	movs	r7, #2
 80075f6:	e7f2      	b.n	80075de <_dtoa_r+0x35e>
 80075f8:	07e1      	lsls	r1, r4, #31
 80075fa:	d508      	bpl.n	800760e <_dtoa_r+0x38e>
 80075fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007600:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007604:	f7f8 ffd4 	bl	80005b0 <__aeabi_dmul>
 8007608:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800760c:	3701      	adds	r7, #1
 800760e:	1064      	asrs	r4, r4, #1
 8007610:	3608      	adds	r6, #8
 8007612:	e7e5      	b.n	80075e0 <_dtoa_r+0x360>
 8007614:	f000 80a5 	beq.w	8007762 <_dtoa_r+0x4e2>
 8007618:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800761c:	f1cb 0400 	rsb	r4, fp, #0
 8007620:	4b7c      	ldr	r3, [pc, #496]	; (8007814 <_dtoa_r+0x594>)
 8007622:	f004 020f 	and.w	r2, r4, #15
 8007626:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	f7f8 ffbf 	bl	80005b0 <__aeabi_dmul>
 8007632:	2702      	movs	r7, #2
 8007634:	2300      	movs	r3, #0
 8007636:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800763a:	4e77      	ldr	r6, [pc, #476]	; (8007818 <_dtoa_r+0x598>)
 800763c:	1124      	asrs	r4, r4, #4
 800763e:	2c00      	cmp	r4, #0
 8007640:	f040 8084 	bne.w	800774c <_dtoa_r+0x4cc>
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1d2      	bne.n	80075ee <_dtoa_r+0x36e>
 8007648:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800764c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007650:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 8087 	beq.w	8007766 <_dtoa_r+0x4e6>
 8007658:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800765c:	2200      	movs	r2, #0
 800765e:	4b6f      	ldr	r3, [pc, #444]	; (800781c <_dtoa_r+0x59c>)
 8007660:	f7f9 fa18 	bl	8000a94 <__aeabi_dcmplt>
 8007664:	2800      	cmp	r0, #0
 8007666:	d07e      	beq.n	8007766 <_dtoa_r+0x4e6>
 8007668:	9b08      	ldr	r3, [sp, #32]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d07b      	beq.n	8007766 <_dtoa_r+0x4e6>
 800766e:	9b06      	ldr	r3, [sp, #24]
 8007670:	2b00      	cmp	r3, #0
 8007672:	dd38      	ble.n	80076e6 <_dtoa_r+0x466>
 8007674:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007678:	2200      	movs	r2, #0
 800767a:	4b69      	ldr	r3, [pc, #420]	; (8007820 <_dtoa_r+0x5a0>)
 800767c:	f7f8 ff98 	bl	80005b0 <__aeabi_dmul>
 8007680:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007684:	9c06      	ldr	r4, [sp, #24]
 8007686:	f10b 38ff 	add.w	r8, fp, #4294967295
 800768a:	3701      	adds	r7, #1
 800768c:	4638      	mov	r0, r7
 800768e:	f7f8 ff25 	bl	80004dc <__aeabi_i2d>
 8007692:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007696:	f7f8 ff8b 	bl	80005b0 <__aeabi_dmul>
 800769a:	2200      	movs	r2, #0
 800769c:	4b61      	ldr	r3, [pc, #388]	; (8007824 <_dtoa_r+0x5a4>)
 800769e:	f7f8 fdd1 	bl	8000244 <__adddf3>
 80076a2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80076a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80076aa:	9611      	str	r6, [sp, #68]	; 0x44
 80076ac:	2c00      	cmp	r4, #0
 80076ae:	d15d      	bne.n	800776c <_dtoa_r+0x4ec>
 80076b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076b4:	2200      	movs	r2, #0
 80076b6:	4b5c      	ldr	r3, [pc, #368]	; (8007828 <_dtoa_r+0x5a8>)
 80076b8:	f7f8 fdc2 	bl	8000240 <__aeabi_dsub>
 80076bc:	4602      	mov	r2, r0
 80076be:	460b      	mov	r3, r1
 80076c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076c4:	4633      	mov	r3, r6
 80076c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80076c8:	f7f9 fa02 	bl	8000ad0 <__aeabi_dcmpgt>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	f040 8295 	bne.w	8007bfc <_dtoa_r+0x97c>
 80076d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80076d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80076dc:	f7f9 f9da 	bl	8000a94 <__aeabi_dcmplt>
 80076e0:	2800      	cmp	r0, #0
 80076e2:	f040 8289 	bne.w	8007bf8 <_dtoa_r+0x978>
 80076e6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80076ea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80076ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f2c0 8151 	blt.w	8007998 <_dtoa_r+0x718>
 80076f6:	f1bb 0f0e 	cmp.w	fp, #14
 80076fa:	f300 814d 	bgt.w	8007998 <_dtoa_r+0x718>
 80076fe:	4b45      	ldr	r3, [pc, #276]	; (8007814 <_dtoa_r+0x594>)
 8007700:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007704:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007708:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800770c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800770e:	2b00      	cmp	r3, #0
 8007710:	f280 80da 	bge.w	80078c8 <_dtoa_r+0x648>
 8007714:	9b08      	ldr	r3, [sp, #32]
 8007716:	2b00      	cmp	r3, #0
 8007718:	f300 80d6 	bgt.w	80078c8 <_dtoa_r+0x648>
 800771c:	f040 826b 	bne.w	8007bf6 <_dtoa_r+0x976>
 8007720:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007724:	2200      	movs	r2, #0
 8007726:	4b40      	ldr	r3, [pc, #256]	; (8007828 <_dtoa_r+0x5a8>)
 8007728:	f7f8 ff42 	bl	80005b0 <__aeabi_dmul>
 800772c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007730:	f7f9 f9c4 	bl	8000abc <__aeabi_dcmpge>
 8007734:	9c08      	ldr	r4, [sp, #32]
 8007736:	4626      	mov	r6, r4
 8007738:	2800      	cmp	r0, #0
 800773a:	f040 8241 	bne.w	8007bc0 <_dtoa_r+0x940>
 800773e:	2331      	movs	r3, #49	; 0x31
 8007740:	9f03      	ldr	r7, [sp, #12]
 8007742:	f10b 0b01 	add.w	fp, fp, #1
 8007746:	f807 3b01 	strb.w	r3, [r7], #1
 800774a:	e23d      	b.n	8007bc8 <_dtoa_r+0x948>
 800774c:	07e2      	lsls	r2, r4, #31
 800774e:	d505      	bpl.n	800775c <_dtoa_r+0x4dc>
 8007750:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007754:	f7f8 ff2c 	bl	80005b0 <__aeabi_dmul>
 8007758:	2301      	movs	r3, #1
 800775a:	3701      	adds	r7, #1
 800775c:	1064      	asrs	r4, r4, #1
 800775e:	3608      	adds	r6, #8
 8007760:	e76d      	b.n	800763e <_dtoa_r+0x3be>
 8007762:	2702      	movs	r7, #2
 8007764:	e770      	b.n	8007648 <_dtoa_r+0x3c8>
 8007766:	46d8      	mov	r8, fp
 8007768:	9c08      	ldr	r4, [sp, #32]
 800776a:	e78f      	b.n	800768c <_dtoa_r+0x40c>
 800776c:	9903      	ldr	r1, [sp, #12]
 800776e:	4b29      	ldr	r3, [pc, #164]	; (8007814 <_dtoa_r+0x594>)
 8007770:	4421      	add	r1, r4
 8007772:	9112      	str	r1, [sp, #72]	; 0x48
 8007774:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007776:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800777a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800777e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007782:	2900      	cmp	r1, #0
 8007784:	d054      	beq.n	8007830 <_dtoa_r+0x5b0>
 8007786:	2000      	movs	r0, #0
 8007788:	4928      	ldr	r1, [pc, #160]	; (800782c <_dtoa_r+0x5ac>)
 800778a:	f7f9 f83b 	bl	8000804 <__aeabi_ddiv>
 800778e:	463b      	mov	r3, r7
 8007790:	4632      	mov	r2, r6
 8007792:	f7f8 fd55 	bl	8000240 <__aeabi_dsub>
 8007796:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800779a:	9f03      	ldr	r7, [sp, #12]
 800779c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077a0:	f7f9 f9b6 	bl	8000b10 <__aeabi_d2iz>
 80077a4:	4604      	mov	r4, r0
 80077a6:	f7f8 fe99 	bl	80004dc <__aeabi_i2d>
 80077aa:	4602      	mov	r2, r0
 80077ac:	460b      	mov	r3, r1
 80077ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077b2:	f7f8 fd45 	bl	8000240 <__aeabi_dsub>
 80077b6:	4602      	mov	r2, r0
 80077b8:	460b      	mov	r3, r1
 80077ba:	3430      	adds	r4, #48	; 0x30
 80077bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80077c4:	f807 4b01 	strb.w	r4, [r7], #1
 80077c8:	f7f9 f964 	bl	8000a94 <__aeabi_dcmplt>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	d173      	bne.n	80078b8 <_dtoa_r+0x638>
 80077d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077d4:	2000      	movs	r0, #0
 80077d6:	4911      	ldr	r1, [pc, #68]	; (800781c <_dtoa_r+0x59c>)
 80077d8:	f7f8 fd32 	bl	8000240 <__aeabi_dsub>
 80077dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80077e0:	f7f9 f958 	bl	8000a94 <__aeabi_dcmplt>
 80077e4:	2800      	cmp	r0, #0
 80077e6:	f040 80b6 	bne.w	8007956 <_dtoa_r+0x6d6>
 80077ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077ec:	429f      	cmp	r7, r3
 80077ee:	f43f af7a 	beq.w	80076e6 <_dtoa_r+0x466>
 80077f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80077f6:	2200      	movs	r2, #0
 80077f8:	4b09      	ldr	r3, [pc, #36]	; (8007820 <_dtoa_r+0x5a0>)
 80077fa:	f7f8 fed9 	bl	80005b0 <__aeabi_dmul>
 80077fe:	2200      	movs	r2, #0
 8007800:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007804:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007808:	4b05      	ldr	r3, [pc, #20]	; (8007820 <_dtoa_r+0x5a0>)
 800780a:	f7f8 fed1 	bl	80005b0 <__aeabi_dmul>
 800780e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007812:	e7c3      	b.n	800779c <_dtoa_r+0x51c>
 8007814:	0800aa60 	.word	0x0800aa60
 8007818:	0800aa38 	.word	0x0800aa38
 800781c:	3ff00000 	.word	0x3ff00000
 8007820:	40240000 	.word	0x40240000
 8007824:	401c0000 	.word	0x401c0000
 8007828:	40140000 	.word	0x40140000
 800782c:	3fe00000 	.word	0x3fe00000
 8007830:	4630      	mov	r0, r6
 8007832:	4639      	mov	r1, r7
 8007834:	f7f8 febc 	bl	80005b0 <__aeabi_dmul>
 8007838:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800783a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800783e:	9c03      	ldr	r4, [sp, #12]
 8007840:	9314      	str	r3, [sp, #80]	; 0x50
 8007842:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007846:	f7f9 f963 	bl	8000b10 <__aeabi_d2iz>
 800784a:	9015      	str	r0, [sp, #84]	; 0x54
 800784c:	f7f8 fe46 	bl	80004dc <__aeabi_i2d>
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007858:	f7f8 fcf2 	bl	8000240 <__aeabi_dsub>
 800785c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800785e:	4606      	mov	r6, r0
 8007860:	3330      	adds	r3, #48	; 0x30
 8007862:	f804 3b01 	strb.w	r3, [r4], #1
 8007866:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007868:	460f      	mov	r7, r1
 800786a:	429c      	cmp	r4, r3
 800786c:	f04f 0200 	mov.w	r2, #0
 8007870:	d124      	bne.n	80078bc <_dtoa_r+0x63c>
 8007872:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007876:	4baf      	ldr	r3, [pc, #700]	; (8007b34 <_dtoa_r+0x8b4>)
 8007878:	f7f8 fce4 	bl	8000244 <__adddf3>
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	4630      	mov	r0, r6
 8007882:	4639      	mov	r1, r7
 8007884:	f7f9 f924 	bl	8000ad0 <__aeabi_dcmpgt>
 8007888:	2800      	cmp	r0, #0
 800788a:	d163      	bne.n	8007954 <_dtoa_r+0x6d4>
 800788c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007890:	2000      	movs	r0, #0
 8007892:	49a8      	ldr	r1, [pc, #672]	; (8007b34 <_dtoa_r+0x8b4>)
 8007894:	f7f8 fcd4 	bl	8000240 <__aeabi_dsub>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	4630      	mov	r0, r6
 800789e:	4639      	mov	r1, r7
 80078a0:	f7f9 f8f8 	bl	8000a94 <__aeabi_dcmplt>
 80078a4:	2800      	cmp	r0, #0
 80078a6:	f43f af1e 	beq.w	80076e6 <_dtoa_r+0x466>
 80078aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80078ac:	1e7b      	subs	r3, r7, #1
 80078ae:	9314      	str	r3, [sp, #80]	; 0x50
 80078b0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80078b4:	2b30      	cmp	r3, #48	; 0x30
 80078b6:	d0f8      	beq.n	80078aa <_dtoa_r+0x62a>
 80078b8:	46c3      	mov	fp, r8
 80078ba:	e03b      	b.n	8007934 <_dtoa_r+0x6b4>
 80078bc:	4b9e      	ldr	r3, [pc, #632]	; (8007b38 <_dtoa_r+0x8b8>)
 80078be:	f7f8 fe77 	bl	80005b0 <__aeabi_dmul>
 80078c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078c6:	e7bc      	b.n	8007842 <_dtoa_r+0x5c2>
 80078c8:	9f03      	ldr	r7, [sp, #12]
 80078ca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80078ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078d2:	4640      	mov	r0, r8
 80078d4:	4649      	mov	r1, r9
 80078d6:	f7f8 ff95 	bl	8000804 <__aeabi_ddiv>
 80078da:	f7f9 f919 	bl	8000b10 <__aeabi_d2iz>
 80078de:	4604      	mov	r4, r0
 80078e0:	f7f8 fdfc 	bl	80004dc <__aeabi_i2d>
 80078e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078e8:	f7f8 fe62 	bl	80005b0 <__aeabi_dmul>
 80078ec:	4602      	mov	r2, r0
 80078ee:	460b      	mov	r3, r1
 80078f0:	4640      	mov	r0, r8
 80078f2:	4649      	mov	r1, r9
 80078f4:	f7f8 fca4 	bl	8000240 <__aeabi_dsub>
 80078f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80078fc:	f807 6b01 	strb.w	r6, [r7], #1
 8007900:	9e03      	ldr	r6, [sp, #12]
 8007902:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007906:	1bbe      	subs	r6, r7, r6
 8007908:	45b4      	cmp	ip, r6
 800790a:	4602      	mov	r2, r0
 800790c:	460b      	mov	r3, r1
 800790e:	d136      	bne.n	800797e <_dtoa_r+0x6fe>
 8007910:	f7f8 fc98 	bl	8000244 <__adddf3>
 8007914:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007918:	4680      	mov	r8, r0
 800791a:	4689      	mov	r9, r1
 800791c:	f7f9 f8d8 	bl	8000ad0 <__aeabi_dcmpgt>
 8007920:	bb58      	cbnz	r0, 800797a <_dtoa_r+0x6fa>
 8007922:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007926:	4640      	mov	r0, r8
 8007928:	4649      	mov	r1, r9
 800792a:	f7f9 f8a9 	bl	8000a80 <__aeabi_dcmpeq>
 800792e:	b108      	cbz	r0, 8007934 <_dtoa_r+0x6b4>
 8007930:	07e3      	lsls	r3, r4, #31
 8007932:	d422      	bmi.n	800797a <_dtoa_r+0x6fa>
 8007934:	4651      	mov	r1, sl
 8007936:	4628      	mov	r0, r5
 8007938:	f000 fbc2 	bl	80080c0 <_Bfree>
 800793c:	2300      	movs	r3, #0
 800793e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007940:	703b      	strb	r3, [r7, #0]
 8007942:	f10b 0301 	add.w	r3, fp, #1
 8007946:	6013      	str	r3, [r2, #0]
 8007948:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800794a:	2b00      	cmp	r3, #0
 800794c:	f43f ace6 	beq.w	800731c <_dtoa_r+0x9c>
 8007950:	601f      	str	r7, [r3, #0]
 8007952:	e4e3      	b.n	800731c <_dtoa_r+0x9c>
 8007954:	4627      	mov	r7, r4
 8007956:	463b      	mov	r3, r7
 8007958:	461f      	mov	r7, r3
 800795a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800795e:	2a39      	cmp	r2, #57	; 0x39
 8007960:	d107      	bne.n	8007972 <_dtoa_r+0x6f2>
 8007962:	9a03      	ldr	r2, [sp, #12]
 8007964:	429a      	cmp	r2, r3
 8007966:	d1f7      	bne.n	8007958 <_dtoa_r+0x6d8>
 8007968:	2230      	movs	r2, #48	; 0x30
 800796a:	9903      	ldr	r1, [sp, #12]
 800796c:	f108 0801 	add.w	r8, r8, #1
 8007970:	700a      	strb	r2, [r1, #0]
 8007972:	781a      	ldrb	r2, [r3, #0]
 8007974:	3201      	adds	r2, #1
 8007976:	701a      	strb	r2, [r3, #0]
 8007978:	e79e      	b.n	80078b8 <_dtoa_r+0x638>
 800797a:	46d8      	mov	r8, fp
 800797c:	e7eb      	b.n	8007956 <_dtoa_r+0x6d6>
 800797e:	2200      	movs	r2, #0
 8007980:	4b6d      	ldr	r3, [pc, #436]	; (8007b38 <_dtoa_r+0x8b8>)
 8007982:	f7f8 fe15 	bl	80005b0 <__aeabi_dmul>
 8007986:	2200      	movs	r2, #0
 8007988:	2300      	movs	r3, #0
 800798a:	4680      	mov	r8, r0
 800798c:	4689      	mov	r9, r1
 800798e:	f7f9 f877 	bl	8000a80 <__aeabi_dcmpeq>
 8007992:	2800      	cmp	r0, #0
 8007994:	d09b      	beq.n	80078ce <_dtoa_r+0x64e>
 8007996:	e7cd      	b.n	8007934 <_dtoa_r+0x6b4>
 8007998:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800799a:	2a00      	cmp	r2, #0
 800799c:	f000 80c4 	beq.w	8007b28 <_dtoa_r+0x8a8>
 80079a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80079a2:	2a01      	cmp	r2, #1
 80079a4:	f300 80a8 	bgt.w	8007af8 <_dtoa_r+0x878>
 80079a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80079aa:	2a00      	cmp	r2, #0
 80079ac:	f000 80a0 	beq.w	8007af0 <_dtoa_r+0x870>
 80079b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80079b4:	464f      	mov	r7, r9
 80079b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80079b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079ba:	2101      	movs	r1, #1
 80079bc:	441a      	add	r2, r3
 80079be:	4628      	mov	r0, r5
 80079c0:	4499      	add	r9, r3
 80079c2:	9209      	str	r2, [sp, #36]	; 0x24
 80079c4:	f000 fc7c 	bl	80082c0 <__i2b>
 80079c8:	4606      	mov	r6, r0
 80079ca:	b15f      	cbz	r7, 80079e4 <_dtoa_r+0x764>
 80079cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	dd08      	ble.n	80079e4 <_dtoa_r+0x764>
 80079d2:	42bb      	cmp	r3, r7
 80079d4:	bfa8      	it	ge
 80079d6:	463b      	movge	r3, r7
 80079d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079da:	eba9 0903 	sub.w	r9, r9, r3
 80079de:	1aff      	subs	r7, r7, r3
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	9309      	str	r3, [sp, #36]	; 0x24
 80079e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079e6:	b1f3      	cbz	r3, 8007a26 <_dtoa_r+0x7a6>
 80079e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f000 80a0 	beq.w	8007b30 <_dtoa_r+0x8b0>
 80079f0:	2c00      	cmp	r4, #0
 80079f2:	dd10      	ble.n	8007a16 <_dtoa_r+0x796>
 80079f4:	4631      	mov	r1, r6
 80079f6:	4622      	mov	r2, r4
 80079f8:	4628      	mov	r0, r5
 80079fa:	f000 fd1f 	bl	800843c <__pow5mult>
 80079fe:	4652      	mov	r2, sl
 8007a00:	4601      	mov	r1, r0
 8007a02:	4606      	mov	r6, r0
 8007a04:	4628      	mov	r0, r5
 8007a06:	f000 fc71 	bl	80082ec <__multiply>
 8007a0a:	4680      	mov	r8, r0
 8007a0c:	4651      	mov	r1, sl
 8007a0e:	4628      	mov	r0, r5
 8007a10:	f000 fb56 	bl	80080c0 <_Bfree>
 8007a14:	46c2      	mov	sl, r8
 8007a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a18:	1b1a      	subs	r2, r3, r4
 8007a1a:	d004      	beq.n	8007a26 <_dtoa_r+0x7a6>
 8007a1c:	4651      	mov	r1, sl
 8007a1e:	4628      	mov	r0, r5
 8007a20:	f000 fd0c 	bl	800843c <__pow5mult>
 8007a24:	4682      	mov	sl, r0
 8007a26:	2101      	movs	r1, #1
 8007a28:	4628      	mov	r0, r5
 8007a2a:	f000 fc49 	bl	80082c0 <__i2b>
 8007a2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a30:	4604      	mov	r4, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f340 8082 	ble.w	8007b3c <_dtoa_r+0x8bc>
 8007a38:	461a      	mov	r2, r3
 8007a3a:	4601      	mov	r1, r0
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	f000 fcfd 	bl	800843c <__pow5mult>
 8007a42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a44:	4604      	mov	r4, r0
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	dd7b      	ble.n	8007b42 <_dtoa_r+0x8c2>
 8007a4a:	f04f 0800 	mov.w	r8, #0
 8007a4e:	6923      	ldr	r3, [r4, #16]
 8007a50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a54:	6918      	ldr	r0, [r3, #16]
 8007a56:	f000 fbe5 	bl	8008224 <__hi0bits>
 8007a5a:	f1c0 0020 	rsb	r0, r0, #32
 8007a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a60:	4418      	add	r0, r3
 8007a62:	f010 001f 	ands.w	r0, r0, #31
 8007a66:	f000 8092 	beq.w	8007b8e <_dtoa_r+0x90e>
 8007a6a:	f1c0 0320 	rsb	r3, r0, #32
 8007a6e:	2b04      	cmp	r3, #4
 8007a70:	f340 8085 	ble.w	8007b7e <_dtoa_r+0x8fe>
 8007a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a76:	f1c0 001c 	rsb	r0, r0, #28
 8007a7a:	4403      	add	r3, r0
 8007a7c:	4481      	add	r9, r0
 8007a7e:	4407      	add	r7, r0
 8007a80:	9309      	str	r3, [sp, #36]	; 0x24
 8007a82:	f1b9 0f00 	cmp.w	r9, #0
 8007a86:	dd05      	ble.n	8007a94 <_dtoa_r+0x814>
 8007a88:	4651      	mov	r1, sl
 8007a8a:	464a      	mov	r2, r9
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	f000 fd2f 	bl	80084f0 <__lshift>
 8007a92:	4682      	mov	sl, r0
 8007a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	dd05      	ble.n	8007aa6 <_dtoa_r+0x826>
 8007a9a:	4621      	mov	r1, r4
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	f000 fd26 	bl	80084f0 <__lshift>
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d072      	beq.n	8007b92 <_dtoa_r+0x912>
 8007aac:	4621      	mov	r1, r4
 8007aae:	4650      	mov	r0, sl
 8007ab0:	f000 fd8a 	bl	80085c8 <__mcmp>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	da6c      	bge.n	8007b92 <_dtoa_r+0x912>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	4651      	mov	r1, sl
 8007abc:	220a      	movs	r2, #10
 8007abe:	4628      	mov	r0, r5
 8007ac0:	f000 fb20 	bl	8008104 <__multadd>
 8007ac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ac6:	4682      	mov	sl, r0
 8007ac8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 81ac 	beq.w	8007e2a <_dtoa_r+0xbaa>
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	4631      	mov	r1, r6
 8007ad6:	220a      	movs	r2, #10
 8007ad8:	4628      	mov	r0, r5
 8007ada:	f000 fb13 	bl	8008104 <__multadd>
 8007ade:	9b06      	ldr	r3, [sp, #24]
 8007ae0:	4606      	mov	r6, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f300 8093 	bgt.w	8007c0e <_dtoa_r+0x98e>
 8007ae8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	dc59      	bgt.n	8007ba2 <_dtoa_r+0x922>
 8007aee:	e08e      	b.n	8007c0e <_dtoa_r+0x98e>
 8007af0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007af2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007af6:	e75d      	b.n	80079b4 <_dtoa_r+0x734>
 8007af8:	9b08      	ldr	r3, [sp, #32]
 8007afa:	1e5c      	subs	r4, r3, #1
 8007afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007afe:	42a3      	cmp	r3, r4
 8007b00:	bfbf      	itttt	lt
 8007b02:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007b04:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007b06:	1ae3      	sublt	r3, r4, r3
 8007b08:	18d2      	addlt	r2, r2, r3
 8007b0a:	bfa8      	it	ge
 8007b0c:	1b1c      	subge	r4, r3, r4
 8007b0e:	9b08      	ldr	r3, [sp, #32]
 8007b10:	bfbe      	ittt	lt
 8007b12:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007b14:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007b16:	2400      	movlt	r4, #0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	bfb5      	itete	lt
 8007b1c:	eba9 0703 	sublt.w	r7, r9, r3
 8007b20:	464f      	movge	r7, r9
 8007b22:	2300      	movlt	r3, #0
 8007b24:	9b08      	ldrge	r3, [sp, #32]
 8007b26:	e747      	b.n	80079b8 <_dtoa_r+0x738>
 8007b28:	464f      	mov	r7, r9
 8007b2a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007b2c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007b2e:	e74c      	b.n	80079ca <_dtoa_r+0x74a>
 8007b30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b32:	e773      	b.n	8007a1c <_dtoa_r+0x79c>
 8007b34:	3fe00000 	.word	0x3fe00000
 8007b38:	40240000 	.word	0x40240000
 8007b3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	dc18      	bgt.n	8007b74 <_dtoa_r+0x8f4>
 8007b42:	9b04      	ldr	r3, [sp, #16]
 8007b44:	b9b3      	cbnz	r3, 8007b74 <_dtoa_r+0x8f4>
 8007b46:	9b05      	ldr	r3, [sp, #20]
 8007b48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b4c:	b993      	cbnz	r3, 8007b74 <_dtoa_r+0x8f4>
 8007b4e:	9b05      	ldr	r3, [sp, #20]
 8007b50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b54:	0d1b      	lsrs	r3, r3, #20
 8007b56:	051b      	lsls	r3, r3, #20
 8007b58:	b17b      	cbz	r3, 8007b7a <_dtoa_r+0x8fa>
 8007b5a:	f04f 0801 	mov.w	r8, #1
 8007b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b60:	f109 0901 	add.w	r9, r9, #1
 8007b64:	3301      	adds	r3, #1
 8007b66:	9309      	str	r3, [sp, #36]	; 0x24
 8007b68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f47f af6f 	bne.w	8007a4e <_dtoa_r+0x7ce>
 8007b70:	2001      	movs	r0, #1
 8007b72:	e774      	b.n	8007a5e <_dtoa_r+0x7de>
 8007b74:	f04f 0800 	mov.w	r8, #0
 8007b78:	e7f6      	b.n	8007b68 <_dtoa_r+0x8e8>
 8007b7a:	4698      	mov	r8, r3
 8007b7c:	e7f4      	b.n	8007b68 <_dtoa_r+0x8e8>
 8007b7e:	d080      	beq.n	8007a82 <_dtoa_r+0x802>
 8007b80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b82:	331c      	adds	r3, #28
 8007b84:	441a      	add	r2, r3
 8007b86:	4499      	add	r9, r3
 8007b88:	441f      	add	r7, r3
 8007b8a:	9209      	str	r2, [sp, #36]	; 0x24
 8007b8c:	e779      	b.n	8007a82 <_dtoa_r+0x802>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	e7f6      	b.n	8007b80 <_dtoa_r+0x900>
 8007b92:	9b08      	ldr	r3, [sp, #32]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	dc34      	bgt.n	8007c02 <_dtoa_r+0x982>
 8007b98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	dd31      	ble.n	8007c02 <_dtoa_r+0x982>
 8007b9e:	9b08      	ldr	r3, [sp, #32]
 8007ba0:	9306      	str	r3, [sp, #24]
 8007ba2:	9b06      	ldr	r3, [sp, #24]
 8007ba4:	b963      	cbnz	r3, 8007bc0 <_dtoa_r+0x940>
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	2205      	movs	r2, #5
 8007baa:	4628      	mov	r0, r5
 8007bac:	f000 faaa 	bl	8008104 <__multadd>
 8007bb0:	4601      	mov	r1, r0
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	4650      	mov	r0, sl
 8007bb6:	f000 fd07 	bl	80085c8 <__mcmp>
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	f73f adbf 	bgt.w	800773e <_dtoa_r+0x4be>
 8007bc0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007bc2:	9f03      	ldr	r7, [sp, #12]
 8007bc4:	ea6f 0b03 	mvn.w	fp, r3
 8007bc8:	f04f 0800 	mov.w	r8, #0
 8007bcc:	4621      	mov	r1, r4
 8007bce:	4628      	mov	r0, r5
 8007bd0:	f000 fa76 	bl	80080c0 <_Bfree>
 8007bd4:	2e00      	cmp	r6, #0
 8007bd6:	f43f aead 	beq.w	8007934 <_dtoa_r+0x6b4>
 8007bda:	f1b8 0f00 	cmp.w	r8, #0
 8007bde:	d005      	beq.n	8007bec <_dtoa_r+0x96c>
 8007be0:	45b0      	cmp	r8, r6
 8007be2:	d003      	beq.n	8007bec <_dtoa_r+0x96c>
 8007be4:	4641      	mov	r1, r8
 8007be6:	4628      	mov	r0, r5
 8007be8:	f000 fa6a 	bl	80080c0 <_Bfree>
 8007bec:	4631      	mov	r1, r6
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f000 fa66 	bl	80080c0 <_Bfree>
 8007bf4:	e69e      	b.n	8007934 <_dtoa_r+0x6b4>
 8007bf6:	2400      	movs	r4, #0
 8007bf8:	4626      	mov	r6, r4
 8007bfa:	e7e1      	b.n	8007bc0 <_dtoa_r+0x940>
 8007bfc:	46c3      	mov	fp, r8
 8007bfe:	4626      	mov	r6, r4
 8007c00:	e59d      	b.n	800773e <_dtoa_r+0x4be>
 8007c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 80c8 	beq.w	8007d9a <_dtoa_r+0xb1a>
 8007c0a:	9b08      	ldr	r3, [sp, #32]
 8007c0c:	9306      	str	r3, [sp, #24]
 8007c0e:	2f00      	cmp	r7, #0
 8007c10:	dd05      	ble.n	8007c1e <_dtoa_r+0x99e>
 8007c12:	4631      	mov	r1, r6
 8007c14:	463a      	mov	r2, r7
 8007c16:	4628      	mov	r0, r5
 8007c18:	f000 fc6a 	bl	80084f0 <__lshift>
 8007c1c:	4606      	mov	r6, r0
 8007c1e:	f1b8 0f00 	cmp.w	r8, #0
 8007c22:	d05b      	beq.n	8007cdc <_dtoa_r+0xa5c>
 8007c24:	4628      	mov	r0, r5
 8007c26:	6871      	ldr	r1, [r6, #4]
 8007c28:	f000 fa0a 	bl	8008040 <_Balloc>
 8007c2c:	4607      	mov	r7, r0
 8007c2e:	b928      	cbnz	r0, 8007c3c <_dtoa_r+0x9bc>
 8007c30:	4602      	mov	r2, r0
 8007c32:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007c36:	4b81      	ldr	r3, [pc, #516]	; (8007e3c <_dtoa_r+0xbbc>)
 8007c38:	f7ff bb36 	b.w	80072a8 <_dtoa_r+0x28>
 8007c3c:	6932      	ldr	r2, [r6, #16]
 8007c3e:	f106 010c 	add.w	r1, r6, #12
 8007c42:	3202      	adds	r2, #2
 8007c44:	0092      	lsls	r2, r2, #2
 8007c46:	300c      	adds	r0, #12
 8007c48:	f001 ff72 	bl	8009b30 <memcpy>
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	4639      	mov	r1, r7
 8007c50:	4628      	mov	r0, r5
 8007c52:	f000 fc4d 	bl	80084f0 <__lshift>
 8007c56:	46b0      	mov	r8, r6
 8007c58:	4606      	mov	r6, r0
 8007c5a:	9b03      	ldr	r3, [sp, #12]
 8007c5c:	9a03      	ldr	r2, [sp, #12]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	9308      	str	r3, [sp, #32]
 8007c62:	9b06      	ldr	r3, [sp, #24]
 8007c64:	4413      	add	r3, r2
 8007c66:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c68:	9b04      	ldr	r3, [sp, #16]
 8007c6a:	f003 0301 	and.w	r3, r3, #1
 8007c6e:	930a      	str	r3, [sp, #40]	; 0x28
 8007c70:	9b08      	ldr	r3, [sp, #32]
 8007c72:	4621      	mov	r1, r4
 8007c74:	3b01      	subs	r3, #1
 8007c76:	4650      	mov	r0, sl
 8007c78:	9304      	str	r3, [sp, #16]
 8007c7a:	f7ff fa75 	bl	8007168 <quorem>
 8007c7e:	4641      	mov	r1, r8
 8007c80:	9006      	str	r0, [sp, #24]
 8007c82:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007c86:	4650      	mov	r0, sl
 8007c88:	f000 fc9e 	bl	80085c8 <__mcmp>
 8007c8c:	4632      	mov	r2, r6
 8007c8e:	9009      	str	r0, [sp, #36]	; 0x24
 8007c90:	4621      	mov	r1, r4
 8007c92:	4628      	mov	r0, r5
 8007c94:	f000 fcb4 	bl	8008600 <__mdiff>
 8007c98:	68c2      	ldr	r2, [r0, #12]
 8007c9a:	4607      	mov	r7, r0
 8007c9c:	bb02      	cbnz	r2, 8007ce0 <_dtoa_r+0xa60>
 8007c9e:	4601      	mov	r1, r0
 8007ca0:	4650      	mov	r0, sl
 8007ca2:	f000 fc91 	bl	80085c8 <__mcmp>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	4639      	mov	r1, r7
 8007caa:	4628      	mov	r0, r5
 8007cac:	920c      	str	r2, [sp, #48]	; 0x30
 8007cae:	f000 fa07 	bl	80080c0 <_Bfree>
 8007cb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cb6:	9f08      	ldr	r7, [sp, #32]
 8007cb8:	ea43 0102 	orr.w	r1, r3, r2
 8007cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cbe:	4319      	orrs	r1, r3
 8007cc0:	d110      	bne.n	8007ce4 <_dtoa_r+0xa64>
 8007cc2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007cc6:	d029      	beq.n	8007d1c <_dtoa_r+0xa9c>
 8007cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	dd02      	ble.n	8007cd4 <_dtoa_r+0xa54>
 8007cce:	9b06      	ldr	r3, [sp, #24]
 8007cd0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007cd4:	9b04      	ldr	r3, [sp, #16]
 8007cd6:	f883 9000 	strb.w	r9, [r3]
 8007cda:	e777      	b.n	8007bcc <_dtoa_r+0x94c>
 8007cdc:	4630      	mov	r0, r6
 8007cde:	e7ba      	b.n	8007c56 <_dtoa_r+0x9d6>
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	e7e1      	b.n	8007ca8 <_dtoa_r+0xa28>
 8007ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	db04      	blt.n	8007cf4 <_dtoa_r+0xa74>
 8007cea:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007cec:	430b      	orrs	r3, r1
 8007cee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007cf0:	430b      	orrs	r3, r1
 8007cf2:	d120      	bne.n	8007d36 <_dtoa_r+0xab6>
 8007cf4:	2a00      	cmp	r2, #0
 8007cf6:	dded      	ble.n	8007cd4 <_dtoa_r+0xa54>
 8007cf8:	4651      	mov	r1, sl
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	f000 fbf7 	bl	80084f0 <__lshift>
 8007d02:	4621      	mov	r1, r4
 8007d04:	4682      	mov	sl, r0
 8007d06:	f000 fc5f 	bl	80085c8 <__mcmp>
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	dc03      	bgt.n	8007d16 <_dtoa_r+0xa96>
 8007d0e:	d1e1      	bne.n	8007cd4 <_dtoa_r+0xa54>
 8007d10:	f019 0f01 	tst.w	r9, #1
 8007d14:	d0de      	beq.n	8007cd4 <_dtoa_r+0xa54>
 8007d16:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007d1a:	d1d8      	bne.n	8007cce <_dtoa_r+0xa4e>
 8007d1c:	2339      	movs	r3, #57	; 0x39
 8007d1e:	9a04      	ldr	r2, [sp, #16]
 8007d20:	7013      	strb	r3, [r2, #0]
 8007d22:	463b      	mov	r3, r7
 8007d24:	461f      	mov	r7, r3
 8007d26:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	2a39      	cmp	r2, #57	; 0x39
 8007d2e:	d06b      	beq.n	8007e08 <_dtoa_r+0xb88>
 8007d30:	3201      	adds	r2, #1
 8007d32:	701a      	strb	r2, [r3, #0]
 8007d34:	e74a      	b.n	8007bcc <_dtoa_r+0x94c>
 8007d36:	2a00      	cmp	r2, #0
 8007d38:	dd07      	ble.n	8007d4a <_dtoa_r+0xaca>
 8007d3a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007d3e:	d0ed      	beq.n	8007d1c <_dtoa_r+0xa9c>
 8007d40:	9a04      	ldr	r2, [sp, #16]
 8007d42:	f109 0301 	add.w	r3, r9, #1
 8007d46:	7013      	strb	r3, [r2, #0]
 8007d48:	e740      	b.n	8007bcc <_dtoa_r+0x94c>
 8007d4a:	9b08      	ldr	r3, [sp, #32]
 8007d4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d4e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d042      	beq.n	8007ddc <_dtoa_r+0xb5c>
 8007d56:	4651      	mov	r1, sl
 8007d58:	2300      	movs	r3, #0
 8007d5a:	220a      	movs	r2, #10
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	f000 f9d1 	bl	8008104 <__multadd>
 8007d62:	45b0      	cmp	r8, r6
 8007d64:	4682      	mov	sl, r0
 8007d66:	f04f 0300 	mov.w	r3, #0
 8007d6a:	f04f 020a 	mov.w	r2, #10
 8007d6e:	4641      	mov	r1, r8
 8007d70:	4628      	mov	r0, r5
 8007d72:	d107      	bne.n	8007d84 <_dtoa_r+0xb04>
 8007d74:	f000 f9c6 	bl	8008104 <__multadd>
 8007d78:	4680      	mov	r8, r0
 8007d7a:	4606      	mov	r6, r0
 8007d7c:	9b08      	ldr	r3, [sp, #32]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	9308      	str	r3, [sp, #32]
 8007d82:	e775      	b.n	8007c70 <_dtoa_r+0x9f0>
 8007d84:	f000 f9be 	bl	8008104 <__multadd>
 8007d88:	4631      	mov	r1, r6
 8007d8a:	4680      	mov	r8, r0
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	220a      	movs	r2, #10
 8007d90:	4628      	mov	r0, r5
 8007d92:	f000 f9b7 	bl	8008104 <__multadd>
 8007d96:	4606      	mov	r6, r0
 8007d98:	e7f0      	b.n	8007d7c <_dtoa_r+0xafc>
 8007d9a:	9b08      	ldr	r3, [sp, #32]
 8007d9c:	9306      	str	r3, [sp, #24]
 8007d9e:	9f03      	ldr	r7, [sp, #12]
 8007da0:	4621      	mov	r1, r4
 8007da2:	4650      	mov	r0, sl
 8007da4:	f7ff f9e0 	bl	8007168 <quorem>
 8007da8:	9b03      	ldr	r3, [sp, #12]
 8007daa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007dae:	f807 9b01 	strb.w	r9, [r7], #1
 8007db2:	1afa      	subs	r2, r7, r3
 8007db4:	9b06      	ldr	r3, [sp, #24]
 8007db6:	4293      	cmp	r3, r2
 8007db8:	dd07      	ble.n	8007dca <_dtoa_r+0xb4a>
 8007dba:	4651      	mov	r1, sl
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	220a      	movs	r2, #10
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	f000 f99f 	bl	8008104 <__multadd>
 8007dc6:	4682      	mov	sl, r0
 8007dc8:	e7ea      	b.n	8007da0 <_dtoa_r+0xb20>
 8007dca:	9b06      	ldr	r3, [sp, #24]
 8007dcc:	f04f 0800 	mov.w	r8, #0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	bfcc      	ite	gt
 8007dd4:	461f      	movgt	r7, r3
 8007dd6:	2701      	movle	r7, #1
 8007dd8:	9b03      	ldr	r3, [sp, #12]
 8007dda:	441f      	add	r7, r3
 8007ddc:	4651      	mov	r1, sl
 8007dde:	2201      	movs	r2, #1
 8007de0:	4628      	mov	r0, r5
 8007de2:	f000 fb85 	bl	80084f0 <__lshift>
 8007de6:	4621      	mov	r1, r4
 8007de8:	4682      	mov	sl, r0
 8007dea:	f000 fbed 	bl	80085c8 <__mcmp>
 8007dee:	2800      	cmp	r0, #0
 8007df0:	dc97      	bgt.n	8007d22 <_dtoa_r+0xaa2>
 8007df2:	d102      	bne.n	8007dfa <_dtoa_r+0xb7a>
 8007df4:	f019 0f01 	tst.w	r9, #1
 8007df8:	d193      	bne.n	8007d22 <_dtoa_r+0xaa2>
 8007dfa:	463b      	mov	r3, r7
 8007dfc:	461f      	mov	r7, r3
 8007dfe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e02:	2a30      	cmp	r2, #48	; 0x30
 8007e04:	d0fa      	beq.n	8007dfc <_dtoa_r+0xb7c>
 8007e06:	e6e1      	b.n	8007bcc <_dtoa_r+0x94c>
 8007e08:	9a03      	ldr	r2, [sp, #12]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d18a      	bne.n	8007d24 <_dtoa_r+0xaa4>
 8007e0e:	2331      	movs	r3, #49	; 0x31
 8007e10:	f10b 0b01 	add.w	fp, fp, #1
 8007e14:	e797      	b.n	8007d46 <_dtoa_r+0xac6>
 8007e16:	4b0a      	ldr	r3, [pc, #40]	; (8007e40 <_dtoa_r+0xbc0>)
 8007e18:	f7ff ba9f 	b.w	800735a <_dtoa_r+0xda>
 8007e1c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f47f aa77 	bne.w	8007312 <_dtoa_r+0x92>
 8007e24:	4b07      	ldr	r3, [pc, #28]	; (8007e44 <_dtoa_r+0xbc4>)
 8007e26:	f7ff ba98 	b.w	800735a <_dtoa_r+0xda>
 8007e2a:	9b06      	ldr	r3, [sp, #24]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	dcb6      	bgt.n	8007d9e <_dtoa_r+0xb1e>
 8007e30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	f73f aeb5 	bgt.w	8007ba2 <_dtoa_r+0x922>
 8007e38:	e7b1      	b.n	8007d9e <_dtoa_r+0xb1e>
 8007e3a:	bf00      	nop
 8007e3c:	0800a9cb 	.word	0x0800a9cb
 8007e40:	0800a926 	.word	0x0800a926
 8007e44:	0800a94f 	.word	0x0800a94f

08007e48 <_free_r>:
 8007e48:	b538      	push	{r3, r4, r5, lr}
 8007e4a:	4605      	mov	r5, r0
 8007e4c:	2900      	cmp	r1, #0
 8007e4e:	d040      	beq.n	8007ed2 <_free_r+0x8a>
 8007e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e54:	1f0c      	subs	r4, r1, #4
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	bfb8      	it	lt
 8007e5a:	18e4      	addlt	r4, r4, r3
 8007e5c:	f000 f8e4 	bl	8008028 <__malloc_lock>
 8007e60:	4a1c      	ldr	r2, [pc, #112]	; (8007ed4 <_free_r+0x8c>)
 8007e62:	6813      	ldr	r3, [r2, #0]
 8007e64:	b933      	cbnz	r3, 8007e74 <_free_r+0x2c>
 8007e66:	6063      	str	r3, [r4, #4]
 8007e68:	6014      	str	r4, [r2, #0]
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e70:	f000 b8e0 	b.w	8008034 <__malloc_unlock>
 8007e74:	42a3      	cmp	r3, r4
 8007e76:	d908      	bls.n	8007e8a <_free_r+0x42>
 8007e78:	6820      	ldr	r0, [r4, #0]
 8007e7a:	1821      	adds	r1, r4, r0
 8007e7c:	428b      	cmp	r3, r1
 8007e7e:	bf01      	itttt	eq
 8007e80:	6819      	ldreq	r1, [r3, #0]
 8007e82:	685b      	ldreq	r3, [r3, #4]
 8007e84:	1809      	addeq	r1, r1, r0
 8007e86:	6021      	streq	r1, [r4, #0]
 8007e88:	e7ed      	b.n	8007e66 <_free_r+0x1e>
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	b10b      	cbz	r3, 8007e94 <_free_r+0x4c>
 8007e90:	42a3      	cmp	r3, r4
 8007e92:	d9fa      	bls.n	8007e8a <_free_r+0x42>
 8007e94:	6811      	ldr	r1, [r2, #0]
 8007e96:	1850      	adds	r0, r2, r1
 8007e98:	42a0      	cmp	r0, r4
 8007e9a:	d10b      	bne.n	8007eb4 <_free_r+0x6c>
 8007e9c:	6820      	ldr	r0, [r4, #0]
 8007e9e:	4401      	add	r1, r0
 8007ea0:	1850      	adds	r0, r2, r1
 8007ea2:	4283      	cmp	r3, r0
 8007ea4:	6011      	str	r1, [r2, #0]
 8007ea6:	d1e0      	bne.n	8007e6a <_free_r+0x22>
 8007ea8:	6818      	ldr	r0, [r3, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	4408      	add	r0, r1
 8007eae:	6010      	str	r0, [r2, #0]
 8007eb0:	6053      	str	r3, [r2, #4]
 8007eb2:	e7da      	b.n	8007e6a <_free_r+0x22>
 8007eb4:	d902      	bls.n	8007ebc <_free_r+0x74>
 8007eb6:	230c      	movs	r3, #12
 8007eb8:	602b      	str	r3, [r5, #0]
 8007eba:	e7d6      	b.n	8007e6a <_free_r+0x22>
 8007ebc:	6820      	ldr	r0, [r4, #0]
 8007ebe:	1821      	adds	r1, r4, r0
 8007ec0:	428b      	cmp	r3, r1
 8007ec2:	bf01      	itttt	eq
 8007ec4:	6819      	ldreq	r1, [r3, #0]
 8007ec6:	685b      	ldreq	r3, [r3, #4]
 8007ec8:	1809      	addeq	r1, r1, r0
 8007eca:	6021      	streq	r1, [r4, #0]
 8007ecc:	6063      	str	r3, [r4, #4]
 8007ece:	6054      	str	r4, [r2, #4]
 8007ed0:	e7cb      	b.n	8007e6a <_free_r+0x22>
 8007ed2:	bd38      	pop	{r3, r4, r5, pc}
 8007ed4:	200004c0 	.word	0x200004c0

08007ed8 <malloc>:
 8007ed8:	4b02      	ldr	r3, [pc, #8]	; (8007ee4 <malloc+0xc>)
 8007eda:	4601      	mov	r1, r0
 8007edc:	6818      	ldr	r0, [r3, #0]
 8007ede:	f000 b823 	b.w	8007f28 <_malloc_r>
 8007ee2:	bf00      	nop
 8007ee4:	2000006c 	.word	0x2000006c

08007ee8 <sbrk_aligned>:
 8007ee8:	b570      	push	{r4, r5, r6, lr}
 8007eea:	4e0e      	ldr	r6, [pc, #56]	; (8007f24 <sbrk_aligned+0x3c>)
 8007eec:	460c      	mov	r4, r1
 8007eee:	6831      	ldr	r1, [r6, #0]
 8007ef0:	4605      	mov	r5, r0
 8007ef2:	b911      	cbnz	r1, 8007efa <sbrk_aligned+0x12>
 8007ef4:	f001 fe0c 	bl	8009b10 <_sbrk_r>
 8007ef8:	6030      	str	r0, [r6, #0]
 8007efa:	4621      	mov	r1, r4
 8007efc:	4628      	mov	r0, r5
 8007efe:	f001 fe07 	bl	8009b10 <_sbrk_r>
 8007f02:	1c43      	adds	r3, r0, #1
 8007f04:	d00a      	beq.n	8007f1c <sbrk_aligned+0x34>
 8007f06:	1cc4      	adds	r4, r0, #3
 8007f08:	f024 0403 	bic.w	r4, r4, #3
 8007f0c:	42a0      	cmp	r0, r4
 8007f0e:	d007      	beq.n	8007f20 <sbrk_aligned+0x38>
 8007f10:	1a21      	subs	r1, r4, r0
 8007f12:	4628      	mov	r0, r5
 8007f14:	f001 fdfc 	bl	8009b10 <_sbrk_r>
 8007f18:	3001      	adds	r0, #1
 8007f1a:	d101      	bne.n	8007f20 <sbrk_aligned+0x38>
 8007f1c:	f04f 34ff 	mov.w	r4, #4294967295
 8007f20:	4620      	mov	r0, r4
 8007f22:	bd70      	pop	{r4, r5, r6, pc}
 8007f24:	200004c4 	.word	0x200004c4

08007f28 <_malloc_r>:
 8007f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f2c:	1ccd      	adds	r5, r1, #3
 8007f2e:	f025 0503 	bic.w	r5, r5, #3
 8007f32:	3508      	adds	r5, #8
 8007f34:	2d0c      	cmp	r5, #12
 8007f36:	bf38      	it	cc
 8007f38:	250c      	movcc	r5, #12
 8007f3a:	2d00      	cmp	r5, #0
 8007f3c:	4607      	mov	r7, r0
 8007f3e:	db01      	blt.n	8007f44 <_malloc_r+0x1c>
 8007f40:	42a9      	cmp	r1, r5
 8007f42:	d905      	bls.n	8007f50 <_malloc_r+0x28>
 8007f44:	230c      	movs	r3, #12
 8007f46:	2600      	movs	r6, #0
 8007f48:	603b      	str	r3, [r7, #0]
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008024 <_malloc_r+0xfc>
 8007f54:	f000 f868 	bl	8008028 <__malloc_lock>
 8007f58:	f8d8 3000 	ldr.w	r3, [r8]
 8007f5c:	461c      	mov	r4, r3
 8007f5e:	bb5c      	cbnz	r4, 8007fb8 <_malloc_r+0x90>
 8007f60:	4629      	mov	r1, r5
 8007f62:	4638      	mov	r0, r7
 8007f64:	f7ff ffc0 	bl	8007ee8 <sbrk_aligned>
 8007f68:	1c43      	adds	r3, r0, #1
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	d155      	bne.n	800801a <_malloc_r+0xf2>
 8007f6e:	f8d8 4000 	ldr.w	r4, [r8]
 8007f72:	4626      	mov	r6, r4
 8007f74:	2e00      	cmp	r6, #0
 8007f76:	d145      	bne.n	8008004 <_malloc_r+0xdc>
 8007f78:	2c00      	cmp	r4, #0
 8007f7a:	d048      	beq.n	800800e <_malloc_r+0xe6>
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	4631      	mov	r1, r6
 8007f80:	4638      	mov	r0, r7
 8007f82:	eb04 0903 	add.w	r9, r4, r3
 8007f86:	f001 fdc3 	bl	8009b10 <_sbrk_r>
 8007f8a:	4581      	cmp	r9, r0
 8007f8c:	d13f      	bne.n	800800e <_malloc_r+0xe6>
 8007f8e:	6821      	ldr	r1, [r4, #0]
 8007f90:	4638      	mov	r0, r7
 8007f92:	1a6d      	subs	r5, r5, r1
 8007f94:	4629      	mov	r1, r5
 8007f96:	f7ff ffa7 	bl	8007ee8 <sbrk_aligned>
 8007f9a:	3001      	adds	r0, #1
 8007f9c:	d037      	beq.n	800800e <_malloc_r+0xe6>
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	442b      	add	r3, r5
 8007fa2:	6023      	str	r3, [r4, #0]
 8007fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d038      	beq.n	800801e <_malloc_r+0xf6>
 8007fac:	685a      	ldr	r2, [r3, #4]
 8007fae:	42a2      	cmp	r2, r4
 8007fb0:	d12b      	bne.n	800800a <_malloc_r+0xe2>
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	605a      	str	r2, [r3, #4]
 8007fb6:	e00f      	b.n	8007fd8 <_malloc_r+0xb0>
 8007fb8:	6822      	ldr	r2, [r4, #0]
 8007fba:	1b52      	subs	r2, r2, r5
 8007fbc:	d41f      	bmi.n	8007ffe <_malloc_r+0xd6>
 8007fbe:	2a0b      	cmp	r2, #11
 8007fc0:	d917      	bls.n	8007ff2 <_malloc_r+0xca>
 8007fc2:	1961      	adds	r1, r4, r5
 8007fc4:	42a3      	cmp	r3, r4
 8007fc6:	6025      	str	r5, [r4, #0]
 8007fc8:	bf18      	it	ne
 8007fca:	6059      	strne	r1, [r3, #4]
 8007fcc:	6863      	ldr	r3, [r4, #4]
 8007fce:	bf08      	it	eq
 8007fd0:	f8c8 1000 	streq.w	r1, [r8]
 8007fd4:	5162      	str	r2, [r4, r5]
 8007fd6:	604b      	str	r3, [r1, #4]
 8007fd8:	4638      	mov	r0, r7
 8007fda:	f104 060b 	add.w	r6, r4, #11
 8007fde:	f000 f829 	bl	8008034 <__malloc_unlock>
 8007fe2:	f026 0607 	bic.w	r6, r6, #7
 8007fe6:	1d23      	adds	r3, r4, #4
 8007fe8:	1af2      	subs	r2, r6, r3
 8007fea:	d0ae      	beq.n	8007f4a <_malloc_r+0x22>
 8007fec:	1b9b      	subs	r3, r3, r6
 8007fee:	50a3      	str	r3, [r4, r2]
 8007ff0:	e7ab      	b.n	8007f4a <_malloc_r+0x22>
 8007ff2:	42a3      	cmp	r3, r4
 8007ff4:	6862      	ldr	r2, [r4, #4]
 8007ff6:	d1dd      	bne.n	8007fb4 <_malloc_r+0x8c>
 8007ff8:	f8c8 2000 	str.w	r2, [r8]
 8007ffc:	e7ec      	b.n	8007fd8 <_malloc_r+0xb0>
 8007ffe:	4623      	mov	r3, r4
 8008000:	6864      	ldr	r4, [r4, #4]
 8008002:	e7ac      	b.n	8007f5e <_malloc_r+0x36>
 8008004:	4634      	mov	r4, r6
 8008006:	6876      	ldr	r6, [r6, #4]
 8008008:	e7b4      	b.n	8007f74 <_malloc_r+0x4c>
 800800a:	4613      	mov	r3, r2
 800800c:	e7cc      	b.n	8007fa8 <_malloc_r+0x80>
 800800e:	230c      	movs	r3, #12
 8008010:	4638      	mov	r0, r7
 8008012:	603b      	str	r3, [r7, #0]
 8008014:	f000 f80e 	bl	8008034 <__malloc_unlock>
 8008018:	e797      	b.n	8007f4a <_malloc_r+0x22>
 800801a:	6025      	str	r5, [r4, #0]
 800801c:	e7dc      	b.n	8007fd8 <_malloc_r+0xb0>
 800801e:	605b      	str	r3, [r3, #4]
 8008020:	deff      	udf	#255	; 0xff
 8008022:	bf00      	nop
 8008024:	200004c0 	.word	0x200004c0

08008028 <__malloc_lock>:
 8008028:	4801      	ldr	r0, [pc, #4]	; (8008030 <__malloc_lock+0x8>)
 800802a:	f7ff b888 	b.w	800713e <__retarget_lock_acquire_recursive>
 800802e:	bf00      	nop
 8008030:	200004bc 	.word	0x200004bc

08008034 <__malloc_unlock>:
 8008034:	4801      	ldr	r0, [pc, #4]	; (800803c <__malloc_unlock+0x8>)
 8008036:	f7ff b883 	b.w	8007140 <__retarget_lock_release_recursive>
 800803a:	bf00      	nop
 800803c:	200004bc 	.word	0x200004bc

08008040 <_Balloc>:
 8008040:	b570      	push	{r4, r5, r6, lr}
 8008042:	69c6      	ldr	r6, [r0, #28]
 8008044:	4604      	mov	r4, r0
 8008046:	460d      	mov	r5, r1
 8008048:	b976      	cbnz	r6, 8008068 <_Balloc+0x28>
 800804a:	2010      	movs	r0, #16
 800804c:	f7ff ff44 	bl	8007ed8 <malloc>
 8008050:	4602      	mov	r2, r0
 8008052:	61e0      	str	r0, [r4, #28]
 8008054:	b920      	cbnz	r0, 8008060 <_Balloc+0x20>
 8008056:	216b      	movs	r1, #107	; 0x6b
 8008058:	4b17      	ldr	r3, [pc, #92]	; (80080b8 <_Balloc+0x78>)
 800805a:	4818      	ldr	r0, [pc, #96]	; (80080bc <_Balloc+0x7c>)
 800805c:	f001 fd7c 	bl	8009b58 <__assert_func>
 8008060:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008064:	6006      	str	r6, [r0, #0]
 8008066:	60c6      	str	r6, [r0, #12]
 8008068:	69e6      	ldr	r6, [r4, #28]
 800806a:	68f3      	ldr	r3, [r6, #12]
 800806c:	b183      	cbz	r3, 8008090 <_Balloc+0x50>
 800806e:	69e3      	ldr	r3, [r4, #28]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008076:	b9b8      	cbnz	r0, 80080a8 <_Balloc+0x68>
 8008078:	2101      	movs	r1, #1
 800807a:	fa01 f605 	lsl.w	r6, r1, r5
 800807e:	1d72      	adds	r2, r6, #5
 8008080:	4620      	mov	r0, r4
 8008082:	0092      	lsls	r2, r2, #2
 8008084:	f001 fd86 	bl	8009b94 <_calloc_r>
 8008088:	b160      	cbz	r0, 80080a4 <_Balloc+0x64>
 800808a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800808e:	e00e      	b.n	80080ae <_Balloc+0x6e>
 8008090:	2221      	movs	r2, #33	; 0x21
 8008092:	2104      	movs	r1, #4
 8008094:	4620      	mov	r0, r4
 8008096:	f001 fd7d 	bl	8009b94 <_calloc_r>
 800809a:	69e3      	ldr	r3, [r4, #28]
 800809c:	60f0      	str	r0, [r6, #12]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1e4      	bne.n	800806e <_Balloc+0x2e>
 80080a4:	2000      	movs	r0, #0
 80080a6:	bd70      	pop	{r4, r5, r6, pc}
 80080a8:	6802      	ldr	r2, [r0, #0]
 80080aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080ae:	2300      	movs	r3, #0
 80080b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080b4:	e7f7      	b.n	80080a6 <_Balloc+0x66>
 80080b6:	bf00      	nop
 80080b8:	0800a95c 	.word	0x0800a95c
 80080bc:	0800a9dc 	.word	0x0800a9dc

080080c0 <_Bfree>:
 80080c0:	b570      	push	{r4, r5, r6, lr}
 80080c2:	69c6      	ldr	r6, [r0, #28]
 80080c4:	4605      	mov	r5, r0
 80080c6:	460c      	mov	r4, r1
 80080c8:	b976      	cbnz	r6, 80080e8 <_Bfree+0x28>
 80080ca:	2010      	movs	r0, #16
 80080cc:	f7ff ff04 	bl	8007ed8 <malloc>
 80080d0:	4602      	mov	r2, r0
 80080d2:	61e8      	str	r0, [r5, #28]
 80080d4:	b920      	cbnz	r0, 80080e0 <_Bfree+0x20>
 80080d6:	218f      	movs	r1, #143	; 0x8f
 80080d8:	4b08      	ldr	r3, [pc, #32]	; (80080fc <_Bfree+0x3c>)
 80080da:	4809      	ldr	r0, [pc, #36]	; (8008100 <_Bfree+0x40>)
 80080dc:	f001 fd3c 	bl	8009b58 <__assert_func>
 80080e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080e4:	6006      	str	r6, [r0, #0]
 80080e6:	60c6      	str	r6, [r0, #12]
 80080e8:	b13c      	cbz	r4, 80080fa <_Bfree+0x3a>
 80080ea:	69eb      	ldr	r3, [r5, #28]
 80080ec:	6862      	ldr	r2, [r4, #4]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080f4:	6021      	str	r1, [r4, #0]
 80080f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080fa:	bd70      	pop	{r4, r5, r6, pc}
 80080fc:	0800a95c 	.word	0x0800a95c
 8008100:	0800a9dc 	.word	0x0800a9dc

08008104 <__multadd>:
 8008104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008108:	4607      	mov	r7, r0
 800810a:	460c      	mov	r4, r1
 800810c:	461e      	mov	r6, r3
 800810e:	2000      	movs	r0, #0
 8008110:	690d      	ldr	r5, [r1, #16]
 8008112:	f101 0c14 	add.w	ip, r1, #20
 8008116:	f8dc 3000 	ldr.w	r3, [ip]
 800811a:	3001      	adds	r0, #1
 800811c:	b299      	uxth	r1, r3
 800811e:	fb02 6101 	mla	r1, r2, r1, r6
 8008122:	0c1e      	lsrs	r6, r3, #16
 8008124:	0c0b      	lsrs	r3, r1, #16
 8008126:	fb02 3306 	mla	r3, r2, r6, r3
 800812a:	b289      	uxth	r1, r1
 800812c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008130:	4285      	cmp	r5, r0
 8008132:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008136:	f84c 1b04 	str.w	r1, [ip], #4
 800813a:	dcec      	bgt.n	8008116 <__multadd+0x12>
 800813c:	b30e      	cbz	r6, 8008182 <__multadd+0x7e>
 800813e:	68a3      	ldr	r3, [r4, #8]
 8008140:	42ab      	cmp	r3, r5
 8008142:	dc19      	bgt.n	8008178 <__multadd+0x74>
 8008144:	6861      	ldr	r1, [r4, #4]
 8008146:	4638      	mov	r0, r7
 8008148:	3101      	adds	r1, #1
 800814a:	f7ff ff79 	bl	8008040 <_Balloc>
 800814e:	4680      	mov	r8, r0
 8008150:	b928      	cbnz	r0, 800815e <__multadd+0x5a>
 8008152:	4602      	mov	r2, r0
 8008154:	21ba      	movs	r1, #186	; 0xba
 8008156:	4b0c      	ldr	r3, [pc, #48]	; (8008188 <__multadd+0x84>)
 8008158:	480c      	ldr	r0, [pc, #48]	; (800818c <__multadd+0x88>)
 800815a:	f001 fcfd 	bl	8009b58 <__assert_func>
 800815e:	6922      	ldr	r2, [r4, #16]
 8008160:	f104 010c 	add.w	r1, r4, #12
 8008164:	3202      	adds	r2, #2
 8008166:	0092      	lsls	r2, r2, #2
 8008168:	300c      	adds	r0, #12
 800816a:	f001 fce1 	bl	8009b30 <memcpy>
 800816e:	4621      	mov	r1, r4
 8008170:	4638      	mov	r0, r7
 8008172:	f7ff ffa5 	bl	80080c0 <_Bfree>
 8008176:	4644      	mov	r4, r8
 8008178:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800817c:	3501      	adds	r5, #1
 800817e:	615e      	str	r6, [r3, #20]
 8008180:	6125      	str	r5, [r4, #16]
 8008182:	4620      	mov	r0, r4
 8008184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008188:	0800a9cb 	.word	0x0800a9cb
 800818c:	0800a9dc 	.word	0x0800a9dc

08008190 <__s2b>:
 8008190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008194:	4615      	mov	r5, r2
 8008196:	2209      	movs	r2, #9
 8008198:	461f      	mov	r7, r3
 800819a:	3308      	adds	r3, #8
 800819c:	460c      	mov	r4, r1
 800819e:	fb93 f3f2 	sdiv	r3, r3, r2
 80081a2:	4606      	mov	r6, r0
 80081a4:	2201      	movs	r2, #1
 80081a6:	2100      	movs	r1, #0
 80081a8:	429a      	cmp	r2, r3
 80081aa:	db09      	blt.n	80081c0 <__s2b+0x30>
 80081ac:	4630      	mov	r0, r6
 80081ae:	f7ff ff47 	bl	8008040 <_Balloc>
 80081b2:	b940      	cbnz	r0, 80081c6 <__s2b+0x36>
 80081b4:	4602      	mov	r2, r0
 80081b6:	21d3      	movs	r1, #211	; 0xd3
 80081b8:	4b18      	ldr	r3, [pc, #96]	; (800821c <__s2b+0x8c>)
 80081ba:	4819      	ldr	r0, [pc, #100]	; (8008220 <__s2b+0x90>)
 80081bc:	f001 fccc 	bl	8009b58 <__assert_func>
 80081c0:	0052      	lsls	r2, r2, #1
 80081c2:	3101      	adds	r1, #1
 80081c4:	e7f0      	b.n	80081a8 <__s2b+0x18>
 80081c6:	9b08      	ldr	r3, [sp, #32]
 80081c8:	2d09      	cmp	r5, #9
 80081ca:	6143      	str	r3, [r0, #20]
 80081cc:	f04f 0301 	mov.w	r3, #1
 80081d0:	6103      	str	r3, [r0, #16]
 80081d2:	dd16      	ble.n	8008202 <__s2b+0x72>
 80081d4:	f104 0909 	add.w	r9, r4, #9
 80081d8:	46c8      	mov	r8, r9
 80081da:	442c      	add	r4, r5
 80081dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80081e0:	4601      	mov	r1, r0
 80081e2:	220a      	movs	r2, #10
 80081e4:	4630      	mov	r0, r6
 80081e6:	3b30      	subs	r3, #48	; 0x30
 80081e8:	f7ff ff8c 	bl	8008104 <__multadd>
 80081ec:	45a0      	cmp	r8, r4
 80081ee:	d1f5      	bne.n	80081dc <__s2b+0x4c>
 80081f0:	f1a5 0408 	sub.w	r4, r5, #8
 80081f4:	444c      	add	r4, r9
 80081f6:	1b2d      	subs	r5, r5, r4
 80081f8:	1963      	adds	r3, r4, r5
 80081fa:	42bb      	cmp	r3, r7
 80081fc:	db04      	blt.n	8008208 <__s2b+0x78>
 80081fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008202:	2509      	movs	r5, #9
 8008204:	340a      	adds	r4, #10
 8008206:	e7f6      	b.n	80081f6 <__s2b+0x66>
 8008208:	f814 3b01 	ldrb.w	r3, [r4], #1
 800820c:	4601      	mov	r1, r0
 800820e:	220a      	movs	r2, #10
 8008210:	4630      	mov	r0, r6
 8008212:	3b30      	subs	r3, #48	; 0x30
 8008214:	f7ff ff76 	bl	8008104 <__multadd>
 8008218:	e7ee      	b.n	80081f8 <__s2b+0x68>
 800821a:	bf00      	nop
 800821c:	0800a9cb 	.word	0x0800a9cb
 8008220:	0800a9dc 	.word	0x0800a9dc

08008224 <__hi0bits>:
 8008224:	0c02      	lsrs	r2, r0, #16
 8008226:	0412      	lsls	r2, r2, #16
 8008228:	4603      	mov	r3, r0
 800822a:	b9ca      	cbnz	r2, 8008260 <__hi0bits+0x3c>
 800822c:	0403      	lsls	r3, r0, #16
 800822e:	2010      	movs	r0, #16
 8008230:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008234:	bf04      	itt	eq
 8008236:	021b      	lsleq	r3, r3, #8
 8008238:	3008      	addeq	r0, #8
 800823a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800823e:	bf04      	itt	eq
 8008240:	011b      	lsleq	r3, r3, #4
 8008242:	3004      	addeq	r0, #4
 8008244:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008248:	bf04      	itt	eq
 800824a:	009b      	lsleq	r3, r3, #2
 800824c:	3002      	addeq	r0, #2
 800824e:	2b00      	cmp	r3, #0
 8008250:	db05      	blt.n	800825e <__hi0bits+0x3a>
 8008252:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008256:	f100 0001 	add.w	r0, r0, #1
 800825a:	bf08      	it	eq
 800825c:	2020      	moveq	r0, #32
 800825e:	4770      	bx	lr
 8008260:	2000      	movs	r0, #0
 8008262:	e7e5      	b.n	8008230 <__hi0bits+0xc>

08008264 <__lo0bits>:
 8008264:	6803      	ldr	r3, [r0, #0]
 8008266:	4602      	mov	r2, r0
 8008268:	f013 0007 	ands.w	r0, r3, #7
 800826c:	d00b      	beq.n	8008286 <__lo0bits+0x22>
 800826e:	07d9      	lsls	r1, r3, #31
 8008270:	d421      	bmi.n	80082b6 <__lo0bits+0x52>
 8008272:	0798      	lsls	r0, r3, #30
 8008274:	bf49      	itett	mi
 8008276:	085b      	lsrmi	r3, r3, #1
 8008278:	089b      	lsrpl	r3, r3, #2
 800827a:	2001      	movmi	r0, #1
 800827c:	6013      	strmi	r3, [r2, #0]
 800827e:	bf5c      	itt	pl
 8008280:	2002      	movpl	r0, #2
 8008282:	6013      	strpl	r3, [r2, #0]
 8008284:	4770      	bx	lr
 8008286:	b299      	uxth	r1, r3
 8008288:	b909      	cbnz	r1, 800828e <__lo0bits+0x2a>
 800828a:	2010      	movs	r0, #16
 800828c:	0c1b      	lsrs	r3, r3, #16
 800828e:	b2d9      	uxtb	r1, r3
 8008290:	b909      	cbnz	r1, 8008296 <__lo0bits+0x32>
 8008292:	3008      	adds	r0, #8
 8008294:	0a1b      	lsrs	r3, r3, #8
 8008296:	0719      	lsls	r1, r3, #28
 8008298:	bf04      	itt	eq
 800829a:	091b      	lsreq	r3, r3, #4
 800829c:	3004      	addeq	r0, #4
 800829e:	0799      	lsls	r1, r3, #30
 80082a0:	bf04      	itt	eq
 80082a2:	089b      	lsreq	r3, r3, #2
 80082a4:	3002      	addeq	r0, #2
 80082a6:	07d9      	lsls	r1, r3, #31
 80082a8:	d403      	bmi.n	80082b2 <__lo0bits+0x4e>
 80082aa:	085b      	lsrs	r3, r3, #1
 80082ac:	f100 0001 	add.w	r0, r0, #1
 80082b0:	d003      	beq.n	80082ba <__lo0bits+0x56>
 80082b2:	6013      	str	r3, [r2, #0]
 80082b4:	4770      	bx	lr
 80082b6:	2000      	movs	r0, #0
 80082b8:	4770      	bx	lr
 80082ba:	2020      	movs	r0, #32
 80082bc:	4770      	bx	lr
	...

080082c0 <__i2b>:
 80082c0:	b510      	push	{r4, lr}
 80082c2:	460c      	mov	r4, r1
 80082c4:	2101      	movs	r1, #1
 80082c6:	f7ff febb 	bl	8008040 <_Balloc>
 80082ca:	4602      	mov	r2, r0
 80082cc:	b928      	cbnz	r0, 80082da <__i2b+0x1a>
 80082ce:	f240 1145 	movw	r1, #325	; 0x145
 80082d2:	4b04      	ldr	r3, [pc, #16]	; (80082e4 <__i2b+0x24>)
 80082d4:	4804      	ldr	r0, [pc, #16]	; (80082e8 <__i2b+0x28>)
 80082d6:	f001 fc3f 	bl	8009b58 <__assert_func>
 80082da:	2301      	movs	r3, #1
 80082dc:	6144      	str	r4, [r0, #20]
 80082de:	6103      	str	r3, [r0, #16]
 80082e0:	bd10      	pop	{r4, pc}
 80082e2:	bf00      	nop
 80082e4:	0800a9cb 	.word	0x0800a9cb
 80082e8:	0800a9dc 	.word	0x0800a9dc

080082ec <__multiply>:
 80082ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f0:	4691      	mov	r9, r2
 80082f2:	690a      	ldr	r2, [r1, #16]
 80082f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80082f8:	460c      	mov	r4, r1
 80082fa:	429a      	cmp	r2, r3
 80082fc:	bfbe      	ittt	lt
 80082fe:	460b      	movlt	r3, r1
 8008300:	464c      	movlt	r4, r9
 8008302:	4699      	movlt	r9, r3
 8008304:	6927      	ldr	r7, [r4, #16]
 8008306:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800830a:	68a3      	ldr	r3, [r4, #8]
 800830c:	6861      	ldr	r1, [r4, #4]
 800830e:	eb07 060a 	add.w	r6, r7, sl
 8008312:	42b3      	cmp	r3, r6
 8008314:	b085      	sub	sp, #20
 8008316:	bfb8      	it	lt
 8008318:	3101      	addlt	r1, #1
 800831a:	f7ff fe91 	bl	8008040 <_Balloc>
 800831e:	b930      	cbnz	r0, 800832e <__multiply+0x42>
 8008320:	4602      	mov	r2, r0
 8008322:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008326:	4b43      	ldr	r3, [pc, #268]	; (8008434 <__multiply+0x148>)
 8008328:	4843      	ldr	r0, [pc, #268]	; (8008438 <__multiply+0x14c>)
 800832a:	f001 fc15 	bl	8009b58 <__assert_func>
 800832e:	f100 0514 	add.w	r5, r0, #20
 8008332:	462b      	mov	r3, r5
 8008334:	2200      	movs	r2, #0
 8008336:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800833a:	4543      	cmp	r3, r8
 800833c:	d321      	bcc.n	8008382 <__multiply+0x96>
 800833e:	f104 0314 	add.w	r3, r4, #20
 8008342:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008346:	f109 0314 	add.w	r3, r9, #20
 800834a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800834e:	9202      	str	r2, [sp, #8]
 8008350:	1b3a      	subs	r2, r7, r4
 8008352:	3a15      	subs	r2, #21
 8008354:	f022 0203 	bic.w	r2, r2, #3
 8008358:	3204      	adds	r2, #4
 800835a:	f104 0115 	add.w	r1, r4, #21
 800835e:	428f      	cmp	r7, r1
 8008360:	bf38      	it	cc
 8008362:	2204      	movcc	r2, #4
 8008364:	9201      	str	r2, [sp, #4]
 8008366:	9a02      	ldr	r2, [sp, #8]
 8008368:	9303      	str	r3, [sp, #12]
 800836a:	429a      	cmp	r2, r3
 800836c:	d80c      	bhi.n	8008388 <__multiply+0x9c>
 800836e:	2e00      	cmp	r6, #0
 8008370:	dd03      	ble.n	800837a <__multiply+0x8e>
 8008372:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008376:	2b00      	cmp	r3, #0
 8008378:	d05a      	beq.n	8008430 <__multiply+0x144>
 800837a:	6106      	str	r6, [r0, #16]
 800837c:	b005      	add	sp, #20
 800837e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008382:	f843 2b04 	str.w	r2, [r3], #4
 8008386:	e7d8      	b.n	800833a <__multiply+0x4e>
 8008388:	f8b3 a000 	ldrh.w	sl, [r3]
 800838c:	f1ba 0f00 	cmp.w	sl, #0
 8008390:	d023      	beq.n	80083da <__multiply+0xee>
 8008392:	46a9      	mov	r9, r5
 8008394:	f04f 0c00 	mov.w	ip, #0
 8008398:	f104 0e14 	add.w	lr, r4, #20
 800839c:	f85e 2b04 	ldr.w	r2, [lr], #4
 80083a0:	f8d9 1000 	ldr.w	r1, [r9]
 80083a4:	fa1f fb82 	uxth.w	fp, r2
 80083a8:	b289      	uxth	r1, r1
 80083aa:	fb0a 110b 	mla	r1, sl, fp, r1
 80083ae:	4461      	add	r1, ip
 80083b0:	f8d9 c000 	ldr.w	ip, [r9]
 80083b4:	0c12      	lsrs	r2, r2, #16
 80083b6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80083ba:	fb0a c202 	mla	r2, sl, r2, ip
 80083be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80083c2:	b289      	uxth	r1, r1
 80083c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80083c8:	4577      	cmp	r7, lr
 80083ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80083ce:	f849 1b04 	str.w	r1, [r9], #4
 80083d2:	d8e3      	bhi.n	800839c <__multiply+0xb0>
 80083d4:	9a01      	ldr	r2, [sp, #4]
 80083d6:	f845 c002 	str.w	ip, [r5, r2]
 80083da:	9a03      	ldr	r2, [sp, #12]
 80083dc:	3304      	adds	r3, #4
 80083de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80083e2:	f1b9 0f00 	cmp.w	r9, #0
 80083e6:	d021      	beq.n	800842c <__multiply+0x140>
 80083e8:	46ae      	mov	lr, r5
 80083ea:	f04f 0a00 	mov.w	sl, #0
 80083ee:	6829      	ldr	r1, [r5, #0]
 80083f0:	f104 0c14 	add.w	ip, r4, #20
 80083f4:	f8bc b000 	ldrh.w	fp, [ip]
 80083f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80083fc:	b289      	uxth	r1, r1
 80083fe:	fb09 220b 	mla	r2, r9, fp, r2
 8008402:	4452      	add	r2, sl
 8008404:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008408:	f84e 1b04 	str.w	r1, [lr], #4
 800840c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008410:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008414:	f8be 1000 	ldrh.w	r1, [lr]
 8008418:	4567      	cmp	r7, ip
 800841a:	fb09 110a 	mla	r1, r9, sl, r1
 800841e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008422:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008426:	d8e5      	bhi.n	80083f4 <__multiply+0x108>
 8008428:	9a01      	ldr	r2, [sp, #4]
 800842a:	50a9      	str	r1, [r5, r2]
 800842c:	3504      	adds	r5, #4
 800842e:	e79a      	b.n	8008366 <__multiply+0x7a>
 8008430:	3e01      	subs	r6, #1
 8008432:	e79c      	b.n	800836e <__multiply+0x82>
 8008434:	0800a9cb 	.word	0x0800a9cb
 8008438:	0800a9dc 	.word	0x0800a9dc

0800843c <__pow5mult>:
 800843c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008440:	4615      	mov	r5, r2
 8008442:	f012 0203 	ands.w	r2, r2, #3
 8008446:	4606      	mov	r6, r0
 8008448:	460f      	mov	r7, r1
 800844a:	d007      	beq.n	800845c <__pow5mult+0x20>
 800844c:	4c25      	ldr	r4, [pc, #148]	; (80084e4 <__pow5mult+0xa8>)
 800844e:	3a01      	subs	r2, #1
 8008450:	2300      	movs	r3, #0
 8008452:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008456:	f7ff fe55 	bl	8008104 <__multadd>
 800845a:	4607      	mov	r7, r0
 800845c:	10ad      	asrs	r5, r5, #2
 800845e:	d03d      	beq.n	80084dc <__pow5mult+0xa0>
 8008460:	69f4      	ldr	r4, [r6, #28]
 8008462:	b97c      	cbnz	r4, 8008484 <__pow5mult+0x48>
 8008464:	2010      	movs	r0, #16
 8008466:	f7ff fd37 	bl	8007ed8 <malloc>
 800846a:	4602      	mov	r2, r0
 800846c:	61f0      	str	r0, [r6, #28]
 800846e:	b928      	cbnz	r0, 800847c <__pow5mult+0x40>
 8008470:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008474:	4b1c      	ldr	r3, [pc, #112]	; (80084e8 <__pow5mult+0xac>)
 8008476:	481d      	ldr	r0, [pc, #116]	; (80084ec <__pow5mult+0xb0>)
 8008478:	f001 fb6e 	bl	8009b58 <__assert_func>
 800847c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008480:	6004      	str	r4, [r0, #0]
 8008482:	60c4      	str	r4, [r0, #12]
 8008484:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008488:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800848c:	b94c      	cbnz	r4, 80084a2 <__pow5mult+0x66>
 800848e:	f240 2171 	movw	r1, #625	; 0x271
 8008492:	4630      	mov	r0, r6
 8008494:	f7ff ff14 	bl	80082c0 <__i2b>
 8008498:	2300      	movs	r3, #0
 800849a:	4604      	mov	r4, r0
 800849c:	f8c8 0008 	str.w	r0, [r8, #8]
 80084a0:	6003      	str	r3, [r0, #0]
 80084a2:	f04f 0900 	mov.w	r9, #0
 80084a6:	07eb      	lsls	r3, r5, #31
 80084a8:	d50a      	bpl.n	80084c0 <__pow5mult+0x84>
 80084aa:	4639      	mov	r1, r7
 80084ac:	4622      	mov	r2, r4
 80084ae:	4630      	mov	r0, r6
 80084b0:	f7ff ff1c 	bl	80082ec <__multiply>
 80084b4:	4680      	mov	r8, r0
 80084b6:	4639      	mov	r1, r7
 80084b8:	4630      	mov	r0, r6
 80084ba:	f7ff fe01 	bl	80080c0 <_Bfree>
 80084be:	4647      	mov	r7, r8
 80084c0:	106d      	asrs	r5, r5, #1
 80084c2:	d00b      	beq.n	80084dc <__pow5mult+0xa0>
 80084c4:	6820      	ldr	r0, [r4, #0]
 80084c6:	b938      	cbnz	r0, 80084d8 <__pow5mult+0x9c>
 80084c8:	4622      	mov	r2, r4
 80084ca:	4621      	mov	r1, r4
 80084cc:	4630      	mov	r0, r6
 80084ce:	f7ff ff0d 	bl	80082ec <__multiply>
 80084d2:	6020      	str	r0, [r4, #0]
 80084d4:	f8c0 9000 	str.w	r9, [r0]
 80084d8:	4604      	mov	r4, r0
 80084da:	e7e4      	b.n	80084a6 <__pow5mult+0x6a>
 80084dc:	4638      	mov	r0, r7
 80084de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084e2:	bf00      	nop
 80084e4:	0800ab28 	.word	0x0800ab28
 80084e8:	0800a95c 	.word	0x0800a95c
 80084ec:	0800a9dc 	.word	0x0800a9dc

080084f0 <__lshift>:
 80084f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084f4:	460c      	mov	r4, r1
 80084f6:	4607      	mov	r7, r0
 80084f8:	4691      	mov	r9, r2
 80084fa:	6923      	ldr	r3, [r4, #16]
 80084fc:	6849      	ldr	r1, [r1, #4]
 80084fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008502:	68a3      	ldr	r3, [r4, #8]
 8008504:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008508:	f108 0601 	add.w	r6, r8, #1
 800850c:	42b3      	cmp	r3, r6
 800850e:	db0b      	blt.n	8008528 <__lshift+0x38>
 8008510:	4638      	mov	r0, r7
 8008512:	f7ff fd95 	bl	8008040 <_Balloc>
 8008516:	4605      	mov	r5, r0
 8008518:	b948      	cbnz	r0, 800852e <__lshift+0x3e>
 800851a:	4602      	mov	r2, r0
 800851c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008520:	4b27      	ldr	r3, [pc, #156]	; (80085c0 <__lshift+0xd0>)
 8008522:	4828      	ldr	r0, [pc, #160]	; (80085c4 <__lshift+0xd4>)
 8008524:	f001 fb18 	bl	8009b58 <__assert_func>
 8008528:	3101      	adds	r1, #1
 800852a:	005b      	lsls	r3, r3, #1
 800852c:	e7ee      	b.n	800850c <__lshift+0x1c>
 800852e:	2300      	movs	r3, #0
 8008530:	f100 0114 	add.w	r1, r0, #20
 8008534:	f100 0210 	add.w	r2, r0, #16
 8008538:	4618      	mov	r0, r3
 800853a:	4553      	cmp	r3, sl
 800853c:	db33      	blt.n	80085a6 <__lshift+0xb6>
 800853e:	6920      	ldr	r0, [r4, #16]
 8008540:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008544:	f104 0314 	add.w	r3, r4, #20
 8008548:	f019 091f 	ands.w	r9, r9, #31
 800854c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008550:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008554:	d02b      	beq.n	80085ae <__lshift+0xbe>
 8008556:	468a      	mov	sl, r1
 8008558:	2200      	movs	r2, #0
 800855a:	f1c9 0e20 	rsb	lr, r9, #32
 800855e:	6818      	ldr	r0, [r3, #0]
 8008560:	fa00 f009 	lsl.w	r0, r0, r9
 8008564:	4310      	orrs	r0, r2
 8008566:	f84a 0b04 	str.w	r0, [sl], #4
 800856a:	f853 2b04 	ldr.w	r2, [r3], #4
 800856e:	459c      	cmp	ip, r3
 8008570:	fa22 f20e 	lsr.w	r2, r2, lr
 8008574:	d8f3      	bhi.n	800855e <__lshift+0x6e>
 8008576:	ebac 0304 	sub.w	r3, ip, r4
 800857a:	3b15      	subs	r3, #21
 800857c:	f023 0303 	bic.w	r3, r3, #3
 8008580:	3304      	adds	r3, #4
 8008582:	f104 0015 	add.w	r0, r4, #21
 8008586:	4584      	cmp	ip, r0
 8008588:	bf38      	it	cc
 800858a:	2304      	movcc	r3, #4
 800858c:	50ca      	str	r2, [r1, r3]
 800858e:	b10a      	cbz	r2, 8008594 <__lshift+0xa4>
 8008590:	f108 0602 	add.w	r6, r8, #2
 8008594:	3e01      	subs	r6, #1
 8008596:	4638      	mov	r0, r7
 8008598:	4621      	mov	r1, r4
 800859a:	612e      	str	r6, [r5, #16]
 800859c:	f7ff fd90 	bl	80080c0 <_Bfree>
 80085a0:	4628      	mov	r0, r5
 80085a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80085aa:	3301      	adds	r3, #1
 80085ac:	e7c5      	b.n	800853a <__lshift+0x4a>
 80085ae:	3904      	subs	r1, #4
 80085b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80085b4:	459c      	cmp	ip, r3
 80085b6:	f841 2f04 	str.w	r2, [r1, #4]!
 80085ba:	d8f9      	bhi.n	80085b0 <__lshift+0xc0>
 80085bc:	e7ea      	b.n	8008594 <__lshift+0xa4>
 80085be:	bf00      	nop
 80085c0:	0800a9cb 	.word	0x0800a9cb
 80085c4:	0800a9dc 	.word	0x0800a9dc

080085c8 <__mcmp>:
 80085c8:	4603      	mov	r3, r0
 80085ca:	690a      	ldr	r2, [r1, #16]
 80085cc:	6900      	ldr	r0, [r0, #16]
 80085ce:	b530      	push	{r4, r5, lr}
 80085d0:	1a80      	subs	r0, r0, r2
 80085d2:	d10d      	bne.n	80085f0 <__mcmp+0x28>
 80085d4:	3314      	adds	r3, #20
 80085d6:	3114      	adds	r1, #20
 80085d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80085dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80085e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80085e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80085e8:	4295      	cmp	r5, r2
 80085ea:	d002      	beq.n	80085f2 <__mcmp+0x2a>
 80085ec:	d304      	bcc.n	80085f8 <__mcmp+0x30>
 80085ee:	2001      	movs	r0, #1
 80085f0:	bd30      	pop	{r4, r5, pc}
 80085f2:	42a3      	cmp	r3, r4
 80085f4:	d3f4      	bcc.n	80085e0 <__mcmp+0x18>
 80085f6:	e7fb      	b.n	80085f0 <__mcmp+0x28>
 80085f8:	f04f 30ff 	mov.w	r0, #4294967295
 80085fc:	e7f8      	b.n	80085f0 <__mcmp+0x28>
	...

08008600 <__mdiff>:
 8008600:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008604:	460d      	mov	r5, r1
 8008606:	4607      	mov	r7, r0
 8008608:	4611      	mov	r1, r2
 800860a:	4628      	mov	r0, r5
 800860c:	4614      	mov	r4, r2
 800860e:	f7ff ffdb 	bl	80085c8 <__mcmp>
 8008612:	1e06      	subs	r6, r0, #0
 8008614:	d111      	bne.n	800863a <__mdiff+0x3a>
 8008616:	4631      	mov	r1, r6
 8008618:	4638      	mov	r0, r7
 800861a:	f7ff fd11 	bl	8008040 <_Balloc>
 800861e:	4602      	mov	r2, r0
 8008620:	b928      	cbnz	r0, 800862e <__mdiff+0x2e>
 8008622:	f240 2137 	movw	r1, #567	; 0x237
 8008626:	4b3a      	ldr	r3, [pc, #232]	; (8008710 <__mdiff+0x110>)
 8008628:	483a      	ldr	r0, [pc, #232]	; (8008714 <__mdiff+0x114>)
 800862a:	f001 fa95 	bl	8009b58 <__assert_func>
 800862e:	2301      	movs	r3, #1
 8008630:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008634:	4610      	mov	r0, r2
 8008636:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800863a:	bfa4      	itt	ge
 800863c:	4623      	movge	r3, r4
 800863e:	462c      	movge	r4, r5
 8008640:	4638      	mov	r0, r7
 8008642:	6861      	ldr	r1, [r4, #4]
 8008644:	bfa6      	itte	ge
 8008646:	461d      	movge	r5, r3
 8008648:	2600      	movge	r6, #0
 800864a:	2601      	movlt	r6, #1
 800864c:	f7ff fcf8 	bl	8008040 <_Balloc>
 8008650:	4602      	mov	r2, r0
 8008652:	b918      	cbnz	r0, 800865c <__mdiff+0x5c>
 8008654:	f240 2145 	movw	r1, #581	; 0x245
 8008658:	4b2d      	ldr	r3, [pc, #180]	; (8008710 <__mdiff+0x110>)
 800865a:	e7e5      	b.n	8008628 <__mdiff+0x28>
 800865c:	f102 0814 	add.w	r8, r2, #20
 8008660:	46c2      	mov	sl, r8
 8008662:	f04f 0c00 	mov.w	ip, #0
 8008666:	6927      	ldr	r7, [r4, #16]
 8008668:	60c6      	str	r6, [r0, #12]
 800866a:	692e      	ldr	r6, [r5, #16]
 800866c:	f104 0014 	add.w	r0, r4, #20
 8008670:	f105 0914 	add.w	r9, r5, #20
 8008674:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008678:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800867c:	3410      	adds	r4, #16
 800867e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008682:	f859 3b04 	ldr.w	r3, [r9], #4
 8008686:	fa1f f18b 	uxth.w	r1, fp
 800868a:	4461      	add	r1, ip
 800868c:	fa1f fc83 	uxth.w	ip, r3
 8008690:	0c1b      	lsrs	r3, r3, #16
 8008692:	eba1 010c 	sub.w	r1, r1, ip
 8008696:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800869a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800869e:	b289      	uxth	r1, r1
 80086a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80086a4:	454e      	cmp	r6, r9
 80086a6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80086aa:	f84a 1b04 	str.w	r1, [sl], #4
 80086ae:	d8e6      	bhi.n	800867e <__mdiff+0x7e>
 80086b0:	1b73      	subs	r3, r6, r5
 80086b2:	3b15      	subs	r3, #21
 80086b4:	f023 0303 	bic.w	r3, r3, #3
 80086b8:	3515      	adds	r5, #21
 80086ba:	3304      	adds	r3, #4
 80086bc:	42ae      	cmp	r6, r5
 80086be:	bf38      	it	cc
 80086c0:	2304      	movcc	r3, #4
 80086c2:	4418      	add	r0, r3
 80086c4:	4443      	add	r3, r8
 80086c6:	461e      	mov	r6, r3
 80086c8:	4605      	mov	r5, r0
 80086ca:	4575      	cmp	r5, lr
 80086cc:	d30e      	bcc.n	80086ec <__mdiff+0xec>
 80086ce:	f10e 0103 	add.w	r1, lr, #3
 80086d2:	1a09      	subs	r1, r1, r0
 80086d4:	f021 0103 	bic.w	r1, r1, #3
 80086d8:	3803      	subs	r0, #3
 80086da:	4586      	cmp	lr, r0
 80086dc:	bf38      	it	cc
 80086de:	2100      	movcc	r1, #0
 80086e0:	440b      	add	r3, r1
 80086e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80086e6:	b189      	cbz	r1, 800870c <__mdiff+0x10c>
 80086e8:	6117      	str	r7, [r2, #16]
 80086ea:	e7a3      	b.n	8008634 <__mdiff+0x34>
 80086ec:	f855 8b04 	ldr.w	r8, [r5], #4
 80086f0:	fa1f f188 	uxth.w	r1, r8
 80086f4:	4461      	add	r1, ip
 80086f6:	140c      	asrs	r4, r1, #16
 80086f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80086fc:	b289      	uxth	r1, r1
 80086fe:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008702:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008706:	f846 1b04 	str.w	r1, [r6], #4
 800870a:	e7de      	b.n	80086ca <__mdiff+0xca>
 800870c:	3f01      	subs	r7, #1
 800870e:	e7e8      	b.n	80086e2 <__mdiff+0xe2>
 8008710:	0800a9cb 	.word	0x0800a9cb
 8008714:	0800a9dc 	.word	0x0800a9dc

08008718 <__ulp>:
 8008718:	4b0e      	ldr	r3, [pc, #56]	; (8008754 <__ulp+0x3c>)
 800871a:	400b      	ands	r3, r1
 800871c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008720:	2b00      	cmp	r3, #0
 8008722:	dc08      	bgt.n	8008736 <__ulp+0x1e>
 8008724:	425b      	negs	r3, r3
 8008726:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800872a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800872e:	da04      	bge.n	800873a <__ulp+0x22>
 8008730:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008734:	4113      	asrs	r3, r2
 8008736:	2200      	movs	r2, #0
 8008738:	e008      	b.n	800874c <__ulp+0x34>
 800873a:	f1a2 0314 	sub.w	r3, r2, #20
 800873e:	2b1e      	cmp	r3, #30
 8008740:	bfd6      	itet	le
 8008742:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008746:	2201      	movgt	r2, #1
 8008748:	40da      	lsrle	r2, r3
 800874a:	2300      	movs	r3, #0
 800874c:	4619      	mov	r1, r3
 800874e:	4610      	mov	r0, r2
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	7ff00000 	.word	0x7ff00000

08008758 <__b2d>:
 8008758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800875a:	6905      	ldr	r5, [r0, #16]
 800875c:	f100 0714 	add.w	r7, r0, #20
 8008760:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008764:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008768:	1f2e      	subs	r6, r5, #4
 800876a:	4620      	mov	r0, r4
 800876c:	f7ff fd5a 	bl	8008224 <__hi0bits>
 8008770:	f1c0 0220 	rsb	r2, r0, #32
 8008774:	280a      	cmp	r0, #10
 8008776:	4603      	mov	r3, r0
 8008778:	f8df c068 	ldr.w	ip, [pc, #104]	; 80087e4 <__b2d+0x8c>
 800877c:	600a      	str	r2, [r1, #0]
 800877e:	dc12      	bgt.n	80087a6 <__b2d+0x4e>
 8008780:	f1c0 0e0b 	rsb	lr, r0, #11
 8008784:	fa24 f20e 	lsr.w	r2, r4, lr
 8008788:	42b7      	cmp	r7, r6
 800878a:	ea42 010c 	orr.w	r1, r2, ip
 800878e:	bf2c      	ite	cs
 8008790:	2200      	movcs	r2, #0
 8008792:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8008796:	3315      	adds	r3, #21
 8008798:	fa04 f303 	lsl.w	r3, r4, r3
 800879c:	fa22 f20e 	lsr.w	r2, r2, lr
 80087a0:	431a      	orrs	r2, r3
 80087a2:	4610      	mov	r0, r2
 80087a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087a6:	42b7      	cmp	r7, r6
 80087a8:	bf2e      	itee	cs
 80087aa:	2200      	movcs	r2, #0
 80087ac:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80087b0:	f1a5 0608 	subcc.w	r6, r5, #8
 80087b4:	3b0b      	subs	r3, #11
 80087b6:	d012      	beq.n	80087de <__b2d+0x86>
 80087b8:	f1c3 0520 	rsb	r5, r3, #32
 80087bc:	fa22 f105 	lsr.w	r1, r2, r5
 80087c0:	409c      	lsls	r4, r3
 80087c2:	430c      	orrs	r4, r1
 80087c4:	42be      	cmp	r6, r7
 80087c6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 80087ca:	bf94      	ite	ls
 80087cc:	2400      	movls	r4, #0
 80087ce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80087d2:	409a      	lsls	r2, r3
 80087d4:	40ec      	lsrs	r4, r5
 80087d6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80087da:	4322      	orrs	r2, r4
 80087dc:	e7e1      	b.n	80087a2 <__b2d+0x4a>
 80087de:	ea44 010c 	orr.w	r1, r4, ip
 80087e2:	e7de      	b.n	80087a2 <__b2d+0x4a>
 80087e4:	3ff00000 	.word	0x3ff00000

080087e8 <__d2b>:
 80087e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087ea:	2101      	movs	r1, #1
 80087ec:	4617      	mov	r7, r2
 80087ee:	461c      	mov	r4, r3
 80087f0:	9e08      	ldr	r6, [sp, #32]
 80087f2:	f7ff fc25 	bl	8008040 <_Balloc>
 80087f6:	4605      	mov	r5, r0
 80087f8:	b930      	cbnz	r0, 8008808 <__d2b+0x20>
 80087fa:	4602      	mov	r2, r0
 80087fc:	f240 310f 	movw	r1, #783	; 0x30f
 8008800:	4b22      	ldr	r3, [pc, #136]	; (800888c <__d2b+0xa4>)
 8008802:	4823      	ldr	r0, [pc, #140]	; (8008890 <__d2b+0xa8>)
 8008804:	f001 f9a8 	bl	8009b58 <__assert_func>
 8008808:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800880c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008810:	bb24      	cbnz	r4, 800885c <__d2b+0x74>
 8008812:	2f00      	cmp	r7, #0
 8008814:	9301      	str	r3, [sp, #4]
 8008816:	d026      	beq.n	8008866 <__d2b+0x7e>
 8008818:	4668      	mov	r0, sp
 800881a:	9700      	str	r7, [sp, #0]
 800881c:	f7ff fd22 	bl	8008264 <__lo0bits>
 8008820:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008824:	b1e8      	cbz	r0, 8008862 <__d2b+0x7a>
 8008826:	f1c0 0320 	rsb	r3, r0, #32
 800882a:	fa02 f303 	lsl.w	r3, r2, r3
 800882e:	430b      	orrs	r3, r1
 8008830:	40c2      	lsrs	r2, r0
 8008832:	616b      	str	r3, [r5, #20]
 8008834:	9201      	str	r2, [sp, #4]
 8008836:	9b01      	ldr	r3, [sp, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	bf14      	ite	ne
 800883c:	2102      	movne	r1, #2
 800883e:	2101      	moveq	r1, #1
 8008840:	61ab      	str	r3, [r5, #24]
 8008842:	6129      	str	r1, [r5, #16]
 8008844:	b1bc      	cbz	r4, 8008876 <__d2b+0x8e>
 8008846:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800884a:	4404      	add	r4, r0
 800884c:	6034      	str	r4, [r6, #0]
 800884e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008854:	6018      	str	r0, [r3, #0]
 8008856:	4628      	mov	r0, r5
 8008858:	b003      	add	sp, #12
 800885a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800885c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008860:	e7d7      	b.n	8008812 <__d2b+0x2a>
 8008862:	6169      	str	r1, [r5, #20]
 8008864:	e7e7      	b.n	8008836 <__d2b+0x4e>
 8008866:	a801      	add	r0, sp, #4
 8008868:	f7ff fcfc 	bl	8008264 <__lo0bits>
 800886c:	9b01      	ldr	r3, [sp, #4]
 800886e:	2101      	movs	r1, #1
 8008870:	616b      	str	r3, [r5, #20]
 8008872:	3020      	adds	r0, #32
 8008874:	e7e5      	b.n	8008842 <__d2b+0x5a>
 8008876:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800887a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800887e:	6030      	str	r0, [r6, #0]
 8008880:	6918      	ldr	r0, [r3, #16]
 8008882:	f7ff fccf 	bl	8008224 <__hi0bits>
 8008886:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800888a:	e7e2      	b.n	8008852 <__d2b+0x6a>
 800888c:	0800a9cb 	.word	0x0800a9cb
 8008890:	0800a9dc 	.word	0x0800a9dc

08008894 <__ratio>:
 8008894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008898:	4688      	mov	r8, r1
 800889a:	4669      	mov	r1, sp
 800889c:	4681      	mov	r9, r0
 800889e:	f7ff ff5b 	bl	8008758 <__b2d>
 80088a2:	460f      	mov	r7, r1
 80088a4:	4604      	mov	r4, r0
 80088a6:	460d      	mov	r5, r1
 80088a8:	4640      	mov	r0, r8
 80088aa:	a901      	add	r1, sp, #4
 80088ac:	f7ff ff54 	bl	8008758 <__b2d>
 80088b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80088b4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80088b8:	468b      	mov	fp, r1
 80088ba:	eba3 0c02 	sub.w	ip, r3, r2
 80088be:	e9dd 3200 	ldrd	r3, r2, [sp]
 80088c2:	1a9b      	subs	r3, r3, r2
 80088c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	bfd5      	itete	le
 80088cc:	460a      	movle	r2, r1
 80088ce:	462a      	movgt	r2, r5
 80088d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80088d4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80088d8:	bfd8      	it	le
 80088da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80088de:	465b      	mov	r3, fp
 80088e0:	4602      	mov	r2, r0
 80088e2:	4639      	mov	r1, r7
 80088e4:	4620      	mov	r0, r4
 80088e6:	f7f7 ff8d 	bl	8000804 <__aeabi_ddiv>
 80088ea:	b003      	add	sp, #12
 80088ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080088f0 <__copybits>:
 80088f0:	3901      	subs	r1, #1
 80088f2:	b570      	push	{r4, r5, r6, lr}
 80088f4:	1149      	asrs	r1, r1, #5
 80088f6:	6914      	ldr	r4, [r2, #16]
 80088f8:	3101      	adds	r1, #1
 80088fa:	f102 0314 	add.w	r3, r2, #20
 80088fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008902:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008906:	1f05      	subs	r5, r0, #4
 8008908:	42a3      	cmp	r3, r4
 800890a:	d30c      	bcc.n	8008926 <__copybits+0x36>
 800890c:	1aa3      	subs	r3, r4, r2
 800890e:	3b11      	subs	r3, #17
 8008910:	f023 0303 	bic.w	r3, r3, #3
 8008914:	3211      	adds	r2, #17
 8008916:	42a2      	cmp	r2, r4
 8008918:	bf88      	it	hi
 800891a:	2300      	movhi	r3, #0
 800891c:	4418      	add	r0, r3
 800891e:	2300      	movs	r3, #0
 8008920:	4288      	cmp	r0, r1
 8008922:	d305      	bcc.n	8008930 <__copybits+0x40>
 8008924:	bd70      	pop	{r4, r5, r6, pc}
 8008926:	f853 6b04 	ldr.w	r6, [r3], #4
 800892a:	f845 6f04 	str.w	r6, [r5, #4]!
 800892e:	e7eb      	b.n	8008908 <__copybits+0x18>
 8008930:	f840 3b04 	str.w	r3, [r0], #4
 8008934:	e7f4      	b.n	8008920 <__copybits+0x30>

08008936 <__any_on>:
 8008936:	f100 0214 	add.w	r2, r0, #20
 800893a:	6900      	ldr	r0, [r0, #16]
 800893c:	114b      	asrs	r3, r1, #5
 800893e:	4298      	cmp	r0, r3
 8008940:	b510      	push	{r4, lr}
 8008942:	db11      	blt.n	8008968 <__any_on+0x32>
 8008944:	dd0a      	ble.n	800895c <__any_on+0x26>
 8008946:	f011 011f 	ands.w	r1, r1, #31
 800894a:	d007      	beq.n	800895c <__any_on+0x26>
 800894c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008950:	fa24 f001 	lsr.w	r0, r4, r1
 8008954:	fa00 f101 	lsl.w	r1, r0, r1
 8008958:	428c      	cmp	r4, r1
 800895a:	d10b      	bne.n	8008974 <__any_on+0x3e>
 800895c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008960:	4293      	cmp	r3, r2
 8008962:	d803      	bhi.n	800896c <__any_on+0x36>
 8008964:	2000      	movs	r0, #0
 8008966:	bd10      	pop	{r4, pc}
 8008968:	4603      	mov	r3, r0
 800896a:	e7f7      	b.n	800895c <__any_on+0x26>
 800896c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008970:	2900      	cmp	r1, #0
 8008972:	d0f5      	beq.n	8008960 <__any_on+0x2a>
 8008974:	2001      	movs	r0, #1
 8008976:	e7f6      	b.n	8008966 <__any_on+0x30>

08008978 <sulp>:
 8008978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800897c:	460f      	mov	r7, r1
 800897e:	4690      	mov	r8, r2
 8008980:	f7ff feca 	bl	8008718 <__ulp>
 8008984:	4604      	mov	r4, r0
 8008986:	460d      	mov	r5, r1
 8008988:	f1b8 0f00 	cmp.w	r8, #0
 800898c:	d011      	beq.n	80089b2 <sulp+0x3a>
 800898e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008992:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008996:	2b00      	cmp	r3, #0
 8008998:	dd0b      	ble.n	80089b2 <sulp+0x3a>
 800899a:	2400      	movs	r4, #0
 800899c:	051b      	lsls	r3, r3, #20
 800899e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80089a2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80089a6:	4622      	mov	r2, r4
 80089a8:	462b      	mov	r3, r5
 80089aa:	f7f7 fe01 	bl	80005b0 <__aeabi_dmul>
 80089ae:	4604      	mov	r4, r0
 80089b0:	460d      	mov	r5, r1
 80089b2:	4620      	mov	r0, r4
 80089b4:	4629      	mov	r1, r5
 80089b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089ba:	0000      	movs	r0, r0
 80089bc:	0000      	movs	r0, r0
	...

080089c0 <_strtod_l>:
 80089c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c4:	b09f      	sub	sp, #124	; 0x7c
 80089c6:	9217      	str	r2, [sp, #92]	; 0x5c
 80089c8:	2200      	movs	r2, #0
 80089ca:	4604      	mov	r4, r0
 80089cc:	921a      	str	r2, [sp, #104]	; 0x68
 80089ce:	460d      	mov	r5, r1
 80089d0:	f04f 0800 	mov.w	r8, #0
 80089d4:	f04f 0900 	mov.w	r9, #0
 80089d8:	460a      	mov	r2, r1
 80089da:	9219      	str	r2, [sp, #100]	; 0x64
 80089dc:	7811      	ldrb	r1, [r2, #0]
 80089de:	292b      	cmp	r1, #43	; 0x2b
 80089e0:	d04a      	beq.n	8008a78 <_strtod_l+0xb8>
 80089e2:	d838      	bhi.n	8008a56 <_strtod_l+0x96>
 80089e4:	290d      	cmp	r1, #13
 80089e6:	d832      	bhi.n	8008a4e <_strtod_l+0x8e>
 80089e8:	2908      	cmp	r1, #8
 80089ea:	d832      	bhi.n	8008a52 <_strtod_l+0x92>
 80089ec:	2900      	cmp	r1, #0
 80089ee:	d03b      	beq.n	8008a68 <_strtod_l+0xa8>
 80089f0:	2200      	movs	r2, #0
 80089f2:	920e      	str	r2, [sp, #56]	; 0x38
 80089f4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80089f6:	7832      	ldrb	r2, [r6, #0]
 80089f8:	2a30      	cmp	r2, #48	; 0x30
 80089fa:	f040 80b2 	bne.w	8008b62 <_strtod_l+0x1a2>
 80089fe:	7872      	ldrb	r2, [r6, #1]
 8008a00:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008a04:	2a58      	cmp	r2, #88	; 0x58
 8008a06:	d16e      	bne.n	8008ae6 <_strtod_l+0x126>
 8008a08:	9302      	str	r3, [sp, #8]
 8008a0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	9301      	str	r3, [sp, #4]
 8008a10:	ab1a      	add	r3, sp, #104	; 0x68
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	4a8c      	ldr	r2, [pc, #560]	; (8008c48 <_strtod_l+0x288>)
 8008a16:	ab1b      	add	r3, sp, #108	; 0x6c
 8008a18:	a919      	add	r1, sp, #100	; 0x64
 8008a1a:	f001 f937 	bl	8009c8c <__gethex>
 8008a1e:	f010 070f 	ands.w	r7, r0, #15
 8008a22:	4605      	mov	r5, r0
 8008a24:	d005      	beq.n	8008a32 <_strtod_l+0x72>
 8008a26:	2f06      	cmp	r7, #6
 8008a28:	d128      	bne.n	8008a7c <_strtod_l+0xbc>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	3601      	adds	r6, #1
 8008a2e:	9619      	str	r6, [sp, #100]	; 0x64
 8008a30:	930e      	str	r3, [sp, #56]	; 0x38
 8008a32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f040 85a0 	bne.w	800957a <_strtod_l+0xbba>
 8008a3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a3c:	b1cb      	cbz	r3, 8008a72 <_strtod_l+0xb2>
 8008a3e:	4642      	mov	r2, r8
 8008a40:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008a44:	4610      	mov	r0, r2
 8008a46:	4619      	mov	r1, r3
 8008a48:	b01f      	add	sp, #124	; 0x7c
 8008a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a4e:	2920      	cmp	r1, #32
 8008a50:	d1ce      	bne.n	80089f0 <_strtod_l+0x30>
 8008a52:	3201      	adds	r2, #1
 8008a54:	e7c1      	b.n	80089da <_strtod_l+0x1a>
 8008a56:	292d      	cmp	r1, #45	; 0x2d
 8008a58:	d1ca      	bne.n	80089f0 <_strtod_l+0x30>
 8008a5a:	2101      	movs	r1, #1
 8008a5c:	910e      	str	r1, [sp, #56]	; 0x38
 8008a5e:	1c51      	adds	r1, r2, #1
 8008a60:	9119      	str	r1, [sp, #100]	; 0x64
 8008a62:	7852      	ldrb	r2, [r2, #1]
 8008a64:	2a00      	cmp	r2, #0
 8008a66:	d1c5      	bne.n	80089f4 <_strtod_l+0x34>
 8008a68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a6a:	9519      	str	r5, [sp, #100]	; 0x64
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	f040 8582 	bne.w	8009576 <_strtod_l+0xbb6>
 8008a72:	4642      	mov	r2, r8
 8008a74:	464b      	mov	r3, r9
 8008a76:	e7e5      	b.n	8008a44 <_strtod_l+0x84>
 8008a78:	2100      	movs	r1, #0
 8008a7a:	e7ef      	b.n	8008a5c <_strtod_l+0x9c>
 8008a7c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008a7e:	b13a      	cbz	r2, 8008a90 <_strtod_l+0xd0>
 8008a80:	2135      	movs	r1, #53	; 0x35
 8008a82:	a81c      	add	r0, sp, #112	; 0x70
 8008a84:	f7ff ff34 	bl	80088f0 <__copybits>
 8008a88:	4620      	mov	r0, r4
 8008a8a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008a8c:	f7ff fb18 	bl	80080c0 <_Bfree>
 8008a90:	3f01      	subs	r7, #1
 8008a92:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008a94:	2f04      	cmp	r7, #4
 8008a96:	d806      	bhi.n	8008aa6 <_strtod_l+0xe6>
 8008a98:	e8df f007 	tbb	[pc, r7]
 8008a9c:	201d0314 	.word	0x201d0314
 8008aa0:	14          	.byte	0x14
 8008aa1:	00          	.byte	0x00
 8008aa2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008aa6:	05e9      	lsls	r1, r5, #23
 8008aa8:	bf48      	it	mi
 8008aaa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008aae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008ab2:	0d1b      	lsrs	r3, r3, #20
 8008ab4:	051b      	lsls	r3, r3, #20
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1bb      	bne.n	8008a32 <_strtod_l+0x72>
 8008aba:	f7fe fb15 	bl	80070e8 <__errno>
 8008abe:	2322      	movs	r3, #34	; 0x22
 8008ac0:	6003      	str	r3, [r0, #0]
 8008ac2:	e7b6      	b.n	8008a32 <_strtod_l+0x72>
 8008ac4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008ac8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008acc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008ad0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008ad4:	e7e7      	b.n	8008aa6 <_strtod_l+0xe6>
 8008ad6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8008c4c <_strtod_l+0x28c>
 8008ada:	e7e4      	b.n	8008aa6 <_strtod_l+0xe6>
 8008adc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008ae0:	f04f 38ff 	mov.w	r8, #4294967295
 8008ae4:	e7df      	b.n	8008aa6 <_strtod_l+0xe6>
 8008ae6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ae8:	1c5a      	adds	r2, r3, #1
 8008aea:	9219      	str	r2, [sp, #100]	; 0x64
 8008aec:	785b      	ldrb	r3, [r3, #1]
 8008aee:	2b30      	cmp	r3, #48	; 0x30
 8008af0:	d0f9      	beq.n	8008ae6 <_strtod_l+0x126>
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d09d      	beq.n	8008a32 <_strtod_l+0x72>
 8008af6:	2301      	movs	r3, #1
 8008af8:	f04f 0a00 	mov.w	sl, #0
 8008afc:	220a      	movs	r2, #10
 8008afe:	46d3      	mov	fp, sl
 8008b00:	9305      	str	r3, [sp, #20]
 8008b02:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b04:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8008b08:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b0a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008b0c:	7806      	ldrb	r6, [r0, #0]
 8008b0e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008b12:	b2d9      	uxtb	r1, r3
 8008b14:	2909      	cmp	r1, #9
 8008b16:	d926      	bls.n	8008b66 <_strtod_l+0x1a6>
 8008b18:	2201      	movs	r2, #1
 8008b1a:	494d      	ldr	r1, [pc, #308]	; (8008c50 <_strtod_l+0x290>)
 8008b1c:	f000 ffe6 	bl	8009aec <strncmp>
 8008b20:	2800      	cmp	r0, #0
 8008b22:	d030      	beq.n	8008b86 <_strtod_l+0x1c6>
 8008b24:	2000      	movs	r0, #0
 8008b26:	4632      	mov	r2, r6
 8008b28:	4603      	mov	r3, r0
 8008b2a:	465e      	mov	r6, fp
 8008b2c:	9008      	str	r0, [sp, #32]
 8008b2e:	2a65      	cmp	r2, #101	; 0x65
 8008b30:	d001      	beq.n	8008b36 <_strtod_l+0x176>
 8008b32:	2a45      	cmp	r2, #69	; 0x45
 8008b34:	d113      	bne.n	8008b5e <_strtod_l+0x19e>
 8008b36:	b91e      	cbnz	r6, 8008b40 <_strtod_l+0x180>
 8008b38:	9a05      	ldr	r2, [sp, #20]
 8008b3a:	4302      	orrs	r2, r0
 8008b3c:	d094      	beq.n	8008a68 <_strtod_l+0xa8>
 8008b3e:	2600      	movs	r6, #0
 8008b40:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008b42:	1c6a      	adds	r2, r5, #1
 8008b44:	9219      	str	r2, [sp, #100]	; 0x64
 8008b46:	786a      	ldrb	r2, [r5, #1]
 8008b48:	2a2b      	cmp	r2, #43	; 0x2b
 8008b4a:	d074      	beq.n	8008c36 <_strtod_l+0x276>
 8008b4c:	2a2d      	cmp	r2, #45	; 0x2d
 8008b4e:	d078      	beq.n	8008c42 <_strtod_l+0x282>
 8008b50:	f04f 0c00 	mov.w	ip, #0
 8008b54:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008b58:	2909      	cmp	r1, #9
 8008b5a:	d97f      	bls.n	8008c5c <_strtod_l+0x29c>
 8008b5c:	9519      	str	r5, [sp, #100]	; 0x64
 8008b5e:	2700      	movs	r7, #0
 8008b60:	e09e      	b.n	8008ca0 <_strtod_l+0x2e0>
 8008b62:	2300      	movs	r3, #0
 8008b64:	e7c8      	b.n	8008af8 <_strtod_l+0x138>
 8008b66:	f1bb 0f08 	cmp.w	fp, #8
 8008b6a:	bfd8      	it	le
 8008b6c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8008b6e:	f100 0001 	add.w	r0, r0, #1
 8008b72:	bfd6      	itet	le
 8008b74:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b78:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008b7c:	930a      	strle	r3, [sp, #40]	; 0x28
 8008b7e:	f10b 0b01 	add.w	fp, fp, #1
 8008b82:	9019      	str	r0, [sp, #100]	; 0x64
 8008b84:	e7c1      	b.n	8008b0a <_strtod_l+0x14a>
 8008b86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b88:	1c5a      	adds	r2, r3, #1
 8008b8a:	9219      	str	r2, [sp, #100]	; 0x64
 8008b8c:	785a      	ldrb	r2, [r3, #1]
 8008b8e:	f1bb 0f00 	cmp.w	fp, #0
 8008b92:	d037      	beq.n	8008c04 <_strtod_l+0x244>
 8008b94:	465e      	mov	r6, fp
 8008b96:	9008      	str	r0, [sp, #32]
 8008b98:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008b9c:	2b09      	cmp	r3, #9
 8008b9e:	d912      	bls.n	8008bc6 <_strtod_l+0x206>
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e7c4      	b.n	8008b2e <_strtod_l+0x16e>
 8008ba4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ba6:	3001      	adds	r0, #1
 8008ba8:	1c5a      	adds	r2, r3, #1
 8008baa:	9219      	str	r2, [sp, #100]	; 0x64
 8008bac:	785a      	ldrb	r2, [r3, #1]
 8008bae:	2a30      	cmp	r2, #48	; 0x30
 8008bb0:	d0f8      	beq.n	8008ba4 <_strtod_l+0x1e4>
 8008bb2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008bb6:	2b08      	cmp	r3, #8
 8008bb8:	f200 84e4 	bhi.w	8009584 <_strtod_l+0xbc4>
 8008bbc:	9008      	str	r0, [sp, #32]
 8008bbe:	2000      	movs	r0, #0
 8008bc0:	4606      	mov	r6, r0
 8008bc2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008bc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bc6:	3a30      	subs	r2, #48	; 0x30
 8008bc8:	f100 0301 	add.w	r3, r0, #1
 8008bcc:	d014      	beq.n	8008bf8 <_strtod_l+0x238>
 8008bce:	9908      	ldr	r1, [sp, #32]
 8008bd0:	eb00 0c06 	add.w	ip, r0, r6
 8008bd4:	4419      	add	r1, r3
 8008bd6:	9108      	str	r1, [sp, #32]
 8008bd8:	4633      	mov	r3, r6
 8008bda:	210a      	movs	r1, #10
 8008bdc:	4563      	cmp	r3, ip
 8008bde:	d113      	bne.n	8008c08 <_strtod_l+0x248>
 8008be0:	1833      	adds	r3, r6, r0
 8008be2:	2b08      	cmp	r3, #8
 8008be4:	f106 0601 	add.w	r6, r6, #1
 8008be8:	4406      	add	r6, r0
 8008bea:	dc1a      	bgt.n	8008c22 <_strtod_l+0x262>
 8008bec:	230a      	movs	r3, #10
 8008bee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008bf0:	fb03 2301 	mla	r3, r3, r1, r2
 8008bf4:	930a      	str	r3, [sp, #40]	; 0x28
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	1c51      	adds	r1, r2, #1
 8008bfe:	9119      	str	r1, [sp, #100]	; 0x64
 8008c00:	7852      	ldrb	r2, [r2, #1]
 8008c02:	e7c9      	b.n	8008b98 <_strtod_l+0x1d8>
 8008c04:	4658      	mov	r0, fp
 8008c06:	e7d2      	b.n	8008bae <_strtod_l+0x1ee>
 8008c08:	2b08      	cmp	r3, #8
 8008c0a:	f103 0301 	add.w	r3, r3, #1
 8008c0e:	dc03      	bgt.n	8008c18 <_strtod_l+0x258>
 8008c10:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008c12:	434f      	muls	r7, r1
 8008c14:	970a      	str	r7, [sp, #40]	; 0x28
 8008c16:	e7e1      	b.n	8008bdc <_strtod_l+0x21c>
 8008c18:	2b10      	cmp	r3, #16
 8008c1a:	bfd8      	it	le
 8008c1c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008c20:	e7dc      	b.n	8008bdc <_strtod_l+0x21c>
 8008c22:	2e10      	cmp	r6, #16
 8008c24:	bfdc      	itt	le
 8008c26:	230a      	movle	r3, #10
 8008c28:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008c2c:	e7e3      	b.n	8008bf6 <_strtod_l+0x236>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	9308      	str	r3, [sp, #32]
 8008c32:	2301      	movs	r3, #1
 8008c34:	e780      	b.n	8008b38 <_strtod_l+0x178>
 8008c36:	f04f 0c00 	mov.w	ip, #0
 8008c3a:	1caa      	adds	r2, r5, #2
 8008c3c:	9219      	str	r2, [sp, #100]	; 0x64
 8008c3e:	78aa      	ldrb	r2, [r5, #2]
 8008c40:	e788      	b.n	8008b54 <_strtod_l+0x194>
 8008c42:	f04f 0c01 	mov.w	ip, #1
 8008c46:	e7f8      	b.n	8008c3a <_strtod_l+0x27a>
 8008c48:	0800ab38 	.word	0x0800ab38
 8008c4c:	7ff00000 	.word	0x7ff00000
 8008c50:	0800ab34 	.word	0x0800ab34
 8008c54:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c56:	1c51      	adds	r1, r2, #1
 8008c58:	9119      	str	r1, [sp, #100]	; 0x64
 8008c5a:	7852      	ldrb	r2, [r2, #1]
 8008c5c:	2a30      	cmp	r2, #48	; 0x30
 8008c5e:	d0f9      	beq.n	8008c54 <_strtod_l+0x294>
 8008c60:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008c64:	2908      	cmp	r1, #8
 8008c66:	f63f af7a 	bhi.w	8008b5e <_strtod_l+0x19e>
 8008c6a:	3a30      	subs	r2, #48	; 0x30
 8008c6c:	9209      	str	r2, [sp, #36]	; 0x24
 8008c6e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c70:	920c      	str	r2, [sp, #48]	; 0x30
 8008c72:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c74:	1c57      	adds	r7, r2, #1
 8008c76:	9719      	str	r7, [sp, #100]	; 0x64
 8008c78:	7852      	ldrb	r2, [r2, #1]
 8008c7a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008c7e:	f1be 0f09 	cmp.w	lr, #9
 8008c82:	d938      	bls.n	8008cf6 <_strtod_l+0x336>
 8008c84:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008c86:	1a7f      	subs	r7, r7, r1
 8008c88:	2f08      	cmp	r7, #8
 8008c8a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008c8e:	dc03      	bgt.n	8008c98 <_strtod_l+0x2d8>
 8008c90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c92:	428f      	cmp	r7, r1
 8008c94:	bfa8      	it	ge
 8008c96:	460f      	movge	r7, r1
 8008c98:	f1bc 0f00 	cmp.w	ip, #0
 8008c9c:	d000      	beq.n	8008ca0 <_strtod_l+0x2e0>
 8008c9e:	427f      	negs	r7, r7
 8008ca0:	2e00      	cmp	r6, #0
 8008ca2:	d14f      	bne.n	8008d44 <_strtod_l+0x384>
 8008ca4:	9905      	ldr	r1, [sp, #20]
 8008ca6:	4301      	orrs	r1, r0
 8008ca8:	f47f aec3 	bne.w	8008a32 <_strtod_l+0x72>
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f47f aedb 	bne.w	8008a68 <_strtod_l+0xa8>
 8008cb2:	2a69      	cmp	r2, #105	; 0x69
 8008cb4:	d029      	beq.n	8008d0a <_strtod_l+0x34a>
 8008cb6:	dc26      	bgt.n	8008d06 <_strtod_l+0x346>
 8008cb8:	2a49      	cmp	r2, #73	; 0x49
 8008cba:	d026      	beq.n	8008d0a <_strtod_l+0x34a>
 8008cbc:	2a4e      	cmp	r2, #78	; 0x4e
 8008cbe:	f47f aed3 	bne.w	8008a68 <_strtod_l+0xa8>
 8008cc2:	499a      	ldr	r1, [pc, #616]	; (8008f2c <_strtod_l+0x56c>)
 8008cc4:	a819      	add	r0, sp, #100	; 0x64
 8008cc6:	f001 fa23 	bl	800a110 <__match>
 8008cca:	2800      	cmp	r0, #0
 8008ccc:	f43f aecc 	beq.w	8008a68 <_strtod_l+0xa8>
 8008cd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	2b28      	cmp	r3, #40	; 0x28
 8008cd6:	d12f      	bne.n	8008d38 <_strtod_l+0x378>
 8008cd8:	4995      	ldr	r1, [pc, #596]	; (8008f30 <_strtod_l+0x570>)
 8008cda:	aa1c      	add	r2, sp, #112	; 0x70
 8008cdc:	a819      	add	r0, sp, #100	; 0x64
 8008cde:	f001 fa2b 	bl	800a138 <__hexnan>
 8008ce2:	2805      	cmp	r0, #5
 8008ce4:	d128      	bne.n	8008d38 <_strtod_l+0x378>
 8008ce6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ce8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008cec:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008cf0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008cf4:	e69d      	b.n	8008a32 <_strtod_l+0x72>
 8008cf6:	210a      	movs	r1, #10
 8008cf8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008cfa:	fb01 2107 	mla	r1, r1, r7, r2
 8008cfe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008d02:	9209      	str	r2, [sp, #36]	; 0x24
 8008d04:	e7b5      	b.n	8008c72 <_strtod_l+0x2b2>
 8008d06:	2a6e      	cmp	r2, #110	; 0x6e
 8008d08:	e7d9      	b.n	8008cbe <_strtod_l+0x2fe>
 8008d0a:	498a      	ldr	r1, [pc, #552]	; (8008f34 <_strtod_l+0x574>)
 8008d0c:	a819      	add	r0, sp, #100	; 0x64
 8008d0e:	f001 f9ff 	bl	800a110 <__match>
 8008d12:	2800      	cmp	r0, #0
 8008d14:	f43f aea8 	beq.w	8008a68 <_strtod_l+0xa8>
 8008d18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d1a:	4987      	ldr	r1, [pc, #540]	; (8008f38 <_strtod_l+0x578>)
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	a819      	add	r0, sp, #100	; 0x64
 8008d20:	9319      	str	r3, [sp, #100]	; 0x64
 8008d22:	f001 f9f5 	bl	800a110 <__match>
 8008d26:	b910      	cbnz	r0, 8008d2e <_strtod_l+0x36e>
 8008d28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	9319      	str	r3, [sp, #100]	; 0x64
 8008d2e:	f04f 0800 	mov.w	r8, #0
 8008d32:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8008f3c <_strtod_l+0x57c>
 8008d36:	e67c      	b.n	8008a32 <_strtod_l+0x72>
 8008d38:	4881      	ldr	r0, [pc, #516]	; (8008f40 <_strtod_l+0x580>)
 8008d3a:	f000 ff07 	bl	8009b4c <nan>
 8008d3e:	4680      	mov	r8, r0
 8008d40:	4689      	mov	r9, r1
 8008d42:	e676      	b.n	8008a32 <_strtod_l+0x72>
 8008d44:	9b08      	ldr	r3, [sp, #32]
 8008d46:	f1bb 0f00 	cmp.w	fp, #0
 8008d4a:	bf08      	it	eq
 8008d4c:	46b3      	moveq	fp, r6
 8008d4e:	1afb      	subs	r3, r7, r3
 8008d50:	2e10      	cmp	r6, #16
 8008d52:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008d54:	4635      	mov	r5, r6
 8008d56:	9309      	str	r3, [sp, #36]	; 0x24
 8008d58:	bfa8      	it	ge
 8008d5a:	2510      	movge	r5, #16
 8008d5c:	f7f7 fbae 	bl	80004bc <__aeabi_ui2d>
 8008d60:	2e09      	cmp	r6, #9
 8008d62:	4680      	mov	r8, r0
 8008d64:	4689      	mov	r9, r1
 8008d66:	dd13      	ble.n	8008d90 <_strtod_l+0x3d0>
 8008d68:	4b76      	ldr	r3, [pc, #472]	; (8008f44 <_strtod_l+0x584>)
 8008d6a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008d6e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008d72:	f7f7 fc1d 	bl	80005b0 <__aeabi_dmul>
 8008d76:	4680      	mov	r8, r0
 8008d78:	4650      	mov	r0, sl
 8008d7a:	4689      	mov	r9, r1
 8008d7c:	f7f7 fb9e 	bl	80004bc <__aeabi_ui2d>
 8008d80:	4602      	mov	r2, r0
 8008d82:	460b      	mov	r3, r1
 8008d84:	4640      	mov	r0, r8
 8008d86:	4649      	mov	r1, r9
 8008d88:	f7f7 fa5c 	bl	8000244 <__adddf3>
 8008d8c:	4680      	mov	r8, r0
 8008d8e:	4689      	mov	r9, r1
 8008d90:	2e0f      	cmp	r6, #15
 8008d92:	dc36      	bgt.n	8008e02 <_strtod_l+0x442>
 8008d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f43f ae4b 	beq.w	8008a32 <_strtod_l+0x72>
 8008d9c:	dd22      	ble.n	8008de4 <_strtod_l+0x424>
 8008d9e:	2b16      	cmp	r3, #22
 8008da0:	dc09      	bgt.n	8008db6 <_strtod_l+0x3f6>
 8008da2:	4968      	ldr	r1, [pc, #416]	; (8008f44 <_strtod_l+0x584>)
 8008da4:	4642      	mov	r2, r8
 8008da6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008daa:	464b      	mov	r3, r9
 8008dac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008db0:	f7f7 fbfe 	bl	80005b0 <__aeabi_dmul>
 8008db4:	e7c3      	b.n	8008d3e <_strtod_l+0x37e>
 8008db6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008db8:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	db20      	blt.n	8008e02 <_strtod_l+0x442>
 8008dc0:	4c60      	ldr	r4, [pc, #384]	; (8008f44 <_strtod_l+0x584>)
 8008dc2:	f1c6 060f 	rsb	r6, r6, #15
 8008dc6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008dca:	4642      	mov	r2, r8
 8008dcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dd0:	464b      	mov	r3, r9
 8008dd2:	f7f7 fbed 	bl	80005b0 <__aeabi_dmul>
 8008dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dd8:	1b9e      	subs	r6, r3, r6
 8008dda:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008dde:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008de2:	e7e5      	b.n	8008db0 <_strtod_l+0x3f0>
 8008de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008de6:	3316      	adds	r3, #22
 8008de8:	db0b      	blt.n	8008e02 <_strtod_l+0x442>
 8008dea:	9b08      	ldr	r3, [sp, #32]
 8008dec:	4640      	mov	r0, r8
 8008dee:	1bdf      	subs	r7, r3, r7
 8008df0:	4b54      	ldr	r3, [pc, #336]	; (8008f44 <_strtod_l+0x584>)
 8008df2:	4649      	mov	r1, r9
 8008df4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008df8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dfc:	f7f7 fd02 	bl	8000804 <__aeabi_ddiv>
 8008e00:	e79d      	b.n	8008d3e <_strtod_l+0x37e>
 8008e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e04:	1b75      	subs	r5, r6, r5
 8008e06:	441d      	add	r5, r3
 8008e08:	2d00      	cmp	r5, #0
 8008e0a:	dd70      	ble.n	8008eee <_strtod_l+0x52e>
 8008e0c:	f015 030f 	ands.w	r3, r5, #15
 8008e10:	d00a      	beq.n	8008e28 <_strtod_l+0x468>
 8008e12:	494c      	ldr	r1, [pc, #304]	; (8008f44 <_strtod_l+0x584>)
 8008e14:	4642      	mov	r2, r8
 8008e16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e1e:	464b      	mov	r3, r9
 8008e20:	f7f7 fbc6 	bl	80005b0 <__aeabi_dmul>
 8008e24:	4680      	mov	r8, r0
 8008e26:	4689      	mov	r9, r1
 8008e28:	f035 050f 	bics.w	r5, r5, #15
 8008e2c:	d04d      	beq.n	8008eca <_strtod_l+0x50a>
 8008e2e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008e32:	dd22      	ble.n	8008e7a <_strtod_l+0x4ba>
 8008e34:	2600      	movs	r6, #0
 8008e36:	46b3      	mov	fp, r6
 8008e38:	960b      	str	r6, [sp, #44]	; 0x2c
 8008e3a:	9608      	str	r6, [sp, #32]
 8008e3c:	2322      	movs	r3, #34	; 0x22
 8008e3e:	f04f 0800 	mov.w	r8, #0
 8008e42:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8008f3c <_strtod_l+0x57c>
 8008e46:	6023      	str	r3, [r4, #0]
 8008e48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f43f adf1 	beq.w	8008a32 <_strtod_l+0x72>
 8008e50:	4620      	mov	r0, r4
 8008e52:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008e54:	f7ff f934 	bl	80080c0 <_Bfree>
 8008e58:	4620      	mov	r0, r4
 8008e5a:	9908      	ldr	r1, [sp, #32]
 8008e5c:	f7ff f930 	bl	80080c0 <_Bfree>
 8008e60:	4659      	mov	r1, fp
 8008e62:	4620      	mov	r0, r4
 8008e64:	f7ff f92c 	bl	80080c0 <_Bfree>
 8008e68:	4620      	mov	r0, r4
 8008e6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e6c:	f7ff f928 	bl	80080c0 <_Bfree>
 8008e70:	4631      	mov	r1, r6
 8008e72:	4620      	mov	r0, r4
 8008e74:	f7ff f924 	bl	80080c0 <_Bfree>
 8008e78:	e5db      	b.n	8008a32 <_strtod_l+0x72>
 8008e7a:	4b33      	ldr	r3, [pc, #204]	; (8008f48 <_strtod_l+0x588>)
 8008e7c:	4640      	mov	r0, r8
 8008e7e:	9305      	str	r3, [sp, #20]
 8008e80:	2300      	movs	r3, #0
 8008e82:	4649      	mov	r1, r9
 8008e84:	469a      	mov	sl, r3
 8008e86:	112d      	asrs	r5, r5, #4
 8008e88:	2d01      	cmp	r5, #1
 8008e8a:	dc21      	bgt.n	8008ed0 <_strtod_l+0x510>
 8008e8c:	b10b      	cbz	r3, 8008e92 <_strtod_l+0x4d2>
 8008e8e:	4680      	mov	r8, r0
 8008e90:	4689      	mov	r9, r1
 8008e92:	492d      	ldr	r1, [pc, #180]	; (8008f48 <_strtod_l+0x588>)
 8008e94:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008e98:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008e9c:	4642      	mov	r2, r8
 8008e9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ea2:	464b      	mov	r3, r9
 8008ea4:	f7f7 fb84 	bl	80005b0 <__aeabi_dmul>
 8008ea8:	4b24      	ldr	r3, [pc, #144]	; (8008f3c <_strtod_l+0x57c>)
 8008eaa:	460a      	mov	r2, r1
 8008eac:	400b      	ands	r3, r1
 8008eae:	4927      	ldr	r1, [pc, #156]	; (8008f4c <_strtod_l+0x58c>)
 8008eb0:	4680      	mov	r8, r0
 8008eb2:	428b      	cmp	r3, r1
 8008eb4:	d8be      	bhi.n	8008e34 <_strtod_l+0x474>
 8008eb6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008eba:	428b      	cmp	r3, r1
 8008ebc:	bf86      	itte	hi
 8008ebe:	f04f 38ff 	movhi.w	r8, #4294967295
 8008ec2:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008f50 <_strtod_l+0x590>
 8008ec6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008eca:	2300      	movs	r3, #0
 8008ecc:	9305      	str	r3, [sp, #20]
 8008ece:	e07b      	b.n	8008fc8 <_strtod_l+0x608>
 8008ed0:	07ea      	lsls	r2, r5, #31
 8008ed2:	d505      	bpl.n	8008ee0 <_strtod_l+0x520>
 8008ed4:	9b05      	ldr	r3, [sp, #20]
 8008ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eda:	f7f7 fb69 	bl	80005b0 <__aeabi_dmul>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	9a05      	ldr	r2, [sp, #20]
 8008ee2:	f10a 0a01 	add.w	sl, sl, #1
 8008ee6:	3208      	adds	r2, #8
 8008ee8:	106d      	asrs	r5, r5, #1
 8008eea:	9205      	str	r2, [sp, #20]
 8008eec:	e7cc      	b.n	8008e88 <_strtod_l+0x4c8>
 8008eee:	d0ec      	beq.n	8008eca <_strtod_l+0x50a>
 8008ef0:	426d      	negs	r5, r5
 8008ef2:	f015 020f 	ands.w	r2, r5, #15
 8008ef6:	d00a      	beq.n	8008f0e <_strtod_l+0x54e>
 8008ef8:	4b12      	ldr	r3, [pc, #72]	; (8008f44 <_strtod_l+0x584>)
 8008efa:	4640      	mov	r0, r8
 8008efc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f00:	4649      	mov	r1, r9
 8008f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f06:	f7f7 fc7d 	bl	8000804 <__aeabi_ddiv>
 8008f0a:	4680      	mov	r8, r0
 8008f0c:	4689      	mov	r9, r1
 8008f0e:	112d      	asrs	r5, r5, #4
 8008f10:	d0db      	beq.n	8008eca <_strtod_l+0x50a>
 8008f12:	2d1f      	cmp	r5, #31
 8008f14:	dd1e      	ble.n	8008f54 <_strtod_l+0x594>
 8008f16:	2600      	movs	r6, #0
 8008f18:	46b3      	mov	fp, r6
 8008f1a:	960b      	str	r6, [sp, #44]	; 0x2c
 8008f1c:	9608      	str	r6, [sp, #32]
 8008f1e:	2322      	movs	r3, #34	; 0x22
 8008f20:	f04f 0800 	mov.w	r8, #0
 8008f24:	f04f 0900 	mov.w	r9, #0
 8008f28:	6023      	str	r3, [r4, #0]
 8008f2a:	e78d      	b.n	8008e48 <_strtod_l+0x488>
 8008f2c:	0800a923 	.word	0x0800a923
 8008f30:	0800ab4c 	.word	0x0800ab4c
 8008f34:	0800a91b 	.word	0x0800a91b
 8008f38:	0800a952 	.word	0x0800a952
 8008f3c:	7ff00000 	.word	0x7ff00000
 8008f40:	0800acdd 	.word	0x0800acdd
 8008f44:	0800aa60 	.word	0x0800aa60
 8008f48:	0800aa38 	.word	0x0800aa38
 8008f4c:	7ca00000 	.word	0x7ca00000
 8008f50:	7fefffff 	.word	0x7fefffff
 8008f54:	f015 0310 	ands.w	r3, r5, #16
 8008f58:	bf18      	it	ne
 8008f5a:	236a      	movne	r3, #106	; 0x6a
 8008f5c:	4640      	mov	r0, r8
 8008f5e:	9305      	str	r3, [sp, #20]
 8008f60:	4649      	mov	r1, r9
 8008f62:	2300      	movs	r3, #0
 8008f64:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8009230 <_strtod_l+0x870>
 8008f68:	07ea      	lsls	r2, r5, #31
 8008f6a:	d504      	bpl.n	8008f76 <_strtod_l+0x5b6>
 8008f6c:	e9da 2300 	ldrd	r2, r3, [sl]
 8008f70:	f7f7 fb1e 	bl	80005b0 <__aeabi_dmul>
 8008f74:	2301      	movs	r3, #1
 8008f76:	106d      	asrs	r5, r5, #1
 8008f78:	f10a 0a08 	add.w	sl, sl, #8
 8008f7c:	d1f4      	bne.n	8008f68 <_strtod_l+0x5a8>
 8008f7e:	b10b      	cbz	r3, 8008f84 <_strtod_l+0x5c4>
 8008f80:	4680      	mov	r8, r0
 8008f82:	4689      	mov	r9, r1
 8008f84:	9b05      	ldr	r3, [sp, #20]
 8008f86:	b1bb      	cbz	r3, 8008fb8 <_strtod_l+0x5f8>
 8008f88:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008f8c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	4649      	mov	r1, r9
 8008f94:	dd10      	ble.n	8008fb8 <_strtod_l+0x5f8>
 8008f96:	2b1f      	cmp	r3, #31
 8008f98:	f340 8128 	ble.w	80091ec <_strtod_l+0x82c>
 8008f9c:	2b34      	cmp	r3, #52	; 0x34
 8008f9e:	bfd8      	it	le
 8008fa0:	f04f 33ff 	movle.w	r3, #4294967295
 8008fa4:	f04f 0800 	mov.w	r8, #0
 8008fa8:	bfcf      	iteee	gt
 8008faa:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008fae:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008fb2:	4093      	lslle	r3, r2
 8008fb4:	ea03 0901 	andle.w	r9, r3, r1
 8008fb8:	2200      	movs	r2, #0
 8008fba:	2300      	movs	r3, #0
 8008fbc:	4640      	mov	r0, r8
 8008fbe:	4649      	mov	r1, r9
 8008fc0:	f7f7 fd5e 	bl	8000a80 <__aeabi_dcmpeq>
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	d1a6      	bne.n	8008f16 <_strtod_l+0x556>
 8008fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fca:	465a      	mov	r2, fp
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	4620      	mov	r0, r4
 8008fd0:	4633      	mov	r3, r6
 8008fd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fd4:	f7ff f8dc 	bl	8008190 <__s2b>
 8008fd8:	900b      	str	r0, [sp, #44]	; 0x2c
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	f43f af2a 	beq.w	8008e34 <_strtod_l+0x474>
 8008fe0:	2600      	movs	r6, #0
 8008fe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fe4:	9b08      	ldr	r3, [sp, #32]
 8008fe6:	2a00      	cmp	r2, #0
 8008fe8:	eba3 0307 	sub.w	r3, r3, r7
 8008fec:	bfa8      	it	ge
 8008fee:	2300      	movge	r3, #0
 8008ff0:	46b3      	mov	fp, r6
 8008ff2:	9312      	str	r3, [sp, #72]	; 0x48
 8008ff4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008ff8:	9316      	str	r3, [sp, #88]	; 0x58
 8008ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	6859      	ldr	r1, [r3, #4]
 8009000:	f7ff f81e 	bl	8008040 <_Balloc>
 8009004:	9008      	str	r0, [sp, #32]
 8009006:	2800      	cmp	r0, #0
 8009008:	f43f af18 	beq.w	8008e3c <_strtod_l+0x47c>
 800900c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800900e:	300c      	adds	r0, #12
 8009010:	691a      	ldr	r2, [r3, #16]
 8009012:	f103 010c 	add.w	r1, r3, #12
 8009016:	3202      	adds	r2, #2
 8009018:	0092      	lsls	r2, r2, #2
 800901a:	f000 fd89 	bl	8009b30 <memcpy>
 800901e:	ab1c      	add	r3, sp, #112	; 0x70
 8009020:	9301      	str	r3, [sp, #4]
 8009022:	ab1b      	add	r3, sp, #108	; 0x6c
 8009024:	9300      	str	r3, [sp, #0]
 8009026:	4642      	mov	r2, r8
 8009028:	464b      	mov	r3, r9
 800902a:	4620      	mov	r0, r4
 800902c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8009030:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8009034:	f7ff fbd8 	bl	80087e8 <__d2b>
 8009038:	901a      	str	r0, [sp, #104]	; 0x68
 800903a:	2800      	cmp	r0, #0
 800903c:	f43f aefe 	beq.w	8008e3c <_strtod_l+0x47c>
 8009040:	2101      	movs	r1, #1
 8009042:	4620      	mov	r0, r4
 8009044:	f7ff f93c 	bl	80082c0 <__i2b>
 8009048:	4683      	mov	fp, r0
 800904a:	2800      	cmp	r0, #0
 800904c:	f43f aef6 	beq.w	8008e3c <_strtod_l+0x47c>
 8009050:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8009052:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009054:	2f00      	cmp	r7, #0
 8009056:	bfab      	itete	ge
 8009058:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800905a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800905c:	eb07 0a03 	addge.w	sl, r7, r3
 8009060:	1bdd      	sublt	r5, r3, r7
 8009062:	9b05      	ldr	r3, [sp, #20]
 8009064:	bfa8      	it	ge
 8009066:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009068:	eba7 0703 	sub.w	r7, r7, r3
 800906c:	4417      	add	r7, r2
 800906e:	4b71      	ldr	r3, [pc, #452]	; (8009234 <_strtod_l+0x874>)
 8009070:	f107 37ff 	add.w	r7, r7, #4294967295
 8009074:	bfb8      	it	lt
 8009076:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800907a:	429f      	cmp	r7, r3
 800907c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009080:	f280 80c7 	bge.w	8009212 <_strtod_l+0x852>
 8009084:	1bdb      	subs	r3, r3, r7
 8009086:	2b1f      	cmp	r3, #31
 8009088:	f04f 0101 	mov.w	r1, #1
 800908c:	eba2 0203 	sub.w	r2, r2, r3
 8009090:	f300 80b3 	bgt.w	80091fa <_strtod_l+0x83a>
 8009094:	fa01 f303 	lsl.w	r3, r1, r3
 8009098:	9313      	str	r3, [sp, #76]	; 0x4c
 800909a:	2300      	movs	r3, #0
 800909c:	9310      	str	r3, [sp, #64]	; 0x40
 800909e:	eb0a 0702 	add.w	r7, sl, r2
 80090a2:	9b05      	ldr	r3, [sp, #20]
 80090a4:	45ba      	cmp	sl, r7
 80090a6:	4415      	add	r5, r2
 80090a8:	441d      	add	r5, r3
 80090aa:	4653      	mov	r3, sl
 80090ac:	bfa8      	it	ge
 80090ae:	463b      	movge	r3, r7
 80090b0:	42ab      	cmp	r3, r5
 80090b2:	bfa8      	it	ge
 80090b4:	462b      	movge	r3, r5
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	bfc2      	ittt	gt
 80090ba:	1aff      	subgt	r7, r7, r3
 80090bc:	1aed      	subgt	r5, r5, r3
 80090be:	ebaa 0a03 	subgt.w	sl, sl, r3
 80090c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	dd17      	ble.n	80090f8 <_strtod_l+0x738>
 80090c8:	4659      	mov	r1, fp
 80090ca:	461a      	mov	r2, r3
 80090cc:	4620      	mov	r0, r4
 80090ce:	f7ff f9b5 	bl	800843c <__pow5mult>
 80090d2:	4683      	mov	fp, r0
 80090d4:	2800      	cmp	r0, #0
 80090d6:	f43f aeb1 	beq.w	8008e3c <_strtod_l+0x47c>
 80090da:	4601      	mov	r1, r0
 80090dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80090de:	4620      	mov	r0, r4
 80090e0:	f7ff f904 	bl	80082ec <__multiply>
 80090e4:	900a      	str	r0, [sp, #40]	; 0x28
 80090e6:	2800      	cmp	r0, #0
 80090e8:	f43f aea8 	beq.w	8008e3c <_strtod_l+0x47c>
 80090ec:	4620      	mov	r0, r4
 80090ee:	991a      	ldr	r1, [sp, #104]	; 0x68
 80090f0:	f7fe ffe6 	bl	80080c0 <_Bfree>
 80090f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090f6:	931a      	str	r3, [sp, #104]	; 0x68
 80090f8:	2f00      	cmp	r7, #0
 80090fa:	f300 808f 	bgt.w	800921c <_strtod_l+0x85c>
 80090fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009100:	2b00      	cmp	r3, #0
 8009102:	dd08      	ble.n	8009116 <_strtod_l+0x756>
 8009104:	4620      	mov	r0, r4
 8009106:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009108:	9908      	ldr	r1, [sp, #32]
 800910a:	f7ff f997 	bl	800843c <__pow5mult>
 800910e:	9008      	str	r0, [sp, #32]
 8009110:	2800      	cmp	r0, #0
 8009112:	f43f ae93 	beq.w	8008e3c <_strtod_l+0x47c>
 8009116:	2d00      	cmp	r5, #0
 8009118:	dd08      	ble.n	800912c <_strtod_l+0x76c>
 800911a:	462a      	mov	r2, r5
 800911c:	4620      	mov	r0, r4
 800911e:	9908      	ldr	r1, [sp, #32]
 8009120:	f7ff f9e6 	bl	80084f0 <__lshift>
 8009124:	9008      	str	r0, [sp, #32]
 8009126:	2800      	cmp	r0, #0
 8009128:	f43f ae88 	beq.w	8008e3c <_strtod_l+0x47c>
 800912c:	f1ba 0f00 	cmp.w	sl, #0
 8009130:	dd08      	ble.n	8009144 <_strtod_l+0x784>
 8009132:	4659      	mov	r1, fp
 8009134:	4652      	mov	r2, sl
 8009136:	4620      	mov	r0, r4
 8009138:	f7ff f9da 	bl	80084f0 <__lshift>
 800913c:	4683      	mov	fp, r0
 800913e:	2800      	cmp	r0, #0
 8009140:	f43f ae7c 	beq.w	8008e3c <_strtod_l+0x47c>
 8009144:	4620      	mov	r0, r4
 8009146:	9a08      	ldr	r2, [sp, #32]
 8009148:	991a      	ldr	r1, [sp, #104]	; 0x68
 800914a:	f7ff fa59 	bl	8008600 <__mdiff>
 800914e:	4606      	mov	r6, r0
 8009150:	2800      	cmp	r0, #0
 8009152:	f43f ae73 	beq.w	8008e3c <_strtod_l+0x47c>
 8009156:	2500      	movs	r5, #0
 8009158:	68c3      	ldr	r3, [r0, #12]
 800915a:	4659      	mov	r1, fp
 800915c:	60c5      	str	r5, [r0, #12]
 800915e:	930a      	str	r3, [sp, #40]	; 0x28
 8009160:	f7ff fa32 	bl	80085c8 <__mcmp>
 8009164:	42a8      	cmp	r0, r5
 8009166:	da6b      	bge.n	8009240 <_strtod_l+0x880>
 8009168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800916a:	ea53 0308 	orrs.w	r3, r3, r8
 800916e:	f040 808f 	bne.w	8009290 <_strtod_l+0x8d0>
 8009172:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009176:	2b00      	cmp	r3, #0
 8009178:	f040 808a 	bne.w	8009290 <_strtod_l+0x8d0>
 800917c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009180:	0d1b      	lsrs	r3, r3, #20
 8009182:	051b      	lsls	r3, r3, #20
 8009184:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009188:	f240 8082 	bls.w	8009290 <_strtod_l+0x8d0>
 800918c:	6973      	ldr	r3, [r6, #20]
 800918e:	b913      	cbnz	r3, 8009196 <_strtod_l+0x7d6>
 8009190:	6933      	ldr	r3, [r6, #16]
 8009192:	2b01      	cmp	r3, #1
 8009194:	dd7c      	ble.n	8009290 <_strtod_l+0x8d0>
 8009196:	4631      	mov	r1, r6
 8009198:	2201      	movs	r2, #1
 800919a:	4620      	mov	r0, r4
 800919c:	f7ff f9a8 	bl	80084f0 <__lshift>
 80091a0:	4659      	mov	r1, fp
 80091a2:	4606      	mov	r6, r0
 80091a4:	f7ff fa10 	bl	80085c8 <__mcmp>
 80091a8:	2800      	cmp	r0, #0
 80091aa:	dd71      	ble.n	8009290 <_strtod_l+0x8d0>
 80091ac:	9905      	ldr	r1, [sp, #20]
 80091ae:	464b      	mov	r3, r9
 80091b0:	4a21      	ldr	r2, [pc, #132]	; (8009238 <_strtod_l+0x878>)
 80091b2:	2900      	cmp	r1, #0
 80091b4:	f000 808d 	beq.w	80092d2 <_strtod_l+0x912>
 80091b8:	ea02 0109 	and.w	r1, r2, r9
 80091bc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80091c0:	f300 8087 	bgt.w	80092d2 <_strtod_l+0x912>
 80091c4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80091c8:	f77f aea9 	ble.w	8008f1e <_strtod_l+0x55e>
 80091cc:	4640      	mov	r0, r8
 80091ce:	4649      	mov	r1, r9
 80091d0:	4b1a      	ldr	r3, [pc, #104]	; (800923c <_strtod_l+0x87c>)
 80091d2:	2200      	movs	r2, #0
 80091d4:	f7f7 f9ec 	bl	80005b0 <__aeabi_dmul>
 80091d8:	4b17      	ldr	r3, [pc, #92]	; (8009238 <_strtod_l+0x878>)
 80091da:	4680      	mov	r8, r0
 80091dc:	400b      	ands	r3, r1
 80091de:	4689      	mov	r9, r1
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f47f ae35 	bne.w	8008e50 <_strtod_l+0x490>
 80091e6:	2322      	movs	r3, #34	; 0x22
 80091e8:	6023      	str	r3, [r4, #0]
 80091ea:	e631      	b.n	8008e50 <_strtod_l+0x490>
 80091ec:	f04f 32ff 	mov.w	r2, #4294967295
 80091f0:	fa02 f303 	lsl.w	r3, r2, r3
 80091f4:	ea03 0808 	and.w	r8, r3, r8
 80091f8:	e6de      	b.n	8008fb8 <_strtod_l+0x5f8>
 80091fa:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 80091fe:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8009202:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8009206:	37e2      	adds	r7, #226	; 0xe2
 8009208:	fa01 f307 	lsl.w	r3, r1, r7
 800920c:	9310      	str	r3, [sp, #64]	; 0x40
 800920e:	9113      	str	r1, [sp, #76]	; 0x4c
 8009210:	e745      	b.n	800909e <_strtod_l+0x6de>
 8009212:	2300      	movs	r3, #0
 8009214:	9310      	str	r3, [sp, #64]	; 0x40
 8009216:	2301      	movs	r3, #1
 8009218:	9313      	str	r3, [sp, #76]	; 0x4c
 800921a:	e740      	b.n	800909e <_strtod_l+0x6de>
 800921c:	463a      	mov	r2, r7
 800921e:	4620      	mov	r0, r4
 8009220:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009222:	f7ff f965 	bl	80084f0 <__lshift>
 8009226:	901a      	str	r0, [sp, #104]	; 0x68
 8009228:	2800      	cmp	r0, #0
 800922a:	f47f af68 	bne.w	80090fe <_strtod_l+0x73e>
 800922e:	e605      	b.n	8008e3c <_strtod_l+0x47c>
 8009230:	0800ab60 	.word	0x0800ab60
 8009234:	fffffc02 	.word	0xfffffc02
 8009238:	7ff00000 	.word	0x7ff00000
 800923c:	39500000 	.word	0x39500000
 8009240:	46ca      	mov	sl, r9
 8009242:	d165      	bne.n	8009310 <_strtod_l+0x950>
 8009244:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009246:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800924a:	b352      	cbz	r2, 80092a2 <_strtod_l+0x8e2>
 800924c:	4a9e      	ldr	r2, [pc, #632]	; (80094c8 <_strtod_l+0xb08>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d12a      	bne.n	80092a8 <_strtod_l+0x8e8>
 8009252:	9b05      	ldr	r3, [sp, #20]
 8009254:	4641      	mov	r1, r8
 8009256:	b1fb      	cbz	r3, 8009298 <_strtod_l+0x8d8>
 8009258:	4b9c      	ldr	r3, [pc, #624]	; (80094cc <_strtod_l+0xb0c>)
 800925a:	f04f 32ff 	mov.w	r2, #4294967295
 800925e:	ea09 0303 	and.w	r3, r9, r3
 8009262:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009266:	d81a      	bhi.n	800929e <_strtod_l+0x8de>
 8009268:	0d1b      	lsrs	r3, r3, #20
 800926a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800926e:	fa02 f303 	lsl.w	r3, r2, r3
 8009272:	4299      	cmp	r1, r3
 8009274:	d118      	bne.n	80092a8 <_strtod_l+0x8e8>
 8009276:	4b96      	ldr	r3, [pc, #600]	; (80094d0 <_strtod_l+0xb10>)
 8009278:	459a      	cmp	sl, r3
 800927a:	d102      	bne.n	8009282 <_strtod_l+0x8c2>
 800927c:	3101      	adds	r1, #1
 800927e:	f43f addd 	beq.w	8008e3c <_strtod_l+0x47c>
 8009282:	f04f 0800 	mov.w	r8, #0
 8009286:	4b91      	ldr	r3, [pc, #580]	; (80094cc <_strtod_l+0xb0c>)
 8009288:	ea0a 0303 	and.w	r3, sl, r3
 800928c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009290:	9b05      	ldr	r3, [sp, #20]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d19a      	bne.n	80091cc <_strtod_l+0x80c>
 8009296:	e5db      	b.n	8008e50 <_strtod_l+0x490>
 8009298:	f04f 33ff 	mov.w	r3, #4294967295
 800929c:	e7e9      	b.n	8009272 <_strtod_l+0x8b2>
 800929e:	4613      	mov	r3, r2
 80092a0:	e7e7      	b.n	8009272 <_strtod_l+0x8b2>
 80092a2:	ea53 0308 	orrs.w	r3, r3, r8
 80092a6:	d081      	beq.n	80091ac <_strtod_l+0x7ec>
 80092a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092aa:	b1e3      	cbz	r3, 80092e6 <_strtod_l+0x926>
 80092ac:	ea13 0f0a 	tst.w	r3, sl
 80092b0:	d0ee      	beq.n	8009290 <_strtod_l+0x8d0>
 80092b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092b4:	4640      	mov	r0, r8
 80092b6:	4649      	mov	r1, r9
 80092b8:	9a05      	ldr	r2, [sp, #20]
 80092ba:	b1c3      	cbz	r3, 80092ee <_strtod_l+0x92e>
 80092bc:	f7ff fb5c 	bl	8008978 <sulp>
 80092c0:	4602      	mov	r2, r0
 80092c2:	460b      	mov	r3, r1
 80092c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80092c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80092c8:	f7f6 ffbc 	bl	8000244 <__adddf3>
 80092cc:	4680      	mov	r8, r0
 80092ce:	4689      	mov	r9, r1
 80092d0:	e7de      	b.n	8009290 <_strtod_l+0x8d0>
 80092d2:	4013      	ands	r3, r2
 80092d4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80092d8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80092dc:	f04f 38ff 	mov.w	r8, #4294967295
 80092e0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80092e4:	e7d4      	b.n	8009290 <_strtod_l+0x8d0>
 80092e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80092e8:	ea13 0f08 	tst.w	r3, r8
 80092ec:	e7e0      	b.n	80092b0 <_strtod_l+0x8f0>
 80092ee:	f7ff fb43 	bl	8008978 <sulp>
 80092f2:	4602      	mov	r2, r0
 80092f4:	460b      	mov	r3, r1
 80092f6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80092f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80092fa:	f7f6 ffa1 	bl	8000240 <__aeabi_dsub>
 80092fe:	2200      	movs	r2, #0
 8009300:	2300      	movs	r3, #0
 8009302:	4680      	mov	r8, r0
 8009304:	4689      	mov	r9, r1
 8009306:	f7f7 fbbb 	bl	8000a80 <__aeabi_dcmpeq>
 800930a:	2800      	cmp	r0, #0
 800930c:	d0c0      	beq.n	8009290 <_strtod_l+0x8d0>
 800930e:	e606      	b.n	8008f1e <_strtod_l+0x55e>
 8009310:	4659      	mov	r1, fp
 8009312:	4630      	mov	r0, r6
 8009314:	f7ff fabe 	bl	8008894 <__ratio>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
 800931c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009320:	2200      	movs	r2, #0
 8009322:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009326:	f7f7 fbbf 	bl	8000aa8 <__aeabi_dcmple>
 800932a:	2800      	cmp	r0, #0
 800932c:	d06f      	beq.n	800940e <_strtod_l+0xa4e>
 800932e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009330:	2b00      	cmp	r3, #0
 8009332:	d17c      	bne.n	800942e <_strtod_l+0xa6e>
 8009334:	f1b8 0f00 	cmp.w	r8, #0
 8009338:	d159      	bne.n	80093ee <_strtod_l+0xa2e>
 800933a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800933e:	2b00      	cmp	r3, #0
 8009340:	d17b      	bne.n	800943a <_strtod_l+0xa7a>
 8009342:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009346:	2200      	movs	r2, #0
 8009348:	4b62      	ldr	r3, [pc, #392]	; (80094d4 <_strtod_l+0xb14>)
 800934a:	f7f7 fba3 	bl	8000a94 <__aeabi_dcmplt>
 800934e:	2800      	cmp	r0, #0
 8009350:	d15a      	bne.n	8009408 <_strtod_l+0xa48>
 8009352:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009356:	2200      	movs	r2, #0
 8009358:	4b5f      	ldr	r3, [pc, #380]	; (80094d8 <_strtod_l+0xb18>)
 800935a:	f7f7 f929 	bl	80005b0 <__aeabi_dmul>
 800935e:	4605      	mov	r5, r0
 8009360:	460f      	mov	r7, r1
 8009362:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009366:	9506      	str	r5, [sp, #24]
 8009368:	9307      	str	r3, [sp, #28]
 800936a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800936e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009372:	4b56      	ldr	r3, [pc, #344]	; (80094cc <_strtod_l+0xb0c>)
 8009374:	4a55      	ldr	r2, [pc, #340]	; (80094cc <_strtod_l+0xb0c>)
 8009376:	ea0a 0303 	and.w	r3, sl, r3
 800937a:	9313      	str	r3, [sp, #76]	; 0x4c
 800937c:	4b57      	ldr	r3, [pc, #348]	; (80094dc <_strtod_l+0xb1c>)
 800937e:	ea0a 0202 	and.w	r2, sl, r2
 8009382:	429a      	cmp	r2, r3
 8009384:	f040 80b0 	bne.w	80094e8 <_strtod_l+0xb28>
 8009388:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800938c:	4640      	mov	r0, r8
 800938e:	4649      	mov	r1, r9
 8009390:	f7ff f9c2 	bl	8008718 <__ulp>
 8009394:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009398:	f7f7 f90a 	bl	80005b0 <__aeabi_dmul>
 800939c:	4642      	mov	r2, r8
 800939e:	464b      	mov	r3, r9
 80093a0:	f7f6 ff50 	bl	8000244 <__adddf3>
 80093a4:	f8df a124 	ldr.w	sl, [pc, #292]	; 80094cc <_strtod_l+0xb0c>
 80093a8:	4a4d      	ldr	r2, [pc, #308]	; (80094e0 <_strtod_l+0xb20>)
 80093aa:	ea01 0a0a 	and.w	sl, r1, sl
 80093ae:	4592      	cmp	sl, r2
 80093b0:	4680      	mov	r8, r0
 80093b2:	d948      	bls.n	8009446 <_strtod_l+0xa86>
 80093b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80093b6:	4b46      	ldr	r3, [pc, #280]	; (80094d0 <_strtod_l+0xb10>)
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d103      	bne.n	80093c4 <_strtod_l+0xa04>
 80093bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093be:	3301      	adds	r3, #1
 80093c0:	f43f ad3c 	beq.w	8008e3c <_strtod_l+0x47c>
 80093c4:	f04f 38ff 	mov.w	r8, #4294967295
 80093c8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80094d0 <_strtod_l+0xb10>
 80093cc:	4620      	mov	r0, r4
 80093ce:	991a      	ldr	r1, [sp, #104]	; 0x68
 80093d0:	f7fe fe76 	bl	80080c0 <_Bfree>
 80093d4:	4620      	mov	r0, r4
 80093d6:	9908      	ldr	r1, [sp, #32]
 80093d8:	f7fe fe72 	bl	80080c0 <_Bfree>
 80093dc:	4659      	mov	r1, fp
 80093de:	4620      	mov	r0, r4
 80093e0:	f7fe fe6e 	bl	80080c0 <_Bfree>
 80093e4:	4631      	mov	r1, r6
 80093e6:	4620      	mov	r0, r4
 80093e8:	f7fe fe6a 	bl	80080c0 <_Bfree>
 80093ec:	e605      	b.n	8008ffa <_strtod_l+0x63a>
 80093ee:	f1b8 0f01 	cmp.w	r8, #1
 80093f2:	d103      	bne.n	80093fc <_strtod_l+0xa3c>
 80093f4:	f1b9 0f00 	cmp.w	r9, #0
 80093f8:	f43f ad91 	beq.w	8008f1e <_strtod_l+0x55e>
 80093fc:	2200      	movs	r2, #0
 80093fe:	4b39      	ldr	r3, [pc, #228]	; (80094e4 <_strtod_l+0xb24>)
 8009400:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009402:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009406:	e016      	b.n	8009436 <_strtod_l+0xa76>
 8009408:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800940a:	4f33      	ldr	r7, [pc, #204]	; (80094d8 <_strtod_l+0xb18>)
 800940c:	e7a9      	b.n	8009362 <_strtod_l+0x9a2>
 800940e:	4b32      	ldr	r3, [pc, #200]	; (80094d8 <_strtod_l+0xb18>)
 8009410:	2200      	movs	r2, #0
 8009412:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009416:	f7f7 f8cb 	bl	80005b0 <__aeabi_dmul>
 800941a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800941c:	4605      	mov	r5, r0
 800941e:	460f      	mov	r7, r1
 8009420:	2b00      	cmp	r3, #0
 8009422:	d09e      	beq.n	8009362 <_strtod_l+0x9a2>
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800942c:	e79d      	b.n	800936a <_strtod_l+0x9aa>
 800942e:	2200      	movs	r2, #0
 8009430:	4b28      	ldr	r3, [pc, #160]	; (80094d4 <_strtod_l+0xb14>)
 8009432:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009436:	4f27      	ldr	r7, [pc, #156]	; (80094d4 <_strtod_l+0xb14>)
 8009438:	e797      	b.n	800936a <_strtod_l+0x9aa>
 800943a:	2200      	movs	r2, #0
 800943c:	4b29      	ldr	r3, [pc, #164]	; (80094e4 <_strtod_l+0xb24>)
 800943e:	4645      	mov	r5, r8
 8009440:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009444:	e7f7      	b.n	8009436 <_strtod_l+0xa76>
 8009446:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800944a:	9b05      	ldr	r3, [sp, #20]
 800944c:	46ca      	mov	sl, r9
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1bc      	bne.n	80093cc <_strtod_l+0xa0c>
 8009452:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009456:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009458:	0d1b      	lsrs	r3, r3, #20
 800945a:	051b      	lsls	r3, r3, #20
 800945c:	429a      	cmp	r2, r3
 800945e:	d1b5      	bne.n	80093cc <_strtod_l+0xa0c>
 8009460:	4628      	mov	r0, r5
 8009462:	4639      	mov	r1, r7
 8009464:	f7f7 fbec 	bl	8000c40 <__aeabi_d2lz>
 8009468:	f7f7 f874 	bl	8000554 <__aeabi_l2d>
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	4628      	mov	r0, r5
 8009472:	4639      	mov	r1, r7
 8009474:	f7f6 fee4 	bl	8000240 <__aeabi_dsub>
 8009478:	460b      	mov	r3, r1
 800947a:	4602      	mov	r2, r0
 800947c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8009480:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009486:	ea4a 0a08 	orr.w	sl, sl, r8
 800948a:	ea5a 0a03 	orrs.w	sl, sl, r3
 800948e:	d06c      	beq.n	800956a <_strtod_l+0xbaa>
 8009490:	a309      	add	r3, pc, #36	; (adr r3, 80094b8 <_strtod_l+0xaf8>)
 8009492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009496:	f7f7 fafd 	bl	8000a94 <__aeabi_dcmplt>
 800949a:	2800      	cmp	r0, #0
 800949c:	f47f acd8 	bne.w	8008e50 <_strtod_l+0x490>
 80094a0:	a307      	add	r3, pc, #28	; (adr r3, 80094c0 <_strtod_l+0xb00>)
 80094a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80094aa:	f7f7 fb11 	bl	8000ad0 <__aeabi_dcmpgt>
 80094ae:	2800      	cmp	r0, #0
 80094b0:	d08c      	beq.n	80093cc <_strtod_l+0xa0c>
 80094b2:	e4cd      	b.n	8008e50 <_strtod_l+0x490>
 80094b4:	f3af 8000 	nop.w
 80094b8:	94a03595 	.word	0x94a03595
 80094bc:	3fdfffff 	.word	0x3fdfffff
 80094c0:	35afe535 	.word	0x35afe535
 80094c4:	3fe00000 	.word	0x3fe00000
 80094c8:	000fffff 	.word	0x000fffff
 80094cc:	7ff00000 	.word	0x7ff00000
 80094d0:	7fefffff 	.word	0x7fefffff
 80094d4:	3ff00000 	.word	0x3ff00000
 80094d8:	3fe00000 	.word	0x3fe00000
 80094dc:	7fe00000 	.word	0x7fe00000
 80094e0:	7c9fffff 	.word	0x7c9fffff
 80094e4:	bff00000 	.word	0xbff00000
 80094e8:	9b05      	ldr	r3, [sp, #20]
 80094ea:	b333      	cbz	r3, 800953a <_strtod_l+0xb7a>
 80094ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80094f2:	d822      	bhi.n	800953a <_strtod_l+0xb7a>
 80094f4:	a328      	add	r3, pc, #160	; (adr r3, 8009598 <_strtod_l+0xbd8>)
 80094f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fa:	4628      	mov	r0, r5
 80094fc:	4639      	mov	r1, r7
 80094fe:	f7f7 fad3 	bl	8000aa8 <__aeabi_dcmple>
 8009502:	b1a0      	cbz	r0, 800952e <_strtod_l+0xb6e>
 8009504:	4639      	mov	r1, r7
 8009506:	4628      	mov	r0, r5
 8009508:	f7f7 fb2a 	bl	8000b60 <__aeabi_d2uiz>
 800950c:	2801      	cmp	r0, #1
 800950e:	bf38      	it	cc
 8009510:	2001      	movcc	r0, #1
 8009512:	f7f6 ffd3 	bl	80004bc <__aeabi_ui2d>
 8009516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009518:	4605      	mov	r5, r0
 800951a:	460f      	mov	r7, r1
 800951c:	bb03      	cbnz	r3, 8009560 <_strtod_l+0xba0>
 800951e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009522:	9014      	str	r0, [sp, #80]	; 0x50
 8009524:	9315      	str	r3, [sp, #84]	; 0x54
 8009526:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800952a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800952e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009530:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009532:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009536:	1a9b      	subs	r3, r3, r2
 8009538:	9311      	str	r3, [sp, #68]	; 0x44
 800953a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800953c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800953e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8009542:	f7ff f8e9 	bl	8008718 <__ulp>
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	4640      	mov	r0, r8
 800954c:	4649      	mov	r1, r9
 800954e:	f7f7 f82f 	bl	80005b0 <__aeabi_dmul>
 8009552:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009554:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009556:	f7f6 fe75 	bl	8000244 <__adddf3>
 800955a:	4680      	mov	r8, r0
 800955c:	4689      	mov	r9, r1
 800955e:	e774      	b.n	800944a <_strtod_l+0xa8a>
 8009560:	4602      	mov	r2, r0
 8009562:	460b      	mov	r3, r1
 8009564:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009568:	e7dd      	b.n	8009526 <_strtod_l+0xb66>
 800956a:	a30d      	add	r3, pc, #52	; (adr r3, 80095a0 <_strtod_l+0xbe0>)
 800956c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009570:	f7f7 fa90 	bl	8000a94 <__aeabi_dcmplt>
 8009574:	e79b      	b.n	80094ae <_strtod_l+0xaee>
 8009576:	2300      	movs	r3, #0
 8009578:	930e      	str	r3, [sp, #56]	; 0x38
 800957a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800957c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800957e:	6013      	str	r3, [r2, #0]
 8009580:	f7ff ba5b 	b.w	8008a3a <_strtod_l+0x7a>
 8009584:	2a65      	cmp	r2, #101	; 0x65
 8009586:	f43f ab52 	beq.w	8008c2e <_strtod_l+0x26e>
 800958a:	2a45      	cmp	r2, #69	; 0x45
 800958c:	f43f ab4f 	beq.w	8008c2e <_strtod_l+0x26e>
 8009590:	2301      	movs	r3, #1
 8009592:	f7ff bb87 	b.w	8008ca4 <_strtod_l+0x2e4>
 8009596:	bf00      	nop
 8009598:	ffc00000 	.word	0xffc00000
 800959c:	41dfffff 	.word	0x41dfffff
 80095a0:	94a03595 	.word	0x94a03595
 80095a4:	3fcfffff 	.word	0x3fcfffff

080095a8 <_strtod_r>:
 80095a8:	4b01      	ldr	r3, [pc, #4]	; (80095b0 <_strtod_r+0x8>)
 80095aa:	f7ff ba09 	b.w	80089c0 <_strtod_l>
 80095ae:	bf00      	nop
 80095b0:	20000070 	.word	0x20000070

080095b4 <_strtol_l.constprop.0>:
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095ba:	4686      	mov	lr, r0
 80095bc:	4690      	mov	r8, r2
 80095be:	d001      	beq.n	80095c4 <_strtol_l.constprop.0+0x10>
 80095c0:	2b24      	cmp	r3, #36	; 0x24
 80095c2:	d906      	bls.n	80095d2 <_strtol_l.constprop.0+0x1e>
 80095c4:	f7fd fd90 	bl	80070e8 <__errno>
 80095c8:	2316      	movs	r3, #22
 80095ca:	6003      	str	r3, [r0, #0]
 80095cc:	2000      	movs	r0, #0
 80095ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095d2:	460d      	mov	r5, r1
 80095d4:	4835      	ldr	r0, [pc, #212]	; (80096ac <_strtol_l.constprop.0+0xf8>)
 80095d6:	462a      	mov	r2, r5
 80095d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095dc:	5d06      	ldrb	r6, [r0, r4]
 80095de:	f016 0608 	ands.w	r6, r6, #8
 80095e2:	d1f8      	bne.n	80095d6 <_strtol_l.constprop.0+0x22>
 80095e4:	2c2d      	cmp	r4, #45	; 0x2d
 80095e6:	d12e      	bne.n	8009646 <_strtol_l.constprop.0+0x92>
 80095e8:	2601      	movs	r6, #1
 80095ea:	782c      	ldrb	r4, [r5, #0]
 80095ec:	1c95      	adds	r5, r2, #2
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d057      	beq.n	80096a2 <_strtol_l.constprop.0+0xee>
 80095f2:	2b10      	cmp	r3, #16
 80095f4:	d109      	bne.n	800960a <_strtol_l.constprop.0+0x56>
 80095f6:	2c30      	cmp	r4, #48	; 0x30
 80095f8:	d107      	bne.n	800960a <_strtol_l.constprop.0+0x56>
 80095fa:	782a      	ldrb	r2, [r5, #0]
 80095fc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009600:	2a58      	cmp	r2, #88	; 0x58
 8009602:	d149      	bne.n	8009698 <_strtol_l.constprop.0+0xe4>
 8009604:	2310      	movs	r3, #16
 8009606:	786c      	ldrb	r4, [r5, #1]
 8009608:	3502      	adds	r5, #2
 800960a:	2200      	movs	r2, #0
 800960c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8009610:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009614:	fbbc f9f3 	udiv	r9, ip, r3
 8009618:	4610      	mov	r0, r2
 800961a:	fb03 ca19 	mls	sl, r3, r9, ip
 800961e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009622:	2f09      	cmp	r7, #9
 8009624:	d814      	bhi.n	8009650 <_strtol_l.constprop.0+0x9c>
 8009626:	463c      	mov	r4, r7
 8009628:	42a3      	cmp	r3, r4
 800962a:	dd20      	ble.n	800966e <_strtol_l.constprop.0+0xba>
 800962c:	1c57      	adds	r7, r2, #1
 800962e:	d007      	beq.n	8009640 <_strtol_l.constprop.0+0x8c>
 8009630:	4581      	cmp	r9, r0
 8009632:	d319      	bcc.n	8009668 <_strtol_l.constprop.0+0xb4>
 8009634:	d101      	bne.n	800963a <_strtol_l.constprop.0+0x86>
 8009636:	45a2      	cmp	sl, r4
 8009638:	db16      	blt.n	8009668 <_strtol_l.constprop.0+0xb4>
 800963a:	2201      	movs	r2, #1
 800963c:	fb00 4003 	mla	r0, r0, r3, r4
 8009640:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009644:	e7eb      	b.n	800961e <_strtol_l.constprop.0+0x6a>
 8009646:	2c2b      	cmp	r4, #43	; 0x2b
 8009648:	bf04      	itt	eq
 800964a:	782c      	ldrbeq	r4, [r5, #0]
 800964c:	1c95      	addeq	r5, r2, #2
 800964e:	e7ce      	b.n	80095ee <_strtol_l.constprop.0+0x3a>
 8009650:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009654:	2f19      	cmp	r7, #25
 8009656:	d801      	bhi.n	800965c <_strtol_l.constprop.0+0xa8>
 8009658:	3c37      	subs	r4, #55	; 0x37
 800965a:	e7e5      	b.n	8009628 <_strtol_l.constprop.0+0x74>
 800965c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009660:	2f19      	cmp	r7, #25
 8009662:	d804      	bhi.n	800966e <_strtol_l.constprop.0+0xba>
 8009664:	3c57      	subs	r4, #87	; 0x57
 8009666:	e7df      	b.n	8009628 <_strtol_l.constprop.0+0x74>
 8009668:	f04f 32ff 	mov.w	r2, #4294967295
 800966c:	e7e8      	b.n	8009640 <_strtol_l.constprop.0+0x8c>
 800966e:	1c53      	adds	r3, r2, #1
 8009670:	d108      	bne.n	8009684 <_strtol_l.constprop.0+0xd0>
 8009672:	2322      	movs	r3, #34	; 0x22
 8009674:	4660      	mov	r0, ip
 8009676:	f8ce 3000 	str.w	r3, [lr]
 800967a:	f1b8 0f00 	cmp.w	r8, #0
 800967e:	d0a6      	beq.n	80095ce <_strtol_l.constprop.0+0x1a>
 8009680:	1e69      	subs	r1, r5, #1
 8009682:	e006      	b.n	8009692 <_strtol_l.constprop.0+0xde>
 8009684:	b106      	cbz	r6, 8009688 <_strtol_l.constprop.0+0xd4>
 8009686:	4240      	negs	r0, r0
 8009688:	f1b8 0f00 	cmp.w	r8, #0
 800968c:	d09f      	beq.n	80095ce <_strtol_l.constprop.0+0x1a>
 800968e:	2a00      	cmp	r2, #0
 8009690:	d1f6      	bne.n	8009680 <_strtol_l.constprop.0+0xcc>
 8009692:	f8c8 1000 	str.w	r1, [r8]
 8009696:	e79a      	b.n	80095ce <_strtol_l.constprop.0+0x1a>
 8009698:	2430      	movs	r4, #48	; 0x30
 800969a:	2b00      	cmp	r3, #0
 800969c:	d1b5      	bne.n	800960a <_strtol_l.constprop.0+0x56>
 800969e:	2308      	movs	r3, #8
 80096a0:	e7b3      	b.n	800960a <_strtol_l.constprop.0+0x56>
 80096a2:	2c30      	cmp	r4, #48	; 0x30
 80096a4:	d0a9      	beq.n	80095fa <_strtol_l.constprop.0+0x46>
 80096a6:	230a      	movs	r3, #10
 80096a8:	e7af      	b.n	800960a <_strtol_l.constprop.0+0x56>
 80096aa:	bf00      	nop
 80096ac:	0800ab89 	.word	0x0800ab89

080096b0 <_strtol_r>:
 80096b0:	f7ff bf80 	b.w	80095b4 <_strtol_l.constprop.0>

080096b4 <__ssputs_r>:
 80096b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096b8:	461f      	mov	r7, r3
 80096ba:	688e      	ldr	r6, [r1, #8]
 80096bc:	4682      	mov	sl, r0
 80096be:	42be      	cmp	r6, r7
 80096c0:	460c      	mov	r4, r1
 80096c2:	4690      	mov	r8, r2
 80096c4:	680b      	ldr	r3, [r1, #0]
 80096c6:	d82c      	bhi.n	8009722 <__ssputs_r+0x6e>
 80096c8:	898a      	ldrh	r2, [r1, #12]
 80096ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80096ce:	d026      	beq.n	800971e <__ssputs_r+0x6a>
 80096d0:	6965      	ldr	r5, [r4, #20]
 80096d2:	6909      	ldr	r1, [r1, #16]
 80096d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096d8:	eba3 0901 	sub.w	r9, r3, r1
 80096dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096e0:	1c7b      	adds	r3, r7, #1
 80096e2:	444b      	add	r3, r9
 80096e4:	106d      	asrs	r5, r5, #1
 80096e6:	429d      	cmp	r5, r3
 80096e8:	bf38      	it	cc
 80096ea:	461d      	movcc	r5, r3
 80096ec:	0553      	lsls	r3, r2, #21
 80096ee:	d527      	bpl.n	8009740 <__ssputs_r+0x8c>
 80096f0:	4629      	mov	r1, r5
 80096f2:	f7fe fc19 	bl	8007f28 <_malloc_r>
 80096f6:	4606      	mov	r6, r0
 80096f8:	b360      	cbz	r0, 8009754 <__ssputs_r+0xa0>
 80096fa:	464a      	mov	r2, r9
 80096fc:	6921      	ldr	r1, [r4, #16]
 80096fe:	f000 fa17 	bl	8009b30 <memcpy>
 8009702:	89a3      	ldrh	r3, [r4, #12]
 8009704:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800970c:	81a3      	strh	r3, [r4, #12]
 800970e:	6126      	str	r6, [r4, #16]
 8009710:	444e      	add	r6, r9
 8009712:	6026      	str	r6, [r4, #0]
 8009714:	463e      	mov	r6, r7
 8009716:	6165      	str	r5, [r4, #20]
 8009718:	eba5 0509 	sub.w	r5, r5, r9
 800971c:	60a5      	str	r5, [r4, #8]
 800971e:	42be      	cmp	r6, r7
 8009720:	d900      	bls.n	8009724 <__ssputs_r+0x70>
 8009722:	463e      	mov	r6, r7
 8009724:	4632      	mov	r2, r6
 8009726:	4641      	mov	r1, r8
 8009728:	6820      	ldr	r0, [r4, #0]
 800972a:	f000 f9c5 	bl	8009ab8 <memmove>
 800972e:	2000      	movs	r0, #0
 8009730:	68a3      	ldr	r3, [r4, #8]
 8009732:	1b9b      	subs	r3, r3, r6
 8009734:	60a3      	str	r3, [r4, #8]
 8009736:	6823      	ldr	r3, [r4, #0]
 8009738:	4433      	add	r3, r6
 800973a:	6023      	str	r3, [r4, #0]
 800973c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009740:	462a      	mov	r2, r5
 8009742:	f000 fda6 	bl	800a292 <_realloc_r>
 8009746:	4606      	mov	r6, r0
 8009748:	2800      	cmp	r0, #0
 800974a:	d1e0      	bne.n	800970e <__ssputs_r+0x5a>
 800974c:	4650      	mov	r0, sl
 800974e:	6921      	ldr	r1, [r4, #16]
 8009750:	f7fe fb7a 	bl	8007e48 <_free_r>
 8009754:	230c      	movs	r3, #12
 8009756:	f8ca 3000 	str.w	r3, [sl]
 800975a:	89a3      	ldrh	r3, [r4, #12]
 800975c:	f04f 30ff 	mov.w	r0, #4294967295
 8009760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009764:	81a3      	strh	r3, [r4, #12]
 8009766:	e7e9      	b.n	800973c <__ssputs_r+0x88>

08009768 <_svfiprintf_r>:
 8009768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976c:	4698      	mov	r8, r3
 800976e:	898b      	ldrh	r3, [r1, #12]
 8009770:	4607      	mov	r7, r0
 8009772:	061b      	lsls	r3, r3, #24
 8009774:	460d      	mov	r5, r1
 8009776:	4614      	mov	r4, r2
 8009778:	b09d      	sub	sp, #116	; 0x74
 800977a:	d50e      	bpl.n	800979a <_svfiprintf_r+0x32>
 800977c:	690b      	ldr	r3, [r1, #16]
 800977e:	b963      	cbnz	r3, 800979a <_svfiprintf_r+0x32>
 8009780:	2140      	movs	r1, #64	; 0x40
 8009782:	f7fe fbd1 	bl	8007f28 <_malloc_r>
 8009786:	6028      	str	r0, [r5, #0]
 8009788:	6128      	str	r0, [r5, #16]
 800978a:	b920      	cbnz	r0, 8009796 <_svfiprintf_r+0x2e>
 800978c:	230c      	movs	r3, #12
 800978e:	603b      	str	r3, [r7, #0]
 8009790:	f04f 30ff 	mov.w	r0, #4294967295
 8009794:	e0d0      	b.n	8009938 <_svfiprintf_r+0x1d0>
 8009796:	2340      	movs	r3, #64	; 0x40
 8009798:	616b      	str	r3, [r5, #20]
 800979a:	2300      	movs	r3, #0
 800979c:	9309      	str	r3, [sp, #36]	; 0x24
 800979e:	2320      	movs	r3, #32
 80097a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097a4:	2330      	movs	r3, #48	; 0x30
 80097a6:	f04f 0901 	mov.w	r9, #1
 80097aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80097ae:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009950 <_svfiprintf_r+0x1e8>
 80097b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097b6:	4623      	mov	r3, r4
 80097b8:	469a      	mov	sl, r3
 80097ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097be:	b10a      	cbz	r2, 80097c4 <_svfiprintf_r+0x5c>
 80097c0:	2a25      	cmp	r2, #37	; 0x25
 80097c2:	d1f9      	bne.n	80097b8 <_svfiprintf_r+0x50>
 80097c4:	ebba 0b04 	subs.w	fp, sl, r4
 80097c8:	d00b      	beq.n	80097e2 <_svfiprintf_r+0x7a>
 80097ca:	465b      	mov	r3, fp
 80097cc:	4622      	mov	r2, r4
 80097ce:	4629      	mov	r1, r5
 80097d0:	4638      	mov	r0, r7
 80097d2:	f7ff ff6f 	bl	80096b4 <__ssputs_r>
 80097d6:	3001      	adds	r0, #1
 80097d8:	f000 80a9 	beq.w	800992e <_svfiprintf_r+0x1c6>
 80097dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097de:	445a      	add	r2, fp
 80097e0:	9209      	str	r2, [sp, #36]	; 0x24
 80097e2:	f89a 3000 	ldrb.w	r3, [sl]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	f000 80a1 	beq.w	800992e <_svfiprintf_r+0x1c6>
 80097ec:	2300      	movs	r3, #0
 80097ee:	f04f 32ff 	mov.w	r2, #4294967295
 80097f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097f6:	f10a 0a01 	add.w	sl, sl, #1
 80097fa:	9304      	str	r3, [sp, #16]
 80097fc:	9307      	str	r3, [sp, #28]
 80097fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009802:	931a      	str	r3, [sp, #104]	; 0x68
 8009804:	4654      	mov	r4, sl
 8009806:	2205      	movs	r2, #5
 8009808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800980c:	4850      	ldr	r0, [pc, #320]	; (8009950 <_svfiprintf_r+0x1e8>)
 800980e:	f7fd fc98 	bl	8007142 <memchr>
 8009812:	9a04      	ldr	r2, [sp, #16]
 8009814:	b9d8      	cbnz	r0, 800984e <_svfiprintf_r+0xe6>
 8009816:	06d0      	lsls	r0, r2, #27
 8009818:	bf44      	itt	mi
 800981a:	2320      	movmi	r3, #32
 800981c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009820:	0711      	lsls	r1, r2, #28
 8009822:	bf44      	itt	mi
 8009824:	232b      	movmi	r3, #43	; 0x2b
 8009826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800982a:	f89a 3000 	ldrb.w	r3, [sl]
 800982e:	2b2a      	cmp	r3, #42	; 0x2a
 8009830:	d015      	beq.n	800985e <_svfiprintf_r+0xf6>
 8009832:	4654      	mov	r4, sl
 8009834:	2000      	movs	r0, #0
 8009836:	f04f 0c0a 	mov.w	ip, #10
 800983a:	9a07      	ldr	r2, [sp, #28]
 800983c:	4621      	mov	r1, r4
 800983e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009842:	3b30      	subs	r3, #48	; 0x30
 8009844:	2b09      	cmp	r3, #9
 8009846:	d94d      	bls.n	80098e4 <_svfiprintf_r+0x17c>
 8009848:	b1b0      	cbz	r0, 8009878 <_svfiprintf_r+0x110>
 800984a:	9207      	str	r2, [sp, #28]
 800984c:	e014      	b.n	8009878 <_svfiprintf_r+0x110>
 800984e:	eba0 0308 	sub.w	r3, r0, r8
 8009852:	fa09 f303 	lsl.w	r3, r9, r3
 8009856:	4313      	orrs	r3, r2
 8009858:	46a2      	mov	sl, r4
 800985a:	9304      	str	r3, [sp, #16]
 800985c:	e7d2      	b.n	8009804 <_svfiprintf_r+0x9c>
 800985e:	9b03      	ldr	r3, [sp, #12]
 8009860:	1d19      	adds	r1, r3, #4
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	9103      	str	r1, [sp, #12]
 8009866:	2b00      	cmp	r3, #0
 8009868:	bfbb      	ittet	lt
 800986a:	425b      	neglt	r3, r3
 800986c:	f042 0202 	orrlt.w	r2, r2, #2
 8009870:	9307      	strge	r3, [sp, #28]
 8009872:	9307      	strlt	r3, [sp, #28]
 8009874:	bfb8      	it	lt
 8009876:	9204      	strlt	r2, [sp, #16]
 8009878:	7823      	ldrb	r3, [r4, #0]
 800987a:	2b2e      	cmp	r3, #46	; 0x2e
 800987c:	d10c      	bne.n	8009898 <_svfiprintf_r+0x130>
 800987e:	7863      	ldrb	r3, [r4, #1]
 8009880:	2b2a      	cmp	r3, #42	; 0x2a
 8009882:	d134      	bne.n	80098ee <_svfiprintf_r+0x186>
 8009884:	9b03      	ldr	r3, [sp, #12]
 8009886:	3402      	adds	r4, #2
 8009888:	1d1a      	adds	r2, r3, #4
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	9203      	str	r2, [sp, #12]
 800988e:	2b00      	cmp	r3, #0
 8009890:	bfb8      	it	lt
 8009892:	f04f 33ff 	movlt.w	r3, #4294967295
 8009896:	9305      	str	r3, [sp, #20]
 8009898:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009954 <_svfiprintf_r+0x1ec>
 800989c:	2203      	movs	r2, #3
 800989e:	4650      	mov	r0, sl
 80098a0:	7821      	ldrb	r1, [r4, #0]
 80098a2:	f7fd fc4e 	bl	8007142 <memchr>
 80098a6:	b138      	cbz	r0, 80098b8 <_svfiprintf_r+0x150>
 80098a8:	2240      	movs	r2, #64	; 0x40
 80098aa:	9b04      	ldr	r3, [sp, #16]
 80098ac:	eba0 000a 	sub.w	r0, r0, sl
 80098b0:	4082      	lsls	r2, r0
 80098b2:	4313      	orrs	r3, r2
 80098b4:	3401      	adds	r4, #1
 80098b6:	9304      	str	r3, [sp, #16]
 80098b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098bc:	2206      	movs	r2, #6
 80098be:	4826      	ldr	r0, [pc, #152]	; (8009958 <_svfiprintf_r+0x1f0>)
 80098c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098c4:	f7fd fc3d 	bl	8007142 <memchr>
 80098c8:	2800      	cmp	r0, #0
 80098ca:	d038      	beq.n	800993e <_svfiprintf_r+0x1d6>
 80098cc:	4b23      	ldr	r3, [pc, #140]	; (800995c <_svfiprintf_r+0x1f4>)
 80098ce:	bb1b      	cbnz	r3, 8009918 <_svfiprintf_r+0x1b0>
 80098d0:	9b03      	ldr	r3, [sp, #12]
 80098d2:	3307      	adds	r3, #7
 80098d4:	f023 0307 	bic.w	r3, r3, #7
 80098d8:	3308      	adds	r3, #8
 80098da:	9303      	str	r3, [sp, #12]
 80098dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098de:	4433      	add	r3, r6
 80098e0:	9309      	str	r3, [sp, #36]	; 0x24
 80098e2:	e768      	b.n	80097b6 <_svfiprintf_r+0x4e>
 80098e4:	460c      	mov	r4, r1
 80098e6:	2001      	movs	r0, #1
 80098e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80098ec:	e7a6      	b.n	800983c <_svfiprintf_r+0xd4>
 80098ee:	2300      	movs	r3, #0
 80098f0:	f04f 0c0a 	mov.w	ip, #10
 80098f4:	4619      	mov	r1, r3
 80098f6:	3401      	adds	r4, #1
 80098f8:	9305      	str	r3, [sp, #20]
 80098fa:	4620      	mov	r0, r4
 80098fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009900:	3a30      	subs	r2, #48	; 0x30
 8009902:	2a09      	cmp	r2, #9
 8009904:	d903      	bls.n	800990e <_svfiprintf_r+0x1a6>
 8009906:	2b00      	cmp	r3, #0
 8009908:	d0c6      	beq.n	8009898 <_svfiprintf_r+0x130>
 800990a:	9105      	str	r1, [sp, #20]
 800990c:	e7c4      	b.n	8009898 <_svfiprintf_r+0x130>
 800990e:	4604      	mov	r4, r0
 8009910:	2301      	movs	r3, #1
 8009912:	fb0c 2101 	mla	r1, ip, r1, r2
 8009916:	e7f0      	b.n	80098fa <_svfiprintf_r+0x192>
 8009918:	ab03      	add	r3, sp, #12
 800991a:	9300      	str	r3, [sp, #0]
 800991c:	462a      	mov	r2, r5
 800991e:	4638      	mov	r0, r7
 8009920:	4b0f      	ldr	r3, [pc, #60]	; (8009960 <_svfiprintf_r+0x1f8>)
 8009922:	a904      	add	r1, sp, #16
 8009924:	f7fc fc98 	bl	8006258 <_printf_float>
 8009928:	1c42      	adds	r2, r0, #1
 800992a:	4606      	mov	r6, r0
 800992c:	d1d6      	bne.n	80098dc <_svfiprintf_r+0x174>
 800992e:	89ab      	ldrh	r3, [r5, #12]
 8009930:	065b      	lsls	r3, r3, #25
 8009932:	f53f af2d 	bmi.w	8009790 <_svfiprintf_r+0x28>
 8009936:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009938:	b01d      	add	sp, #116	; 0x74
 800993a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800993e:	ab03      	add	r3, sp, #12
 8009940:	9300      	str	r3, [sp, #0]
 8009942:	462a      	mov	r2, r5
 8009944:	4638      	mov	r0, r7
 8009946:	4b06      	ldr	r3, [pc, #24]	; (8009960 <_svfiprintf_r+0x1f8>)
 8009948:	a904      	add	r1, sp, #16
 800994a:	f7fc ff25 	bl	8006798 <_printf_i>
 800994e:	e7eb      	b.n	8009928 <_svfiprintf_r+0x1c0>
 8009950:	0800ac89 	.word	0x0800ac89
 8009954:	0800ac8f 	.word	0x0800ac8f
 8009958:	0800ac93 	.word	0x0800ac93
 800995c:	08006259 	.word	0x08006259
 8009960:	080096b5 	.word	0x080096b5

08009964 <__sflush_r>:
 8009964:	898a      	ldrh	r2, [r1, #12]
 8009966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009968:	4605      	mov	r5, r0
 800996a:	0710      	lsls	r0, r2, #28
 800996c:	460c      	mov	r4, r1
 800996e:	d457      	bmi.n	8009a20 <__sflush_r+0xbc>
 8009970:	684b      	ldr	r3, [r1, #4]
 8009972:	2b00      	cmp	r3, #0
 8009974:	dc04      	bgt.n	8009980 <__sflush_r+0x1c>
 8009976:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009978:	2b00      	cmp	r3, #0
 800997a:	dc01      	bgt.n	8009980 <__sflush_r+0x1c>
 800997c:	2000      	movs	r0, #0
 800997e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009980:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009982:	2e00      	cmp	r6, #0
 8009984:	d0fa      	beq.n	800997c <__sflush_r+0x18>
 8009986:	2300      	movs	r3, #0
 8009988:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800998c:	682f      	ldr	r7, [r5, #0]
 800998e:	6a21      	ldr	r1, [r4, #32]
 8009990:	602b      	str	r3, [r5, #0]
 8009992:	d032      	beq.n	80099fa <__sflush_r+0x96>
 8009994:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009996:	89a3      	ldrh	r3, [r4, #12]
 8009998:	075a      	lsls	r2, r3, #29
 800999a:	d505      	bpl.n	80099a8 <__sflush_r+0x44>
 800999c:	6863      	ldr	r3, [r4, #4]
 800999e:	1ac0      	subs	r0, r0, r3
 80099a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099a2:	b10b      	cbz	r3, 80099a8 <__sflush_r+0x44>
 80099a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099a6:	1ac0      	subs	r0, r0, r3
 80099a8:	2300      	movs	r3, #0
 80099aa:	4602      	mov	r2, r0
 80099ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099ae:	4628      	mov	r0, r5
 80099b0:	6a21      	ldr	r1, [r4, #32]
 80099b2:	47b0      	blx	r6
 80099b4:	1c43      	adds	r3, r0, #1
 80099b6:	89a3      	ldrh	r3, [r4, #12]
 80099b8:	d106      	bne.n	80099c8 <__sflush_r+0x64>
 80099ba:	6829      	ldr	r1, [r5, #0]
 80099bc:	291d      	cmp	r1, #29
 80099be:	d82b      	bhi.n	8009a18 <__sflush_r+0xb4>
 80099c0:	4a28      	ldr	r2, [pc, #160]	; (8009a64 <__sflush_r+0x100>)
 80099c2:	410a      	asrs	r2, r1
 80099c4:	07d6      	lsls	r6, r2, #31
 80099c6:	d427      	bmi.n	8009a18 <__sflush_r+0xb4>
 80099c8:	2200      	movs	r2, #0
 80099ca:	6062      	str	r2, [r4, #4]
 80099cc:	6922      	ldr	r2, [r4, #16]
 80099ce:	04d9      	lsls	r1, r3, #19
 80099d0:	6022      	str	r2, [r4, #0]
 80099d2:	d504      	bpl.n	80099de <__sflush_r+0x7a>
 80099d4:	1c42      	adds	r2, r0, #1
 80099d6:	d101      	bne.n	80099dc <__sflush_r+0x78>
 80099d8:	682b      	ldr	r3, [r5, #0]
 80099da:	b903      	cbnz	r3, 80099de <__sflush_r+0x7a>
 80099dc:	6560      	str	r0, [r4, #84]	; 0x54
 80099de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099e0:	602f      	str	r7, [r5, #0]
 80099e2:	2900      	cmp	r1, #0
 80099e4:	d0ca      	beq.n	800997c <__sflush_r+0x18>
 80099e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099ea:	4299      	cmp	r1, r3
 80099ec:	d002      	beq.n	80099f4 <__sflush_r+0x90>
 80099ee:	4628      	mov	r0, r5
 80099f0:	f7fe fa2a 	bl	8007e48 <_free_r>
 80099f4:	2000      	movs	r0, #0
 80099f6:	6360      	str	r0, [r4, #52]	; 0x34
 80099f8:	e7c1      	b.n	800997e <__sflush_r+0x1a>
 80099fa:	2301      	movs	r3, #1
 80099fc:	4628      	mov	r0, r5
 80099fe:	47b0      	blx	r6
 8009a00:	1c41      	adds	r1, r0, #1
 8009a02:	d1c8      	bne.n	8009996 <__sflush_r+0x32>
 8009a04:	682b      	ldr	r3, [r5, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d0c5      	beq.n	8009996 <__sflush_r+0x32>
 8009a0a:	2b1d      	cmp	r3, #29
 8009a0c:	d001      	beq.n	8009a12 <__sflush_r+0xae>
 8009a0e:	2b16      	cmp	r3, #22
 8009a10:	d101      	bne.n	8009a16 <__sflush_r+0xb2>
 8009a12:	602f      	str	r7, [r5, #0]
 8009a14:	e7b2      	b.n	800997c <__sflush_r+0x18>
 8009a16:	89a3      	ldrh	r3, [r4, #12]
 8009a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a1c:	81a3      	strh	r3, [r4, #12]
 8009a1e:	e7ae      	b.n	800997e <__sflush_r+0x1a>
 8009a20:	690f      	ldr	r7, [r1, #16]
 8009a22:	2f00      	cmp	r7, #0
 8009a24:	d0aa      	beq.n	800997c <__sflush_r+0x18>
 8009a26:	0793      	lsls	r3, r2, #30
 8009a28:	bf18      	it	ne
 8009a2a:	2300      	movne	r3, #0
 8009a2c:	680e      	ldr	r6, [r1, #0]
 8009a2e:	bf08      	it	eq
 8009a30:	694b      	ldreq	r3, [r1, #20]
 8009a32:	1bf6      	subs	r6, r6, r7
 8009a34:	600f      	str	r7, [r1, #0]
 8009a36:	608b      	str	r3, [r1, #8]
 8009a38:	2e00      	cmp	r6, #0
 8009a3a:	dd9f      	ble.n	800997c <__sflush_r+0x18>
 8009a3c:	4633      	mov	r3, r6
 8009a3e:	463a      	mov	r2, r7
 8009a40:	4628      	mov	r0, r5
 8009a42:	6a21      	ldr	r1, [r4, #32]
 8009a44:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009a48:	47e0      	blx	ip
 8009a4a:	2800      	cmp	r0, #0
 8009a4c:	dc06      	bgt.n	8009a5c <__sflush_r+0xf8>
 8009a4e:	89a3      	ldrh	r3, [r4, #12]
 8009a50:	f04f 30ff 	mov.w	r0, #4294967295
 8009a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a58:	81a3      	strh	r3, [r4, #12]
 8009a5a:	e790      	b.n	800997e <__sflush_r+0x1a>
 8009a5c:	4407      	add	r7, r0
 8009a5e:	1a36      	subs	r6, r6, r0
 8009a60:	e7ea      	b.n	8009a38 <__sflush_r+0xd4>
 8009a62:	bf00      	nop
 8009a64:	dfbffffe 	.word	0xdfbffffe

08009a68 <_fflush_r>:
 8009a68:	b538      	push	{r3, r4, r5, lr}
 8009a6a:	690b      	ldr	r3, [r1, #16]
 8009a6c:	4605      	mov	r5, r0
 8009a6e:	460c      	mov	r4, r1
 8009a70:	b913      	cbnz	r3, 8009a78 <_fflush_r+0x10>
 8009a72:	2500      	movs	r5, #0
 8009a74:	4628      	mov	r0, r5
 8009a76:	bd38      	pop	{r3, r4, r5, pc}
 8009a78:	b118      	cbz	r0, 8009a82 <_fflush_r+0x1a>
 8009a7a:	6a03      	ldr	r3, [r0, #32]
 8009a7c:	b90b      	cbnz	r3, 8009a82 <_fflush_r+0x1a>
 8009a7e:	f7fd fa47 	bl	8006f10 <__sinit>
 8009a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d0f3      	beq.n	8009a72 <_fflush_r+0xa>
 8009a8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a8c:	07d0      	lsls	r0, r2, #31
 8009a8e:	d404      	bmi.n	8009a9a <_fflush_r+0x32>
 8009a90:	0599      	lsls	r1, r3, #22
 8009a92:	d402      	bmi.n	8009a9a <_fflush_r+0x32>
 8009a94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a96:	f7fd fb52 	bl	800713e <__retarget_lock_acquire_recursive>
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	4621      	mov	r1, r4
 8009a9e:	f7ff ff61 	bl	8009964 <__sflush_r>
 8009aa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009aa4:	4605      	mov	r5, r0
 8009aa6:	07da      	lsls	r2, r3, #31
 8009aa8:	d4e4      	bmi.n	8009a74 <_fflush_r+0xc>
 8009aaa:	89a3      	ldrh	r3, [r4, #12]
 8009aac:	059b      	lsls	r3, r3, #22
 8009aae:	d4e1      	bmi.n	8009a74 <_fflush_r+0xc>
 8009ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ab2:	f7fd fb45 	bl	8007140 <__retarget_lock_release_recursive>
 8009ab6:	e7dd      	b.n	8009a74 <_fflush_r+0xc>

08009ab8 <memmove>:
 8009ab8:	4288      	cmp	r0, r1
 8009aba:	b510      	push	{r4, lr}
 8009abc:	eb01 0402 	add.w	r4, r1, r2
 8009ac0:	d902      	bls.n	8009ac8 <memmove+0x10>
 8009ac2:	4284      	cmp	r4, r0
 8009ac4:	4623      	mov	r3, r4
 8009ac6:	d807      	bhi.n	8009ad8 <memmove+0x20>
 8009ac8:	1e43      	subs	r3, r0, #1
 8009aca:	42a1      	cmp	r1, r4
 8009acc:	d008      	beq.n	8009ae0 <memmove+0x28>
 8009ace:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ad2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ad6:	e7f8      	b.n	8009aca <memmove+0x12>
 8009ad8:	4601      	mov	r1, r0
 8009ada:	4402      	add	r2, r0
 8009adc:	428a      	cmp	r2, r1
 8009ade:	d100      	bne.n	8009ae2 <memmove+0x2a>
 8009ae0:	bd10      	pop	{r4, pc}
 8009ae2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ae6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009aea:	e7f7      	b.n	8009adc <memmove+0x24>

08009aec <strncmp>:
 8009aec:	b510      	push	{r4, lr}
 8009aee:	b16a      	cbz	r2, 8009b0c <strncmp+0x20>
 8009af0:	3901      	subs	r1, #1
 8009af2:	1884      	adds	r4, r0, r2
 8009af4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009af8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d103      	bne.n	8009b08 <strncmp+0x1c>
 8009b00:	42a0      	cmp	r0, r4
 8009b02:	d001      	beq.n	8009b08 <strncmp+0x1c>
 8009b04:	2a00      	cmp	r2, #0
 8009b06:	d1f5      	bne.n	8009af4 <strncmp+0x8>
 8009b08:	1ad0      	subs	r0, r2, r3
 8009b0a:	bd10      	pop	{r4, pc}
 8009b0c:	4610      	mov	r0, r2
 8009b0e:	e7fc      	b.n	8009b0a <strncmp+0x1e>

08009b10 <_sbrk_r>:
 8009b10:	b538      	push	{r3, r4, r5, lr}
 8009b12:	2300      	movs	r3, #0
 8009b14:	4d05      	ldr	r5, [pc, #20]	; (8009b2c <_sbrk_r+0x1c>)
 8009b16:	4604      	mov	r4, r0
 8009b18:	4608      	mov	r0, r1
 8009b1a:	602b      	str	r3, [r5, #0]
 8009b1c:	f7f8 fd1e 	bl	800255c <_sbrk>
 8009b20:	1c43      	adds	r3, r0, #1
 8009b22:	d102      	bne.n	8009b2a <_sbrk_r+0x1a>
 8009b24:	682b      	ldr	r3, [r5, #0]
 8009b26:	b103      	cbz	r3, 8009b2a <_sbrk_r+0x1a>
 8009b28:	6023      	str	r3, [r4, #0]
 8009b2a:	bd38      	pop	{r3, r4, r5, pc}
 8009b2c:	200004b8 	.word	0x200004b8

08009b30 <memcpy>:
 8009b30:	440a      	add	r2, r1
 8009b32:	4291      	cmp	r1, r2
 8009b34:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b38:	d100      	bne.n	8009b3c <memcpy+0xc>
 8009b3a:	4770      	bx	lr
 8009b3c:	b510      	push	{r4, lr}
 8009b3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b42:	4291      	cmp	r1, r2
 8009b44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b48:	d1f9      	bne.n	8009b3e <memcpy+0xe>
 8009b4a:	bd10      	pop	{r4, pc}

08009b4c <nan>:
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	4901      	ldr	r1, [pc, #4]	; (8009b54 <nan+0x8>)
 8009b50:	4770      	bx	lr
 8009b52:	bf00      	nop
 8009b54:	7ff80000 	.word	0x7ff80000

08009b58 <__assert_func>:
 8009b58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b5a:	4614      	mov	r4, r2
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	4b09      	ldr	r3, [pc, #36]	; (8009b84 <__assert_func+0x2c>)
 8009b60:	4605      	mov	r5, r0
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	68d8      	ldr	r0, [r3, #12]
 8009b66:	b14c      	cbz	r4, 8009b7c <__assert_func+0x24>
 8009b68:	4b07      	ldr	r3, [pc, #28]	; (8009b88 <__assert_func+0x30>)
 8009b6a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b6e:	9100      	str	r1, [sp, #0]
 8009b70:	462b      	mov	r3, r5
 8009b72:	4906      	ldr	r1, [pc, #24]	; (8009b8c <__assert_func+0x34>)
 8009b74:	f000 fbca 	bl	800a30c <fiprintf>
 8009b78:	f000 fbda 	bl	800a330 <abort>
 8009b7c:	4b04      	ldr	r3, [pc, #16]	; (8009b90 <__assert_func+0x38>)
 8009b7e:	461c      	mov	r4, r3
 8009b80:	e7f3      	b.n	8009b6a <__assert_func+0x12>
 8009b82:	bf00      	nop
 8009b84:	2000006c 	.word	0x2000006c
 8009b88:	0800aca2 	.word	0x0800aca2
 8009b8c:	0800acaf 	.word	0x0800acaf
 8009b90:	0800acdd 	.word	0x0800acdd

08009b94 <_calloc_r>:
 8009b94:	b570      	push	{r4, r5, r6, lr}
 8009b96:	fba1 5402 	umull	r5, r4, r1, r2
 8009b9a:	b934      	cbnz	r4, 8009baa <_calloc_r+0x16>
 8009b9c:	4629      	mov	r1, r5
 8009b9e:	f7fe f9c3 	bl	8007f28 <_malloc_r>
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	b928      	cbnz	r0, 8009bb2 <_calloc_r+0x1e>
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	bd70      	pop	{r4, r5, r6, pc}
 8009baa:	220c      	movs	r2, #12
 8009bac:	2600      	movs	r6, #0
 8009bae:	6002      	str	r2, [r0, #0]
 8009bb0:	e7f9      	b.n	8009ba6 <_calloc_r+0x12>
 8009bb2:	462a      	mov	r2, r5
 8009bb4:	4621      	mov	r1, r4
 8009bb6:	f7fd fa44 	bl	8007042 <memset>
 8009bba:	e7f4      	b.n	8009ba6 <_calloc_r+0x12>

08009bbc <rshift>:
 8009bbc:	6903      	ldr	r3, [r0, #16]
 8009bbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bc2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009bc6:	f100 0414 	add.w	r4, r0, #20
 8009bca:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009bce:	dd46      	ble.n	8009c5e <rshift+0xa2>
 8009bd0:	f011 011f 	ands.w	r1, r1, #31
 8009bd4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009bd8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009bdc:	d10c      	bne.n	8009bf8 <rshift+0x3c>
 8009bde:	4629      	mov	r1, r5
 8009be0:	f100 0710 	add.w	r7, r0, #16
 8009be4:	42b1      	cmp	r1, r6
 8009be6:	d335      	bcc.n	8009c54 <rshift+0x98>
 8009be8:	1a9b      	subs	r3, r3, r2
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	1eea      	subs	r2, r5, #3
 8009bee:	4296      	cmp	r6, r2
 8009bf0:	bf38      	it	cc
 8009bf2:	2300      	movcc	r3, #0
 8009bf4:	4423      	add	r3, r4
 8009bf6:	e015      	b.n	8009c24 <rshift+0x68>
 8009bf8:	46a1      	mov	r9, r4
 8009bfa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009bfe:	f1c1 0820 	rsb	r8, r1, #32
 8009c02:	40cf      	lsrs	r7, r1
 8009c04:	f105 0e04 	add.w	lr, r5, #4
 8009c08:	4576      	cmp	r6, lr
 8009c0a:	46f4      	mov	ip, lr
 8009c0c:	d816      	bhi.n	8009c3c <rshift+0x80>
 8009c0e:	1a9a      	subs	r2, r3, r2
 8009c10:	0092      	lsls	r2, r2, #2
 8009c12:	3a04      	subs	r2, #4
 8009c14:	3501      	adds	r5, #1
 8009c16:	42ae      	cmp	r6, r5
 8009c18:	bf38      	it	cc
 8009c1a:	2200      	movcc	r2, #0
 8009c1c:	18a3      	adds	r3, r4, r2
 8009c1e:	50a7      	str	r7, [r4, r2]
 8009c20:	b107      	cbz	r7, 8009c24 <rshift+0x68>
 8009c22:	3304      	adds	r3, #4
 8009c24:	42a3      	cmp	r3, r4
 8009c26:	eba3 0204 	sub.w	r2, r3, r4
 8009c2a:	bf08      	it	eq
 8009c2c:	2300      	moveq	r3, #0
 8009c2e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009c32:	6102      	str	r2, [r0, #16]
 8009c34:	bf08      	it	eq
 8009c36:	6143      	streq	r3, [r0, #20]
 8009c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c3c:	f8dc c000 	ldr.w	ip, [ip]
 8009c40:	fa0c fc08 	lsl.w	ip, ip, r8
 8009c44:	ea4c 0707 	orr.w	r7, ip, r7
 8009c48:	f849 7b04 	str.w	r7, [r9], #4
 8009c4c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009c50:	40cf      	lsrs	r7, r1
 8009c52:	e7d9      	b.n	8009c08 <rshift+0x4c>
 8009c54:	f851 cb04 	ldr.w	ip, [r1], #4
 8009c58:	f847 cf04 	str.w	ip, [r7, #4]!
 8009c5c:	e7c2      	b.n	8009be4 <rshift+0x28>
 8009c5e:	4623      	mov	r3, r4
 8009c60:	e7e0      	b.n	8009c24 <rshift+0x68>

08009c62 <__hexdig_fun>:
 8009c62:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009c66:	2b09      	cmp	r3, #9
 8009c68:	d802      	bhi.n	8009c70 <__hexdig_fun+0xe>
 8009c6a:	3820      	subs	r0, #32
 8009c6c:	b2c0      	uxtb	r0, r0
 8009c6e:	4770      	bx	lr
 8009c70:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009c74:	2b05      	cmp	r3, #5
 8009c76:	d801      	bhi.n	8009c7c <__hexdig_fun+0x1a>
 8009c78:	3847      	subs	r0, #71	; 0x47
 8009c7a:	e7f7      	b.n	8009c6c <__hexdig_fun+0xa>
 8009c7c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009c80:	2b05      	cmp	r3, #5
 8009c82:	d801      	bhi.n	8009c88 <__hexdig_fun+0x26>
 8009c84:	3827      	subs	r0, #39	; 0x27
 8009c86:	e7f1      	b.n	8009c6c <__hexdig_fun+0xa>
 8009c88:	2000      	movs	r0, #0
 8009c8a:	4770      	bx	lr

08009c8c <__gethex>:
 8009c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c90:	4681      	mov	r9, r0
 8009c92:	468a      	mov	sl, r1
 8009c94:	4617      	mov	r7, r2
 8009c96:	680a      	ldr	r2, [r1, #0]
 8009c98:	b085      	sub	sp, #20
 8009c9a:	f102 0b02 	add.w	fp, r2, #2
 8009c9e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009ca2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009ca6:	9302      	str	r3, [sp, #8]
 8009ca8:	32fe      	adds	r2, #254	; 0xfe
 8009caa:	eb02 030b 	add.w	r3, r2, fp
 8009cae:	46d8      	mov	r8, fp
 8009cb0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009cb4:	9301      	str	r3, [sp, #4]
 8009cb6:	2830      	cmp	r0, #48	; 0x30
 8009cb8:	d0f7      	beq.n	8009caa <__gethex+0x1e>
 8009cba:	f7ff ffd2 	bl	8009c62 <__hexdig_fun>
 8009cbe:	4604      	mov	r4, r0
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	d138      	bne.n	8009d36 <__gethex+0xaa>
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	4640      	mov	r0, r8
 8009cc8:	49a7      	ldr	r1, [pc, #668]	; (8009f68 <__gethex+0x2dc>)
 8009cca:	f7ff ff0f 	bl	8009aec <strncmp>
 8009cce:	4606      	mov	r6, r0
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	d169      	bne.n	8009da8 <__gethex+0x11c>
 8009cd4:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009cd8:	465d      	mov	r5, fp
 8009cda:	f7ff ffc2 	bl	8009c62 <__hexdig_fun>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d064      	beq.n	8009dac <__gethex+0x120>
 8009ce2:	465a      	mov	r2, fp
 8009ce4:	7810      	ldrb	r0, [r2, #0]
 8009ce6:	4690      	mov	r8, r2
 8009ce8:	2830      	cmp	r0, #48	; 0x30
 8009cea:	f102 0201 	add.w	r2, r2, #1
 8009cee:	d0f9      	beq.n	8009ce4 <__gethex+0x58>
 8009cf0:	f7ff ffb7 	bl	8009c62 <__hexdig_fun>
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	fab0 f480 	clz	r4, r0
 8009cfa:	465e      	mov	r6, fp
 8009cfc:	0964      	lsrs	r4, r4, #5
 8009cfe:	9301      	str	r3, [sp, #4]
 8009d00:	4642      	mov	r2, r8
 8009d02:	4615      	mov	r5, r2
 8009d04:	7828      	ldrb	r0, [r5, #0]
 8009d06:	3201      	adds	r2, #1
 8009d08:	f7ff ffab 	bl	8009c62 <__hexdig_fun>
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	d1f8      	bne.n	8009d02 <__gethex+0x76>
 8009d10:	2201      	movs	r2, #1
 8009d12:	4628      	mov	r0, r5
 8009d14:	4994      	ldr	r1, [pc, #592]	; (8009f68 <__gethex+0x2dc>)
 8009d16:	f7ff fee9 	bl	8009aec <strncmp>
 8009d1a:	b978      	cbnz	r0, 8009d3c <__gethex+0xb0>
 8009d1c:	b946      	cbnz	r6, 8009d30 <__gethex+0xa4>
 8009d1e:	1c6e      	adds	r6, r5, #1
 8009d20:	4632      	mov	r2, r6
 8009d22:	4615      	mov	r5, r2
 8009d24:	7828      	ldrb	r0, [r5, #0]
 8009d26:	3201      	adds	r2, #1
 8009d28:	f7ff ff9b 	bl	8009c62 <__hexdig_fun>
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	d1f8      	bne.n	8009d22 <__gethex+0x96>
 8009d30:	1b73      	subs	r3, r6, r5
 8009d32:	009e      	lsls	r6, r3, #2
 8009d34:	e004      	b.n	8009d40 <__gethex+0xb4>
 8009d36:	2400      	movs	r4, #0
 8009d38:	4626      	mov	r6, r4
 8009d3a:	e7e1      	b.n	8009d00 <__gethex+0x74>
 8009d3c:	2e00      	cmp	r6, #0
 8009d3e:	d1f7      	bne.n	8009d30 <__gethex+0xa4>
 8009d40:	782b      	ldrb	r3, [r5, #0]
 8009d42:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009d46:	2b50      	cmp	r3, #80	; 0x50
 8009d48:	d13d      	bne.n	8009dc6 <__gethex+0x13a>
 8009d4a:	786b      	ldrb	r3, [r5, #1]
 8009d4c:	2b2b      	cmp	r3, #43	; 0x2b
 8009d4e:	d02f      	beq.n	8009db0 <__gethex+0x124>
 8009d50:	2b2d      	cmp	r3, #45	; 0x2d
 8009d52:	d031      	beq.n	8009db8 <__gethex+0x12c>
 8009d54:	f04f 0b00 	mov.w	fp, #0
 8009d58:	1c69      	adds	r1, r5, #1
 8009d5a:	7808      	ldrb	r0, [r1, #0]
 8009d5c:	f7ff ff81 	bl	8009c62 <__hexdig_fun>
 8009d60:	1e42      	subs	r2, r0, #1
 8009d62:	b2d2      	uxtb	r2, r2
 8009d64:	2a18      	cmp	r2, #24
 8009d66:	d82e      	bhi.n	8009dc6 <__gethex+0x13a>
 8009d68:	f1a0 0210 	sub.w	r2, r0, #16
 8009d6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009d70:	f7ff ff77 	bl	8009c62 <__hexdig_fun>
 8009d74:	f100 3cff 	add.w	ip, r0, #4294967295
 8009d78:	fa5f fc8c 	uxtb.w	ip, ip
 8009d7c:	f1bc 0f18 	cmp.w	ip, #24
 8009d80:	d91d      	bls.n	8009dbe <__gethex+0x132>
 8009d82:	f1bb 0f00 	cmp.w	fp, #0
 8009d86:	d000      	beq.n	8009d8a <__gethex+0xfe>
 8009d88:	4252      	negs	r2, r2
 8009d8a:	4416      	add	r6, r2
 8009d8c:	f8ca 1000 	str.w	r1, [sl]
 8009d90:	b1dc      	cbz	r4, 8009dca <__gethex+0x13e>
 8009d92:	9b01      	ldr	r3, [sp, #4]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	bf14      	ite	ne
 8009d98:	f04f 0800 	movne.w	r8, #0
 8009d9c:	f04f 0806 	moveq.w	r8, #6
 8009da0:	4640      	mov	r0, r8
 8009da2:	b005      	add	sp, #20
 8009da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da8:	4645      	mov	r5, r8
 8009daa:	4626      	mov	r6, r4
 8009dac:	2401      	movs	r4, #1
 8009dae:	e7c7      	b.n	8009d40 <__gethex+0xb4>
 8009db0:	f04f 0b00 	mov.w	fp, #0
 8009db4:	1ca9      	adds	r1, r5, #2
 8009db6:	e7d0      	b.n	8009d5a <__gethex+0xce>
 8009db8:	f04f 0b01 	mov.w	fp, #1
 8009dbc:	e7fa      	b.n	8009db4 <__gethex+0x128>
 8009dbe:	230a      	movs	r3, #10
 8009dc0:	fb03 0002 	mla	r0, r3, r2, r0
 8009dc4:	e7d0      	b.n	8009d68 <__gethex+0xdc>
 8009dc6:	4629      	mov	r1, r5
 8009dc8:	e7e0      	b.n	8009d8c <__gethex+0x100>
 8009dca:	4621      	mov	r1, r4
 8009dcc:	eba5 0308 	sub.w	r3, r5, r8
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	2b07      	cmp	r3, #7
 8009dd4:	dc0a      	bgt.n	8009dec <__gethex+0x160>
 8009dd6:	4648      	mov	r0, r9
 8009dd8:	f7fe f932 	bl	8008040 <_Balloc>
 8009ddc:	4604      	mov	r4, r0
 8009dde:	b940      	cbnz	r0, 8009df2 <__gethex+0x166>
 8009de0:	4602      	mov	r2, r0
 8009de2:	21e4      	movs	r1, #228	; 0xe4
 8009de4:	4b61      	ldr	r3, [pc, #388]	; (8009f6c <__gethex+0x2e0>)
 8009de6:	4862      	ldr	r0, [pc, #392]	; (8009f70 <__gethex+0x2e4>)
 8009de8:	f7ff feb6 	bl	8009b58 <__assert_func>
 8009dec:	3101      	adds	r1, #1
 8009dee:	105b      	asrs	r3, r3, #1
 8009df0:	e7ef      	b.n	8009dd2 <__gethex+0x146>
 8009df2:	2300      	movs	r3, #0
 8009df4:	469b      	mov	fp, r3
 8009df6:	f100 0a14 	add.w	sl, r0, #20
 8009dfa:	f8cd a004 	str.w	sl, [sp, #4]
 8009dfe:	45a8      	cmp	r8, r5
 8009e00:	d344      	bcc.n	8009e8c <__gethex+0x200>
 8009e02:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009e06:	4658      	mov	r0, fp
 8009e08:	f848 bb04 	str.w	fp, [r8], #4
 8009e0c:	eba8 080a 	sub.w	r8, r8, sl
 8009e10:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8009e14:	6122      	str	r2, [r4, #16]
 8009e16:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8009e1a:	f7fe fa03 	bl	8008224 <__hi0bits>
 8009e1e:	683d      	ldr	r5, [r7, #0]
 8009e20:	eba8 0800 	sub.w	r8, r8, r0
 8009e24:	45a8      	cmp	r8, r5
 8009e26:	dd59      	ble.n	8009edc <__gethex+0x250>
 8009e28:	eba8 0805 	sub.w	r8, r8, r5
 8009e2c:	4641      	mov	r1, r8
 8009e2e:	4620      	mov	r0, r4
 8009e30:	f7fe fd81 	bl	8008936 <__any_on>
 8009e34:	4683      	mov	fp, r0
 8009e36:	b1b8      	cbz	r0, 8009e68 <__gethex+0x1dc>
 8009e38:	f04f 0b01 	mov.w	fp, #1
 8009e3c:	f108 33ff 	add.w	r3, r8, #4294967295
 8009e40:	1159      	asrs	r1, r3, #5
 8009e42:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009e46:	f003 021f 	and.w	r2, r3, #31
 8009e4a:	fa0b f202 	lsl.w	r2, fp, r2
 8009e4e:	420a      	tst	r2, r1
 8009e50:	d00a      	beq.n	8009e68 <__gethex+0x1dc>
 8009e52:	455b      	cmp	r3, fp
 8009e54:	dd06      	ble.n	8009e64 <__gethex+0x1d8>
 8009e56:	4620      	mov	r0, r4
 8009e58:	f1a8 0102 	sub.w	r1, r8, #2
 8009e5c:	f7fe fd6b 	bl	8008936 <__any_on>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	d138      	bne.n	8009ed6 <__gethex+0x24a>
 8009e64:	f04f 0b02 	mov.w	fp, #2
 8009e68:	4641      	mov	r1, r8
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f7ff fea6 	bl	8009bbc <rshift>
 8009e70:	4446      	add	r6, r8
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	42b3      	cmp	r3, r6
 8009e76:	da41      	bge.n	8009efc <__gethex+0x270>
 8009e78:	4621      	mov	r1, r4
 8009e7a:	4648      	mov	r0, r9
 8009e7c:	f7fe f920 	bl	80080c0 <_Bfree>
 8009e80:	2300      	movs	r3, #0
 8009e82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e84:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009e88:	6013      	str	r3, [r2, #0]
 8009e8a:	e789      	b.n	8009da0 <__gethex+0x114>
 8009e8c:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009e90:	2a2e      	cmp	r2, #46	; 0x2e
 8009e92:	d014      	beq.n	8009ebe <__gethex+0x232>
 8009e94:	2b20      	cmp	r3, #32
 8009e96:	d106      	bne.n	8009ea6 <__gethex+0x21a>
 8009e98:	9b01      	ldr	r3, [sp, #4]
 8009e9a:	f843 bb04 	str.w	fp, [r3], #4
 8009e9e:	f04f 0b00 	mov.w	fp, #0
 8009ea2:	9301      	str	r3, [sp, #4]
 8009ea4:	465b      	mov	r3, fp
 8009ea6:	7828      	ldrb	r0, [r5, #0]
 8009ea8:	9303      	str	r3, [sp, #12]
 8009eaa:	f7ff feda 	bl	8009c62 <__hexdig_fun>
 8009eae:	9b03      	ldr	r3, [sp, #12]
 8009eb0:	f000 000f 	and.w	r0, r0, #15
 8009eb4:	4098      	lsls	r0, r3
 8009eb6:	ea4b 0b00 	orr.w	fp, fp, r0
 8009eba:	3304      	adds	r3, #4
 8009ebc:	e79f      	b.n	8009dfe <__gethex+0x172>
 8009ebe:	45a8      	cmp	r8, r5
 8009ec0:	d8e8      	bhi.n	8009e94 <__gethex+0x208>
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	4628      	mov	r0, r5
 8009ec6:	4928      	ldr	r1, [pc, #160]	; (8009f68 <__gethex+0x2dc>)
 8009ec8:	9303      	str	r3, [sp, #12]
 8009eca:	f7ff fe0f 	bl	8009aec <strncmp>
 8009ece:	9b03      	ldr	r3, [sp, #12]
 8009ed0:	2800      	cmp	r0, #0
 8009ed2:	d1df      	bne.n	8009e94 <__gethex+0x208>
 8009ed4:	e793      	b.n	8009dfe <__gethex+0x172>
 8009ed6:	f04f 0b03 	mov.w	fp, #3
 8009eda:	e7c5      	b.n	8009e68 <__gethex+0x1dc>
 8009edc:	da0b      	bge.n	8009ef6 <__gethex+0x26a>
 8009ede:	eba5 0808 	sub.w	r8, r5, r8
 8009ee2:	4621      	mov	r1, r4
 8009ee4:	4642      	mov	r2, r8
 8009ee6:	4648      	mov	r0, r9
 8009ee8:	f7fe fb02 	bl	80084f0 <__lshift>
 8009eec:	4604      	mov	r4, r0
 8009eee:	eba6 0608 	sub.w	r6, r6, r8
 8009ef2:	f100 0a14 	add.w	sl, r0, #20
 8009ef6:	f04f 0b00 	mov.w	fp, #0
 8009efa:	e7ba      	b.n	8009e72 <__gethex+0x1e6>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	42b3      	cmp	r3, r6
 8009f00:	dd74      	ble.n	8009fec <__gethex+0x360>
 8009f02:	1b9e      	subs	r6, r3, r6
 8009f04:	42b5      	cmp	r5, r6
 8009f06:	dc35      	bgt.n	8009f74 <__gethex+0x2e8>
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d023      	beq.n	8009f56 <__gethex+0x2ca>
 8009f0e:	2b03      	cmp	r3, #3
 8009f10:	d025      	beq.n	8009f5e <__gethex+0x2d2>
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d115      	bne.n	8009f42 <__gethex+0x2b6>
 8009f16:	42b5      	cmp	r5, r6
 8009f18:	d113      	bne.n	8009f42 <__gethex+0x2b6>
 8009f1a:	2d01      	cmp	r5, #1
 8009f1c:	d10b      	bne.n	8009f36 <__gethex+0x2aa>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	9a02      	ldr	r2, [sp, #8]
 8009f22:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009f26:	6013      	str	r3, [r2, #0]
 8009f28:	2301      	movs	r3, #1
 8009f2a:	6123      	str	r3, [r4, #16]
 8009f2c:	f8ca 3000 	str.w	r3, [sl]
 8009f30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f32:	601c      	str	r4, [r3, #0]
 8009f34:	e734      	b.n	8009da0 <__gethex+0x114>
 8009f36:	4620      	mov	r0, r4
 8009f38:	1e69      	subs	r1, r5, #1
 8009f3a:	f7fe fcfc 	bl	8008936 <__any_on>
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	d1ed      	bne.n	8009f1e <__gethex+0x292>
 8009f42:	4621      	mov	r1, r4
 8009f44:	4648      	mov	r0, r9
 8009f46:	f7fe f8bb 	bl	80080c0 <_Bfree>
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f4e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009f52:	6013      	str	r3, [r2, #0]
 8009f54:	e724      	b.n	8009da0 <__gethex+0x114>
 8009f56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d1f2      	bne.n	8009f42 <__gethex+0x2b6>
 8009f5c:	e7df      	b.n	8009f1e <__gethex+0x292>
 8009f5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d1dc      	bne.n	8009f1e <__gethex+0x292>
 8009f64:	e7ed      	b.n	8009f42 <__gethex+0x2b6>
 8009f66:	bf00      	nop
 8009f68:	0800ab34 	.word	0x0800ab34
 8009f6c:	0800a9cb 	.word	0x0800a9cb
 8009f70:	0800acde 	.word	0x0800acde
 8009f74:	f106 38ff 	add.w	r8, r6, #4294967295
 8009f78:	f1bb 0f00 	cmp.w	fp, #0
 8009f7c:	d133      	bne.n	8009fe6 <__gethex+0x35a>
 8009f7e:	f1b8 0f00 	cmp.w	r8, #0
 8009f82:	d004      	beq.n	8009f8e <__gethex+0x302>
 8009f84:	4641      	mov	r1, r8
 8009f86:	4620      	mov	r0, r4
 8009f88:	f7fe fcd5 	bl	8008936 <__any_on>
 8009f8c:	4683      	mov	fp, r0
 8009f8e:	2301      	movs	r3, #1
 8009f90:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009f94:	f008 081f 	and.w	r8, r8, #31
 8009f98:	fa03 f308 	lsl.w	r3, r3, r8
 8009f9c:	f04f 0802 	mov.w	r8, #2
 8009fa0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009fa4:	4631      	mov	r1, r6
 8009fa6:	4213      	tst	r3, r2
 8009fa8:	4620      	mov	r0, r4
 8009faa:	bf18      	it	ne
 8009fac:	f04b 0b02 	orrne.w	fp, fp, #2
 8009fb0:	1bad      	subs	r5, r5, r6
 8009fb2:	f7ff fe03 	bl	8009bbc <rshift>
 8009fb6:	687e      	ldr	r6, [r7, #4]
 8009fb8:	f1bb 0f00 	cmp.w	fp, #0
 8009fbc:	d04a      	beq.n	800a054 <__gethex+0x3c8>
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d016      	beq.n	8009ff2 <__gethex+0x366>
 8009fc4:	2b03      	cmp	r3, #3
 8009fc6:	d018      	beq.n	8009ffa <__gethex+0x36e>
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d109      	bne.n	8009fe0 <__gethex+0x354>
 8009fcc:	f01b 0f02 	tst.w	fp, #2
 8009fd0:	d006      	beq.n	8009fe0 <__gethex+0x354>
 8009fd2:	f8da 3000 	ldr.w	r3, [sl]
 8009fd6:	ea4b 0b03 	orr.w	fp, fp, r3
 8009fda:	f01b 0f01 	tst.w	fp, #1
 8009fde:	d10f      	bne.n	800a000 <__gethex+0x374>
 8009fe0:	f048 0810 	orr.w	r8, r8, #16
 8009fe4:	e036      	b.n	800a054 <__gethex+0x3c8>
 8009fe6:	f04f 0b01 	mov.w	fp, #1
 8009fea:	e7d0      	b.n	8009f8e <__gethex+0x302>
 8009fec:	f04f 0801 	mov.w	r8, #1
 8009ff0:	e7e2      	b.n	8009fb8 <__gethex+0x32c>
 8009ff2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ff4:	f1c3 0301 	rsb	r3, r3, #1
 8009ff8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ffa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d0ef      	beq.n	8009fe0 <__gethex+0x354>
 800a000:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a004:	f104 0214 	add.w	r2, r4, #20
 800a008:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a00c:	9301      	str	r3, [sp, #4]
 800a00e:	2300      	movs	r3, #0
 800a010:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a014:	4694      	mov	ip, r2
 800a016:	f852 1b04 	ldr.w	r1, [r2], #4
 800a01a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a01e:	d01e      	beq.n	800a05e <__gethex+0x3d2>
 800a020:	3101      	adds	r1, #1
 800a022:	f8cc 1000 	str.w	r1, [ip]
 800a026:	f1b8 0f02 	cmp.w	r8, #2
 800a02a:	f104 0214 	add.w	r2, r4, #20
 800a02e:	d13d      	bne.n	800a0ac <__gethex+0x420>
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	3b01      	subs	r3, #1
 800a034:	42ab      	cmp	r3, r5
 800a036:	d10b      	bne.n	800a050 <__gethex+0x3c4>
 800a038:	2301      	movs	r3, #1
 800a03a:	1169      	asrs	r1, r5, #5
 800a03c:	f005 051f 	and.w	r5, r5, #31
 800a040:	fa03 f505 	lsl.w	r5, r3, r5
 800a044:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a048:	421d      	tst	r5, r3
 800a04a:	bf18      	it	ne
 800a04c:	f04f 0801 	movne.w	r8, #1
 800a050:	f048 0820 	orr.w	r8, r8, #32
 800a054:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a056:	601c      	str	r4, [r3, #0]
 800a058:	9b02      	ldr	r3, [sp, #8]
 800a05a:	601e      	str	r6, [r3, #0]
 800a05c:	e6a0      	b.n	8009da0 <__gethex+0x114>
 800a05e:	4290      	cmp	r0, r2
 800a060:	f842 3c04 	str.w	r3, [r2, #-4]
 800a064:	d8d6      	bhi.n	800a014 <__gethex+0x388>
 800a066:	68a2      	ldr	r2, [r4, #8]
 800a068:	4593      	cmp	fp, r2
 800a06a:	db17      	blt.n	800a09c <__gethex+0x410>
 800a06c:	6861      	ldr	r1, [r4, #4]
 800a06e:	4648      	mov	r0, r9
 800a070:	3101      	adds	r1, #1
 800a072:	f7fd ffe5 	bl	8008040 <_Balloc>
 800a076:	4682      	mov	sl, r0
 800a078:	b918      	cbnz	r0, 800a082 <__gethex+0x3f6>
 800a07a:	4602      	mov	r2, r0
 800a07c:	2184      	movs	r1, #132	; 0x84
 800a07e:	4b1a      	ldr	r3, [pc, #104]	; (800a0e8 <__gethex+0x45c>)
 800a080:	e6b1      	b.n	8009de6 <__gethex+0x15a>
 800a082:	6922      	ldr	r2, [r4, #16]
 800a084:	f104 010c 	add.w	r1, r4, #12
 800a088:	3202      	adds	r2, #2
 800a08a:	0092      	lsls	r2, r2, #2
 800a08c:	300c      	adds	r0, #12
 800a08e:	f7ff fd4f 	bl	8009b30 <memcpy>
 800a092:	4621      	mov	r1, r4
 800a094:	4648      	mov	r0, r9
 800a096:	f7fe f813 	bl	80080c0 <_Bfree>
 800a09a:	4654      	mov	r4, sl
 800a09c:	6922      	ldr	r2, [r4, #16]
 800a09e:	1c51      	adds	r1, r2, #1
 800a0a0:	6121      	str	r1, [r4, #16]
 800a0a2:	2101      	movs	r1, #1
 800a0a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a0a8:	6151      	str	r1, [r2, #20]
 800a0aa:	e7bc      	b.n	800a026 <__gethex+0x39a>
 800a0ac:	6921      	ldr	r1, [r4, #16]
 800a0ae:	4559      	cmp	r1, fp
 800a0b0:	dd0b      	ble.n	800a0ca <__gethex+0x43e>
 800a0b2:	2101      	movs	r1, #1
 800a0b4:	4620      	mov	r0, r4
 800a0b6:	f7ff fd81 	bl	8009bbc <rshift>
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	3601      	adds	r6, #1
 800a0be:	42b3      	cmp	r3, r6
 800a0c0:	f6ff aeda 	blt.w	8009e78 <__gethex+0x1ec>
 800a0c4:	f04f 0801 	mov.w	r8, #1
 800a0c8:	e7c2      	b.n	800a050 <__gethex+0x3c4>
 800a0ca:	f015 051f 	ands.w	r5, r5, #31
 800a0ce:	d0f9      	beq.n	800a0c4 <__gethex+0x438>
 800a0d0:	9b01      	ldr	r3, [sp, #4]
 800a0d2:	f1c5 0520 	rsb	r5, r5, #32
 800a0d6:	441a      	add	r2, r3
 800a0d8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a0dc:	f7fe f8a2 	bl	8008224 <__hi0bits>
 800a0e0:	42a8      	cmp	r0, r5
 800a0e2:	dbe6      	blt.n	800a0b2 <__gethex+0x426>
 800a0e4:	e7ee      	b.n	800a0c4 <__gethex+0x438>
 800a0e6:	bf00      	nop
 800a0e8:	0800a9cb 	.word	0x0800a9cb

0800a0ec <L_shift>:
 800a0ec:	f1c2 0208 	rsb	r2, r2, #8
 800a0f0:	0092      	lsls	r2, r2, #2
 800a0f2:	b570      	push	{r4, r5, r6, lr}
 800a0f4:	f1c2 0620 	rsb	r6, r2, #32
 800a0f8:	6843      	ldr	r3, [r0, #4]
 800a0fa:	6804      	ldr	r4, [r0, #0]
 800a0fc:	fa03 f506 	lsl.w	r5, r3, r6
 800a100:	432c      	orrs	r4, r5
 800a102:	40d3      	lsrs	r3, r2
 800a104:	6004      	str	r4, [r0, #0]
 800a106:	f840 3f04 	str.w	r3, [r0, #4]!
 800a10a:	4288      	cmp	r0, r1
 800a10c:	d3f4      	bcc.n	800a0f8 <L_shift+0xc>
 800a10e:	bd70      	pop	{r4, r5, r6, pc}

0800a110 <__match>:
 800a110:	b530      	push	{r4, r5, lr}
 800a112:	6803      	ldr	r3, [r0, #0]
 800a114:	3301      	adds	r3, #1
 800a116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a11a:	b914      	cbnz	r4, 800a122 <__match+0x12>
 800a11c:	6003      	str	r3, [r0, #0]
 800a11e:	2001      	movs	r0, #1
 800a120:	bd30      	pop	{r4, r5, pc}
 800a122:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a126:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a12a:	2d19      	cmp	r5, #25
 800a12c:	bf98      	it	ls
 800a12e:	3220      	addls	r2, #32
 800a130:	42a2      	cmp	r2, r4
 800a132:	d0f0      	beq.n	800a116 <__match+0x6>
 800a134:	2000      	movs	r0, #0
 800a136:	e7f3      	b.n	800a120 <__match+0x10>

0800a138 <__hexnan>:
 800a138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a13c:	2500      	movs	r5, #0
 800a13e:	680b      	ldr	r3, [r1, #0]
 800a140:	4682      	mov	sl, r0
 800a142:	115e      	asrs	r6, r3, #5
 800a144:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a148:	f013 031f 	ands.w	r3, r3, #31
 800a14c:	bf18      	it	ne
 800a14e:	3604      	addne	r6, #4
 800a150:	1f37      	subs	r7, r6, #4
 800a152:	4690      	mov	r8, r2
 800a154:	46b9      	mov	r9, r7
 800a156:	463c      	mov	r4, r7
 800a158:	46ab      	mov	fp, r5
 800a15a:	b087      	sub	sp, #28
 800a15c:	6801      	ldr	r1, [r0, #0]
 800a15e:	9301      	str	r3, [sp, #4]
 800a160:	f846 5c04 	str.w	r5, [r6, #-4]
 800a164:	9502      	str	r5, [sp, #8]
 800a166:	784a      	ldrb	r2, [r1, #1]
 800a168:	1c4b      	adds	r3, r1, #1
 800a16a:	9303      	str	r3, [sp, #12]
 800a16c:	b342      	cbz	r2, 800a1c0 <__hexnan+0x88>
 800a16e:	4610      	mov	r0, r2
 800a170:	9105      	str	r1, [sp, #20]
 800a172:	9204      	str	r2, [sp, #16]
 800a174:	f7ff fd75 	bl	8009c62 <__hexdig_fun>
 800a178:	2800      	cmp	r0, #0
 800a17a:	d14f      	bne.n	800a21c <__hexnan+0xe4>
 800a17c:	9a04      	ldr	r2, [sp, #16]
 800a17e:	9905      	ldr	r1, [sp, #20]
 800a180:	2a20      	cmp	r2, #32
 800a182:	d818      	bhi.n	800a1b6 <__hexnan+0x7e>
 800a184:	9b02      	ldr	r3, [sp, #8]
 800a186:	459b      	cmp	fp, r3
 800a188:	dd13      	ble.n	800a1b2 <__hexnan+0x7a>
 800a18a:	454c      	cmp	r4, r9
 800a18c:	d206      	bcs.n	800a19c <__hexnan+0x64>
 800a18e:	2d07      	cmp	r5, #7
 800a190:	dc04      	bgt.n	800a19c <__hexnan+0x64>
 800a192:	462a      	mov	r2, r5
 800a194:	4649      	mov	r1, r9
 800a196:	4620      	mov	r0, r4
 800a198:	f7ff ffa8 	bl	800a0ec <L_shift>
 800a19c:	4544      	cmp	r4, r8
 800a19e:	d950      	bls.n	800a242 <__hexnan+0x10a>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	f1a4 0904 	sub.w	r9, r4, #4
 800a1a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a1aa:	461d      	mov	r5, r3
 800a1ac:	464c      	mov	r4, r9
 800a1ae:	f8cd b008 	str.w	fp, [sp, #8]
 800a1b2:	9903      	ldr	r1, [sp, #12]
 800a1b4:	e7d7      	b.n	800a166 <__hexnan+0x2e>
 800a1b6:	2a29      	cmp	r2, #41	; 0x29
 800a1b8:	d155      	bne.n	800a266 <__hexnan+0x12e>
 800a1ba:	3102      	adds	r1, #2
 800a1bc:	f8ca 1000 	str.w	r1, [sl]
 800a1c0:	f1bb 0f00 	cmp.w	fp, #0
 800a1c4:	d04f      	beq.n	800a266 <__hexnan+0x12e>
 800a1c6:	454c      	cmp	r4, r9
 800a1c8:	d206      	bcs.n	800a1d8 <__hexnan+0xa0>
 800a1ca:	2d07      	cmp	r5, #7
 800a1cc:	dc04      	bgt.n	800a1d8 <__hexnan+0xa0>
 800a1ce:	462a      	mov	r2, r5
 800a1d0:	4649      	mov	r1, r9
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	f7ff ff8a 	bl	800a0ec <L_shift>
 800a1d8:	4544      	cmp	r4, r8
 800a1da:	d934      	bls.n	800a246 <__hexnan+0x10e>
 800a1dc:	4623      	mov	r3, r4
 800a1de:	f1a8 0204 	sub.w	r2, r8, #4
 800a1e2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a1e6:	429f      	cmp	r7, r3
 800a1e8:	f842 1f04 	str.w	r1, [r2, #4]!
 800a1ec:	d2f9      	bcs.n	800a1e2 <__hexnan+0xaa>
 800a1ee:	1b3b      	subs	r3, r7, r4
 800a1f0:	f023 0303 	bic.w	r3, r3, #3
 800a1f4:	3304      	adds	r3, #4
 800a1f6:	3e03      	subs	r6, #3
 800a1f8:	3401      	adds	r4, #1
 800a1fa:	42a6      	cmp	r6, r4
 800a1fc:	bf38      	it	cc
 800a1fe:	2304      	movcc	r3, #4
 800a200:	2200      	movs	r2, #0
 800a202:	4443      	add	r3, r8
 800a204:	f843 2b04 	str.w	r2, [r3], #4
 800a208:	429f      	cmp	r7, r3
 800a20a:	d2fb      	bcs.n	800a204 <__hexnan+0xcc>
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	b91b      	cbnz	r3, 800a218 <__hexnan+0xe0>
 800a210:	4547      	cmp	r7, r8
 800a212:	d126      	bne.n	800a262 <__hexnan+0x12a>
 800a214:	2301      	movs	r3, #1
 800a216:	603b      	str	r3, [r7, #0]
 800a218:	2005      	movs	r0, #5
 800a21a:	e025      	b.n	800a268 <__hexnan+0x130>
 800a21c:	3501      	adds	r5, #1
 800a21e:	2d08      	cmp	r5, #8
 800a220:	f10b 0b01 	add.w	fp, fp, #1
 800a224:	dd06      	ble.n	800a234 <__hexnan+0xfc>
 800a226:	4544      	cmp	r4, r8
 800a228:	d9c3      	bls.n	800a1b2 <__hexnan+0x7a>
 800a22a:	2300      	movs	r3, #0
 800a22c:	2501      	movs	r5, #1
 800a22e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a232:	3c04      	subs	r4, #4
 800a234:	6822      	ldr	r2, [r4, #0]
 800a236:	f000 000f 	and.w	r0, r0, #15
 800a23a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a23e:	6020      	str	r0, [r4, #0]
 800a240:	e7b7      	b.n	800a1b2 <__hexnan+0x7a>
 800a242:	2508      	movs	r5, #8
 800a244:	e7b5      	b.n	800a1b2 <__hexnan+0x7a>
 800a246:	9b01      	ldr	r3, [sp, #4]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d0df      	beq.n	800a20c <__hexnan+0xd4>
 800a24c:	f04f 32ff 	mov.w	r2, #4294967295
 800a250:	f1c3 0320 	rsb	r3, r3, #32
 800a254:	40da      	lsrs	r2, r3
 800a256:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a25a:	4013      	ands	r3, r2
 800a25c:	f846 3c04 	str.w	r3, [r6, #-4]
 800a260:	e7d4      	b.n	800a20c <__hexnan+0xd4>
 800a262:	3f04      	subs	r7, #4
 800a264:	e7d2      	b.n	800a20c <__hexnan+0xd4>
 800a266:	2004      	movs	r0, #4
 800a268:	b007      	add	sp, #28
 800a26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a26e <__ascii_mbtowc>:
 800a26e:	b082      	sub	sp, #8
 800a270:	b901      	cbnz	r1, 800a274 <__ascii_mbtowc+0x6>
 800a272:	a901      	add	r1, sp, #4
 800a274:	b142      	cbz	r2, 800a288 <__ascii_mbtowc+0x1a>
 800a276:	b14b      	cbz	r3, 800a28c <__ascii_mbtowc+0x1e>
 800a278:	7813      	ldrb	r3, [r2, #0]
 800a27a:	600b      	str	r3, [r1, #0]
 800a27c:	7812      	ldrb	r2, [r2, #0]
 800a27e:	1e10      	subs	r0, r2, #0
 800a280:	bf18      	it	ne
 800a282:	2001      	movne	r0, #1
 800a284:	b002      	add	sp, #8
 800a286:	4770      	bx	lr
 800a288:	4610      	mov	r0, r2
 800a28a:	e7fb      	b.n	800a284 <__ascii_mbtowc+0x16>
 800a28c:	f06f 0001 	mvn.w	r0, #1
 800a290:	e7f8      	b.n	800a284 <__ascii_mbtowc+0x16>

0800a292 <_realloc_r>:
 800a292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a296:	4680      	mov	r8, r0
 800a298:	4614      	mov	r4, r2
 800a29a:	460e      	mov	r6, r1
 800a29c:	b921      	cbnz	r1, 800a2a8 <_realloc_r+0x16>
 800a29e:	4611      	mov	r1, r2
 800a2a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a4:	f7fd be40 	b.w	8007f28 <_malloc_r>
 800a2a8:	b92a      	cbnz	r2, 800a2b6 <_realloc_r+0x24>
 800a2aa:	f7fd fdcd 	bl	8007e48 <_free_r>
 800a2ae:	4625      	mov	r5, r4
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2b6:	f000 f842 	bl	800a33e <_malloc_usable_size_r>
 800a2ba:	4284      	cmp	r4, r0
 800a2bc:	4607      	mov	r7, r0
 800a2be:	d802      	bhi.n	800a2c6 <_realloc_r+0x34>
 800a2c0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2c4:	d812      	bhi.n	800a2ec <_realloc_r+0x5a>
 800a2c6:	4621      	mov	r1, r4
 800a2c8:	4640      	mov	r0, r8
 800a2ca:	f7fd fe2d 	bl	8007f28 <_malloc_r>
 800a2ce:	4605      	mov	r5, r0
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	d0ed      	beq.n	800a2b0 <_realloc_r+0x1e>
 800a2d4:	42bc      	cmp	r4, r7
 800a2d6:	4622      	mov	r2, r4
 800a2d8:	4631      	mov	r1, r6
 800a2da:	bf28      	it	cs
 800a2dc:	463a      	movcs	r2, r7
 800a2de:	f7ff fc27 	bl	8009b30 <memcpy>
 800a2e2:	4631      	mov	r1, r6
 800a2e4:	4640      	mov	r0, r8
 800a2e6:	f7fd fdaf 	bl	8007e48 <_free_r>
 800a2ea:	e7e1      	b.n	800a2b0 <_realloc_r+0x1e>
 800a2ec:	4635      	mov	r5, r6
 800a2ee:	e7df      	b.n	800a2b0 <_realloc_r+0x1e>

0800a2f0 <__ascii_wctomb>:
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	4608      	mov	r0, r1
 800a2f4:	b141      	cbz	r1, 800a308 <__ascii_wctomb+0x18>
 800a2f6:	2aff      	cmp	r2, #255	; 0xff
 800a2f8:	d904      	bls.n	800a304 <__ascii_wctomb+0x14>
 800a2fa:	228a      	movs	r2, #138	; 0x8a
 800a2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a300:	601a      	str	r2, [r3, #0]
 800a302:	4770      	bx	lr
 800a304:	2001      	movs	r0, #1
 800a306:	700a      	strb	r2, [r1, #0]
 800a308:	4770      	bx	lr
	...

0800a30c <fiprintf>:
 800a30c:	b40e      	push	{r1, r2, r3}
 800a30e:	b503      	push	{r0, r1, lr}
 800a310:	4601      	mov	r1, r0
 800a312:	ab03      	add	r3, sp, #12
 800a314:	4805      	ldr	r0, [pc, #20]	; (800a32c <fiprintf+0x20>)
 800a316:	f853 2b04 	ldr.w	r2, [r3], #4
 800a31a:	6800      	ldr	r0, [r0, #0]
 800a31c:	9301      	str	r3, [sp, #4]
 800a31e:	f000 f83d 	bl	800a39c <_vfiprintf_r>
 800a322:	b002      	add	sp, #8
 800a324:	f85d eb04 	ldr.w	lr, [sp], #4
 800a328:	b003      	add	sp, #12
 800a32a:	4770      	bx	lr
 800a32c:	2000006c 	.word	0x2000006c

0800a330 <abort>:
 800a330:	2006      	movs	r0, #6
 800a332:	b508      	push	{r3, lr}
 800a334:	f000 fa0a 	bl	800a74c <raise>
 800a338:	2001      	movs	r0, #1
 800a33a:	f7f8 f89b 	bl	8002474 <_exit>

0800a33e <_malloc_usable_size_r>:
 800a33e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a342:	1f18      	subs	r0, r3, #4
 800a344:	2b00      	cmp	r3, #0
 800a346:	bfbc      	itt	lt
 800a348:	580b      	ldrlt	r3, [r1, r0]
 800a34a:	18c0      	addlt	r0, r0, r3
 800a34c:	4770      	bx	lr

0800a34e <__sfputc_r>:
 800a34e:	6893      	ldr	r3, [r2, #8]
 800a350:	b410      	push	{r4}
 800a352:	3b01      	subs	r3, #1
 800a354:	2b00      	cmp	r3, #0
 800a356:	6093      	str	r3, [r2, #8]
 800a358:	da07      	bge.n	800a36a <__sfputc_r+0x1c>
 800a35a:	6994      	ldr	r4, [r2, #24]
 800a35c:	42a3      	cmp	r3, r4
 800a35e:	db01      	blt.n	800a364 <__sfputc_r+0x16>
 800a360:	290a      	cmp	r1, #10
 800a362:	d102      	bne.n	800a36a <__sfputc_r+0x1c>
 800a364:	bc10      	pop	{r4}
 800a366:	f000 b933 	b.w	800a5d0 <__swbuf_r>
 800a36a:	6813      	ldr	r3, [r2, #0]
 800a36c:	1c58      	adds	r0, r3, #1
 800a36e:	6010      	str	r0, [r2, #0]
 800a370:	7019      	strb	r1, [r3, #0]
 800a372:	4608      	mov	r0, r1
 800a374:	bc10      	pop	{r4}
 800a376:	4770      	bx	lr

0800a378 <__sfputs_r>:
 800a378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a37a:	4606      	mov	r6, r0
 800a37c:	460f      	mov	r7, r1
 800a37e:	4614      	mov	r4, r2
 800a380:	18d5      	adds	r5, r2, r3
 800a382:	42ac      	cmp	r4, r5
 800a384:	d101      	bne.n	800a38a <__sfputs_r+0x12>
 800a386:	2000      	movs	r0, #0
 800a388:	e007      	b.n	800a39a <__sfputs_r+0x22>
 800a38a:	463a      	mov	r2, r7
 800a38c:	4630      	mov	r0, r6
 800a38e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a392:	f7ff ffdc 	bl	800a34e <__sfputc_r>
 800a396:	1c43      	adds	r3, r0, #1
 800a398:	d1f3      	bne.n	800a382 <__sfputs_r+0xa>
 800a39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a39c <_vfiprintf_r>:
 800a39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a0:	460d      	mov	r5, r1
 800a3a2:	4614      	mov	r4, r2
 800a3a4:	4698      	mov	r8, r3
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	b09d      	sub	sp, #116	; 0x74
 800a3aa:	b118      	cbz	r0, 800a3b4 <_vfiprintf_r+0x18>
 800a3ac:	6a03      	ldr	r3, [r0, #32]
 800a3ae:	b90b      	cbnz	r3, 800a3b4 <_vfiprintf_r+0x18>
 800a3b0:	f7fc fdae 	bl	8006f10 <__sinit>
 800a3b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3b6:	07d9      	lsls	r1, r3, #31
 800a3b8:	d405      	bmi.n	800a3c6 <_vfiprintf_r+0x2a>
 800a3ba:	89ab      	ldrh	r3, [r5, #12]
 800a3bc:	059a      	lsls	r2, r3, #22
 800a3be:	d402      	bmi.n	800a3c6 <_vfiprintf_r+0x2a>
 800a3c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3c2:	f7fc febc 	bl	800713e <__retarget_lock_acquire_recursive>
 800a3c6:	89ab      	ldrh	r3, [r5, #12]
 800a3c8:	071b      	lsls	r3, r3, #28
 800a3ca:	d501      	bpl.n	800a3d0 <_vfiprintf_r+0x34>
 800a3cc:	692b      	ldr	r3, [r5, #16]
 800a3ce:	b99b      	cbnz	r3, 800a3f8 <_vfiprintf_r+0x5c>
 800a3d0:	4629      	mov	r1, r5
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	f000 f93a 	bl	800a64c <__swsetup_r>
 800a3d8:	b170      	cbz	r0, 800a3f8 <_vfiprintf_r+0x5c>
 800a3da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3dc:	07dc      	lsls	r4, r3, #31
 800a3de:	d504      	bpl.n	800a3ea <_vfiprintf_r+0x4e>
 800a3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e4:	b01d      	add	sp, #116	; 0x74
 800a3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ea:	89ab      	ldrh	r3, [r5, #12]
 800a3ec:	0598      	lsls	r0, r3, #22
 800a3ee:	d4f7      	bmi.n	800a3e0 <_vfiprintf_r+0x44>
 800a3f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3f2:	f7fc fea5 	bl	8007140 <__retarget_lock_release_recursive>
 800a3f6:	e7f3      	b.n	800a3e0 <_vfiprintf_r+0x44>
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	9309      	str	r3, [sp, #36]	; 0x24
 800a3fc:	2320      	movs	r3, #32
 800a3fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a402:	2330      	movs	r3, #48	; 0x30
 800a404:	f04f 0901 	mov.w	r9, #1
 800a408:	f8cd 800c 	str.w	r8, [sp, #12]
 800a40c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800a5bc <_vfiprintf_r+0x220>
 800a410:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a414:	4623      	mov	r3, r4
 800a416:	469a      	mov	sl, r3
 800a418:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a41c:	b10a      	cbz	r2, 800a422 <_vfiprintf_r+0x86>
 800a41e:	2a25      	cmp	r2, #37	; 0x25
 800a420:	d1f9      	bne.n	800a416 <_vfiprintf_r+0x7a>
 800a422:	ebba 0b04 	subs.w	fp, sl, r4
 800a426:	d00b      	beq.n	800a440 <_vfiprintf_r+0xa4>
 800a428:	465b      	mov	r3, fp
 800a42a:	4622      	mov	r2, r4
 800a42c:	4629      	mov	r1, r5
 800a42e:	4630      	mov	r0, r6
 800a430:	f7ff ffa2 	bl	800a378 <__sfputs_r>
 800a434:	3001      	adds	r0, #1
 800a436:	f000 80a9 	beq.w	800a58c <_vfiprintf_r+0x1f0>
 800a43a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a43c:	445a      	add	r2, fp
 800a43e:	9209      	str	r2, [sp, #36]	; 0x24
 800a440:	f89a 3000 	ldrb.w	r3, [sl]
 800a444:	2b00      	cmp	r3, #0
 800a446:	f000 80a1 	beq.w	800a58c <_vfiprintf_r+0x1f0>
 800a44a:	2300      	movs	r3, #0
 800a44c:	f04f 32ff 	mov.w	r2, #4294967295
 800a450:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a454:	f10a 0a01 	add.w	sl, sl, #1
 800a458:	9304      	str	r3, [sp, #16]
 800a45a:	9307      	str	r3, [sp, #28]
 800a45c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a460:	931a      	str	r3, [sp, #104]	; 0x68
 800a462:	4654      	mov	r4, sl
 800a464:	2205      	movs	r2, #5
 800a466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a46a:	4854      	ldr	r0, [pc, #336]	; (800a5bc <_vfiprintf_r+0x220>)
 800a46c:	f7fc fe69 	bl	8007142 <memchr>
 800a470:	9a04      	ldr	r2, [sp, #16]
 800a472:	b9d8      	cbnz	r0, 800a4ac <_vfiprintf_r+0x110>
 800a474:	06d1      	lsls	r1, r2, #27
 800a476:	bf44      	itt	mi
 800a478:	2320      	movmi	r3, #32
 800a47a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a47e:	0713      	lsls	r3, r2, #28
 800a480:	bf44      	itt	mi
 800a482:	232b      	movmi	r3, #43	; 0x2b
 800a484:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a488:	f89a 3000 	ldrb.w	r3, [sl]
 800a48c:	2b2a      	cmp	r3, #42	; 0x2a
 800a48e:	d015      	beq.n	800a4bc <_vfiprintf_r+0x120>
 800a490:	4654      	mov	r4, sl
 800a492:	2000      	movs	r0, #0
 800a494:	f04f 0c0a 	mov.w	ip, #10
 800a498:	9a07      	ldr	r2, [sp, #28]
 800a49a:	4621      	mov	r1, r4
 800a49c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4a0:	3b30      	subs	r3, #48	; 0x30
 800a4a2:	2b09      	cmp	r3, #9
 800a4a4:	d94d      	bls.n	800a542 <_vfiprintf_r+0x1a6>
 800a4a6:	b1b0      	cbz	r0, 800a4d6 <_vfiprintf_r+0x13a>
 800a4a8:	9207      	str	r2, [sp, #28]
 800a4aa:	e014      	b.n	800a4d6 <_vfiprintf_r+0x13a>
 800a4ac:	eba0 0308 	sub.w	r3, r0, r8
 800a4b0:	fa09 f303 	lsl.w	r3, r9, r3
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	46a2      	mov	sl, r4
 800a4b8:	9304      	str	r3, [sp, #16]
 800a4ba:	e7d2      	b.n	800a462 <_vfiprintf_r+0xc6>
 800a4bc:	9b03      	ldr	r3, [sp, #12]
 800a4be:	1d19      	adds	r1, r3, #4
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	9103      	str	r1, [sp, #12]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	bfbb      	ittet	lt
 800a4c8:	425b      	neglt	r3, r3
 800a4ca:	f042 0202 	orrlt.w	r2, r2, #2
 800a4ce:	9307      	strge	r3, [sp, #28]
 800a4d0:	9307      	strlt	r3, [sp, #28]
 800a4d2:	bfb8      	it	lt
 800a4d4:	9204      	strlt	r2, [sp, #16]
 800a4d6:	7823      	ldrb	r3, [r4, #0]
 800a4d8:	2b2e      	cmp	r3, #46	; 0x2e
 800a4da:	d10c      	bne.n	800a4f6 <_vfiprintf_r+0x15a>
 800a4dc:	7863      	ldrb	r3, [r4, #1]
 800a4de:	2b2a      	cmp	r3, #42	; 0x2a
 800a4e0:	d134      	bne.n	800a54c <_vfiprintf_r+0x1b0>
 800a4e2:	9b03      	ldr	r3, [sp, #12]
 800a4e4:	3402      	adds	r4, #2
 800a4e6:	1d1a      	adds	r2, r3, #4
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	9203      	str	r2, [sp, #12]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	bfb8      	it	lt
 800a4f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4f4:	9305      	str	r3, [sp, #20]
 800a4f6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a5c0 <_vfiprintf_r+0x224>
 800a4fa:	2203      	movs	r2, #3
 800a4fc:	4650      	mov	r0, sl
 800a4fe:	7821      	ldrb	r1, [r4, #0]
 800a500:	f7fc fe1f 	bl	8007142 <memchr>
 800a504:	b138      	cbz	r0, 800a516 <_vfiprintf_r+0x17a>
 800a506:	2240      	movs	r2, #64	; 0x40
 800a508:	9b04      	ldr	r3, [sp, #16]
 800a50a:	eba0 000a 	sub.w	r0, r0, sl
 800a50e:	4082      	lsls	r2, r0
 800a510:	4313      	orrs	r3, r2
 800a512:	3401      	adds	r4, #1
 800a514:	9304      	str	r3, [sp, #16]
 800a516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a51a:	2206      	movs	r2, #6
 800a51c:	4829      	ldr	r0, [pc, #164]	; (800a5c4 <_vfiprintf_r+0x228>)
 800a51e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a522:	f7fc fe0e 	bl	8007142 <memchr>
 800a526:	2800      	cmp	r0, #0
 800a528:	d03f      	beq.n	800a5aa <_vfiprintf_r+0x20e>
 800a52a:	4b27      	ldr	r3, [pc, #156]	; (800a5c8 <_vfiprintf_r+0x22c>)
 800a52c:	bb1b      	cbnz	r3, 800a576 <_vfiprintf_r+0x1da>
 800a52e:	9b03      	ldr	r3, [sp, #12]
 800a530:	3307      	adds	r3, #7
 800a532:	f023 0307 	bic.w	r3, r3, #7
 800a536:	3308      	adds	r3, #8
 800a538:	9303      	str	r3, [sp, #12]
 800a53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a53c:	443b      	add	r3, r7
 800a53e:	9309      	str	r3, [sp, #36]	; 0x24
 800a540:	e768      	b.n	800a414 <_vfiprintf_r+0x78>
 800a542:	460c      	mov	r4, r1
 800a544:	2001      	movs	r0, #1
 800a546:	fb0c 3202 	mla	r2, ip, r2, r3
 800a54a:	e7a6      	b.n	800a49a <_vfiprintf_r+0xfe>
 800a54c:	2300      	movs	r3, #0
 800a54e:	f04f 0c0a 	mov.w	ip, #10
 800a552:	4619      	mov	r1, r3
 800a554:	3401      	adds	r4, #1
 800a556:	9305      	str	r3, [sp, #20]
 800a558:	4620      	mov	r0, r4
 800a55a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a55e:	3a30      	subs	r2, #48	; 0x30
 800a560:	2a09      	cmp	r2, #9
 800a562:	d903      	bls.n	800a56c <_vfiprintf_r+0x1d0>
 800a564:	2b00      	cmp	r3, #0
 800a566:	d0c6      	beq.n	800a4f6 <_vfiprintf_r+0x15a>
 800a568:	9105      	str	r1, [sp, #20]
 800a56a:	e7c4      	b.n	800a4f6 <_vfiprintf_r+0x15a>
 800a56c:	4604      	mov	r4, r0
 800a56e:	2301      	movs	r3, #1
 800a570:	fb0c 2101 	mla	r1, ip, r1, r2
 800a574:	e7f0      	b.n	800a558 <_vfiprintf_r+0x1bc>
 800a576:	ab03      	add	r3, sp, #12
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	462a      	mov	r2, r5
 800a57c:	4630      	mov	r0, r6
 800a57e:	4b13      	ldr	r3, [pc, #76]	; (800a5cc <_vfiprintf_r+0x230>)
 800a580:	a904      	add	r1, sp, #16
 800a582:	f7fb fe69 	bl	8006258 <_printf_float>
 800a586:	4607      	mov	r7, r0
 800a588:	1c78      	adds	r0, r7, #1
 800a58a:	d1d6      	bne.n	800a53a <_vfiprintf_r+0x19e>
 800a58c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a58e:	07d9      	lsls	r1, r3, #31
 800a590:	d405      	bmi.n	800a59e <_vfiprintf_r+0x202>
 800a592:	89ab      	ldrh	r3, [r5, #12]
 800a594:	059a      	lsls	r2, r3, #22
 800a596:	d402      	bmi.n	800a59e <_vfiprintf_r+0x202>
 800a598:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a59a:	f7fc fdd1 	bl	8007140 <__retarget_lock_release_recursive>
 800a59e:	89ab      	ldrh	r3, [r5, #12]
 800a5a0:	065b      	lsls	r3, r3, #25
 800a5a2:	f53f af1d 	bmi.w	800a3e0 <_vfiprintf_r+0x44>
 800a5a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5a8:	e71c      	b.n	800a3e4 <_vfiprintf_r+0x48>
 800a5aa:	ab03      	add	r3, sp, #12
 800a5ac:	9300      	str	r3, [sp, #0]
 800a5ae:	462a      	mov	r2, r5
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	4b06      	ldr	r3, [pc, #24]	; (800a5cc <_vfiprintf_r+0x230>)
 800a5b4:	a904      	add	r1, sp, #16
 800a5b6:	f7fc f8ef 	bl	8006798 <_printf_i>
 800a5ba:	e7e4      	b.n	800a586 <_vfiprintf_r+0x1ea>
 800a5bc:	0800ac89 	.word	0x0800ac89
 800a5c0:	0800ac8f 	.word	0x0800ac8f
 800a5c4:	0800ac93 	.word	0x0800ac93
 800a5c8:	08006259 	.word	0x08006259
 800a5cc:	0800a379 	.word	0x0800a379

0800a5d0 <__swbuf_r>:
 800a5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d2:	460e      	mov	r6, r1
 800a5d4:	4614      	mov	r4, r2
 800a5d6:	4605      	mov	r5, r0
 800a5d8:	b118      	cbz	r0, 800a5e2 <__swbuf_r+0x12>
 800a5da:	6a03      	ldr	r3, [r0, #32]
 800a5dc:	b90b      	cbnz	r3, 800a5e2 <__swbuf_r+0x12>
 800a5de:	f7fc fc97 	bl	8006f10 <__sinit>
 800a5e2:	69a3      	ldr	r3, [r4, #24]
 800a5e4:	60a3      	str	r3, [r4, #8]
 800a5e6:	89a3      	ldrh	r3, [r4, #12]
 800a5e8:	071a      	lsls	r2, r3, #28
 800a5ea:	d525      	bpl.n	800a638 <__swbuf_r+0x68>
 800a5ec:	6923      	ldr	r3, [r4, #16]
 800a5ee:	b31b      	cbz	r3, 800a638 <__swbuf_r+0x68>
 800a5f0:	6823      	ldr	r3, [r4, #0]
 800a5f2:	6922      	ldr	r2, [r4, #16]
 800a5f4:	b2f6      	uxtb	r6, r6
 800a5f6:	1a98      	subs	r0, r3, r2
 800a5f8:	6963      	ldr	r3, [r4, #20]
 800a5fa:	4637      	mov	r7, r6
 800a5fc:	4283      	cmp	r3, r0
 800a5fe:	dc04      	bgt.n	800a60a <__swbuf_r+0x3a>
 800a600:	4621      	mov	r1, r4
 800a602:	4628      	mov	r0, r5
 800a604:	f7ff fa30 	bl	8009a68 <_fflush_r>
 800a608:	b9e0      	cbnz	r0, 800a644 <__swbuf_r+0x74>
 800a60a:	68a3      	ldr	r3, [r4, #8]
 800a60c:	3b01      	subs	r3, #1
 800a60e:	60a3      	str	r3, [r4, #8]
 800a610:	6823      	ldr	r3, [r4, #0]
 800a612:	1c5a      	adds	r2, r3, #1
 800a614:	6022      	str	r2, [r4, #0]
 800a616:	701e      	strb	r6, [r3, #0]
 800a618:	6962      	ldr	r2, [r4, #20]
 800a61a:	1c43      	adds	r3, r0, #1
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d004      	beq.n	800a62a <__swbuf_r+0x5a>
 800a620:	89a3      	ldrh	r3, [r4, #12]
 800a622:	07db      	lsls	r3, r3, #31
 800a624:	d506      	bpl.n	800a634 <__swbuf_r+0x64>
 800a626:	2e0a      	cmp	r6, #10
 800a628:	d104      	bne.n	800a634 <__swbuf_r+0x64>
 800a62a:	4621      	mov	r1, r4
 800a62c:	4628      	mov	r0, r5
 800a62e:	f7ff fa1b 	bl	8009a68 <_fflush_r>
 800a632:	b938      	cbnz	r0, 800a644 <__swbuf_r+0x74>
 800a634:	4638      	mov	r0, r7
 800a636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a638:	4621      	mov	r1, r4
 800a63a:	4628      	mov	r0, r5
 800a63c:	f000 f806 	bl	800a64c <__swsetup_r>
 800a640:	2800      	cmp	r0, #0
 800a642:	d0d5      	beq.n	800a5f0 <__swbuf_r+0x20>
 800a644:	f04f 37ff 	mov.w	r7, #4294967295
 800a648:	e7f4      	b.n	800a634 <__swbuf_r+0x64>
	...

0800a64c <__swsetup_r>:
 800a64c:	b538      	push	{r3, r4, r5, lr}
 800a64e:	4b2a      	ldr	r3, [pc, #168]	; (800a6f8 <__swsetup_r+0xac>)
 800a650:	4605      	mov	r5, r0
 800a652:	6818      	ldr	r0, [r3, #0]
 800a654:	460c      	mov	r4, r1
 800a656:	b118      	cbz	r0, 800a660 <__swsetup_r+0x14>
 800a658:	6a03      	ldr	r3, [r0, #32]
 800a65a:	b90b      	cbnz	r3, 800a660 <__swsetup_r+0x14>
 800a65c:	f7fc fc58 	bl	8006f10 <__sinit>
 800a660:	89a3      	ldrh	r3, [r4, #12]
 800a662:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a666:	0718      	lsls	r0, r3, #28
 800a668:	d422      	bmi.n	800a6b0 <__swsetup_r+0x64>
 800a66a:	06d9      	lsls	r1, r3, #27
 800a66c:	d407      	bmi.n	800a67e <__swsetup_r+0x32>
 800a66e:	2309      	movs	r3, #9
 800a670:	602b      	str	r3, [r5, #0]
 800a672:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a676:	f04f 30ff 	mov.w	r0, #4294967295
 800a67a:	81a3      	strh	r3, [r4, #12]
 800a67c:	e034      	b.n	800a6e8 <__swsetup_r+0x9c>
 800a67e:	0758      	lsls	r0, r3, #29
 800a680:	d512      	bpl.n	800a6a8 <__swsetup_r+0x5c>
 800a682:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a684:	b141      	cbz	r1, 800a698 <__swsetup_r+0x4c>
 800a686:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a68a:	4299      	cmp	r1, r3
 800a68c:	d002      	beq.n	800a694 <__swsetup_r+0x48>
 800a68e:	4628      	mov	r0, r5
 800a690:	f7fd fbda 	bl	8007e48 <_free_r>
 800a694:	2300      	movs	r3, #0
 800a696:	6363      	str	r3, [r4, #52]	; 0x34
 800a698:	89a3      	ldrh	r3, [r4, #12]
 800a69a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a69e:	81a3      	strh	r3, [r4, #12]
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	6063      	str	r3, [r4, #4]
 800a6a4:	6923      	ldr	r3, [r4, #16]
 800a6a6:	6023      	str	r3, [r4, #0]
 800a6a8:	89a3      	ldrh	r3, [r4, #12]
 800a6aa:	f043 0308 	orr.w	r3, r3, #8
 800a6ae:	81a3      	strh	r3, [r4, #12]
 800a6b0:	6923      	ldr	r3, [r4, #16]
 800a6b2:	b94b      	cbnz	r3, 800a6c8 <__swsetup_r+0x7c>
 800a6b4:	89a3      	ldrh	r3, [r4, #12]
 800a6b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6be:	d003      	beq.n	800a6c8 <__swsetup_r+0x7c>
 800a6c0:	4621      	mov	r1, r4
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	f000 f883 	bl	800a7ce <__smakebuf_r>
 800a6c8:	89a0      	ldrh	r0, [r4, #12]
 800a6ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6ce:	f010 0301 	ands.w	r3, r0, #1
 800a6d2:	d00a      	beq.n	800a6ea <__swsetup_r+0x9e>
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	60a3      	str	r3, [r4, #8]
 800a6d8:	6963      	ldr	r3, [r4, #20]
 800a6da:	425b      	negs	r3, r3
 800a6dc:	61a3      	str	r3, [r4, #24]
 800a6de:	6923      	ldr	r3, [r4, #16]
 800a6e0:	b943      	cbnz	r3, 800a6f4 <__swsetup_r+0xa8>
 800a6e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a6e6:	d1c4      	bne.n	800a672 <__swsetup_r+0x26>
 800a6e8:	bd38      	pop	{r3, r4, r5, pc}
 800a6ea:	0781      	lsls	r1, r0, #30
 800a6ec:	bf58      	it	pl
 800a6ee:	6963      	ldrpl	r3, [r4, #20]
 800a6f0:	60a3      	str	r3, [r4, #8]
 800a6f2:	e7f4      	b.n	800a6de <__swsetup_r+0x92>
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	e7f7      	b.n	800a6e8 <__swsetup_r+0x9c>
 800a6f8:	2000006c 	.word	0x2000006c

0800a6fc <_raise_r>:
 800a6fc:	291f      	cmp	r1, #31
 800a6fe:	b538      	push	{r3, r4, r5, lr}
 800a700:	4604      	mov	r4, r0
 800a702:	460d      	mov	r5, r1
 800a704:	d904      	bls.n	800a710 <_raise_r+0x14>
 800a706:	2316      	movs	r3, #22
 800a708:	6003      	str	r3, [r0, #0]
 800a70a:	f04f 30ff 	mov.w	r0, #4294967295
 800a70e:	bd38      	pop	{r3, r4, r5, pc}
 800a710:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a712:	b112      	cbz	r2, 800a71a <_raise_r+0x1e>
 800a714:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a718:	b94b      	cbnz	r3, 800a72e <_raise_r+0x32>
 800a71a:	4620      	mov	r0, r4
 800a71c:	f000 f830 	bl	800a780 <_getpid_r>
 800a720:	462a      	mov	r2, r5
 800a722:	4601      	mov	r1, r0
 800a724:	4620      	mov	r0, r4
 800a726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a72a:	f000 b817 	b.w	800a75c <_kill_r>
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d00a      	beq.n	800a748 <_raise_r+0x4c>
 800a732:	1c59      	adds	r1, r3, #1
 800a734:	d103      	bne.n	800a73e <_raise_r+0x42>
 800a736:	2316      	movs	r3, #22
 800a738:	6003      	str	r3, [r0, #0]
 800a73a:	2001      	movs	r0, #1
 800a73c:	e7e7      	b.n	800a70e <_raise_r+0x12>
 800a73e:	2400      	movs	r4, #0
 800a740:	4628      	mov	r0, r5
 800a742:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a746:	4798      	blx	r3
 800a748:	2000      	movs	r0, #0
 800a74a:	e7e0      	b.n	800a70e <_raise_r+0x12>

0800a74c <raise>:
 800a74c:	4b02      	ldr	r3, [pc, #8]	; (800a758 <raise+0xc>)
 800a74e:	4601      	mov	r1, r0
 800a750:	6818      	ldr	r0, [r3, #0]
 800a752:	f7ff bfd3 	b.w	800a6fc <_raise_r>
 800a756:	bf00      	nop
 800a758:	2000006c 	.word	0x2000006c

0800a75c <_kill_r>:
 800a75c:	b538      	push	{r3, r4, r5, lr}
 800a75e:	2300      	movs	r3, #0
 800a760:	4d06      	ldr	r5, [pc, #24]	; (800a77c <_kill_r+0x20>)
 800a762:	4604      	mov	r4, r0
 800a764:	4608      	mov	r0, r1
 800a766:	4611      	mov	r1, r2
 800a768:	602b      	str	r3, [r5, #0]
 800a76a:	f7f7 fe73 	bl	8002454 <_kill>
 800a76e:	1c43      	adds	r3, r0, #1
 800a770:	d102      	bne.n	800a778 <_kill_r+0x1c>
 800a772:	682b      	ldr	r3, [r5, #0]
 800a774:	b103      	cbz	r3, 800a778 <_kill_r+0x1c>
 800a776:	6023      	str	r3, [r4, #0]
 800a778:	bd38      	pop	{r3, r4, r5, pc}
 800a77a:	bf00      	nop
 800a77c:	200004b8 	.word	0x200004b8

0800a780 <_getpid_r>:
 800a780:	f7f7 be61 	b.w	8002446 <_getpid>

0800a784 <__swhatbuf_r>:
 800a784:	b570      	push	{r4, r5, r6, lr}
 800a786:	460c      	mov	r4, r1
 800a788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a78c:	4615      	mov	r5, r2
 800a78e:	2900      	cmp	r1, #0
 800a790:	461e      	mov	r6, r3
 800a792:	b096      	sub	sp, #88	; 0x58
 800a794:	da0c      	bge.n	800a7b0 <__swhatbuf_r+0x2c>
 800a796:	89a3      	ldrh	r3, [r4, #12]
 800a798:	2100      	movs	r1, #0
 800a79a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a79e:	bf0c      	ite	eq
 800a7a0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a7a4:	2340      	movne	r3, #64	; 0x40
 800a7a6:	2000      	movs	r0, #0
 800a7a8:	6031      	str	r1, [r6, #0]
 800a7aa:	602b      	str	r3, [r5, #0]
 800a7ac:	b016      	add	sp, #88	; 0x58
 800a7ae:	bd70      	pop	{r4, r5, r6, pc}
 800a7b0:	466a      	mov	r2, sp
 800a7b2:	f000 f849 	bl	800a848 <_fstat_r>
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	dbed      	blt.n	800a796 <__swhatbuf_r+0x12>
 800a7ba:	9901      	ldr	r1, [sp, #4]
 800a7bc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a7c0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a7c4:	4259      	negs	r1, r3
 800a7c6:	4159      	adcs	r1, r3
 800a7c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7cc:	e7eb      	b.n	800a7a6 <__swhatbuf_r+0x22>

0800a7ce <__smakebuf_r>:
 800a7ce:	898b      	ldrh	r3, [r1, #12]
 800a7d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7d2:	079d      	lsls	r5, r3, #30
 800a7d4:	4606      	mov	r6, r0
 800a7d6:	460c      	mov	r4, r1
 800a7d8:	d507      	bpl.n	800a7ea <__smakebuf_r+0x1c>
 800a7da:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7de:	6023      	str	r3, [r4, #0]
 800a7e0:	6123      	str	r3, [r4, #16]
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	6163      	str	r3, [r4, #20]
 800a7e6:	b002      	add	sp, #8
 800a7e8:	bd70      	pop	{r4, r5, r6, pc}
 800a7ea:	466a      	mov	r2, sp
 800a7ec:	ab01      	add	r3, sp, #4
 800a7ee:	f7ff ffc9 	bl	800a784 <__swhatbuf_r>
 800a7f2:	9900      	ldr	r1, [sp, #0]
 800a7f4:	4605      	mov	r5, r0
 800a7f6:	4630      	mov	r0, r6
 800a7f8:	f7fd fb96 	bl	8007f28 <_malloc_r>
 800a7fc:	b948      	cbnz	r0, 800a812 <__smakebuf_r+0x44>
 800a7fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a802:	059a      	lsls	r2, r3, #22
 800a804:	d4ef      	bmi.n	800a7e6 <__smakebuf_r+0x18>
 800a806:	f023 0303 	bic.w	r3, r3, #3
 800a80a:	f043 0302 	orr.w	r3, r3, #2
 800a80e:	81a3      	strh	r3, [r4, #12]
 800a810:	e7e3      	b.n	800a7da <__smakebuf_r+0xc>
 800a812:	89a3      	ldrh	r3, [r4, #12]
 800a814:	6020      	str	r0, [r4, #0]
 800a816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a81a:	81a3      	strh	r3, [r4, #12]
 800a81c:	9b00      	ldr	r3, [sp, #0]
 800a81e:	6120      	str	r0, [r4, #16]
 800a820:	6163      	str	r3, [r4, #20]
 800a822:	9b01      	ldr	r3, [sp, #4]
 800a824:	b15b      	cbz	r3, 800a83e <__smakebuf_r+0x70>
 800a826:	4630      	mov	r0, r6
 800a828:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a82c:	f000 f81e 	bl	800a86c <_isatty_r>
 800a830:	b128      	cbz	r0, 800a83e <__smakebuf_r+0x70>
 800a832:	89a3      	ldrh	r3, [r4, #12]
 800a834:	f023 0303 	bic.w	r3, r3, #3
 800a838:	f043 0301 	orr.w	r3, r3, #1
 800a83c:	81a3      	strh	r3, [r4, #12]
 800a83e:	89a3      	ldrh	r3, [r4, #12]
 800a840:	431d      	orrs	r5, r3
 800a842:	81a5      	strh	r5, [r4, #12]
 800a844:	e7cf      	b.n	800a7e6 <__smakebuf_r+0x18>
	...

0800a848 <_fstat_r>:
 800a848:	b538      	push	{r3, r4, r5, lr}
 800a84a:	2300      	movs	r3, #0
 800a84c:	4d06      	ldr	r5, [pc, #24]	; (800a868 <_fstat_r+0x20>)
 800a84e:	4604      	mov	r4, r0
 800a850:	4608      	mov	r0, r1
 800a852:	4611      	mov	r1, r2
 800a854:	602b      	str	r3, [r5, #0]
 800a856:	f7f7 fe5b 	bl	8002510 <_fstat>
 800a85a:	1c43      	adds	r3, r0, #1
 800a85c:	d102      	bne.n	800a864 <_fstat_r+0x1c>
 800a85e:	682b      	ldr	r3, [r5, #0]
 800a860:	b103      	cbz	r3, 800a864 <_fstat_r+0x1c>
 800a862:	6023      	str	r3, [r4, #0]
 800a864:	bd38      	pop	{r3, r4, r5, pc}
 800a866:	bf00      	nop
 800a868:	200004b8 	.word	0x200004b8

0800a86c <_isatty_r>:
 800a86c:	b538      	push	{r3, r4, r5, lr}
 800a86e:	2300      	movs	r3, #0
 800a870:	4d05      	ldr	r5, [pc, #20]	; (800a888 <_isatty_r+0x1c>)
 800a872:	4604      	mov	r4, r0
 800a874:	4608      	mov	r0, r1
 800a876:	602b      	str	r3, [r5, #0]
 800a878:	f7f7 fe59 	bl	800252e <_isatty>
 800a87c:	1c43      	adds	r3, r0, #1
 800a87e:	d102      	bne.n	800a886 <_isatty_r+0x1a>
 800a880:	682b      	ldr	r3, [r5, #0]
 800a882:	b103      	cbz	r3, 800a886 <_isatty_r+0x1a>
 800a884:	6023      	str	r3, [r4, #0]
 800a886:	bd38      	pop	{r3, r4, r5, pc}
 800a888:	200004b8 	.word	0x200004b8

0800a88c <_init>:
 800a88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a88e:	bf00      	nop
 800a890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a892:	bc08      	pop	{r3}
 800a894:	469e      	mov	lr, r3
 800a896:	4770      	bx	lr

0800a898 <_fini>:
 800a898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89a:	bf00      	nop
 800a89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a89e:	bc08      	pop	{r3}
 800a8a0:	469e      	mov	lr, r3
 800a8a2:	4770      	bx	lr
